{"code":"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Crumb from './crumb';\r\nimport { ButtonIcon } from '../button';\r\nimport { IconChevronLeft, IconChevronRight } from '../icons';\r\n/** Component displaying given list as breadcrumbs. */\r\nexport const Breadcrumb = ({ crumbs, icon, tag, onClick, }) => {\r\n    if (Array.isArray(crumbs)) {\r\n        let isLast;\r\n        return (React.createElement(Container, { \"data-testid\": \"breadcrumbs\" }, crumbs.map(({ label, path }, index) => {\r\n            isLast = index === crumbs.length - 1;\r\n            return (React.createElement(\"div\", { key: index, className: \"flex items-center space-x-1 desktop:space-x-1.5\" },\r\n                React.createElement(Crumb, Object.assign({ first: index === 0, icon: icon, label: label, last: isLast, tag: tag }, (isLast ? {} : { onClick: () => onClick?.(path) }))),\r\n                !isLast && React.createElement(IconChevronRight, { className: \"text-ui-300\" })));\r\n        })));\r\n    }\r\n    else {\r\n        return (React.createElement(ProcessContainer, { \"data-testid\": \"breadcrumbs\" },\r\n            React.createElement(ProcessCrumbContainer, null,\r\n                React.createElement(ButtonIcon, { mode: \"secondary\", icon: React.createElement(IconChevronLeft, null), onClick: () => onClick?.(crumbs.path), bgWhite: true }),\r\n                React.createElement(\"p\", { className: \"font-bold\" }, crumbs?.label),\r\n                tag)));\r\n    }\r\n};\r\nconst Container = styled.div.attrs({\r\n    className: 'inline-flex items-center py-0.5 desktop:px-2 space-x-1 ' +\r\n        'desktop:space-x-1.5 h-5 desktop:h-6 desktop:bg-ui-0 desktop:rounded-xl',\r\n}) ``;\r\nconst ProcessContainer = styled.div.attrs({\r\n    className: 'inline-flex py-0.5 desktop:pr-2 desktop:pl-0.5 desktop:rounded-xl desktop:bg-ui-0 h-6',\r\n}) ``;\r\nconst ProcessCrumbContainer = styled.div.attrs({\r\n    className: 'flex items-center space-x-1.5 font-bold text-ui-600',\r\n}) ``;\r\n//# sourceMappingURL=breadcrumb.js.map","references":["/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/react/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/styled-components/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/breadcrumb/crumb.tsx","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/tag/index.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/button/index.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/icons/index.tsx"],"map":"{\"version\":3,\"file\":\"breadcrumb.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/breadcrumb/breadcrumb.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAA8B,MAAM,OAAO,CAAC;AACnD,OAAO,MAAM,MAAM,mBAAmB,CAAC;AAEvC,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,eAAe,EAAE,gBAAgB,EAAW,MAAM,UAAU,CAAC;AA+BrE,sDAAsD;AACtD,MAAM,CAAC,MAAM,UAAU,GAA8B,CAAC,EACpD,MAAM,EACN,IAAI,EACJ,GAAG,EACH,OAAO,GACR,EAAE,EAAE;IACH,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACzB,IAAI,MAAe,CAAC;QAEpB,OAAO,CACL,oBAAC,SAAS,mBAAa,aAAa,IACjC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,EAAE,KAAK,EAAE,EAAE;YACnC,MAAM,GAAG,KAAK,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACrC,OAAO,CACL,6BACE,GAAG,EAAE,KAAK,EACV,SAAS,EAAC,iDAAiD;gBAE3D,oBAAC,KAAK,kBACJ,KAAK,EAAE,KAAK,KAAK,CAAC,EAClB,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,MAAM,EACZ,GAAG,EAAE,GAAG,IACJ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,EACpD;gBACD,CAAC,MAAM,IAAI,oBAAC,gBAAgB,IAAC,SAAS,EAAC,aAAa,GAAG,CACpD,CACP,CAAC;QACJ,CAAC,CAAC,CACQ,CACb,CAAC;KACH;SAAM;QACL,OAAO,CACL,oBAAC,gBAAgB,mBAAa,aAAa;YACzC,oBAAC,qBAAqB;gBACpB,oBAAC,UAAU,IACT,IAAI,EAAC,WAAW,EAChB,IAAI,EAAE,oBAAC,eAAe,OAAG,EACzB,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EACrC,OAAO,SACP;gBACF,2BAAG,SAAS,EAAC,WAAW,IAAE,MAAM,EAAE,KAAK,CAAK;gBAC3C,GAAG,CACkB,CACP,CACpB,CAAC;KACH;AACH,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;IACjC,SAAS,EACP,yDAAyD;QACzD,wEAAwE;CAC3E,CAAC,CAAA,EAAE,CAAC;AAEL,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;IACxC,SAAS,EACP,uFAAuF;CAC1F,CAAC,CAAA,EAAE,CAAC;AAEL,MAAM,qBAAqB,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;IAC7C,SAAS,EAAE,qDAAqD;CACjE,CAAC,CAAA,EAAE,CAAC\"}","dts":{"name":"/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/components/breadcrumb/breadcrumb.d.ts","writeByteOrderMark":false,"text":"import React, { ReactComponentElement } from 'react';\r\nimport { TagProps } from '../tag';\r\nimport { IconType } from '../icons';\r\nexport declare type CrumbType = {\r\n    label: string;\r\n    path: string;\r\n};\r\nexport declare type DefaultCrumbProps = {\r\n    /**\r\n     * Array of breadcrumbs to be displayed; each breadcrumb should\r\n     * include a label and its corresponding path\r\n     */\r\n    crumbs: CrumbType[];\r\n    /** Base path icon to be displayed */\r\n    icon: ReactComponentElement<IconType>;\r\n};\r\nexport declare type ProcessCrumbProps = {\r\n    crumbs: CrumbType;\r\n    icon?: ReactComponentElement<IconType>;\r\n};\r\nexport declare type BreadcrumbProps = {\r\n    /** Tag shown at the end of the list of breadcrumbs */\r\n    tag?: React.FunctionComponentElement<TagProps>;\r\n    /** Callback returning the path value of the breadcrumb clicked */\r\n    onClick?: (path: string) => void;\r\n} & (ProcessCrumbProps | DefaultCrumbProps);\r\n/** Component displaying given list as breadcrumbs. */\r\nexport declare const Breadcrumb: React.FC<BreadcrumbProps>;\r\n"}}
