{"code":"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonText } from '../button';\r\nimport { StyledInput } from './textInput';\r\nexport const WalletInput = React.forwardRef(({ mode = 'default', disabled = false, disabledFilled = false, adornmentText = '', ...props }, ref) => (React.createElement(Container, Object.assign({ \"data-testid\": \"input-wallet\", disabled: disabled || disabledFilled }, { mode, disabledFilled }),\r\n    React.createElement(StyledInput, Object.assign({ disabled: disabled || disabledFilled }, props, { ref: ref, onWheel: e => {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n        } })),\r\n    adornmentText && (React.createElement(ButtonText, { label: adornmentText, size: \"small\", mode: \"secondary\", bgWhite: true, disabled: disabled, onClick: props.onAdornmentClick })))));\r\nWalletInput.displayName = 'WalletInput';\r\nexport const Container = styled.div.attrs(({ mode, disabled }) => {\r\n    let className = `${disabled ? 'bg-ui-100 border-ui-200' : 'bg-ui-0'} flex items-center space-x-1.5 p-0.75 pl-2 text-ui-600 rounded-xl \n    border-2 focus-within:ring-2 focus-within:ring-primary-500 \n    hover:border-ui-300 active:border-primary-500 active:ring-0 `;\r\n    if (mode === 'default') {\r\n        className += 'border-ui-100';\r\n    }\r\n    else if (mode === 'success') {\r\n        className += 'border-success-600';\r\n    }\r\n    else if (mode === 'warning') {\r\n        className += 'border-warning-600';\r\n    }\r\n    else if (mode === 'critical') {\r\n        className += 'border-critical-600';\r\n    }\r\n    return { className };\r\n}) ``;\r\n//# sourceMappingURL=walletInput.js.map","references":["/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/react/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/styled-components/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/button/index.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/input/textInput.tsx"],"map":"{\"version\":3,\"file\":\"walletInput.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/input/walletInput.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,MAAM,MAAM,mBAAmB,CAAC;AACvC,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,WAAW,EAAC,MAAM,aAAa,CAAC;AAexC,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CACzC,CACE,EACE,IAAI,GAAG,SAAS,EAChB,QAAQ,GAAG,KAAK,EAChB,cAAc,GAAG,KAAK,EACtB,aAAa,GAAG,EAAE,EAClB,GAAG,KAAK,EACT,EACD,GAAG,EACH,EAAE,CAAC,CACH,oBAAC,SAAS,iCACI,cAAc,EAC1B,QAAQ,EAAE,QAAQ,IAAI,cAAc,IAChC,EAAC,IAAI,EAAE,cAAc,EAAC;IAE1B,oBAAC,WAAW,kBACV,QAAQ,EAAE,QAAQ,IAAI,cAAc,IAChC,KAAK,IACT,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,CAAC,CAAC,EAAE;YACX,CAAC,CAAC,cAAc,EAAE,CAAC;YAClB,CAAC,CAAC,MAA2B,CAAC,IAAI,EAAE,CAAC;QACxC,CAAC,IACD;IACD,aAAa,IAAI,CAChB,oBAAC,UAAU,IACT,KAAK,EAAE,aAAa,EACpB,IAAI,EAAC,OAAO,EACZ,IAAI,EAAC,WAAW,EAChB,OAAO,EAAE,IAAI,EACb,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,KAAK,CAAC,gBAAgB,GAC/B,CACH,CACS,CACb,CACF,CAAC;AAEF,WAAW,CAAC,WAAW,GAAG,aAAa,CAAC;AAIxC,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CACvC,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAuB,EAAE,EAAE;IACzC,IAAI,SAAS,GAAG,GACd,QAAQ,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,SACzC;;iEAE6D,CAAC;IAE9D,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,SAAS,IAAI,eAAe,CAAC;KAC9B;SAAM,IAAI,IAAI,KAAK,SAAS,EAAE;QAC7B,SAAS,IAAI,oBAAoB,CAAC;KACnC;SAAM,IAAI,IAAI,KAAK,SAAS,EAAE;QAC7B,SAAS,IAAI,oBAAoB,CAAC;KACnC;SAAM,IAAI,IAAI,KAAK,UAAU,EAAE;QAC9B,SAAS,IAAI,qBAAqB,CAAC;KACpC;IAED,OAAO,EAAC,SAAS,EAAC,CAAC;AACrB,CAAC,CACF,CAAsB,EAAE,CAAC\"}","dts":{"name":"/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/components/input/walletInput.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport declare type WalletInputProps = React.InputHTMLAttributes<HTMLInputElement> & {\r\n    /** Text that appears on the button present on the right side of the input; if no text\r\n     * is provided, the button will not be rendered */\r\n    adornmentText?: string;\r\n    /** Handler for when the button present on the right side of the input  is\r\n     * clicked */\r\n    onAdornmentClick?: () => void;\r\n    /** Changes a input's color schema */\r\n    mode?: 'default' | 'success' | 'warning' | 'critical';\r\n    /** Disable the input but keep the adornment button active */\r\n    disabledFilled?: boolean;\r\n};\r\nexport declare const WalletInput: React.ForwardRefExoticComponent<React.InputHTMLAttributes<HTMLInputElement> & {\r\n    /** Text that appears on the button present on the right side of the input; if no text\r\n     * is provided, the button will not be rendered */\r\n    adornmentText?: string | undefined;\r\n    /** Handler for when the button present on the right side of the input  is\r\n     * clicked */\r\n    onAdornmentClick?: (() => void) | undefined;\r\n    /** Changes a input's color schema */\r\n    mode?: \"default\" | \"success\" | \"warning\" | \"critical\" | undefined;\r\n    /** Disable the input but keep the adornment button active */\r\n    disabledFilled?: boolean | undefined;\r\n} & React.RefAttributes<HTMLInputElement>>;\r\nexport declare const Container: import(\"styled-components\").StyledComponent<\"div\", any, {\r\n    className: string;\r\n} & Pick<WalletInputProps, \"mode\" | \"disabled\">, \"className\">;\r\n"}}
