{"code":"import React, { createContext, useCallback, useContext, useMemo, useState, } from 'react';\r\nimport styled from 'styled-components';\r\nexport const ButtonGroupContext = createContext(undefined);\r\nexport const useButtonGroupContext = () => useContext(ButtonGroupContext);\r\nconst ButtonProvider = ({ value, bgWhite, defaultValue, onChange: onChangeCallback, children, }) => {\r\n    const isControlled = typeof value !== 'undefined';\r\n    const [internalValue, setInternalValue] = useState(defaultValue || '');\r\n    const onChange = useCallback((nextValue) => {\r\n        onChangeCallback?.(nextValue);\r\n        if (!isControlled)\r\n            setInternalValue(nextValue);\r\n    }, [isControlled, onChangeCallback]);\r\n    const contextValues = useMemo(() => ({\r\n        bgWhite,\r\n        selectedValue: isControlled ? value : internalValue,\r\n        onChange,\r\n    }), [bgWhite, internalValue, isControlled, onChange, value]);\r\n    return (React.createElement(ButtonGroupContext.Provider, { value: contextValues }, children));\r\n};\r\nexport const ButtonGroup = ({ value, bgWhite, defaultValue, onChange, children, }) => {\r\n    return (React.createElement(ButtonProvider, { bgWhite: bgWhite, defaultValue: defaultValue, value: value, onChange: onChange },\r\n        React.createElement(HStack, { \"data-testid\": \"buttonGroup\", bgWhite: bgWhite }, children)));\r\n};\r\nconst HStack = styled.div.attrs(({ bgWhite }) => ({\r\n    className: `flex rounded-xl p-0.5 space-x-1.5 \n    ${bgWhite ? 'bg-ui-50' : 'bg-ui-0'}\n  `,\r\n})) ``;\r\n//# sourceMappingURL=buttonGroup.js.map","references":["/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/react/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/node_modules/@types/styled-components/index.d.ts","/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/src/components/button/buttonGroup/button.tsx"],"map":"{\"version\":3,\"file\":\"buttonGroup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/button/buttonGroup/buttonGroup.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,EAAE,EACZ,aAAa,EACb,WAAW,EACX,UAAU,EACV,OAAO,EACP,QAAQ,GACT,MAAM,OAAO,CAAC;AACf,OAAO,MAAM,MAAM,mBAAmB,CAAC;AAUvC,MAAM,CAAC,MAAM,kBAAkB,GAAG,aAAa,CAC7C,SAAS,CACV,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE,CACxC,UAAU,CAAC,kBAAkB,CAAsB,CAAC;AAStD,MAAM,cAAc,GAAkC,CAAC,EACrD,KAAK,EACL,OAAO,EACP,YAAY,EACZ,QAAQ,EAAE,gBAAgB,EAC1B,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,OAAO,KAAK,KAAK,WAAW,CAAC;IAClD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;IAEvE,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,SAAiB,EAAE,EAAE;QACpB,gBAAgB,EAAE,CAAC,SAAS,CAAC,CAAC;QAE9B,IAAI,CAAC,YAAY;YAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC,EACD,CAAC,YAAY,EAAE,gBAAgB,CAAC,CACjC,CAAC;IAEF,MAAM,aAAa,GAAG,OAAO,CAC3B,GAAG,EAAE,CAAC,CAAC;QACL,OAAO;QACP,aAAa,EAAE,YAAY,CAAC,CAAC,CAAE,KAAgB,CAAC,CAAC,CAAC,aAAa;QAC/D,QAAQ;KACT,CAAC,EACF,CAAC,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,CAAC,CACxD,CAAC;IAEF,OAAO,CACL,oBAAC,kBAAkB,CAAC,QAAQ,IAAC,KAAK,EAAE,aAAa,IAC9C,QAAQ,CACmB,CAC/B,CAAC;AACJ,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,WAAW,GAA+B,CAAC,EACtD,KAAK,EACL,OAAO,EACP,YAAY,EACZ,QAAQ,EACR,QAAQ,GACT,EAAE,EAAE;IACH,OAAO,CACL,oBAAC,cAAc,IACb,OAAO,EAAE,OAAO,EAChB,YAAY,EAAE,YAAY,EAC1B,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ;QAElB,oBAAC,MAAM,mBAAa,aAAa,EAAC,OAAO,EAAE,OAAO,IAC/C,QAAQ,CACF,CACM,CAClB,CAAC;AACJ,CAAC,CAAC;AAMF,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAC,OAAO,EAAc,EAAE,EAAE,CAAC,CAAC;IAC3D,SAAS,EAAE;MACP,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;GACnC;CACF,CAAC,CAAC,CAAa,EAAE,CAAC\"}","dts":{"name":"/root/repo/chainlink-spring-hackathon/frontend/packages/ui-components/components/button/buttonGroup/buttonGroup.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { OptionProps } from './button';\r\ndeclare type ButtonContextType = {\r\n    bgWhite: boolean;\r\n    selectedValue: string;\r\n    onChange: (value: string) => void;\r\n};\r\nexport declare const ButtonGroupContext: React.Context<ButtonContextType | undefined>;\r\nexport declare const useButtonGroupContext: () => ButtonContextType;\r\nexport declare type ButtonGroupProps = {\r\n    value?: string;\r\n    bgWhite: boolean;\r\n    defaultValue: string;\r\n    onChange?: (value: string) => void;\r\n    children: React.FunctionComponentElement<OptionProps>[];\r\n};\r\nexport declare const ButtonGroup: React.FC<ButtonGroupProps>;\r\nexport {};\r\n"}}
