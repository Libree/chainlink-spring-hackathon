import {
  BaseContract,
  Contract,
  ContractFactory,
  init_lib as init_lib16
} from "./chunk-URMAAOTI.js";
import {
  AbiCoder,
  ConstructorFragment,
  ErrorFragment,
  EventFragment,
  FormatTypes,
  Fragment,
  FunctionFragment,
  HDNode,
  Indexed,
  Interface,
  LogDescription,
  ParamType,
  TransactionDescription,
  Wallet,
  Wordlist,
  checkResultErrors,
  commify,
  defaultAbiCoder,
  defaultPath,
  entropyToMnemonic,
  formatEther,
  formatUnits,
  getAccountPath,
  getJsonWalletAddress,
  init_lib as init_lib12,
  init_lib2 as init_lib19,
  init_lib3 as init_lib20,
  init_lib4 as init_lib22,
  init_lib5 as init_lib23,
  init_lib6 as init_lib26,
  init_lib7 as init_lib27,
  isValidMnemonic,
  keccak256 as keccak2562,
  mnemonicToEntropy,
  mnemonicToSeed,
  pack,
  parseEther,
  parseUnits,
  sha256 as sha2562,
  verifyMessage,
  verifyTypedData,
  wordlists
} from "./chunk-AXRETARS.js";
import {
  require_bn
} from "./chunk-4MIBFEWO.js";
import {
  AmountMismatchError,
  ClientNotInitializedError,
  FailedDepositError,
  GraphQLError,
  InvalidAddressError,
  InvalidAddressOrEnsError,
  InvalidCidError,
  InvalidProposalIdError,
  InvalidVotingModeError,
  IpfsPinError,
  MissingExecPermissionError,
  NoDaoFactory,
  NoDaoRegistry,
  NoNodesAvailableError,
  NoPluginRepoRegistry,
  NoProviderError,
  NoSignerError,
  NoTokenAddress,
  PluginInstallationPreparationError,
  ProposalCreationError,
  UnsupportedNetworkError,
  UnsupportedProtocolError,
  UpdateAllowanceError,
  boolArrayToBitmap,
  bytesToHex,
  decodeProposalId,
  decodeRatio,
  encodeProposalId,
  encodeRatio,
  getCompactProposalId,
  getExtendedProposalId,
  hexToBytes,
  isProposalId,
  resolveIpfsCid,
  runAndRetry
} from "./chunk-SX4H6B2V.js";
import {
  JsonRpcProvider,
  getDefaultProvider,
  init_lib as init_lib25,
  lib_exports as lib_exports4
} from "./chunk-SBMU52EB.js";
import {
  Base58,
  BigNumber,
  FixedNumber,
  Signer,
  SigningKey,
  SupportedAlgorithm,
  TransactionTypes,
  TypedDataEncoder,
  UnicodeNormalizationForm,
  Utf8ErrorFuncs,
  Utf8ErrorReason,
  VoidSigner,
  _fetchData,
  _toEscapedUtf8String,
  accessListify,
  checkProperties,
  computeAddress,
  computeHmac,
  computePublicKey,
  deepCopy,
  defineReadOnly,
  dnsEncode,
  fetchJson,
  formatBytes32String,
  getAddress,
  getContractAddress,
  getCreate2Address,
  getIcapAddress,
  getStatic,
  hashMessage,
  id,
  init_lib as init_lib3,
  init_lib11 as init_lib13,
  init_lib12 as init_lib14,
  init_lib13 as init_lib15,
  init_lib14 as init_lib17,
  init_lib15 as init_lib18,
  init_lib16 as init_lib21,
  init_lib17 as init_lib24,
  init_lib2 as init_lib4,
  init_lib3 as init_lib5,
  init_lib4 as init_lib6,
  init_lib5 as init_lib7,
  init_lib6 as init_lib8,
  init_lib7 as init_lib9,
  init_lib8 as init_lib10,
  init_lib9 as init_lib11,
  isAddress,
  isValidName,
  keccak256,
  lib_exports4 as lib_exports,
  lib_exports6 as lib_exports2,
  lib_exports8 as lib_exports3,
  namehash,
  nameprep,
  parse,
  parseBytes32String,
  poll,
  randomBytes,
  recoverAddress,
  recoverPublicKey,
  require_sha3,
  resolveProperties,
  ripemd160,
  serialize,
  sha256,
  sha512,
  shallowCopy,
  shuffled,
  toUtf8Bytes,
  toUtf8CodePoints,
  toUtf8String
} from "./chunk-VMWMM3ZZ.js";
import "./chunk-TOBMW5A2.js";
import {
  ErrorCode,
  Logger,
  arrayify,
  concat,
  hexConcat,
  hexDataLength,
  hexDataSlice,
  hexStripZeros,
  hexValue,
  hexZeroPad,
  hexlify,
  init_lib,
  init_lib2,
  isBytes,
  isBytesLike,
  isHexString,
  joinSignature,
  splitSignature,
  stripZeros,
  zeroPad
} from "./chunk-455VVZHW.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-J43GMYXM.js";

// ../../node_modules/@aragon/sdk-client/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var global = typeof self !== "undefined" ? self : exports;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global.DOMException;
      }
      F.prototype = global;
      return new F();
    }();
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers2;
          self2.Request = Request;
          self2.Response = Response;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/isObjectLike.mjs
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}
var init_isObjectLike = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/isObjectLike.mjs"() {
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/invariant.mjs
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(
      message != null ? message : "Unexpected invariant triggered."
    );
  }
}
var init_invariant = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/invariant.mjs"() {
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/location.mjs
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;
  for (const match of source.body.matchAll(LineRegExp)) {
    typeof match.index === "number" || invariant(false);
    if (match.index >= position) {
      break;
    }
    lastLineStart = match.index + match[0].length;
    line += 1;
  }
  return {
    line,
    column: position + 1 - lastLineStart
  };
}
var LineRegExp;
var init_location = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/location.mjs"() {
    init_invariant();
    LineRegExp = /\r\n|[\n\r]/g;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printLocation.mjs
function printLocation(location) {
  return printSourceLocation(
    location.source,
    getLocation(location.source, location.start)
  );
}
function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = "".padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];
    for (let i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([
      [`${lineNum} |`, subLines[0]],
      ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
      ["|", "^".padStart(subLineColumnNum)],
      ["|", subLines[subLineIndex + 1]]
    ]);
  }
  return locationStr + printPrefixedLines([
    [`${lineNum - 1} |`, lines[lineIndex - 1]],
    [`${lineNum} |`, locationLine],
    ["|", "^".padStart(columnNum)],
    [`${lineNum + 1} |`, lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_, line]) => line !== void 0);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
}
var init_printLocation = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printLocation.mjs"() {
    init_location();
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/error/GraphQLError.mjs
function toNormalizedOptions(args) {
  const firstArg = args[0];
  if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
var GraphQLError2;
var init_GraphQLError = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/error/GraphQLError.mjs"() {
    init_isObjectLike();
    init_location();
    init_printLocation();
    GraphQLError2 = class extends Error {
      constructor(message, ...rawArgs) {
        var _this$nodes, _nodeLocations$, _ref;
        const { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);
        super(message);
        this.name = "GraphQLError";
        this.path = path !== null && path !== void 0 ? path : void 0;
        this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        this.nodes = undefinedIfEmpty(
          Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
        );
        const nodeLocations = undefinedIfEmpty(
          (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
        );
        this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
        this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
        this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
        const originalExtensions = isObjectLike(
          originalError === null || originalError === void 0 ? void 0 : originalError.extensions
        ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
        this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
        Object.defineProperties(this, {
          message: {
            writable: true,
            enumerable: true
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(this, "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
        } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, GraphQLError2);
        } else {
          Object.defineProperty(this, "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let output = this.message;
        if (this.nodes) {
          for (const node of this.nodes) {
            if (node.loc) {
              output += "\n\n" + printLocation(node.loc);
            }
          }
        } else if (this.source && this.locations) {
          for (const location of this.locations) {
            output += "\n\n" + printSourceLocation(this.source, location);
          }
        }
        return output;
      }
      toJSON() {
        const formattedError = {
          message: this.message
        };
        if (this.locations != null) {
          formattedError.locations = this.locations;
        }
        if (this.path != null) {
          formattedError.path = this.path;
        }
        if (this.extensions != null && Object.keys(this.extensions).length > 0) {
          formattedError.extensions = this.extensions;
        }
        return formattedError;
      }
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError2(`Syntax Error: ${description}`, {
    source,
    positions: [position]
  });
}
var init_syntaxError = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/error/syntaxError.mjs"() {
    init_GraphQLError();
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/ast.mjs
function isNode(maybeNode) {
  const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === "string" && kindValues.has(maybeKind);
}
var Location, Token, QueryDocumentKeys, kindValues, OperationTypeNode;
var init_ast = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/ast.mjs"() {
    Location = class {
      constructor(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      }
    };
    Token = class {
      constructor(kind, start, end, line, column, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = null;
        this.next = null;
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      }
    };
    QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    kindValues = new Set(Object.keys(QueryDocumentKeys));
    (function(OperationTypeNode2) {
      OperationTypeNode2["QUERY"] = "query";
      OperationTypeNode2["MUTATION"] = "mutation";
      OperationTypeNode2["SUBSCRIPTION"] = "subscription";
    })(OperationTypeNode || (OperationTypeNode = {}));
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation;
var init_directiveLocation = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/directiveLocation.mjs"() {
    (function(DirectiveLocation2) {
      DirectiveLocation2["QUERY"] = "QUERY";
      DirectiveLocation2["MUTATION"] = "MUTATION";
      DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
      DirectiveLocation2["FIELD"] = "FIELD";
      DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
      DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
      DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
      DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
      DirectiveLocation2["SCHEMA"] = "SCHEMA";
      DirectiveLocation2["SCALAR"] = "SCALAR";
      DirectiveLocation2["OBJECT"] = "OBJECT";
      DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
      DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
      DirectiveLocation2["INTERFACE"] = "INTERFACE";
      DirectiveLocation2["UNION"] = "UNION";
      DirectiveLocation2["ENUM"] = "ENUM";
      DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
      DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
      DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation || (DirectiveLocation = {}));
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/kinds.mjs
var Kind;
var init_kinds = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/kinds.mjs"() {
    (function(Kind2) {
      Kind2["NAME"] = "Name";
      Kind2["DOCUMENT"] = "Document";
      Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
      Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
      Kind2["SELECTION_SET"] = "SelectionSet";
      Kind2["FIELD"] = "Field";
      Kind2["ARGUMENT"] = "Argument";
      Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
      Kind2["INLINE_FRAGMENT"] = "InlineFragment";
      Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
      Kind2["VARIABLE"] = "Variable";
      Kind2["INT"] = "IntValue";
      Kind2["FLOAT"] = "FloatValue";
      Kind2["STRING"] = "StringValue";
      Kind2["BOOLEAN"] = "BooleanValue";
      Kind2["NULL"] = "NullValue";
      Kind2["ENUM"] = "EnumValue";
      Kind2["LIST"] = "ListValue";
      Kind2["OBJECT"] = "ObjectValue";
      Kind2["OBJECT_FIELD"] = "ObjectField";
      Kind2["DIRECTIVE"] = "Directive";
      Kind2["NAMED_TYPE"] = "NamedType";
      Kind2["LIST_TYPE"] = "ListType";
      Kind2["NON_NULL_TYPE"] = "NonNullType";
      Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
      Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
      Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
      Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
      Kind2["FIELD_DEFINITION"] = "FieldDefinition";
      Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
      Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
      Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
      Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
      Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
      Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
      Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
      Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
      Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
      Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
      Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
      Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
      Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
      Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
    })(Kind || (Kind = {}));
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/characterClasses.mjs
function isWhiteSpace(code) {
  return code === 9 || code === 32;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isLetter(code) {
  return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function isNameStart(code) {
  return isLetter(code) || code === 95;
}
function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 95;
}
var init_characterClasses = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/characterClasses.mjs"() {
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/blockString.mjs
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;
  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;
    const line = lines[i];
    const indent2 = leadingWhitespace(line);
    if (indent2 === line.length) {
      continue;
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
    lastNonEmptyLine = i;
    if (i !== 0 && indent2 < commonIndent) {
      commonIndent = indent2;
    }
  }
  return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
    (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
    lastNonEmptyLine + 1
  );
}
function leadingWhitespace(str) {
  let i = 0;
  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {
    ++i;
  }
  return i;
}
function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""');
  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1;
  const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith("\\");
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  let result = "";
  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += "\n";
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += "\n";
  }
  return '"""' + result + '"""';
}
var init_blockString = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/blockString.mjs"() {
    init_characterClasses();
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/tokenKind.mjs
var TokenKind;
var init_tokenKind = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/tokenKind.mjs"() {
    (function(TokenKind2) {
      TokenKind2["SOF"] = "<SOF>";
      TokenKind2["EOF"] = "<EOF>";
      TokenKind2["BANG"] = "!";
      TokenKind2["DOLLAR"] = "$";
      TokenKind2["AMP"] = "&";
      TokenKind2["PAREN_L"] = "(";
      TokenKind2["PAREN_R"] = ")";
      TokenKind2["SPREAD"] = "...";
      TokenKind2["COLON"] = ":";
      TokenKind2["EQUALS"] = "=";
      TokenKind2["AT"] = "@";
      TokenKind2["BRACKET_L"] = "[";
      TokenKind2["BRACKET_R"] = "]";
      TokenKind2["BRACE_L"] = "{";
      TokenKind2["PIPE"] = "|";
      TokenKind2["BRACE_R"] = "}";
      TokenKind2["NAME"] = "Name";
      TokenKind2["INT"] = "Int";
      TokenKind2["FLOAT"] = "Float";
      TokenKind2["STRING"] = "String";
      TokenKind2["BLOCK_STRING"] = "BlockString";
      TokenKind2["COMMENT"] = "Comment";
    })(TokenKind || (TokenKind = {}));
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/lexer.mjs
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function isUnicodeScalarValue(code) {
  return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
}
function isSupplementaryCodePoint(body, location) {
  return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
}
function isLeadingSurrogate(code) {
  return code >= 55296 && code <= 56319;
}
function isTrailingSurrogate(code) {
  return code >= 56320 && code <= 57343;
}
function printCodePointAt(lexer, location) {
  const code = lexer.source.body.codePointAt(location);
  if (code === void 0) {
    return TokenKind.EOF;
  } else if (code >= 32 && code <= 126) {
    const char = String.fromCodePoint(code);
    return char === '"' ? `'"'` : `"${char}"`;
  }
  return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
}
function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new Token(kind, start, end, line, col, value);
}
function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++position;
        continue;
      case 10:
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 13:
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 35:
        return readComment(lexer, position);
      case 33:
        return createToken(lexer, TokenKind.BANG, position, position + 1);
      case 36:
        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
      case 38:
        return createToken(lexer, TokenKind.AMP, position, position + 1);
      case 40:
        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
      case 41:
        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
      case 46:
        if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 58:
        return createToken(lexer, TokenKind.COLON, position, position + 1);
      case 61:
        return createToken(lexer, TokenKind.EQUALS, position, position + 1);
      case 64:
        return createToken(lexer, TokenKind.AT, position, position + 1);
      case 91:
        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
      case 93:
        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
      case 123:
        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
      case 124:
        return createToken(lexer, TokenKind.PIPE, position, position + 1);
      case 125:
        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
      case 34:
        if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    }
    if (isDigit(code) || code === 45) {
      return readNumber(lexer, position, code);
    }
    if (isNameStart(code)) {
      return readName(lexer, position);
    }
    throw syntaxError(
      lexer.source,
      position,
      code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
    );
  }
  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
}
function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.COMMENT,
    start,
    position,
    body.slice(start + 1, position)
  );
}
function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (isDigit(code)) {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(
      lexer.source,
      position,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position
      )}.`
    );
  }
  return createToken(
    lexer,
    isFloat ? TokenKind.FLOAT : TokenKind.INT,
    start,
    position,
    body.slice(start, position)
  );
}
function readDigits(lexer, start, firstCode) {
  if (!isDigit(firstCode)) {
    throw syntaxError(
      lexer.source,
      start,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start
      )}.`
    );
  }
  const body = lexer.source.body;
  let position = start + 1;
  while (isDigit(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = "";
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
    }
    if (code === 92) {
      value += body.slice(chunkStart, position);
      const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += escape.value;
      position += escape.size;
      chunkStart = position;
      continue;
    }
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3;
  while (size < 12) {
    const code = body.charCodeAt(position + size++);
    if (code === 125) {
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size
      };
    }
    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size
    )}".`
  );
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  }
  if (isLeadingSurrogate(code)) {
    if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
      const trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
  );
}
function read16BitHexCode(body, position) {
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
function readHexDigit(code) {
  return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
}
function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);
  switch (code) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: "\n",
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2
    )}".`
  );
}
function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = "";
  const blockLines = [];
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(
        lexer,
        TokenKind.BLOCK_STRING,
        start,
        position + 3,
        dedentBlockStringLines(blockLines).join("\n")
      );
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    }
    if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1;
      position += 4;
      continue;
    }
    if (code === 10 || code === 13) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 13 && body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = "";
      chunkStart = position;
      lineStart = position;
      continue;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (isNameContinue(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.NAME,
    start,
    position,
    body.slice(start, position)
  );
}
var Lexer;
var init_lexer = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/lexer.mjs"() {
    init_syntaxError();
    init_ast();
    init_blockString();
    init_characterClasses();
    init_tokenKind();
    Lexer = class {
      constructor(source) {
        const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      get [Symbol.toStringTag]() {
        return "Lexer";
      }
      advance() {
        this.lastToken = this.token;
        const token = this.token = this.lookahead();
        return token;
      }
      lookahead() {
        let token = this.token;
        if (token.kind !== TokenKind.EOF) {
          do {
            if (token.next) {
              token = token.next;
            } else {
              const nextToken = readNextToken(this, token.end);
              token.next = nextToken;
              nextToken.prev = token;
              token = nextToken;
            }
          } while (token.kind === TokenKind.COMMENT);
        }
        return token;
      }
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
var init_devAssert = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/devAssert.mjs"() {
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/inspect.mjs
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(
    ([key, value]) => key + ": " + formatValue(value, seenValues)
  );
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
var MAX_ARRAY_LENGTH, MAX_RECURSIVE_DEPTH;
var init_inspect = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/inspect.mjs"() {
    MAX_ARRAY_LENGTH = 10;
    MAX_RECURSIVE_DEPTH = 2;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/instanceOf.mjs
var instanceOf;
var init_instanceOf = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/instanceOf.mjs"() {
    init_inspect();
    instanceOf = false ? function instanceOf2(value, constructor) {
      return value instanceof constructor;
    } : function instanceOf3(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (typeof value === "object" && value !== null) {
        var _value$constructor;
        const className = constructor.prototype[Symbol.toStringTag];
        const valueClassName = Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
        if (className === valueClassName) {
          const stringifiedValue = inspect(value);
          throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
        }
      }
      return false;
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/source.mjs
function isSource(source) {
  return instanceOf(source, Source);
}
var Source;
var init_source = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/source.mjs"() {
    init_devAssert();
    init_inspect();
    init_instanceOf();
    Source = class {
      constructor(body, name = "GraphQL request", locationOffset = {
        line: 1,
        column: 1
      }) {
        typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || devAssert(
          false,
          "line in locationOffset is 1-indexed and must be positive."
        );
        this.locationOffset.column > 0 || devAssert(
          false,
          "column in locationOffset is 1-indexed and must be positive."
        );
      }
      get [Symbol.toStringTag]() {
        return "Source";
      }
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/parser.mjs
var parser_exports = {};
__export(parser_exports, {
  Parser: () => Parser,
  parse: () => parse2,
  parseConstValue: () => parseConstValue,
  parseType: () => parseType,
  parseValue: () => parseValue
});
function parse2(source, options) {
  const parser = new Parser(source, options);
  return parser.parseDocument();
}
function parseValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const value = parser.parseValueLiteral(false);
  parser.expectToken(TokenKind.EOF);
  return value;
}
function parseConstValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const value = parser.parseConstValueLiteral();
  parser.expectToken(TokenKind.EOF);
  return value;
}
function parseType(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const type = parser.parseTypeReference();
  parser.expectToken(TokenKind.EOF);
  return type;
}
function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
}
var Parser;
var init_parser = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/parser.mjs"() {
    init_syntaxError();
    init_ast();
    init_directiveLocation();
    init_kinds();
    init_lexer();
    init_source();
    init_tokenKind();
    Parser = class {
      constructor(source, options = {}) {
        const sourceObj = isSource(source) ? source : new Source(source);
        this._lexer = new Lexer(sourceObj);
        this._options = options;
        this._tokenCounter = 0;
      }
      parseName() {
        const token = this.expectToken(TokenKind.NAME);
        return this.node(token, {
          kind: Kind.NAME,
          value: token.value
        });
      }
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: Kind.DOCUMENT,
          definitions: this.many(
            TokenKind.SOF,
            this.parseDefinition,
            TokenKind.EOF
          )
        });
      }
      parseDefinition() {
        if (this.peek(TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        }
        const hasDescription = this.peekDescription();
        const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (hasDescription) {
            throw syntaxError(
              this._lexer.source,
              this._lexer.token.start,
              "Unexpected description, descriptions are supported only on type definitions."
            );
          }
          switch (keywordToken.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      parseOperationDefinition() {
        const start = this._lexer.token;
        if (this.peek(TokenKind.BRACE_L)) {
          return this.node(start, {
            kind: Kind.OPERATION_DEFINITION,
            operation: OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet()
          });
        }
        const operation = this.parseOperationType();
        let name;
        if (this.peek(TokenKind.NAME)) {
          name = this.parseName();
        }
        return this.node(start, {
          kind: Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseOperationType() {
        const operationToken = this.expectToken(TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return OperationTypeNode.QUERY;
          case "mutation":
            return OperationTypeNode.MUTATION;
          case "subscription":
            return OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(operationToken);
      }
      parseVariableDefinitions() {
        return this.optionalMany(
          TokenKind.PAREN_L,
          this.parseVariableDefinition,
          TokenKind.PAREN_R
        );
      }
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
          directives: this.parseConstDirectives()
        });
      }
      parseVariable() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.DOLLAR);
        return this.node(start, {
          kind: Kind.VARIABLE,
          name: this.parseName()
        });
      }
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: Kind.SELECTION_SET,
          selections: this.many(
            TokenKind.BRACE_L,
            this.parseSelection,
            TokenKind.BRACE_R
          )
        });
      }
      parseSelection() {
        return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      parseField() {
        const start = this._lexer.token;
        const nameOrAlias = this.parseName();
        let alias;
        let name;
        if (this.expectOptionalToken(TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return this.node(start, {
          kind: Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
        });
      }
      parseArguments(isConst) {
        const item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
      }
      parseArgument(isConst = false) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseConstArgument() {
        return this.parseArgument(true);
      }
      parseFragment() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.SPREAD);
        const hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
          return this.node(start, {
            kind: Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false)
          });
        }
        return this.node(start, {
          kind: Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseFragmentDefinition() {
        const start = this._lexer.token;
        this.expectKeyword("fragment");
        if (this._options.allowLegacyFragmentVariables === true) {
          return this.node(start, {
            kind: Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        return this.node(start, {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      }
      parseValueLiteral(isConst) {
        const token = this._lexer.token;
        switch (token.kind) {
          case TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case TokenKind.INT:
            this.advanceLexer();
            return this.node(token, {
              kind: Kind.INT,
              value: token.value
            });
          case TokenKind.FLOAT:
            this.advanceLexer();
            return this.node(token, {
              kind: Kind.FLOAT,
              value: token.value
            });
          case TokenKind.STRING:
          case TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case TokenKind.NAME:
            this.advanceLexer();
            switch (token.value) {
              case "true":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: true
                });
              case "false":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: false
                });
              case "null":
                return this.node(token, {
                  kind: Kind.NULL
                });
              default:
                return this.node(token, {
                  kind: Kind.ENUM,
                  value: token.value
                });
            }
          case TokenKind.DOLLAR:
            if (isConst) {
              this.expectToken(TokenKind.DOLLAR);
              if (this._lexer.token.kind === TokenKind.NAME) {
                const varName = this._lexer.token.value;
                throw syntaxError(
                  this._lexer.source,
                  token.start,
                  `Unexpected variable "$${varName}" in constant value.`
                );
              } else {
                throw this.unexpected(token);
              }
            }
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(true);
      }
      parseStringLiteral() {
        const token = this._lexer.token;
        this.advanceLexer();
        return this.node(token, {
          kind: Kind.STRING,
          value: token.value,
          block: token.kind === TokenKind.BLOCK_STRING
        });
      }
      parseList(isConst) {
        const item = () => this.parseValueLiteral(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.LIST,
          values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
        });
      }
      parseObject(isConst) {
        const item = () => this.parseObjectField(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.OBJECT,
          fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
        });
      }
      parseObjectField(isConst) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseDirectives(isConst) {
        const directives = [];
        while (this.peek(TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      }
      parseConstDirectives() {
        return this.parseDirectives(true);
      }
      parseDirective(isConst) {
        const start = this._lexer.token;
        this.expectToken(TokenKind.AT);
        return this.node(start, {
          kind: Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst)
        });
      }
      parseTypeReference() {
        const start = this._lexer.token;
        let type;
        if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
          const innerType = this.parseTypeReference();
          this.expectToken(TokenKind.BRACKET_R);
          type = this.node(start, {
            kind: Kind.LIST_TYPE,
            type: innerType
          });
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(TokenKind.BANG)) {
          return this.node(start, {
            kind: Kind.NON_NULL_TYPE,
            type
          });
        }
        return type;
      }
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: Kind.NAMED_TYPE,
          name: this.parseName()
        });
      }
      peekDescription() {
        return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
      }
      parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      parseSchemaDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.many(
          TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          TokenKind.BRACE_R
        );
        return this.node(start, {
          kind: Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes
        });
      }
      parseOperationTypeDefinition() {
        const start = this._lexer.token;
        const operation = this.parseOperationType();
        this.expectToken(TokenKind.COLON);
        const type = this.parseNamedType();
        return this.node(start, {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type
        });
      }
      parseScalarTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives
        });
      }
      parseObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
      }
      parseFieldsDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseFieldDefinition,
          TokenKind.BRACE_R
        );
      }
      parseFieldDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        this.expectToken(TokenKind.COLON);
        const type = this.parseTypeReference();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives
        });
      }
      parseArgumentDefs() {
        return this.optionalMany(
          TokenKind.PAREN_L,
          this.parseInputValueDef,
          TokenKind.PAREN_R
        );
      }
      parseInputValueDef() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        const type = this.parseTypeReference();
        let defaultValue;
        if (this.expectOptionalToken(TokenKind.EQUALS)) {
          defaultValue = this.parseConstValueLiteral();
        }
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives
        });
      }
      parseInterfaceTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseUnionTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        return this.node(start, {
          kind: Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types
        });
      }
      parseUnionMemberTypes() {
        return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
      }
      parseEnumTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        return this.node(start, {
          kind: Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values
        });
      }
      parseEnumValuesDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseEnumValueDefinition,
          TokenKind.BRACE_R
        );
      }
      parseEnumValueDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseEnumValueName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives
        });
      }
      parseEnumValueName() {
        if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
          throw syntaxError(
            this._lexer.source,
            this._lexer.token.start,
            `${getTokenDesc(
              this._lexer.token
            )} is reserved and cannot be used for an enum value.`
          );
        }
        return this.parseName();
      }
      parseInputObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields
        });
      }
      parseInputFieldsDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseInputValueDef,
          TokenKind.BRACE_R
        );
      }
      parseTypeSystemExtension() {
        const keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      parseSchemaExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.optionalMany(
          TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          TokenKind.BRACE_R
        );
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes
        });
      }
      parseScalarTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives
        });
      }
      parseObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseInterfaceTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseUnionTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types
        });
      }
      parseEnumTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values
        });
      }
      parseInputObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields
        });
      }
      parseDirectiveDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(TokenKind.AT);
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        const repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        const locations = this.parseDirectiveLocations();
        return this.node(start, {
          kind: Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations
        });
      }
      parseDirectiveLocations() {
        return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
      }
      parseDirectiveLocation() {
        const start = this._lexer.token;
        const name = this.parseName();
        if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
          return name;
        }
        throw this.unexpected(start);
      }
      node(startToken, node) {
        if (this._options.noLocation !== true) {
          node.loc = new Location(
            startToken,
            this._lexer.lastToken,
            this._lexer.source
          );
        }
        return node;
      }
      peek(kind) {
        return this._lexer.token.kind === kind;
      }
      expectToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return token;
        }
        throw syntaxError(
          this._lexer.source,
          token.start,
          `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
        );
      }
      expectOptionalToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      expectKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this.advanceLexer();
        } else {
          throw syntaxError(
            this._lexer.source,
            token.start,
            `Expected "${value}", found ${getTokenDesc(token)}.`
          );
        }
      }
      expectOptionalKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      unexpected(atToken) {
        const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return syntaxError(
          this._lexer.source,
          token.start,
          `Unexpected ${getTokenDesc(token)}.`
        );
      }
      any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      }
      optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      }
      many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      }
      advanceLexer() {
        const { maxTokens } = this._options;
        const token = this._lexer.advance();
        if (maxTokens !== void 0 && token.kind !== TokenKind.EOF) {
          ++this._tokenCounter;
          if (this._tokenCounter > maxTokens) {
            throw syntaxError(
              this._lexer.source,
              token.start,
              `Document contains more that ${maxTokens} tokens. Parsing aborted.`
            );
          }
        }
      }
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printString.mjs
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
}
function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
}
var escapedRegExp, escapeSequences;
var init_printString = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printString.mjs"() {
    escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/visitor.mjs
function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
  const enterLeaveMap = /* @__PURE__ */ new Map();
  for (const kind of Object.values(Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  let stack = void 0;
  let inArray = Array.isArray(root);
  let keys = [root];
  let index2 = -1;
  let edits = [];
  let node = root;
  let key = void 0;
  let parent = void 0;
  const path = [];
  const ancestors = [];
  do {
    index2++;
    const isLeaving = index2 === keys.length;
    const isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;
          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;
            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(node)
          );
          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }
      index2 = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index2 : keys[index2];
      node = parent[key];
      if (node === null || node === void 0) {
        continue;
      }
      path.push(key);
    }
    let result;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== void 0) {
        edits.push([key, result]);
        if (!isLeaving) {
          if (isNode(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;
      stack = {
        inArray,
        index: index2,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index2 = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    return edits[edits.length - 1][1];
  }
  return root;
}
function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];
  if (typeof kindVisitor === "object") {
    return kindVisitor;
  } else if (typeof kindVisitor === "function") {
    return {
      enter: kindVisitor,
      leave: void 0
    };
  }
  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}
var BREAK;
var init_visitor = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/visitor.mjs"() {
    init_devAssert();
    init_inspect();
    init_ast();
    init_kinds();
    BREAK = Object.freeze({});
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printer.mjs
var printer_exports = {};
__export(printer_exports, {
  print: () => print
});
function print(ast) {
  return visit(ast, printDocASTReducer);
}
function join(maybeArray, separator = "") {
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x) => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join(array, "\n")), "\n}");
}
function wrap(start, maybeString, end = "") {
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}
var MAX_LINE_LENGTH, printDocASTReducer;
var init_printer = __esm({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printer.mjs"() {
    init_blockString();
    init_printString();
    init_visitor();
    MAX_LINE_LENGTH = 80;
    printDocASTReducer = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      Document: {
        leave: (node) => join(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave(node) {
          const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
          const prefix = join(
            [
              node.operation,
              join([node.name, varDefs]),
              join(node.directives, " ")
            ],
            " "
          );
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap("", alias, ": ") + name;
          let argsLine = prefix + wrap("(", join(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH) {
            argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
          }
          return join([argsLine, join(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join(
          [
            "...",
            wrap("on ", typeCondition),
            join(directives, " "),
            selectionSet
          ],
          " "
        )
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
      },
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
      },
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type }) => "[" + type + "]"
      },
      NonNullType: {
        leave: ({ type }) => type + "!"
      },
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
          [
            "type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type, defaultValue, directives }) => wrap("", description, "\n") + join(
          [name + ": " + type, wrap("= ", defaultValue), join(directives, " ")],
          " "
        )
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
          [
            "interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(
          ["union", name, join(directives, " "), wrap("= ", join(types, " | "))],
          " "
        )
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join(
          ["extend schema", join(directives, " "), block(operationTypes)],
          " "
        )
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join(
          [
            "extend union",
            name,
            join(directives, " "),
            wrap("= ", join(types, " | "))
          ],
          " "
        )
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
      }
    };
  }
});

// ../../node_modules/extract-files/public/ReactNativeFile.js
var require_ReactNativeFile = __commonJS({
  "../../node_modules/extract-files/public/ReactNativeFile.js"(exports, module) {
    "use strict";
    module.exports = function ReactNativeFile(_ref) {
      var uri = _ref.uri, name = _ref.name, type = _ref.type;
      this.uri = uri;
      this.name = name;
      this.type = type;
    };
  }
});

// ../../node_modules/extract-files/public/isExtractableFile.js
var require_isExtractableFile = __commonJS({
  "../../node_modules/extract-files/public/isExtractableFile.js"(exports, module) {
    "use strict";
    var ReactNativeFile = require_ReactNativeFile();
    module.exports = function isExtractableFile(value) {
      return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
    };
  }
});

// ../../node_modules/extract-files/public/extractFiles.js
var require_extractFiles = __commonJS({
  "../../node_modules/extract-files/public/extractFiles.js"(exports, module) {
    "use strict";
    var defaultIsExtractableFile = require_isExtractableFile();
    module.exports = function extractFiles(value, path, isExtractableFile) {
      if (path === void 0) {
        path = "";
      }
      if (isExtractableFile === void 0) {
        isExtractableFile = defaultIsExtractableFile;
      }
      var clone;
      var files = /* @__PURE__ */ new Map();
      function addFile(paths, file) {
        var storedPaths = files.get(file);
        if (storedPaths)
          storedPaths.push.apply(storedPaths, paths);
        else
          files.set(file, paths);
      }
      if (isExtractableFile(value)) {
        clone = null;
        addFile([path], value);
      } else {
        var prefix = path ? path + "." : "";
        if (typeof FileList !== "undefined" && value instanceof FileList)
          clone = Array.prototype.map.call(value, function(file, i2) {
            addFile(["" + prefix + i2], file);
            return null;
          });
        else if (Array.isArray(value))
          clone = value.map(function(child, i2) {
            var result2 = extractFiles(child, "" + prefix + i2, isExtractableFile);
            result2.files.forEach(addFile);
            return result2.clone;
          });
        else if (value && value.constructor === Object) {
          clone = {};
          for (var i in value) {
            var result = extractFiles(value[i], "" + prefix + i, isExtractableFile);
            result.files.forEach(addFile);
            clone[i] = result.clone;
          }
        } else
          clone = value;
      }
      return {
        clone,
        files
      };
    };
  }
});

// ../../node_modules/extract-files/public/index.js
var require_public = __commonJS({
  "../../node_modules/extract-files/public/index.js"(exports) {
    "use strict";
    exports.ReactNativeFile = require_ReactNativeFile();
    exports.extractFiles = require_extractFiles();
    exports.isExtractableFile = require_isExtractableFile();
  }
});

// ../../node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "../../node_modules/form-data/lib/browser.js"(exports, module) {
    module.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/defaultJsonSerializer.js
var require_defaultJsonSerializer = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/defaultJsonSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultJsonSerializer = void 0;
    exports.defaultJsonSerializer = {
      parse: JSON.parse,
      stringify: JSON.stringify
    };
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/createRequestBody.js
var require_createRequestBody = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/createRequestBody.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var extract_files_1 = require_public();
    var form_data_1 = __importDefault(require_browser());
    var defaultJsonSerializer_1 = require_defaultJsonSerializer();
    var isExtractableFileEnhanced = function(value) {
      return extract_files_1.isExtractableFile(value) || value !== null && typeof value === "object" && typeof value.pipe === "function";
    };
    function createRequestBody(query, variables, operationName, jsonSerializer) {
      if (jsonSerializer === void 0) {
        jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
      }
      var _a = extract_files_1.extractFiles({ query, variables, operationName }, "", isExtractableFileEnhanced), clone = _a.clone, files = _a.files;
      if (files.size === 0) {
        if (!Array.isArray(query)) {
          return jsonSerializer.stringify(clone);
        }
        if (typeof variables !== "undefined" && !Array.isArray(variables)) {
          throw new Error("Cannot create request body with given variable type, array expected");
        }
        var payload = query.reduce(function(accu, currentQuery, index2) {
          accu.push({ query: currentQuery, variables: variables ? variables[index2] : void 0 });
          return accu;
        }, []);
        return jsonSerializer.stringify(payload);
      }
      var Form = typeof FormData === "undefined" ? form_data_1.default : FormData;
      var form = new Form();
      form.append("operations", jsonSerializer.stringify(clone));
      var map = {};
      var i = 0;
      files.forEach(function(paths) {
        map[++i] = paths;
      });
      form.append("map", jsonSerializer.stringify(map));
      i = 0;
      files.forEach(function(paths, file) {
        form.append("" + ++i, file);
      });
      return form;
    }
    exports.default = createRequestBody;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/parseArgs.js
var require_parseArgs = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/parseArgs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBatchRequestsExtendedArgs = exports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;
    function parseRequestArgs(documentOrOptions, variables, requestHeaders) {
      return documentOrOptions.document ? documentOrOptions : {
        document: documentOrOptions,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRequestArgs = parseRequestArgs;
    function parseRawRequestArgs(queryOrOptions, variables, requestHeaders) {
      return queryOrOptions.query ? queryOrOptions : {
        query: queryOrOptions,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRawRequestArgs = parseRawRequestArgs;
    function parseBatchRequestArgs(documentsOrOptions, requestHeaders) {
      return documentsOrOptions.documents ? documentsOrOptions : {
        documents: documentsOrOptions,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseBatchRequestArgs = parseBatchRequestArgs;
    function parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders) {
      return urlOrOptions.document ? urlOrOptions : {
        url: urlOrOptions,
        document,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRequestExtendedArgs = parseRequestExtendedArgs;
    function parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders) {
      return urlOrOptions.query ? urlOrOptions : {
        url: urlOrOptions,
        query,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;
    function parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders) {
      return urlOrOptions.documents ? urlOrOptions : {
        url: urlOrOptions,
        documents,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseBatchRequestsExtendedArgs = parseBatchRequestsExtendedArgs;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/types.js
var require_types = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/types.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientError = void 0;
    var ClientError2 = function(_super) {
      __extends(ClientError3, _super);
      function ClientError3(response, request) {
        var _this = this;
        var message = ClientError3.extractMessage(response) + ": " + JSON.stringify({
          response,
          request
        });
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ClientError3.prototype);
        _this.response = response;
        _this.request = request;
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(_this, ClientError3);
        }
        return _this;
      }
      ClientError3.extractMessage = function(response) {
        try {
          return response.errors[0].message;
        } catch (e) {
          return "GraphQL Error (Code: " + response.status + ")";
        }
      };
      return ClientError3;
    }(Error);
    exports.ClientError = ClientError2;
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/graphql-ws.js
var require_graphql_ws = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/graphql-ws.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLWebSocketClient = void 0;
    var types_1 = require_types();
    var _1 = require_dist();
    var CONNECTION_INIT = "connection_init";
    var CONNECTION_ACK = "connection_ack";
    var PING = "ping";
    var PONG = "pong";
    var SUBSCRIBE = "subscribe";
    var NEXT = "next";
    var ERROR = "error";
    var COMPLETE = "complete";
    var GraphQLWebSocketMessage = function() {
      function GraphQLWebSocketMessage2(type, payload, id2) {
        this._type = type;
        this._payload = payload;
        this._id = id2;
      }
      Object.defineProperty(GraphQLWebSocketMessage2.prototype, "type", {
        get: function() {
          return this._type;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GraphQLWebSocketMessage2.prototype, "id", {
        get: function() {
          return this._id;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GraphQLWebSocketMessage2.prototype, "payload", {
        get: function() {
          return this._payload;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GraphQLWebSocketMessage2.prototype, "text", {
        get: function() {
          var result = { type: this.type };
          if (this.id != null && this.id != void 0)
            result.id = this.id;
          if (this.payload != null && this.payload != void 0)
            result.payload = this.payload;
          return JSON.stringify(result);
        },
        enumerable: false,
        configurable: true
      });
      GraphQLWebSocketMessage2.parse = function(data, f) {
        var _a = JSON.parse(data), type = _a.type, payload = _a.payload, id2 = _a.id;
        return new GraphQLWebSocketMessage2(type, f(payload), id2);
      };
      return GraphQLWebSocketMessage2;
    }();
    var GraphQLWebSocketClient = function() {
      function GraphQLWebSocketClient2(socket, _a) {
        var _this = this;
        var onInit = _a.onInit, onAcknowledged = _a.onAcknowledged, onPing = _a.onPing, onPong = _a.onPong;
        this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };
        this.socket = socket;
        socket.onopen = function(e) {
          return __awaiter(_this, void 0, void 0, function() {
            var _a2, _b, _c, _d;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  this.socketState.acknowledged = false;
                  this.socketState.subscriptions = {};
                  _b = (_a2 = socket).send;
                  _c = ConnectionInit;
                  if (!onInit)
                    return [3, 2];
                  return [4, onInit()];
                case 1:
                  _d = _e.sent();
                  return [3, 3];
                case 2:
                  _d = null;
                  _e.label = 3;
                case 3:
                  _b.apply(_a2, [_c.apply(void 0, [_d]).text]);
                  return [2];
              }
            });
          });
        };
        socket.onclose = function(e) {
          _this.socketState.acknowledged = false;
          _this.socketState.subscriptions = {};
        };
        socket.onerror = function(e) {
          console.error(e);
        };
        socket.onmessage = function(e) {
          try {
            var message = parseMessage(e.data);
            switch (message.type) {
              case CONNECTION_ACK: {
                if (_this.socketState.acknowledged) {
                  console.warn("Duplicate CONNECTION_ACK message ignored");
                } else {
                  _this.socketState.acknowledged = true;
                  if (onAcknowledged)
                    onAcknowledged(message.payload);
                }
                return;
              }
              case PING: {
                if (onPing)
                  onPing(message.payload).then(function(r) {
                    return socket.send(Pong(r).text);
                  });
                else
                  socket.send(Pong(null).text);
                return;
              }
              case PONG: {
                if (onPong)
                  onPong(message.payload);
                return;
              }
            }
            if (!_this.socketState.acknowledged) {
              return;
            }
            if (message.id === void 0 || message.id === null || !_this.socketState.subscriptions[message.id]) {
              return;
            }
            var _a2 = _this.socketState.subscriptions[message.id], query = _a2.query, variables = _a2.variables, subscriber = _a2.subscriber;
            switch (message.type) {
              case NEXT: {
                if (!message.payload.errors && message.payload.data) {
                  subscriber.next && subscriber.next(message.payload.data);
                }
                if (message.payload.errors) {
                  subscriber.error && subscriber.error(new types_1.ClientError(__assign(__assign({}, message.payload), { status: 200 }), { query, variables }));
                } else {
                }
                return;
              }
              case ERROR: {
                subscriber.error && subscriber.error(new types_1.ClientError({ errors: message.payload, status: 200 }, { query, variables }));
                return;
              }
              case COMPLETE: {
                subscriber.complete && subscriber.complete();
                delete _this.socketState.subscriptions[message.id];
                return;
              }
            }
          } catch (e2) {
            console.error(e2);
            socket.close(1006);
          }
          socket.close(4400, "Unknown graphql-ws message.");
        };
      }
      GraphQLWebSocketClient2.prototype.makeSubscribe = function(query, operationName, variables, subscriber) {
        var _this = this;
        var subscriptionId = (this.socketState.lastRequestId++).toString();
        this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };
        this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);
        return function() {
          _this.socket.send(Complete(subscriptionId).text);
          delete _this.socketState.subscriptions[subscriptionId];
        };
      };
      GraphQLWebSocketClient2.prototype.rawRequest = function(query, variables) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          var result;
          _this.rawSubscribe(query, {
            next: function(data, extensions) {
              return result = { data, extensions };
            },
            error: reject,
            complete: function() {
              return resolve(result);
            }
          }, variables);
        });
      };
      GraphQLWebSocketClient2.prototype.request = function(document, variables) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          var result;
          _this.subscribe(document, {
            next: function(data) {
              return result = data;
            },
            error: reject,
            complete: function() {
              return resolve(result);
            }
          }, variables);
        });
      };
      GraphQLWebSocketClient2.prototype.subscribe = function(document, subscriber, variables) {
        var _a = _1.resolveRequestDocument(document), query = _a.query, operationName = _a.operationName;
        return this.makeSubscribe(query, operationName, variables, subscriber);
      };
      GraphQLWebSocketClient2.prototype.rawSubscribe = function(query, subscriber, variables) {
        return this.makeSubscribe(query, void 0, variables, subscriber);
      };
      GraphQLWebSocketClient2.prototype.ping = function(payload) {
        this.socket.send(Ping(payload).text);
      };
      GraphQLWebSocketClient2.prototype.close = function() {
        this.socket.close(1e3);
      };
      GraphQLWebSocketClient2.PROTOCOL = "graphql-transport-ws";
      return GraphQLWebSocketClient2;
    }();
    exports.GraphQLWebSocketClient = GraphQLWebSocketClient;
    function parseMessage(data, f) {
      if (f === void 0) {
        f = function(a) {
          return a;
        };
      }
      var m = GraphQLWebSocketMessage.parse(data, f);
      return m;
    }
    function ConnectionInit(payload) {
      return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);
    }
    function Ping(payload) {
      return new GraphQLWebSocketMessage(PING, payload, void 0);
    }
    function Pong(payload) {
      return new GraphQLWebSocketMessage(PONG, payload, void 0);
    }
    function Subscribe(id2, payload) {
      return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id2);
    }
    function Complete(id2) {
      return new GraphQLWebSocketMessage(COMPLETE, void 0, id2);
    }
  }
});

// ../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/@aragon/sdk-client/node_modules/graphql-request/dist/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLWebSocketClient = exports.gql = exports.resolveRequestDocument = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;
    var cross_fetch_1 = __importStar(require_browser_ponyfill());
    var CrossFetch = cross_fetch_1;
    var parser_1 = (init_parser(), __toCommonJS(parser_exports));
    var printer_1 = (init_printer(), __toCommonJS(printer_exports));
    var createRequestBody_1 = __importDefault(require_createRequestBody());
    var defaultJsonSerializer_1 = require_defaultJsonSerializer();
    var parseArgs_1 = require_parseArgs();
    var types_1 = require_types();
    Object.defineProperty(exports, "ClientError", { enumerable: true, get: function() {
      return types_1.ClientError;
    } });
    var resolveHeaders = function(headers) {
      var oHeaders = {};
      if (headers) {
        if (typeof Headers !== "undefined" && headers instanceof Headers || headers instanceof CrossFetch.Headers) {
          oHeaders = HeadersInstanceToPlainObject(headers);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(_a) {
            var name = _a[0], value = _a[1];
            oHeaders[name] = value;
          });
        } else {
          oHeaders = headers;
        }
      }
      return oHeaders;
    };
    var queryCleanner = function(str) {
      return str.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
    };
    var buildGetQueryParams = function(_a) {
      var query = _a.query, variables = _a.variables, operationName = _a.operationName, jsonSerializer = _a.jsonSerializer;
      if (!Array.isArray(query)) {
        var search = ["query=" + encodeURIComponent(queryCleanner(query))];
        if (variables) {
          search.push("variables=" + encodeURIComponent(jsonSerializer.stringify(variables)));
        }
        if (operationName) {
          search.push("operationName=" + encodeURIComponent(operationName));
        }
        return search.join("&");
      }
      if (typeof variables !== "undefined" && !Array.isArray(variables)) {
        throw new Error("Cannot create query with given variable type, array expected");
      }
      var payload = query.reduce(function(accu, currentQuery, index2) {
        accu.push({
          query: queryCleanner(currentQuery),
          variables: variables ? jsonSerializer.stringify(variables[index2]) : void 0
        });
        return accu;
      }, []);
      return "query=" + encodeURIComponent(jsonSerializer.stringify(payload));
    };
    var post = function(_a) {
      var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch2 = _a.fetch, fetchOptions = _a.fetchOptions;
      return __awaiter(void 0, void 0, void 0, function() {
        var body;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);
              return [4, fetch2(url, __assign({ method: "POST", headers: __assign(__assign({}, typeof body === "string" ? { "Content-Type": "application/json" } : {}), headers), body }, fetchOptions))];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    var get = function(_a) {
      var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch2 = _a.fetch, fetchOptions = _a.fetchOptions;
      return __awaiter(void 0, void 0, void 0, function() {
        var queryParams;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              queryParams = buildGetQueryParams({
                query,
                variables,
                operationName,
                jsonSerializer: fetchOptions.jsonSerializer
              });
              return [4, fetch2(url + "?" + queryParams, __assign({ method: "GET", headers }, fetchOptions))];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    var GraphQLClient2 = function() {
      function GraphQLClient3(url, options) {
        this.url = url;
        this.options = options || {};
      }
      GraphQLClient3.prototype.rawRequest = function(queryOrOptions, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var rawRequestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, operationName;
          return __generator(this, function(_d) {
            rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
            url = this.url;
            if (rawRequestOptions.signal !== void 0) {
              fetchOptions.signal = rawRequestOptions.signal;
            }
            operationName = resolveRequestDocument(rawRequestOptions.query).operationName;
            return [2, makeRequest({
              url,
              query: rawRequestOptions.query,
              variables: rawRequestOptions.variables,
              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),
              operationName,
              fetch: fetch2,
              method,
              fetchOptions
            })];
          });
        });
      };
      GraphQLClient3.prototype.request = function(documentOrOptions, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var requestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, _d, query, operationName, data;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);
                _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                url = this.url;
                if (requestOptions.signal !== void 0) {
                  fetchOptions.signal = requestOptions.signal;
                }
                _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;
                return [4, makeRequest({
                  url,
                  query,
                  variables: requestOptions.variables,
                  headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),
                  operationName,
                  fetch: fetch2,
                  method,
                  fetchOptions
                })];
              case 1:
                data = _e.sent().data;
                return [2, data];
            }
          });
        });
      };
      GraphQLClient3.prototype.batchRequests = function(documentsOrOptions, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var batchRequestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, queries, variables, data;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);
                _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                url = this.url;
                if (batchRequestOptions.signal !== void 0) {
                  fetchOptions.signal = batchRequestOptions.signal;
                }
                queries = batchRequestOptions.documents.map(function(_a2) {
                  var document = _a2.document;
                  return resolveRequestDocument(document).query;
                });
                variables = batchRequestOptions.documents.map(function(_a2) {
                  var variables2 = _a2.variables;
                  return variables2;
                });
                return [4, makeRequest({
                  url,
                  query: queries,
                  variables,
                  headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),
                  operationName: void 0,
                  fetch: fetch2,
                  method,
                  fetchOptions
                })];
              case 1:
                data = _d.sent().data;
                return [2, data];
            }
          });
        });
      };
      GraphQLClient3.prototype.setHeaders = function(headers) {
        this.options.headers = headers;
        return this;
      };
      GraphQLClient3.prototype.setHeader = function(key, value) {
        var _a;
        var headers = this.options.headers;
        if (headers) {
          headers[key] = value;
        } else {
          this.options.headers = (_a = {}, _a[key] = value, _a);
        }
        return this;
      };
      GraphQLClient3.prototype.setEndpoint = function(value) {
        this.url = value;
        return this;
      };
      return GraphQLClient3;
    }();
    exports.GraphQLClient = GraphQLClient2;
    function makeRequest(_a) {
      var url = _a.url, query = _a.query, variables = _a.variables, headers = _a.headers, operationName = _a.operationName, fetch2 = _a.fetch, _b = _a.method, method = _b === void 0 ? "POST" : _b, fetchOptions = _a.fetchOptions;
      return __awaiter(this, void 0, void 0, function() {
        var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              fetcher = method.toUpperCase() === "POST" ? post : get;
              isBathchingQuery = Array.isArray(query);
              return [4, fetcher({
                url,
                query,
                variables,
                operationName,
                headers,
                fetch: fetch2,
                fetchOptions
              })];
            case 1:
              response = _c.sent();
              return [4, getResult(response, fetchOptions.jsonSerializer)];
            case 2:
              result = _c.sent();
              successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function(_a2) {
                var data2 = _a2.data;
                return !data2;
              }) : !!result.data;
              successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === "all" || fetchOptions.errorPolicy === "ignore";
              if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {
                headers_1 = response.headers, status_1 = response.status;
                errors = result.errors, rest = __rest(result, ["errors"]);
                data = fetchOptions.errorPolicy === "ignore" ? rest : result;
                return [2, __assign(__assign({}, isBathchingQuery ? { data } : data), { headers: headers_1, status: status_1 })];
              } else {
                errorResult = typeof result === "string" ? { error: result } : result;
                throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query, variables });
              }
              return [2];
          }
        });
      });
    }
    function rawRequest(urlOrOptions, query, variables, requestHeaders) {
      return __awaiter(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a) {
          requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);
          client = new GraphQLClient2(requestOptions.url);
          return [2, client.rawRequest(__assign({}, requestOptions))];
        });
      });
    }
    exports.rawRequest = rawRequest;
    function request(urlOrOptions, document, variables, requestHeaders) {
      return __awaiter(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a) {
          requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders);
          client = new GraphQLClient2(requestOptions.url);
          return [2, client.request(__assign({}, requestOptions))];
        });
      });
    }
    exports.request = request;
    function batchRequests(urlOrOptions, documents, requestHeaders) {
      return __awaiter(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a) {
          requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);
          client = new GraphQLClient2(requestOptions.url);
          return [2, client.batchRequests(__assign({}, requestOptions))];
        });
      });
    }
    exports.batchRequests = batchRequests;
    exports.default = request;
    function getResult(response, jsonSerializer) {
      if (jsonSerializer === void 0) {
        jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
      }
      return __awaiter(this, void 0, void 0, function() {
        var contentType, _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              response.headers.forEach(function(value, key) {
                if (key.toLowerCase() === "content-type") {
                  contentType = value;
                }
              });
              if (!(contentType && contentType.toLowerCase().startsWith("application/json")))
                return [3, 2];
              _b = (_a = jsonSerializer).parse;
              return [4, response.text()];
            case 1:
              return [2, _b.apply(_a, [_c.sent()])];
            case 2:
              return [2, response.text()];
          }
        });
      });
    }
    function extractOperationName(document) {
      var _a;
      var operationName = void 0;
      var operationDefinitions = document.definitions.filter(function(definition) {
        return definition.kind === "OperationDefinition";
      });
      if (operationDefinitions.length === 1) {
        operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;
      }
      return operationName;
    }
    function resolveRequestDocument(document) {
      if (typeof document === "string") {
        var operationName_1 = void 0;
        try {
          var parsedDocument = parser_1.parse(document);
          operationName_1 = extractOperationName(parsedDocument);
        } catch (err) {
        }
        return { query: document, operationName: operationName_1 };
      }
      var operationName = extractOperationName(document);
      return { query: printer_1.print(document), operationName };
    }
    exports.resolveRequestDocument = resolveRequestDocument;
    function callOrIdentity(value) {
      return typeof value === "function" ? value() : value;
    }
    function gql2(chunks) {
      var variables = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        variables[_i - 1] = arguments[_i];
      }
      return chunks.reduce(function(accumulator, chunk, index2) {
        return "" + accumulator + chunk + (index2 in variables ? variables[index2] : "");
      }, "");
    }
    exports.gql = gql2;
    function HeadersInstanceToPlainObject(headers) {
      var o = {};
      headers.forEach(function(v, k) {
        o[k] = v;
      });
      return o;
    }
    var graphql_ws_1 = require_graphql_ws();
    Object.defineProperty(exports, "GraphQLWebSocketClient", { enumerable: true, get: function() {
      return graphql_ws_1.GraphQLWebSocketClient;
    } });
  }
});

// ../../node_modules/unfetch/dist/unfetch.module.js
var unfetch_module_exports = {};
__export(unfetch_module_exports, {
  default: () => unfetch_module_default
});
function unfetch_module_default(e, n) {
  return n = n || {}, new Promise(function(t, r) {
    var s = new XMLHttpRequest(), o = [], u = [], i = {}, a = function() {
      return { ok: 2 == (s.status / 100 | 0), statusText: s.statusText, status: s.status, url: s.responseURL, text: function() {
        return Promise.resolve(s.responseText);
      }, json: function() {
        return Promise.resolve(s.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([s.response]));
      }, clone: a, headers: { keys: function() {
        return o;
      }, entries: function() {
        return u;
      }, get: function(e2) {
        return i[e2.toLowerCase()];
      }, has: function(e2) {
        return e2.toLowerCase() in i;
      } } };
    };
    for (var l in s.open(n.method || "get", e, true), s.onload = function() {
      s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e2, n2, t2) {
        o.push(n2 = n2.toLowerCase()), u.push([n2, t2]), i[n2] = i[n2] ? i[n2] + "," + t2 : t2;
      }), t(a());
    }, s.onerror = r, s.withCredentials = "include" == n.credentials, n.headers)
      s.setRequestHeader(l, n.headers[l]);
    s.send(n.body || null);
  });
}
var init_unfetch_module = __esm({
  "../../node_modules/unfetch/dist/unfetch.module.js"() {
  }
});

// ../../node_modules/isomorphic-unfetch/browser.js
var require_browser2 = __commonJS({
  "../../node_modules/isomorphic-unfetch/browser.js"(exports, module) {
    module.exports = self.fetch || (self.fetch = (init_unfetch_module(), __toCommonJS(unfetch_module_exports)).default || (init_unfetch_module(), __toCommonJS(unfetch_module_exports)));
  }
});

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version,
  wordlists: () => wordlists
});
init_lib16();
init_lib3();
init_lib13();
init_lib23();
init_lib8();
init_lib25();
init_lib25();
init_lib19();

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports3,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
init_lib12();
init_lib7();
init_lib10();
init_lib17();
init_lib2();
init_lib11();
init_lib20();
init_lib22();
init_lib5();
init_lib();
init_lib18();
init_lib26();
init_lib21();
init_lib4();
init_lib6();
init_lib14();
init_lib9();
init_lib15();
init_lib27();
init_lib23();
init_lib24();
init_lib18();
init_lib9();

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/ethers.js
init_lib();

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/_version.js
var version = "ethers/5.7.2";

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/ethers.js
var logger = new Logger(version);

// ../../node_modules/@aragon/osx-ethers/node_modules/ethers/lib.esm/index.js
try {
  const anyGlobal = window;
  if (anyGlobal._ethers == null) {
    anyGlobal._ethers = ethers_exports;
  }
} catch (error) {
}

// ../../node_modules/@aragon/osx-ethers/dist/bundle-esm.js
var goerli = {
  managingDAOImplemenation: "0x99C83C89C59166f7f766A221D5D0Ee00D37170c3",
  managingDAO: "0xB76F8d3512497040a96E77141c951a5374F24Eb9",
  DAO_ENSSubdomainRegistrar_Implementation: "0x394B49Cc32Dc81B8EaCdeb62A6Fa66F31D1D022c",
  DAO_ENSSubdomainRegistrar: "0xC62820f3E74cC82F89100032Ad7F04682F9EdaE0",
  Plugin_ENSSubdomainRegistrar_Implementation: "0xbcE9b6fE957464aF2B739337bd1a936EbFCB5B48",
  Plugin_ENSSubdomainRegistrar: "0xd5656b6d1bc0354073f62AAbc1430530C331979c",
  DAORegistry_Implementation: "0xa796AC80af77a52AdA92778d8fb6133792480B77",
  DAORegistry: "0xd51ac19130A73455F8B3b1c26aFea21D6bA88E54",
  PluginRepoRegistry_Implementation: "0x3861Ef32c1bFcdd53E9AaE4af1C9f47390c17fBf",
  PluginRepoRegistry: "0x970Eb7Dd57c9F0dc4c5a10c06653d1103946b508",
  PluginRepoFactory: "0x301868712b77744A3C0E5511609238399f0A2d4d",
  PluginSetupProcessor: "0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e",
  DAOFactory: "0x16B6c6674fEf5d29C9a49EA68A19944f5a8471D3",
  AddresslistVotingSetup: "0x4980e5B4394B326c069A54C9ED0Dee2659227352",
  TokenVotingSetup: "0x64B336524ea859ed2133c93e4B18be17f44692eE",
  AdminSetup: "0x633845bB511DE83EA31b8717614d88fa7b569694",
  MultisigSetup: "0xBFd84852C8007Bf148721d2c20F69456F193b201",
  "address-list-voting-repo": "0xbD293e27226EF2b85E84FADCF2d5135AbC52e50A",
  "token-voting-repo": "0xFCc843C48BD44e5dA5976a2f2d85772D59C5959E",
  "admin-repo": "0xF66348E9865bb0f29B889E7c0FE1BCf4acAb5f54",
  "multisig-repo": "0x92C090cffC592B1bC321aCfAF735057B876375F8"
};
var mainnet = {
  managingDAOImplemenation: "0x005098056a837c2c4F99C7eCeE976F8D90bdFFF8",
  managingDAO: "0xf2d594F3C93C19D7B1a6F15B5489FFcE4B01f7dA",
  DAO_ENSSubdomainRegistrar_Implementation: "0xCe0B4124dea6105bfB85fB4461c4D39f360E9ef3",
  DAO_ENSSubdomainRegistrar: "0xE640Da5AD169630555A86D9b6b9C145B4961b1EB",
  Plugin_ENSSubdomainRegistrar_Implementation: "0x08633901DdF9cD8e2DC3a073594d0A7DaD6f3f57",
  Plugin_ENSSubdomainRegistrar: "0x35B62715459cB60bf6dC17fF8cfe138EA305E7Ee",
  DAORegistry_Implementation: "0xC24188a73dc09aA7C721f96Ad8857B469C01dC9f",
  DAORegistry: "0x7a62da7B56fB3bfCdF70E900787010Bc4c9Ca42e",
  PluginRepoRegistry_Implementation: "0xddCc39a2a0047Eb47EdF94180452cbaB14d426EF",
  PluginRepoRegistry: "0x5B3B36BdC9470963A2734D6a0d2F6a64C21C159f",
  PluginRepoFactory: "0x96E54098317631641703404C06A5afAD89da7373",
  PluginSetupProcessor: "0xE978942c691e43f65c1B7c7F8f1dc8cDF061B13f",
  DAOFactory: "0xA03C2182af8eC460D498108C92E8638a580b94d4",
  AddresslistVotingSetup: "0x360586dB62DA31327B2462BA27bEb3e48ebbf396",
  TokenVotingSetup: "0xB2A2b32b9d885C85d5b229C0509341c37CaE7483",
  AdminSetup: "0xBFD541bc4fcE14adf1Fb9258574D3cBF5f55a894",
  MultisigSetup: "0x8d6726Fe85Caa585d88FD8342ebEEE88d703E754",
  "address-list-voting-repo": "0xC207767d8A7a28019AFFAEAe6698F84B5526EbD7",
  "token-voting-repo": "0xb7401cD221ceAFC54093168B814Cc3d42579287f",
  "admin-repo": "0xA4371a239D08bfBA6E8894eccf8466C6323A52C3",
  "multisig-repo": "0x8c278e37D0817210E18A7958524b7D0a1fAA6F7b"
};
var mumbai = {
  managingDAOImplemenation: "0x5E993db91Fd2c713Df1110358396EAc60d54fE66",
  managingDAO: "0xE1De373E219a0d19a0500e599adb903477bCA0f9",
  ENSRegistry: "0xD24A78824dF3C29CA03661368e6437b767A5422D",
  PublicResolver: "0xdbFf6be618180E0FF0d74dd3B6BdC1b5de074273",
  DAO_ENSSubdomainRegistrar_Implementation: "0xD5baCA29C944A28f1f568F7e69B119030914c15D",
  DAO_ENSSubdomainRegistrar: "0xC528B8AA6a4D0f21455a06b6D7A41fd795619C31",
  Plugin_ENSSubdomainRegistrar_Implementation: "0x99965D7cFFE21C4AC94526AAFEd33E9EaA27f004",
  Plugin_ENSSubdomainRegistrar: "0x2EfcED958034c3BC455273153C3e604D34C78e46",
  DAORegistry_Implementation: "0xE5058D785C934279Af1EF7E90BB5D58048829256",
  DAORegistry: "0x6dD0C8b7F9406206ceAA01B5576D9d46e9298f0E",
  PluginRepoRegistry_Implementation: "0xab27e29F579C870F66F48F4825A4D294AE540818",
  PluginRepoRegistry: "0xc796bB1AfEBc56daDF6CAcD2aDa78055e5381971",
  PluginRepoFactory: "0xDcC5933bc3567E7798Ff00Ab3413cF5f5801BD41",
  PluginSetupProcessor: "0x9227b311C5cecB416707F1C8B7Ca1b52649AabEc",
  DAOFactory: "0x5bDBaAfd90B908058567080513635f560F896918",
  AddresslistVotingSetup: "0xD1CE76c26bc20255157C8ef478276eb115eC02a7",
  TokenVotingSetup: "0x76D3795Df5acF2e2141557BA1Cf094fd54d4e10C",
  AdminSetup: "0x40a3EF0f0780e044EbDDEdAa9AB225158f315afd",
  MultisigSetup: "0x8b2361C65E898F40372a0DD5E1BfEE9895A676B3",
  "address-list-voting-repo": "0x71570268A86A80B5cCa3F5e430c2BAa3F4b26278",
  "token-voting-repo": "0xaCa70D8c462940B839DE386BcDD4CACf745632cA",
  "admin-repo": "0x0DF9b15550fF39149e491dDD154b28f587e0cD16",
  "multisig-repo": "0x2c4690b8be39adAd4F15A69340d5035aC6E53eEF"
};
var polygon = {
  AddresslistVotingSetup: "0x622DB36633643E4A4075ecc3A309a4f0B942922a",
  AdminSetup: "0x82aBAfBf46759358c705c7E323543A7Be47AbAf0",
  managingDAO: "0x6d4FB6Ff01A172774f42789fcfcdd84E68c28494",
  DAOFactory: "0x51Ead12DEcD31ea75e1046EdFAda14dd639789b8",
  DAORegistry: "0x96E54098317631641703404C06A5afAD89da7373",
  DAORegistry_Implementation: "0x5B3B36BdC9470963A2734D6a0d2F6a64C21C159f",
  DAO_ENSSubdomainRegistrar: "0x07f49c49Ce2A99CF7C28F66673d406386BDD8Ff4",
  DAO_ENSSubdomainRegistrar_Implementation: "0x35B62715459cB60bf6dC17fF8cfe138EA305E7Ee",
  managingDAOImplemenation: "0xCa834B3F404c97273f34e108029eEd776144d324",
  ENSRegistry: "0x57bf333951967a0cC0afcD58FC7959Ca0Eae6905",
  PluginRepoFactory: "0x6E924eA5864044D8642385683fFA5AD42FB687f2",
  PluginRepoRegistry: "0xA03C2182af8eC460D498108C92E8638a580b94d4",
  PluginRepoRegistry_Implementation: "0xE978942c691e43f65c1B7c7F8f1dc8cDF061B13f",
  PluginSetupProcessor: "0x879D9dfe3F36d7684BeC1a2bB4Aa8E8871A7245B",
  Plugin_ENSSubdomainRegistrar: "0x7a62da7B56fB3bfCdF70E900787010Bc4c9Ca42e",
  Plugin_ENSSubdomainRegistrar_Implementation: "0xC24188a73dc09aA7C721f96Ad8857B469C01dC9f",
  PublicResolver: "0x74b3B3504B5d6D1c6247009c9b1e3D8cFF7bd445",
  TokenVotingSetup: "0x03445b197271CB3BE5E453745eD98a05793a4538",
  MultisigSetup: "0xD63A8Cfb0eec960C3e70F96a9e3F3091f3FD70b6",
  "address-list-voting-repo": "0x641DdEdc2139d9948e8dcC936C1Ab2314D9181E6",
  "token-voting-repo": "0xae67aea0B830ed4504B36670B5Fa70c5C386Bb58",
  "admin-repo": "0x7fF570473d0876db16A59e8F04EE7F17Ab117309",
  "multisig-repo": "0x5A5035E7E8aeff220540F383a9cf8c35929bcF31"
};
var activeContracts = {
  goerli,
  mainnet,
  mumbai,
  polygon
};
var _abi$1p = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      }
    ],
    name: "ActionFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "AnyAddressDisallowedForWhoAndWhere",
    type: "error"
  },
  {
    inputs: [],
    name: "ConditionNotPresentForAnyAddress",
    type: "error"
  },
  {
    inputs: [],
    name: "InsufficientGas",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "NativeTokenDepositAmountMismatch",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "currentCondition",
        type: "address"
      },
      {
        internalType: "address",
        name: "newCondition",
        type: "address"
      }
    ],
    name: "PermissionAlreadyGrantedForDifferentCondition",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionsForAnyAddressDisallowed",
    type: "error"
  },
  {
    inputs: [],
    name: "TooManyActions",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "Unauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "UnkownCallback",
    type: "error"
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "sig",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "CallbackReceived",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "_reference",
        type: "string"
      }
    ],
    name: "Deposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "failureMap",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "execResults",
        type: "bytes[]"
      }
    ],
    name: "Executed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IPermissionCondition",
        name: "condition",
        type: "address"
      }
    ],
    name: "Granted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "MetadataSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "NativeTokenDeposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "daoURI",
        type: "string"
      }
    ],
    name: "NewURI",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      }
    ],
    name: "Revoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "signatureValidator",
        type: "address"
      }
    ],
    name: "SignatureValidatorSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "StandardCallbackRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "forwarder",
        type: "address"
      }
    ],
    name: "TrustedForwarderSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    stateMutability: "nonpayable",
    type: "fallback"
  },
  {
    inputs: [],
    name: "EXECUTE_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "ROOT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "SET_METADATA_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "SET_SIGNATURE_VALIDATOR_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_DAO_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "_items",
        type: "tuple[]"
      }
    ],
    name: "applyMultiTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.SingleTargetPermission[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "applySingleTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "daoURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "_reference",
        type: "string"
      }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes[]",
        name: "execResults",
        type: "bytes[]"
      },
      {
        internalType: "uint256",
        name: "failureMap",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "grant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "contract IPermissionCondition",
        name: "_condition",
        type: "address"
      }
    ],
    name: "grantWithCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      },
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address"
      },
      {
        internalType: "string",
        name: "daoURI_",
        type: "string"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes"
      }
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_magicNumber",
        type: "bytes4"
      }
    ],
    name: "registerStandardCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "revoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newDaoURI",
        type: "string"
      }
    ],
    name: "setDaoURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      }
    ],
    name: "setMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signatureValidator",
        type: "address"
      }
    ],
    name: "setSignatureValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newTrustedForwarder",
        type: "address"
      }
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "signatureValidator",
    outputs: [
      {
        internalType: "contract IERC1271",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var _bytecode$_ = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516135ad6200012060003960008181610a6c01528181610b0201528181610c9701528181610d2d0152610e2801526135ad6000f3fe6080604052600436106101d15760003560e01c8063829331a1116100f7578063d96054c411610095578063e978afe511610064578063e978afe5146106b2578063eafb8b06146106d2578063ee57e36f146106f2578063fdef91061461071257610210565b8063d96054c41461060a578063da7422281461062a578063e2e355631461064a578063e306bee71461067e57610210565b8063c71bf324116100d1578063c71bf3241461057d578063c9dbc2a4146105ab578063ce1b815f146105cb578063d68bad2c146105ea57610210565b8063829331a114610516578063bfe07da61461054a578063c4a501451461055d57610210565b80632675fdd01161016f5780633e2ab0d91161013e5780633e2ab0d9146104ac5780634f1ef286146104cc57806352d1902d146104df5780637034731b146104f457610210565b80632675fdd0146103ff57806326875b1f1461041f5780633659cfe614610453578063388da9341461047357610210565b80631080f99b116101ab5780631080f99b146103505780631626ba7e1461037257806322844d04146103ab57806324b4d73f146103cb57610210565b806301ffc9a7146102a55780630729d054146102da57806309e56b141461031c57610210565b3661021057604080513381523460208201527f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f3910160405180910390a1005b34801561021c57600080fd5b50600036606060006102706000356001600160e01b03191685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061073292505050565b604080516001600160e01b03198316602082015291925001604051602081830303815290604052915050915050805190602001f35b3480156102b157600080fd5b506102c56102c036600461293e565b610809565b60405190151581526020015b60405180910390f35b3480156102e657600080fd5b5061030e7fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b6040519081526020016102d1565b34801561032857600080fd5b5061030e7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b34801561035c57600080fd5b5061037061036b3660046129a4565b61085e565b005b34801561037e57600080fd5b5061039261038d366004612a89565b610897565b6040516001600160e01b031990911681526020016102d1565b3480156103b757600080fd5b506103706103c6366004612ae5565b610947565b3480156103d757600080fd5b5061030e7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b34801561040b57600080fd5b506102c561041a366004612b6d565b610a17565b34801561042b57600080fd5b5061030e7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b34801561045f57600080fd5b5061037061046e366004612bd9565b610a62565b34801561047f57600080fd5b5061012d54610494906001600160a01b031681565b6040516001600160a01b0390911681526020016102d1565b3480156104b857600080fd5b506103706104c7366004612bd9565b610bff565b6103706104da366004612bf6565b610c8d565b3480156104eb57600080fd5b5061030e610e1b565b34801561050057600080fd5b50610509610ee0565b6040516102d19190612c80565b34801561052257600080fd5b5061030e7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b610370610558366004612c93565b610f73565b34801561056957600080fd5b50610370610578366004612cef565b6110ad565b34801561058957600080fd5b5061059d610598366004612d3a565b611160565b6040516102d1929190612e14565b3480156105b757600080fd5b506103706105c6366004612e36565b611439565b3480156105d757600080fd5b5061012e546001600160a01b0316610494565b3480156105f657600080fd5b50610370610605366004612e89565b61146f565b34801561061657600080fd5b50610370610625366004612e89565b6114aa565b34801561063657600080fd5b50610370610645366004612bd9565b6114df565b34801561065657600080fd5b5061030e7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837281565b34801561068a57600080fd5b5061030e7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b3480156106be57600080fd5b506103706106cd366004612eca565b611512565b3480156106de57600080fd5b506103706106ed366004612f3f565b611619565b3480156106fe57600080fd5b5061037061070d3660046129a4565b6117e0565b34801561071e57600080fd5b506102c561072d366004612b6d565b611814565b6001600160e01b0319808316600090815260fb6020526040812054909160e09190911b9081166107a7576040517f54bdcc3e0000000000000000000000000000000000000000000000000000000081526001600160e01b03198086166004830152821660248201526044015b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516107f8929190612fd8565b60405180910390a290505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108035750506001600160e01b03191660009081526033602052604090205460ff1690565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61088881611822565b61089283836118aa565b505050565b61012d546000906001600160a01b03166108b357506000610803565b61012d546040517f1626ba7e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631626ba7e906108ff9086908690600401612ffa565b602060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190613013565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361097181611822565b60005b82811015610a1057600084848381811061099057610990613030565b9050606002018036038101906109a6919061305a565b90506000815160028111156109bd576109bd6130c3565b036109da576109d586826020015183604001516118ea565b610a07565b6001815160028111156109ef576109ef6130c3565b03610a0757610a0786826020015183604001516118f7565b50600101610974565b5050505050565b6000610a25858585856119fe565b80610a3e5750610a3e856001600160a01b0385856119fe565b80610a575750610a576001600160a01b038585856119fe565b90505b949350505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b005760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610bd75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610be081611b72565b60408051600080825260208201909252610bfc91839190611b9c565b50565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e778088372610c2981611822565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e906020015b60405180910390a15050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d2b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e025760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610e0b82611b72565b610e1782826001611b9c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ebb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606061012f8054610ef0906130d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1c906130d9565b8015610f695780601f10610f3e57610100808354040283529160200191610f69565b820191906000526020600020905b815481529060010190602001808311610f4c57829003601f168201915b5050505050905090565b82600003610fad576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841661100257823414610ffd576040517f1abd56100000000000000000000000000000000000000000000000000000000081526004810184905234602482015260440161079e565b611058565b3415611043576040517f1abd56100000000000000000000000000000000000000000000000000000000081526000600482015234602482015260440161079e565b6110586001600160a01b038516333086611d3c565b836001600160a01b0316336001600160a01b03167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f7685858560405161109f9392919061313e565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc6110d781611822565b6110e084611dc4565b6001600160e01b03198316600090815260fb60205260409020805463ffffffff191660e084901c179055604080516001600160e01b0319808716825280861660208301528416918101919091527ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b99060600160405180910390a150505050565b606060007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61118e81611822565b6101008511156111ca576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8467ffffffffffffffff8111156111e3576111e36129e6565b60405190808252806020026020018201604052801561121657816020015b60608152602001906001900390816112015790505b50925060008060005b878110156113e3575a92506000808a8a8481811061123f5761123f613030565b90506020028101906112519190613158565b61125f906020810190612bd9565b6001600160a01b03168b8b8581811061127a5761127a613030565b905060200281019061128c9190613158565b602001358c8c868181106112a2576112a2613030565b90506020028101906112b49190613158565b6112c2906040810190613178565b6040516112d09291906131bf565b60006040518083038185875af1925050503d806000811461130d576040519150601f19603f3d011682016040523d82523d6000602084013e611312565b606091505b50915091505a9350600160ff84161b89166113665781611361576040517fa6a7dbbd0000000000000000000000000000000000000000000000000000000081526004810184905260240161079e565b6113bb565b816113bb576113766040866131cf565b8410156113af576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160ff84161b871896505b808884815181106113ce576113ce613030565b6020908102919091010152505060010161121f565b50336001600160a01b03167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed78a8a8a888a6040516114259594939291906131f1565b60405180910390a250505094509492505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361146381611822565b610a1085858585611e43565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361149981611822565b6114a48484846118ea565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336114d481611822565b6114a48484846118f7565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c61150981611822565b610e1782612101565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361153c81611822565b60005b828110156114a457600084848381811061155b5761155b613030565b905060a002018036038101906115719190613316565b9050600081516002811115611588576115886130c3565b036115a9576115a48160200151826040015183608001516118ea565b611610565b6001815160028111156115be576115be6130c3565b036115da576115a48160200151826040015183608001516118f7565b6002815160028111156115ef576115ef6130c3565b03611610576116108160200151826040015183608001518460600151611e43565b5060010161153f565b600054610100900460ff16158080156116395750600054600160ff909116105b806116535750303b158015611653575060005460ff166001145b6116c55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079e565b6000805460ff1916600117905580156116e8576000805461ff0019166101001790555b6117117f9385547e00000000000000000000000000000000000000000000000000000000611dc4565b61173a7f1626ba7e00000000000000000000000000000000000000000000000000000000611dc4565b6117637f7034731b00000000000000000000000000000000000000000000000000000000611dc4565b61176b612163565b6117758787612270565b61177e84612101565b61178883836118aa565b611791856122a1565b80156117d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61180a81611822565b6108928383612270565b6000610a5785858585610a17565b6118653033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1792505050565b610bfc576040517f1e09743f0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810182905260640161079e565b61012f6118b88284836133f3565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051610c819291906134b3565b6108928383836002611e43565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e83015260528083018590528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316156114a457600081815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b60008060c96000611a838888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316905080611aae576000915050610a5a565b6001196001600160a01b03821601611aca576001915050610a5a565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd090611b159089908990899089906004016134c7565b602060405180830381865afa925050508015611b4e575060408051601f3d908101601f19168201909252611b4b91810190613503565b60015b15611b66578015611b6457600192505050610a5a565b505b50600095945050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc610e1781611822565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bcf5761089283612327565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c29575060408051601f3d908101601f19168201909252611c2691810190613525565b60015b611c9b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611d305760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161079e565b506108928383836123f2565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114a4908590612417565b6001600160e01b03198082169003611e1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161079e565b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b03848116148015611e6357506001600160a01b03838116145b15611e9a576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611eb957506001600160a01b03838116145b15611f73576000611ec9836124fc565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611ef65750805b15611f2d576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611f71576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e83015260528083018690528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316828161208c57600083815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46117d7565b806001600160a01b0316826001600160a01b0316146117d7576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a40161079e565b61012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea29060200160405180910390a150565b61218c7f150b7a0200000000000000000000000000000000000000000000000000000000611dc4565b6121b57f4e2312e000000000000000000000000000000000000000000000000000000000611dc4565b60fb6020527f5a08f87af82de422c581ce019b2e54a9c17372e9cba575ae0470ba2482d63686805463ffffffff1990811663150b7a02179091557fe1cfe341950d56d8854f782066100d5ae1d5930cdb4949b973e554a343efc6c38054821663f23a6e611790557fbc197c81000000000000000000000000000000000000000000000000000000006000527f08ba3617671847c1c169da222a5bc01cfdefcc3c4f1e5525214a474479c89123805490911663bc197c81179055565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed8282604051610c819291906134b3565b600054610100900460ff1661231e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079e565b610bfc816125f5565b6001600160a01b0381163b6123a45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6123fb83612620565b6000825111806124085750805b15610892576114a48383612660565b600061246c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661276b9092919063ffffffff16565b805190915015610892578080602001905181019061248a9190613503565b6108925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161079e565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d82148061254b57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b8061257557507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b8061259f57507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b806125c957507f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837282145b806108035750507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc1490565b610bfc30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336118ea565b61262981612327565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161079e565b600080846001600160a01b0316846040516126fa919061353e565b600060405180830381855af49150503d8060008114612735576040519150601f19603f3d011682016040523d82523d6000602084013e61273a565b606091505b509150915061276282826040518060600160405280602781526020016135516027913961277a565b95945050505050565b6060610a5a8484600085612793565b60608315612789575081610940565b6109408383612885565b60608247101561280b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161079e565b600080866001600160a01b03168587604051612827919061353e565b60006040518083038185875af1925050503d8060008114612864576040519150601f19603f3d011682016040523d82523d6000602084013e612869565b606091505b509150915061287a878383876128af565b979650505050505050565b8151156128955781518083602001fd5b8060405162461bcd60e51b815260040161079e9190612c80565b6060831561291e578251600003612917576001600160a01b0385163b6129175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079e565b5081610a5a565b610a5a8383612885565b6001600160e01b031981168114610bfc57600080fd5b60006020828403121561295057600080fd5b813561094081612928565b60008083601f84011261296d57600080fd5b50813567ffffffffffffffff81111561298557600080fd5b60208301915083602082850101111561299d57600080fd5b9250929050565b600080602083850312156129b757600080fd5b823567ffffffffffffffff8111156129ce57600080fd5b6129da8582860161295b565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612a0d57600080fd5b813567ffffffffffffffff80821115612a2857612a286129e6565b604051601f8301601f19908116603f01168101908282118183101715612a5057612a506129e6565b81604052838152866020858801011115612a6957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612a9c57600080fd5b82359150602083013567ffffffffffffffff811115612aba57600080fd5b612ac6858286016129fc565b9150509250929050565b6001600160a01b0381168114610bfc57600080fd5b600080600060408486031215612afa57600080fd5b8335612b0581612ad0565b9250602084013567ffffffffffffffff80821115612b2257600080fd5b818601915086601f830112612b3657600080fd5b813581811115612b4557600080fd5b876020606083028501011115612b5a57600080fd5b6020830194508093505050509250925092565b60008060008060808587031215612b8357600080fd5b8435612b8e81612ad0565b93506020850135612b9e81612ad0565b925060408501359150606085013567ffffffffffffffff811115612bc157600080fd5b612bcd878288016129fc565b91505092959194509250565b600060208284031215612beb57600080fd5b813561094081612ad0565b60008060408385031215612c0957600080fd5b8235612c1481612ad0565b9150602083013567ffffffffffffffff811115612aba57600080fd5b60005b83811015612c4b578181015183820152602001612c33565b50506000910152565b60008151808452612c6c816020860160208601612c30565b601f01601f19169290920160200192915050565b6020815260006109406020830184612c54565b60008060008060608587031215612ca957600080fd5b8435612cb481612ad0565b935060208501359250604085013567ffffffffffffffff811115612cd757600080fd5b612ce38782880161295b565b95989497509550505050565b600080600060608486031215612d0457600080fd5b8335612d0f81612928565b92506020840135612d1f81612928565b91506040840135612d2f81612928565b809150509250925092565b60008060008060608587031215612d5057600080fd5b84359350602085013567ffffffffffffffff80821115612d6f57600080fd5b818701915087601f830112612d8357600080fd5b813581811115612d9257600080fd5b8860208260051b8501011115612da757600080fd5b95986020929092019750949560400135945092505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612e07578284038952612df5848351612c54565b98850198935090840190600101612ddd565b5091979650505050505050565b604081526000612e276040830185612dbf565b90508260208301529392505050565b60008060008060808587031215612e4c57600080fd5b8435612e5781612ad0565b93506020850135612e6781612ad0565b9250604085013591506060850135612e7e81612ad0565b939692955090935050565b600080600060608486031215612e9e57600080fd5b8335612ea981612ad0565b92506020840135612eb981612ad0565b929592945050506040919091013590565b60008060208385031215612edd57600080fd5b823567ffffffffffffffff80821115612ef557600080fd5b818501915085601f830112612f0957600080fd5b813581811115612f1857600080fd5b86602060a083028501011115612f2d57600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215612f5857600080fd5b863567ffffffffffffffff80821115612f7057600080fd5b612f7c8a838b0161295b565b909850965060208901359150612f9182612ad0565b909450604088013590612fa382612ad0565b90935060608801359080821115612fb957600080fd5b50612fc689828a0161295b565b979a9699509497509295939492505050565b6001600160a01b0383168152604060208201526000610a5a6040830184612c54565b828152604060208201526000610a5a6040830184612c54565b60006020828403121561302557600080fd5b815161094081612928565b634e487b7160e01b600052603260045260246000fd5b80356003811061305557600080fd5b919050565b60006060828403121561306c57600080fd5b6040516060810181811067ffffffffffffffff8211171561308f5761308f6129e6565b60405261309b83613046565b815260208301356130ab81612ad0565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600181811c908216806130ed57607f821691505b60208210810361310d57634e487b7160e01b600052602260045260246000fd5b50919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b838152604060208201526000610a57604083018486613113565b60008235605e1983360301811261316e57600080fd5b9190910192915050565b6000808335601e1984360301811261318f57600080fd5b83018035915067ffffffffffffffff8211156131aa57600080fd5b60200191503681900382131561299d57600080fd5b8183823760009101908152919050565b6000826131ec57634e487b7160e01b600052601260045260246000fd5b500490565b60006080820187835260206080818501528187835260a08501905060a08860051b86010192508860005b898110156132ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608786030183528135605e198c360301811261325e57600080fd5b8b016060813561326d81612ad0565b6001600160a01b03168752818601358688015260408083013536849003601e1901811261329957600080fd5b90920186810192903567ffffffffffffffff8111156132b757600080fd5b8036038413156132c657600080fd5b82828a01526132d8838a018286613113565b985050509385019350509083019060010161321b565b50505050846040840152828103606084015261330a8185612dbf565b98975050505050505050565b600060a0828403121561332857600080fd5b60405160a0810181811067ffffffffffffffff8211171561334b5761334b6129e6565b60405261335783613046565b8152602083013561336781612ad0565b6020820152604083013561337a81612ad0565b6040820152606083013561338d81612ad0565b60608201526080928301359281019290925250919050565b601f82111561089257600081815260208120601f850160051c810160208610156133cc5750805b601f850160051c820191505b818110156133eb578281556001016133d8565b505050505050565b67ffffffffffffffff83111561340b5761340b6129e6565b61341f8361341983546130d9565b836133a5565b6000601f841160018114613453576000851561343b5750838201355b600019600387901b1c1916600186901b178355610a10565b600083815260209020601f19861690835b828110156134845786850135825560209485019460019092019101613464565b50868210156134a15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602081526000610a5a602083018486613113565b60006001600160a01b038087168352808616602084015250836040830152608060608301526134f96080830184612c54565b9695505050505050565b60006020828403121561351557600080fd5b8151801515811461094057600080fd5b60006020828403121561353757600080fd5b5051919050565b6000825161316e818460208701612c3056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200c168e950345d0d51e5072f0d6741c8fffb903a88e5f4d9ae41a3c116b51090b64736f6c63430008110033";
var isSuperArgs$_ = (xs) => xs.length > 1;
var DAO__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$_(args)) {
      super(...args);
    } else {
      super(_abi$1p, _bytecode$_, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$1p);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1p, signerOrProvider);
  }
};
DAO__factory.bytecode = _bytecode$_;
DAO__factory.abi = _abi$1p;
var _abi$1o = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "_reference",
        type: "string"
      }
    ],
    name: "Deposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "failureMap",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "execResults",
        type: "bytes[]"
      }
    ],
    name: "Executed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "MetadataSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "NativeTokenDeposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "signatureValidator",
        type: "address"
      }
    ],
    name: "SignatureValidatorSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "StandardCallbackRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "forwarder",
        type: "address"
      }
    ],
    name: "TrustedForwarderSet",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "_reference",
        type: "string"
      }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes"
      }
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_magicNumber",
        type: "bytes4"
      }
    ],
    name: "registerStandardCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      }
    ],
    name: "setMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signatureValidator",
        type: "address"
      }
    ],
    name: "setSignatureValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address"
      }
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IDAO__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1o);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1o, signerOrProvider);
  }
};
IDAO__factory.abi = _abi$1o;
var _abi$1n = [
  {
    inputs: [],
    name: "daoURI",
    outputs: [
      {
        internalType: "string",
        name: "_daoURI",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IEIP4824__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1n);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1n, signerOrProvider);
  }
};
IEIP4824__factory.abi = _abi$1n;
var index$N = Object.freeze({
  __proto__: null,
  DAO__factory,
  IDAO__factory,
  IEIP4824__factory
});
var _abi$1m = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IPermissionCondition__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1m);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1m, signerOrProvider);
  }
};
IPermissionCondition__factory.abi = _abi$1m;
var _abi$1l = [
  {
    inputs: [],
    name: "NO_CONDITION",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$Z = "0x609e610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636dd02a5b146038575b600080fd5b603f600081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220ae892c49277bf7689660de1c33eb7fb1da0e2719e6ba9dcccebed43705e1bbf564736f6c63430008110033";
var isSuperArgs$Z = (xs) => xs.length > 1;
var PermissionLib__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$Z(args)) {
      super(...args);
    } else {
      super(_abi$1l, _bytecode$Z, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$1l);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1l, signerOrProvider);
  }
};
PermissionLib__factory.bytecode = _bytecode$Z;
PermissionLib__factory.abi = _abi$1l;
var _abi$1k = [
  {
    inputs: [],
    name: "AnyAddressDisallowedForWhoAndWhere",
    type: "error"
  },
  {
    inputs: [],
    name: "ConditionNotPresentForAnyAddress",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "currentCondition",
        type: "address"
      },
      {
        internalType: "address",
        name: "newCondition",
        type: "address"
      }
    ],
    name: "PermissionAlreadyGrantedForDifferentCondition",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionsForAnyAddressDisallowed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IPermissionCondition",
        name: "condition",
        type: "address"
      }
    ],
    name: "Granted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      }
    ],
    name: "Revoked",
    type: "event"
  },
  {
    inputs: [],
    name: "ROOT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "_items",
        type: "tuple[]"
      }
    ],
    name: "applyMultiTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.SingleTargetPermission[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "applySingleTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "grant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "contract IPermissionCondition",
        name: "_condition",
        type: "address"
      }
    ],
    name: "grantWithCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "revoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var PermissionManager__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1k);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1k, signerOrProvider);
  }
};
PermissionManager__factory.abi = _abi$1k;
var index$M = Object.freeze({
  __proto__: null,
  IPermissionCondition__factory,
  PermissionLib__factory,
  PermissionManager__factory
});
var _abi$1j = [
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var DaoAuthorizable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1j);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1j, signerOrProvider);
  }
};
DaoAuthorizable__factory.abi = _abi$1j;
var _abi$1i = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var DaoAuthorizableUpgradeable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1i);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1i, signerOrProvider);
  }
};
DaoAuthorizableUpgradeable__factory.abi = _abi$1i;
var index$L = Object.freeze({
  __proto__: null,
  DaoAuthorizable__factory,
  DaoAuthorizableUpgradeable__factory
});
var _abi$1h = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "definingContract",
        type: "address"
      }
    ],
    name: "MembershipContractAnnounced",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IMembership__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1h);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1h, signerOrProvider);
  }
};
IMembership__factory.abi = _abi$1h;
var index$K = Object.freeze({
  __proto__: null,
  IMembership__factory
});
var _abi$1g = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IProposal__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1g);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1g, signerOrProvider);
  }
};
IProposal__factory.abi = _abi$1g;
var _abi$1f = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var Proposal__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1f);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1f, signerOrProvider);
  }
};
Proposal__factory.abi = _abi$1f;
var _abi$1e = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var ProposalUpgradeable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1e);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1e, signerOrProvider);
  }
};
ProposalUpgradeable__factory.abi = _abi$1e;
var index$J = Object.freeze({
  __proto__: null,
  IProposal__factory,
  Proposal__factory,
  ProposalUpgradeable__factory
});
var _abi$1d = [
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IPlugin__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1d);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1d, signerOrProvider);
  }
};
IPlugin__factory.abi = _abi$1d;
var _abi$1c = [
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var Plugin__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1c);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1c, signerOrProvider);
  }
};
Plugin__factory.abi = _abi$1c;
var _abi$1b = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var PluginCloneable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1b);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1b, signerOrProvider);
  }
};
PluginCloneable__factory.abi = _abi$1b;
var _abi$1a = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var PluginUUPSUpgradeable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1a);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1a, signerOrProvider);
  }
};
PluginUUPSUpgradeable__factory.abi = _abi$1a;
var index$I = Object.freeze({
  __proto__: null,
  daoAuthorizable: index$L,
  membership: index$K,
  proposal: index$J,
  IPlugin__factory,
  Plugin__factory,
  PluginCloneable__factory,
  PluginUUPSUpgradeable__factory
});
var _abi$19 = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "UnkownCallback",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "sig",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "CallbackReceived",
    type: "event"
  }
];
var CallbackHandler__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$19);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$19, signerOrProvider);
  }
};
CallbackHandler__factory.abi = _abi$19;
var index$H = Object.freeze({
  __proto__: null,
  CallbackHandler__factory
});
var index$G = Object.freeze({
  __proto__: null,
  dao: index$N,
  permission: index$M,
  plugin: index$I,
  utils: index$H
});
var _abi$18 = [
  {
    inputs: [
      {
        internalType: "contract DAORegistry",
        name: "_registry",
        type: "address"
      },
      {
        internalType: "contract PluginSetupProcessor",
        name: "_pluginSetupProcessor",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "NoPluginProvided",
    type: "error"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "trustedForwarder",
            type: "address"
          },
          {
            internalType: "string",
            name: "daoURI",
            type: "string"
          },
          {
            internalType: "string",
            name: "subdomain",
            type: "string"
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes"
          }
        ],
        internalType: "struct DAOFactory.DAOSettings",
        name: "_daoSettings",
        type: "tuple"
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct DAOFactory.PluginSettings[]",
        name: "_pluginSettings",
        type: "tuple[]"
      }
    ],
    name: "createDao",
    outputs: [
      {
        internalType: "contract DAO",
        name: "createdDao",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "daoBase",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "daoRegistry",
    outputs: [
      {
        internalType: "contract DAORegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginSetupProcessor",
    outputs: [
      {
        internalType: "contract PluginSetupProcessor",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$Y = "0x60e06040523480156200001157600080fd5b5060405162005721380380620057218339810160408190526200003491620000af565b6001600160a01b0380831660a052811660c052604051620000559062000088565b604051809103906000f08015801562000072573d6000803e3d6000fd5b506001600160a01b031660805250620000ee9050565b6136cd806200205483390190565b6001600160a01b0381168114620000ac57600080fd5b50565b60008060408385031215620000c357600080fd5b8251620000d08162000096565b6020840151909250620000e38162000096565b809150509250929050565b60805160a05160c051611efa6200015a6000396000818160a10152818161024d0152818161030a015281816103a60152818161042c015281816105a0015281816106da015261075b015260008181605d015261015501526000818160e0015261084a0152611efa6000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80632a2b6ba01462000057578063a9445d9b146200009b578063b556883814620000c3578063d9f8bd2314620000da575b600080fd5b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b6200007f620000d436600462000e6a565b62000102565b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b60008181036200013e576040517f8aec24df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001498462000842565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ede4973982336200018b604089018962000f13565b6040518563ffffffff1660e01b8152600401620001ac949392919062000fad565b600060405180830381600087803b158015620001c757600080fd5b505af1158015620001dc573d6000803e3d6000fd5b505050506000816001600160a01b03166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000247919062000fe6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663747e5ec16040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002d0919062000fe6565b6040517fd68bad2c0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483018190527f000000000000000000000000000000000000000000000000000000000000000090911660248301526044820185905291925063d68bad2c90606401600060405180830381600087803b1580156200035f57600080fd5b505af115801562000374573d6000803e3d6000fd5b50506040517fd68bad2c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152604482018590528616925063d68bad2c9150606401600060405180830381600087803b1580156200040257600080fd5b505af115801562000417573d6000803e3d6000fd5b5050505060005b84811015620006ad576000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633c8c01d18760405180604001604052808c8c898181106200047a576200047a62001000565b90506020028101906200048e919062001016565b620004a090368190038101906200110a565b81526020018c8c89818110620004ba57620004ba62001000565b9050602002810190620004ce919062001016565b620004de90606081019062000f13565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815262000550929190600401620011dd565b6000604051808303816000875af115801562000570573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200059a919081019062001359565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe6c34748760405180608001604052808c8c89818110620005ee57620005ee62001000565b905060200281019062000602919062001016565b6200061490368190038101906200110a565b8152602001866001600160a01b03168152602001856020015181526020016200064186600001516200091a565b8152506040518363ffffffff1660e01b81526004016200066392919062001493565b600060405180830381600087803b1580156200067e57600080fd5b505af115801562000693573d6000803e3d6000fd5b50505050505080620006a59062001583565b90506200041e565b50620006b9836200094c565b604051633658153160e21b81526001600160a01b03848116600483018190527f00000000000000000000000000000000000000000000000000000000000000009091166024830152604482018490529063d96054c490606401600060405180830381600087803b1580156200072d57600080fd5b505af115801562000742573d6000803e3d6000fd5b5050604051633658153160e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152604482018590528616925063d96054c49150606401600060405180830381600087803b158015620007b757600080fd5b505af1158015620007cc573d6000803e3d6000fd5b5050604051633658153160e21b81526001600160a01b0386166004820181905230602483015260448201869052925063d96054c49150606401600060405180830381600087803b1580156200082057600080fd5b505af115801562000835573d6000803e3d6000fd5b5050505050509392505050565b60006200087f7f00000000000000000000000000000000000000000000000000000000000000006040518060200160405280600081525062000e18565b90506001600160a01b03811663eafb8b066200089f606085018562000f13565b30620008af6020880188620015ac565b620008be602089018962000f13565b6040518763ffffffff1660e01b8152600401620008e196959493929190620015d3565b600060405180830381600087803b158015620008fc57600080fd5b505af115801562000911573d6000803e3d6000fd5b50505050919050565b6000816040516020016200092f919062001622565b604051602081830303815290604052805190602001209050919050565b60408051600680825260e08201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181620009645790505060408051606081019091529091508060008152602001836001600160a01b03168152602001836001600160a01b03166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa158015620009f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1c919062000fe6565b8152508160008151811062000a355762000a3562001000565b602090810291909101015260408051606081019091528060008152602001836001600160a01b03168152602001836001600160a01b03166324b4d73f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aa1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ac7919062000fe6565b8152508160018151811062000ae05762000ae062001000565b602090810291909101015260408051606081019091528060008152602001836001600160a01b03168152602001836001600160a01b031663e2e355636040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b4c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b72919062000fe6565b8152508160028151811062000b8b5762000b8b62001000565b602090810291909101015260408051606081019091528060008152602001836001600160a01b03168152602001836001600160a01b031663829331a16040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000bf7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1d919062000fe6565b8152508160038151811062000c365762000c3662001000565b602090810291909101015260408051606081019091528060008152602001836001600160a01b03168152602001836001600160a01b031663e306bee76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ca2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cc8919062000fe6565b8152508160048151811062000ce15762000ce162001000565b602090810291909101015260408051606081019091528060008152602001836001600160a01b03168152602001836001600160a01b03166326875b1f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d73919062000fe6565b8152508160058151811062000d8c5762000d8c62001000565b60209081029190910101526040517f22844d040000000000000000000000000000000000000000000000000000000081526001600160a01b038316906322844d049062000de0908590859060040162001671565b600060405180830381600087803b15801562000dfb57600080fd5b505af115801562000e10573d6000803e3d6000fd5b505050505050565b6000828260405162000e2a9062000e5c565b62000e37929190620016eb565b604051809103906000f08015801562000e54573d6000803e3d6000fd5b509392505050565b6107ad806200171883390190565b60008060006040848603121562000e8057600080fd5b833567ffffffffffffffff8082111562000e9957600080fd5b908501906080828803121562000eae57600080fd5b9093506020850135908082111562000ec557600080fd5b818601915086601f83011262000eda57600080fd5b81358181111562000eea57600080fd5b8760208260051b850101111562000f0057600080fd5b6020830194508093505050509250925092565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811262000f4957600080fd5b83018035915067ffffffffffffffff82111562000f6557600080fd5b60200191503681900382131562000f7b57600080fd5b9250929050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b0380871683528086166020840152506060604083015262000fdc60608301848662000f82565b9695505050505050565b60006020828403121562000ff957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126200104b57600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171562001091576200109162001055565b60405290565b60405160a0810167ffffffffffffffff8111828210171562001091576200109162001055565b604051601f8201601f1916810167ffffffffffffffff81118282101715620010e957620010e962001055565b604052919050565b6001600160a01b03811681146200110757600080fd5b50565b600081830360608112156200111e57600080fd5b620011286200106b565b60408212156200113757600080fd5b620011416200106b565b9150833560ff811681146200115557600080fd5b8252602084013561ffff811681146200116d57600080fd5b60208301529081526040830135906200118682620010f1565b60208101919091529392505050565b6000815180845260005b81811015620011bd576020818501810151868301820152016200119f565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038316815260406020820152620012246040820183518051805160ff16835260209081015161ffff168184015201516001600160a01b0316604090910152565b60006020830151608060a08401526200124160c084018262001195565b95945050505050565b600067ffffffffffffffff82111562001267576200126762001055565b5060051b60200190565b600082601f8301126200128357600080fd5b815160206200129c62001296836200124a565b620010bd565b82815260a09283028501820192828201919087851115620012bc57600080fd5b8387015b858110156200134c5781818a031215620012da5760008081fd5b620012e462001097565b815160038110620012f55760008081fd5b8152818601516200130681620010f1565b818701526040828101516200131b81620010f1565b908201526060828101516200133081620010f1565b90820152608082810151908201528452928401928101620012c0565b5090979650505050505050565b600080604083850312156200136d57600080fd5b82516200137a81620010f1565b8092505060208084015167ffffffffffffffff808211156200139b57600080fd5b9085019060408288031215620013b057600080fd5b620013ba6200106b565b825182811115620013ca57600080fd5b8301601f81018913620013dc57600080fd5b8051620013ed62001296826200124a565b81815260059190911b8201860190868101908b8311156200140d57600080fd5b928701925b82841015620014385783516200142881620010f1565b8252928701929087019062001412565b845250505082840151828111156200144f57600080fd5b6200145d8982860162001271565b8583015250809450505050509250929050565b600381106200148f57634e487b7160e01b600052602160045260246000fd5b9052565b600060406001600160a01b038086168452602082818601526101008501620014e384870188518051805160ff16835260209081015161ffff168184015201516001600160a01b0316604090910152565b86820151831660a0878101919091528488015160c080890152805192839052830191600091906101208901905b80841015620015675784516200152883825162001470565b80870151881683880152888101518816898401526060808201518916908401526080908101519083015293850193600193909301929082019062001510565b5060608a015160e08a0152809750505050505050509392505050565b60006000198203620015a557634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215620015bf57600080fd5b8135620015cc81620010f1565b9392505050565b608081526000620015e960808301888a62000f82565b6001600160a01b0387811660208501528616604084015282810360608401526200161581858762000f82565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620016655783516001600160a01b0316835292840192918401916001016200163e565b50909695505050505050565b600060408083016001600160a01b0380871685526020838187015282875180855260609450848801915082890160005b82811015620016db578151620016b985825162001470565b80860151871685870152880151888501529286019290840190600101620016a1565b50919a9950505050505050505050565b6001600160a01b03831681526040602082015260006200170f604083018462001195565b94935050505056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220339cf2da36949e5f4141512882dca050bcaed5f4af62600a057aabcc91448b6064736f6c6343000811003360a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516135ad6200012060003960008181610a6c01528181610b0201528181610c9701528181610d2d0152610e2801526135ad6000f3fe6080604052600436106101d15760003560e01c8063829331a1116100f7578063d96054c411610095578063e978afe511610064578063e978afe5146106b2578063eafb8b06146106d2578063ee57e36f146106f2578063fdef91061461071257610210565b8063d96054c41461060a578063da7422281461062a578063e2e355631461064a578063e306bee71461067e57610210565b8063c71bf324116100d1578063c71bf3241461057d578063c9dbc2a4146105ab578063ce1b815f146105cb578063d68bad2c146105ea57610210565b8063829331a114610516578063bfe07da61461054a578063c4a501451461055d57610210565b80632675fdd01161016f5780633e2ab0d91161013e5780633e2ab0d9146104ac5780634f1ef286146104cc57806352d1902d146104df5780637034731b146104f457610210565b80632675fdd0146103ff57806326875b1f1461041f5780633659cfe614610453578063388da9341461047357610210565b80631080f99b116101ab5780631080f99b146103505780631626ba7e1461037257806322844d04146103ab57806324b4d73f146103cb57610210565b806301ffc9a7146102a55780630729d054146102da57806309e56b141461031c57610210565b3661021057604080513381523460208201527f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f3910160405180910390a1005b34801561021c57600080fd5b50600036606060006102706000356001600160e01b03191685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061073292505050565b604080516001600160e01b03198316602082015291925001604051602081830303815290604052915050915050805190602001f35b3480156102b157600080fd5b506102c56102c036600461293e565b610809565b60405190151581526020015b60405180910390f35b3480156102e657600080fd5b5061030e7fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b6040519081526020016102d1565b34801561032857600080fd5b5061030e7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b34801561035c57600080fd5b5061037061036b3660046129a4565b61085e565b005b34801561037e57600080fd5b5061039261038d366004612a89565b610897565b6040516001600160e01b031990911681526020016102d1565b3480156103b757600080fd5b506103706103c6366004612ae5565b610947565b3480156103d757600080fd5b5061030e7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b34801561040b57600080fd5b506102c561041a366004612b6d565b610a17565b34801561042b57600080fd5b5061030e7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b34801561045f57600080fd5b5061037061046e366004612bd9565b610a62565b34801561047f57600080fd5b5061012d54610494906001600160a01b031681565b6040516001600160a01b0390911681526020016102d1565b3480156104b857600080fd5b506103706104c7366004612bd9565b610bff565b6103706104da366004612bf6565b610c8d565b3480156104eb57600080fd5b5061030e610e1b565b34801561050057600080fd5b50610509610ee0565b6040516102d19190612c80565b34801561052257600080fd5b5061030e7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b610370610558366004612c93565b610f73565b34801561056957600080fd5b50610370610578366004612cef565b6110ad565b34801561058957600080fd5b5061059d610598366004612d3a565b611160565b6040516102d1929190612e14565b3480156105b757600080fd5b506103706105c6366004612e36565b611439565b3480156105d757600080fd5b5061012e546001600160a01b0316610494565b3480156105f657600080fd5b50610370610605366004612e89565b61146f565b34801561061657600080fd5b50610370610625366004612e89565b6114aa565b34801561063657600080fd5b50610370610645366004612bd9565b6114df565b34801561065657600080fd5b5061030e7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837281565b34801561068a57600080fd5b5061030e7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b3480156106be57600080fd5b506103706106cd366004612eca565b611512565b3480156106de57600080fd5b506103706106ed366004612f3f565b611619565b3480156106fe57600080fd5b5061037061070d3660046129a4565b6117e0565b34801561071e57600080fd5b506102c561072d366004612b6d565b611814565b6001600160e01b0319808316600090815260fb6020526040812054909160e09190911b9081166107a7576040517f54bdcc3e0000000000000000000000000000000000000000000000000000000081526001600160e01b03198086166004830152821660248201526044015b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516107f8929190612fd8565b60405180910390a290505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108035750506001600160e01b03191660009081526033602052604090205460ff1690565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61088881611822565b61089283836118aa565b505050565b61012d546000906001600160a01b03166108b357506000610803565b61012d546040517f1626ba7e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631626ba7e906108ff9086908690600401612ffa565b602060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190613013565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361097181611822565b60005b82811015610a1057600084848381811061099057610990613030565b9050606002018036038101906109a6919061305a565b90506000815160028111156109bd576109bd6130c3565b036109da576109d586826020015183604001516118ea565b610a07565b6001815160028111156109ef576109ef6130c3565b03610a0757610a0786826020015183604001516118f7565b50600101610974565b5050505050565b6000610a25858585856119fe565b80610a3e5750610a3e856001600160a01b0385856119fe565b80610a575750610a576001600160a01b038585856119fe565b90505b949350505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b005760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610bd75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610be081611b72565b60408051600080825260208201909252610bfc91839190611b9c565b50565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e778088372610c2981611822565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e906020015b60405180910390a15050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d2b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e025760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610e0b82611b72565b610e1782826001611b9c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ebb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606061012f8054610ef0906130d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1c906130d9565b8015610f695780601f10610f3e57610100808354040283529160200191610f69565b820191906000526020600020905b815481529060010190602001808311610f4c57829003601f168201915b5050505050905090565b82600003610fad576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841661100257823414610ffd576040517f1abd56100000000000000000000000000000000000000000000000000000000081526004810184905234602482015260440161079e565b611058565b3415611043576040517f1abd56100000000000000000000000000000000000000000000000000000000081526000600482015234602482015260440161079e565b6110586001600160a01b038516333086611d3c565b836001600160a01b0316336001600160a01b03167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f7685858560405161109f9392919061313e565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc6110d781611822565b6110e084611dc4565b6001600160e01b03198316600090815260fb60205260409020805463ffffffff191660e084901c179055604080516001600160e01b0319808716825280861660208301528416918101919091527ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b99060600160405180910390a150505050565b606060007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61118e81611822565b6101008511156111ca576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8467ffffffffffffffff8111156111e3576111e36129e6565b60405190808252806020026020018201604052801561121657816020015b60608152602001906001900390816112015790505b50925060008060005b878110156113e3575a92506000808a8a8481811061123f5761123f613030565b90506020028101906112519190613158565b61125f906020810190612bd9565b6001600160a01b03168b8b8581811061127a5761127a613030565b905060200281019061128c9190613158565b602001358c8c868181106112a2576112a2613030565b90506020028101906112b49190613158565b6112c2906040810190613178565b6040516112d09291906131bf565b60006040518083038185875af1925050503d806000811461130d576040519150601f19603f3d011682016040523d82523d6000602084013e611312565b606091505b50915091505a9350600160ff84161b89166113665781611361576040517fa6a7dbbd0000000000000000000000000000000000000000000000000000000081526004810184905260240161079e565b6113bb565b816113bb576113766040866131cf565b8410156113af576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160ff84161b871896505b808884815181106113ce576113ce613030565b6020908102919091010152505060010161121f565b50336001600160a01b03167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed78a8a8a888a6040516114259594939291906131f1565b60405180910390a250505094509492505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361146381611822565b610a1085858585611e43565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361149981611822565b6114a48484846118ea565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336114d481611822565b6114a48484846118f7565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c61150981611822565b610e1782612101565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361153c81611822565b60005b828110156114a457600084848381811061155b5761155b613030565b905060a002018036038101906115719190613316565b9050600081516002811115611588576115886130c3565b036115a9576115a48160200151826040015183608001516118ea565b611610565b6001815160028111156115be576115be6130c3565b036115da576115a48160200151826040015183608001516118f7565b6002815160028111156115ef576115ef6130c3565b03611610576116108160200151826040015183608001518460600151611e43565b5060010161153f565b600054610100900460ff16158080156116395750600054600160ff909116105b806116535750303b158015611653575060005460ff166001145b6116c55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079e565b6000805460ff1916600117905580156116e8576000805461ff0019166101001790555b6117117f9385547e00000000000000000000000000000000000000000000000000000000611dc4565b61173a7f1626ba7e00000000000000000000000000000000000000000000000000000000611dc4565b6117637f7034731b00000000000000000000000000000000000000000000000000000000611dc4565b61176b612163565b6117758787612270565b61177e84612101565b61178883836118aa565b611791856122a1565b80156117d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61180a81611822565b6108928383612270565b6000610a5785858585610a17565b6118653033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1792505050565b610bfc576040517f1e09743f0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810182905260640161079e565b61012f6118b88284836133f3565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051610c819291906134b3565b6108928383836002611e43565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e83015260528083018590528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316156114a457600081815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b60008060c96000611a838888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316905080611aae576000915050610a5a565b6001196001600160a01b03821601611aca576001915050610a5a565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd090611b159089908990899089906004016134c7565b602060405180830381865afa925050508015611b4e575060408051601f3d908101601f19168201909252611b4b91810190613503565b60015b15611b66578015611b6457600192505050610a5a565b505b50600095945050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc610e1781611822565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bcf5761089283612327565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c29575060408051601f3d908101601f19168201909252611c2691810190613525565b60015b611c9b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611d305760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161079e565b506108928383836123f2565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114a4908590612417565b6001600160e01b03198082169003611e1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161079e565b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b03848116148015611e6357506001600160a01b03838116145b15611e9a576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611eb957506001600160a01b03838116145b15611f73576000611ec9836124fc565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611ef65750805b15611f2d576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611f71576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e83015260528083018690528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316828161208c57600083815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46117d7565b806001600160a01b0316826001600160a01b0316146117d7576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a40161079e565b61012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea29060200160405180910390a150565b61218c7f150b7a0200000000000000000000000000000000000000000000000000000000611dc4565b6121b57f4e2312e000000000000000000000000000000000000000000000000000000000611dc4565b60fb6020527f5a08f87af82de422c581ce019b2e54a9c17372e9cba575ae0470ba2482d63686805463ffffffff1990811663150b7a02179091557fe1cfe341950d56d8854f782066100d5ae1d5930cdb4949b973e554a343efc6c38054821663f23a6e611790557fbc197c81000000000000000000000000000000000000000000000000000000006000527f08ba3617671847c1c169da222a5bc01cfdefcc3c4f1e5525214a474479c89123805490911663bc197c81179055565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed8282604051610c819291906134b3565b600054610100900460ff1661231e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079e565b610bfc816125f5565b6001600160a01b0381163b6123a45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6123fb83612620565b6000825111806124085750805b15610892576114a48383612660565b600061246c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661276b9092919063ffffffff16565b805190915015610892578080602001905181019061248a9190613503565b6108925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161079e565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d82148061254b57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b8061257557507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b8061259f57507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b806125c957507f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837282145b806108035750507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc1490565b610bfc30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336118ea565b61262981612327565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161079e565b600080846001600160a01b0316846040516126fa919061353e565b600060405180830381855af49150503d8060008114612735576040519150601f19603f3d011682016040523d82523d6000602084013e61273a565b606091505b509150915061276282826040518060600160405280602781526020016135516027913961277a565b95945050505050565b6060610a5a8484600085612793565b60608315612789575081610940565b6109408383612885565b60608247101561280b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161079e565b600080866001600160a01b03168587604051612827919061353e565b60006040518083038185875af1925050503d8060008114612864576040519150601f19603f3d011682016040523d82523d6000602084013e612869565b606091505b509150915061287a878383876128af565b979650505050505050565b8151156128955781518083602001fd5b8060405162461bcd60e51b815260040161079e9190612c80565b6060831561291e578251600003612917576001600160a01b0385163b6129175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079e565b5081610a5a565b610a5a8383612885565b6001600160e01b031981168114610bfc57600080fd5b60006020828403121561295057600080fd5b813561094081612928565b60008083601f84011261296d57600080fd5b50813567ffffffffffffffff81111561298557600080fd5b60208301915083602082850101111561299d57600080fd5b9250929050565b600080602083850312156129b757600080fd5b823567ffffffffffffffff8111156129ce57600080fd5b6129da8582860161295b565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612a0d57600080fd5b813567ffffffffffffffff80821115612a2857612a286129e6565b604051601f8301601f19908116603f01168101908282118183101715612a5057612a506129e6565b81604052838152866020858801011115612a6957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612a9c57600080fd5b82359150602083013567ffffffffffffffff811115612aba57600080fd5b612ac6858286016129fc565b9150509250929050565b6001600160a01b0381168114610bfc57600080fd5b600080600060408486031215612afa57600080fd5b8335612b0581612ad0565b9250602084013567ffffffffffffffff80821115612b2257600080fd5b818601915086601f830112612b3657600080fd5b813581811115612b4557600080fd5b876020606083028501011115612b5a57600080fd5b6020830194508093505050509250925092565b60008060008060808587031215612b8357600080fd5b8435612b8e81612ad0565b93506020850135612b9e81612ad0565b925060408501359150606085013567ffffffffffffffff811115612bc157600080fd5b612bcd878288016129fc565b91505092959194509250565b600060208284031215612beb57600080fd5b813561094081612ad0565b60008060408385031215612c0957600080fd5b8235612c1481612ad0565b9150602083013567ffffffffffffffff811115612aba57600080fd5b60005b83811015612c4b578181015183820152602001612c33565b50506000910152565b60008151808452612c6c816020860160208601612c30565b601f01601f19169290920160200192915050565b6020815260006109406020830184612c54565b60008060008060608587031215612ca957600080fd5b8435612cb481612ad0565b935060208501359250604085013567ffffffffffffffff811115612cd757600080fd5b612ce38782880161295b565b95989497509550505050565b600080600060608486031215612d0457600080fd5b8335612d0f81612928565b92506020840135612d1f81612928565b91506040840135612d2f81612928565b809150509250925092565b60008060008060608587031215612d5057600080fd5b84359350602085013567ffffffffffffffff80821115612d6f57600080fd5b818701915087601f830112612d8357600080fd5b813581811115612d9257600080fd5b8860208260051b8501011115612da757600080fd5b95986020929092019750949560400135945092505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612e07578284038952612df5848351612c54565b98850198935090840190600101612ddd565b5091979650505050505050565b604081526000612e276040830185612dbf565b90508260208301529392505050565b60008060008060808587031215612e4c57600080fd5b8435612e5781612ad0565b93506020850135612e6781612ad0565b9250604085013591506060850135612e7e81612ad0565b939692955090935050565b600080600060608486031215612e9e57600080fd5b8335612ea981612ad0565b92506020840135612eb981612ad0565b929592945050506040919091013590565b60008060208385031215612edd57600080fd5b823567ffffffffffffffff80821115612ef557600080fd5b818501915085601f830112612f0957600080fd5b813581811115612f1857600080fd5b86602060a083028501011115612f2d57600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215612f5857600080fd5b863567ffffffffffffffff80821115612f7057600080fd5b612f7c8a838b0161295b565b909850965060208901359150612f9182612ad0565b909450604088013590612fa382612ad0565b90935060608801359080821115612fb957600080fd5b50612fc689828a0161295b565b979a9699509497509295939492505050565b6001600160a01b0383168152604060208201526000610a5a6040830184612c54565b828152604060208201526000610a5a6040830184612c54565b60006020828403121561302557600080fd5b815161094081612928565b634e487b7160e01b600052603260045260246000fd5b80356003811061305557600080fd5b919050565b60006060828403121561306c57600080fd5b6040516060810181811067ffffffffffffffff8211171561308f5761308f6129e6565b60405261309b83613046565b815260208301356130ab81612ad0565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600181811c908216806130ed57607f821691505b60208210810361310d57634e487b7160e01b600052602260045260246000fd5b50919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b838152604060208201526000610a57604083018486613113565b60008235605e1983360301811261316e57600080fd5b9190910192915050565b6000808335601e1984360301811261318f57600080fd5b83018035915067ffffffffffffffff8211156131aa57600080fd5b60200191503681900382131561299d57600080fd5b8183823760009101908152919050565b6000826131ec57634e487b7160e01b600052601260045260246000fd5b500490565b60006080820187835260206080818501528187835260a08501905060a08860051b86010192508860005b898110156132ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608786030183528135605e198c360301811261325e57600080fd5b8b016060813561326d81612ad0565b6001600160a01b03168752818601358688015260408083013536849003601e1901811261329957600080fd5b90920186810192903567ffffffffffffffff8111156132b757600080fd5b8036038413156132c657600080fd5b82828a01526132d8838a018286613113565b985050509385019350509083019060010161321b565b50505050846040840152828103606084015261330a8185612dbf565b98975050505050505050565b600060a0828403121561332857600080fd5b60405160a0810181811067ffffffffffffffff8211171561334b5761334b6129e6565b60405261335783613046565b8152602083013561336781612ad0565b6020820152604083013561337a81612ad0565b6040820152606083013561338d81612ad0565b60608201526080928301359281019290925250919050565b601f82111561089257600081815260208120601f850160051c810160208610156133cc5750805b601f850160051c820191505b818110156133eb578281556001016133d8565b505050505050565b67ffffffffffffffff83111561340b5761340b6129e6565b61341f8361341983546130d9565b836133a5565b6000601f841160018114613453576000851561343b5750838201355b600019600387901b1c1916600186901b178355610a10565b600083815260209020601f19861690835b828110156134845786850135825560209485019460019092019101613464565b50868210156134a15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602081526000610a5a602083018486613113565b60006001600160a01b038087168352808616602084015250836040830152608060608301526134f96080830184612c54565b9695505050505050565b60006020828403121561351557600080fd5b8151801515811461094057600080fd5b60006020828403121561353757600080fd5b5051919050565b6000825161316e818460208701612c3056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200c168e950345d0d51e5072f0d6741c8fffb903a88e5f4d9ae41a3c116b51090b64736f6c63430008110033";
var isSuperArgs$Y = (xs) => xs.length > 1;
var DAOFactory__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$Y(args)) {
      super(...args);
    } else {
      super(_abi$18, _bytecode$Y, args[0]);
    }
  }
  deploy(_registry, _pluginSetupProcessor, overrides) {
    return super.deploy(_registry, _pluginSetupProcessor, overrides || {});
  }
  getDeployTransaction(_registry, _pluginSetupProcessor, overrides) {
    return super.getDeployTransaction(_registry, _pluginSetupProcessor, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$18);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$18, signerOrProvider);
  }
};
DAOFactory__factory.bytecode = _bytecode$Y;
DAOFactory__factory.abi = _abi$18;
var _abi$17 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractAlreadyRegistered",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractERC165SupportInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractInterfaceInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "subdomain",
        type: "string"
      }
    ],
    name: "InvalidDaoSubdomain",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "string",
        name: "subdomain",
        type: "string"
      }
    ],
    name: "DAORegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "REGISTER_DAO_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_REGISTRY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "entries",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_managingDao",
        type: "address"
      },
      {
        internalType: "contract ENSSubdomainRegistrar",
        name: "_subdomainRegistrar",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        internalType: "string",
        name: "subdomain",
        type: "string"
      }
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "subdomainRegistrar",
    outputs: [
      {
        internalType: "contract ENSSubdomainRegistrar",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "targetInterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$X = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516116dd610119600039600081816102b00152818161034b015281816105be01528181610654015261074f01526116dd6000f3fe6080604052600436106100bb5760003560e01c80634f1ef28611610074578063a2298b4b1161004e578063a2298b4b14610212578063ede4973914610246578063f29ee1251461026657600080fd5b80634f1ef286146101a857806352d1902d146101bb57806374574eb7146101de57600080fd5b80634162169f116100a55780634162169f1461011f57806344162ef81461013d578063485cc9551461018857600080fd5b8062077393146100c05780633659cfe6146100fd575b600080fd5b3480156100cc57600080fd5b5060fb546100e0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010957600080fd5b5061011d61011836600461132a565b6102a6565b005b34801561012b57600080fd5b506097546001600160a01b03166100e0565b34801561014957600080fd5b5060c9546101579060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b34801561019457600080fd5b5061011d6101a3366004611347565b610448565b61011d6101b6366004611396565b6105b4565b3480156101c757600080fd5b506101d0610742565b6040519081526020016100f4565b3480156101ea57600080fd5b506101d07f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561021e57600080fd5b506101d07fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc5485621581565b34801561025257600080fd5b5061011d61026136600461145a565b610807565b34801561027257600080fd5b5061029661028136600461132a565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100f4565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103495760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103a47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b61042981610988565b60408051600080825260208201909252610445918391906109c1565b50565b600054610100900460ff16158080156104685750600054600160ff909116105b806104825750303b158015610482575060005460ff166001145b6104f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610340565b6000805460ff191660011790558015610517576000805461ff0019166101001790555b610541837f9385547e00000000000000000000000000000000000000000000000000000000610b61565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156105af576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106525760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610340565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106ad7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107295760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b61073282610988565b61073e828260016109c1565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e25760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610340565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc5485621590610845906001600160a01b031630335b84600036610c1c565b8461084f81610d0a565b82156109335761085f8484610de7565b6108995783836040517f3a5bf49b000000000000000000000000000000000000000000000000000000008152600401610340929190611517565b600084846040516108ab929190611533565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03858116602485015291935016906389bb414590604401600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b50505050505b846001600160a01b0316816001600160a01b03167fbc0b11fe649bb4d67c7fb40936163e5423f45c3ae83fbd8f8f8c75e1a3fa97af8686604051610978929190611517565b60405180910390a3505050505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa729329061073e906001600160a01b0316303361083c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109f4576105af83610e94565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a4e575060408051601f3d908101601f19168201909252610a4b91810190611543565b60015b610ac05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b555760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610340565b506105af838383610f5f565b600054610100900460ff16610bde5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b610be782610f8a565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c69908890889088908890889060040161155c565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa919061158f565b610d02576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610340565b505050505050565b6001600160a01b038116600090815260ca602052604090205460ff1615610d68576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b60c954610d82906001600160a01b0383169060e01b611036565b610dc3576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6000828280835b81811015610e85576000848483818110610e0a57610e0a6115b1565b919091013560f81c915050606081118015610e285750607b8160ff16105b15610e335750610e73565b602f8160ff16118015610e495750603a8160ff16105b15610e545750610e73565b8060ff16602d03610e655750610e73565b600095505050505050610e8e565b80610e7d816115c7565b915050610dee565b50600193505050505b92915050565b6001600160a01b0381163b610f115760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f6883611059565b600082511180610f755750805b156105af57610f848383611099565b50505050565b600054610100900460ff166110075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000611041836111a4565b801561105257506110528383611208565b9392505050565b61106281610e94565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610340565b600080846001600160a01b0316846040516111339190611631565b600060405180830381855af49150503d806000811461116e576040519150601f19603f3d011682016040523d82523d6000602084013e611173565b606091505b509150915061119b8282604051806060016040528060278152602001611681602791396112d7565b95945050505050565b60006111d0827f01ffc9a700000000000000000000000000000000000000000000000000000000611208565b8015610e8e5750611201827fffffffff00000000000000000000000000000000000000000000000000000000611208565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156112c0575060208210155b80156112cc5750600081115b979650505050505050565b606083156112e6575081611052565b61105283838151156112fb5781518083602001fd5b8060405162461bcd60e51b8152600401610340919061164d565b6001600160a01b038116811461044557600080fd5b60006020828403121561133c57600080fd5b813561105281611315565b6000806040838503121561135a57600080fd5b823561136581611315565b9150602083013561137581611315565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156113a957600080fd5b82356113b481611315565b9150602083013567ffffffffffffffff808211156113d157600080fd5b818501915085601f8301126113e557600080fd5b8135818111156113f7576113f7611380565b604051601f8201601f19908116603f0116810190838211818310171561141f5761141f611380565b8160405282815288602084870101111561143857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561147057600080fd5b843561147b81611315565b9350602085013561148b81611315565b9250604085013567ffffffffffffffff808211156114a857600080fd5b818701915087601f8301126114bc57600080fd5b8135818111156114cb57600080fd5b8860208285010111156114dd57600080fd5b95989497505060200194505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60208152600061152b6020830184866114ec565b949350505050565b8183823760009101908152919050565b60006020828403121561155557600080fd5b5051919050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526112cc6080830184866114ec565b6000602082840312156115a157600080fd5b8151801515811461105257600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361160657634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015611628578181015183820152602001611610565b50506000910152565b6000825161164381846020870161160d565b9190910192915050565b602081526000825180602084015261166c81604085016020870161160d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f8f1fcdb9376fb68b143dcf16590588d570be0cc533ab59ab9dee674acf1e6c964736f6c63430008110033";
var isSuperArgs$X = (xs) => xs.length > 1;
var DAORegistry__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$X(args)) {
      super(...args);
    } else {
      super(_abi$17, _bytecode$X, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$17);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$17, signerOrProvider);
  }
};
DAORegistry__factory.bytecode = _bytecode$X;
DAORegistry__factory.abi = _abi$17;
var index$F = Object.freeze({
  __proto__: null,
  DAOFactory__factory,
  DAORegistry__factory
});
var _abi$16 = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "_pluginSetupAddress",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_buildMetadata",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_releaseMetadata",
        type: "bytes"
      }
    ],
    name: "createVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      },
      {
        internalType: "bytes",
        name: "_releaseMetadata",
        type: "bytes"
      }
    ],
    name: "updateReleaseMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IPluginRepo__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$16);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$16, signerOrProvider);
  }
};
IPluginRepo__factory.abi = _abi$16;
var _abi$15 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "AnyAddressDisallowedForWhoAndWhere",
    type: "error"
  },
  {
    inputs: [],
    name: "ConditionNotPresentForAnyAddress",
    type: "error"
  },
  {
    inputs: [],
    name: "EmptyReleaseMetadata",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidPluginSetupInterface",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "latestRelease",
        type: "uint8"
      },
      {
        internalType: "uint8",
        name: "newRelease",
        type: "uint8"
      }
    ],
    name: "InvalidReleaseIncrement",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "currentCondition",
        type: "address"
      },
      {
        internalType: "address",
        name: "newCondition",
        type: "address"
      }
    ],
    name: "PermissionAlreadyGrantedForDifferentCondition",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionsForAnyAddressDisallowed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "release",
        type: "uint8"
      },
      {
        internalType: "uint16",
        name: "build",
        type: "uint16"
      },
      {
        internalType: "address",
        name: "pluginSetup",
        type: "address"
      }
    ],
    name: "PluginSetupAlreadyInPreviousRelease",
    type: "error"
  },
  {
    inputs: [],
    name: "ReleaseDoesNotExist",
    type: "error"
  },
  {
    inputs: [],
    name: "ReleaseZeroNotAllowed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "Unauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "versionHash",
        type: "bytes32"
      }
    ],
    name: "VersionHashDoesNotExist",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IPermissionCondition",
        name: "condition",
        type: "address"
      }
    ],
    name: "Granted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "release",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "releaseMetadata",
        type: "bytes"
      }
    ],
    name: "ReleaseMetadataUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      }
    ],
    name: "Revoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "release",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "build",
        type: "uint16"
      },
      {
        indexed: true,
        internalType: "address",
        name: "pluginSetup",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "buildMetadata",
        type: "bytes"
      }
    ],
    name: "VersionCreated",
    type: "event"
  },
  {
    inputs: [],
    name: "MAINTAINER_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "ROOT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_REPO_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "_items",
        type: "tuple[]"
      }
    ],
    name: "applyMultiTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.SingleTargetPermission[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "applySingleTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      }
    ],
    name: "buildCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "_pluginSetup",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_buildMetadata",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_releaseMetadata",
        type: "bytes"
      }
    ],
    name: "createVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pluginSetup",
        type: "address"
      }
    ],
    name: "getLatestVersion",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "tag",
            type: "tuple"
          },
          {
            internalType: "address",
            name: "pluginSetup",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "buildMetadata",
            type: "bytes"
          }
        ],
        internalType: "struct PluginRepo.Version",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      }
    ],
    name: "getLatestVersion",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "tag",
            type: "tuple"
          },
          {
            internalType: "address",
            name: "pluginSetup",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "buildMetadata",
            type: "bytes"
          }
        ],
        internalType: "struct PluginRepo.Version",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tagHash",
        type: "bytes32"
      }
    ],
    name: "getVersion",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "tag",
            type: "tuple"
          },
          {
            internalType: "address",
            name: "pluginSetup",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "buildMetadata",
            type: "bytes"
          }
        ],
        internalType: "struct PluginRepo.Version",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        internalType: "struct PluginRepo.Tag",
        name: "_tag",
        type: "tuple"
      }
    ],
    name: "getVersion",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "tag",
            type: "tuple"
          },
          {
            internalType: "address",
            name: "pluginSetup",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "buildMetadata",
            type: "bytes"
          }
        ],
        internalType: "struct PluginRepo.Version",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "grant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "contract IPermissionCondition",
        name: "_condition",
        type: "address"
      }
    ],
    name: "grantWithCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestRelease",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "revoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_release",
        type: "uint8"
      },
      {
        internalType: "bytes",
        name: "_releaseMetadata",
        type: "bytes"
      }
    ],
    name: "updateReleaseMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$W = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612bef62000120600039600081816107c70152818161086201528181610969015281816109ff0152610b440152612bef6000f3fe6080604052600436106101755760003560e01c80639af3e909116100cb578063d68bad2c1161007f578063e0589bd311610059578063e0589bd314610450578063e978afe514610470578063fc0544271461049057600080fd5b8063d68bad2c146103dc578063d96054c4146103fc578063df1d6c441461041c57600080fd5b8063c4d66de8116100b0578063c4d66de814610368578063c9dbc2a414610388578063cc98b8f5146103a857600080fd5b80639af3e90914610314578063afe5eb781461033457600080fd5b80633659cfe61161012d57806352d1902d1161010757806352d1902d146102b35780637be0ca5e146102c85780639aaf9f08146102f457600080fd5b80633659cfe6146102535780634f1ef2861461027357806350abe9101461028657600080fd5b806322844d041161015e57806322844d04146101f15780632675fdd01461021357806328375f671461023357600080fd5b806301ffc9a71461017a57806309e56b14146101af575b600080fd5b34801561018657600080fd5b5061019a6101953660046121c3565b6104b0565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506101e37f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020016101a6565b3480156101fd57600080fd5b5061021161020c36600461221a565b61057c565b005b34801561021f57600080fd5b5061019a61022e366004612345565b61064c565b34801561023f57600080fd5b5061021161024e366004612410565b610697565b34801561025f57600080fd5b5061021161026e366004612463565b6107bd565b610211610281366004612480565b61095f565b34801561029257600080fd5b506102a66102a1366004612463565b610aed565b6040516101a69190612520565b3480156102bf57600080fd5b506101e3610b37565b3480156102d457600080fd5b5060cc546102e29060ff1681565b60405160ff90911681526020016101a6565b34801561030057600080fd5b506102a661030f36600461256c565b610bfc565b34801561032057600080fd5b506102a661032f366004612585565b610d53565b34801561034057600080fd5b506101e37fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b34801561037457600080fd5b50610211610383366004612463565b610d99565b34801561039457600080fd5b506102116103a336600461259d565b610f10565b3480156103b457600080fd5b506101e37f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b3480156103e857600080fd5b506102116103f73660046125f0565b610f46565b34801561040857600080fd5b506102116104173660046125f0565b610f81565b34801561042857600080fd5b506101e3610437366004612631565b60ff16600090815260c9602052604090205461ffff1690565b34801561045c57600080fd5b506102a661046b366004612631565b610fb6565b34801561047c57600080fd5b5061021161048b36600461264c565b61101f565b34801561049c57600080fd5b506102116104ab3660046126c1565b611126565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd4321b4000000000000000000000000000000000000000000000000000000000148061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2b96ad4d00000000000000000000000000000000000000000000000000000000145b8061057657506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105a681611552565b60005b828110156106455760008484838181106105c5576105c5612754565b9050606002018036038101906105db9190612779565b90506000815160028111156105f2576105f26127e2565b0361060f5761060a86826020015183604001516115da565b61063c565b600181516002811115610624576106246127e2565b0361063c5761063c86826020015183604001516115ec565b506001016105a9565b5050505050565b600061065a858585856116f3565b806106735750610673856001600160a01b0385856116f3565b8061068c575061068c6001600160a01b038585856116f3565b90505b949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6106c181611552565b8360ff166000036106fe576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc5460ff9081169085161115610741576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082900361077c576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78484846040516107af93929190612823565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b61094081611867565b6040805160008082526020820190925261095c91839190611891565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109fd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610857565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ad45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b610add82611867565b610ae982826001611891565b5050565b6040805160a081018252600060608083018281526080840183905283526020808401839052838501919091526001600160a01b038516825260cb9052919091205461057690610bfc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd75760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610857565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915284825260ca905291822080549192909160ff169003610c76576040517f8d0aeeb100000000000000000000000000000000000000000000000000000000815260048101849052602401610857565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b03166020820152600283018054919284929084019190610cc990612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612840565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081525050915050919050565b6040805160a0810182526000606080830182815260808401839052835260208301919091529181019190915261057661030f610d9436859003850185612874565b611a31565b600054610100900460ff1615808015610db95750600054600160ff909116105b80610dd35750303b158015610dd3575060005460ff166001145b610e455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610857565b6000805460ff191660011790558015610e68576000805461ff0019166101001790555b610e7182611ac0565b610e9c30837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6115da565b610ec730837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b6115da565b8015610ae9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f3a81611552565b61064585858585611b46565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f7081611552565b610f7b8484846115da565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610fab81611552565b610f7b8484846115ec565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915260ff851680835260c982529184902054845180860190955291845261ffff90911690830181905290916110189061030f90611a31565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361104981611552565b60005b82811015610f7b57600084848381811061106857611068612754565b905060a0020180360381019061107e91906128d8565b9050600081516002811115611095576110956127e2565b036110b6576110b18160200151826040015183608001516115da565b61111d565b6001815160028111156110cb576110cb6127e2565b036110e7576110b18160200151826040015183608001516115ec565b6002815160028111156110fc576110fc6127e2565b0361111d5761111d8160200151826040015183608001518460600151611b46565b5060010161104c565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea61115081611552565b6111836001600160a01b0387167f99718b5000000000000000000000000000000000000000000000000000000000611e02565b6111b9576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660ff166000036111f6576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc546001906112099060ff168961297d565b60ff1611156112555760cc546040517f53db7b7b00000000000000000000000000000000000000000000000000000000815260ff91821660048201529088166024820152604401610857565b60cc5460ff90811690881611156112b05760cc805460ff191660ff891617905560008290036112b0576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff16158015906112ef5750805460ff898116911614155b1561134b5780546040517fff9f367400000000000000000000000000000000000000000000000000000000815260ff8216600482015261010090910461ffff1660248201526001600160a01b0388166044820152606401610857565b60ff8816600090815260c9602052604081208054829061136e9061ffff16612996565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff16815250905060006113b482611a31565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff16610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090921660ff90911617178155908401516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff199092169190911790559083015190915060028201906114a79082612a05565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e6669906114fb908e9087908e908e90612ac5565b60405180910390a28515611545577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b888860405161153c93929190612823565b60405180910390a15b5050505050505050505050565b6115953033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064c92505050565b61095c576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610857565b6115e78383836002611b46565b505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b031615610f7b57600081815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006117788888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806117a357600091505061068f565b6001196001600160a01b038216016117bf57600191505061068f565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd09061180a908990899089908990600401612af6565b602060405180830381865afa925050508015611843575060408051601f3d908101601f1916820190925261184091810190612b28565b60015b1561185b5780156118595760019250505061068f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610ae981611552565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118c4576115e783611e1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561191e575060408051601f3d908101601f1916820190925261191b91810190612b4a565b60015b6119905760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a255760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610857565b506115e7838383611ee9565b600081600001518260200151604051602001611aa392919060f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff16611b3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610857565b61095c81611f0e565b6001600160a01b03848116148015611b6657506001600160a01b03838116145b15611b9d576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611bbc57506001600160a01b03838116145b15611c6b5760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611bee5750805b15611c25576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611c69576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b03168281611d8457600083815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4611df9565b806001600160a01b0316826001600160a01b031614611df9576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610857565b50505050505050565b6000611e0d83611f39565b801561101857506110188383611f84565b6001600160a01b0381163b611e9b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611ef28361203a565b600082511180611eff5750805b156115e757610f7b838361207a565b61095c30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336115da565b6000611f4c826301ffc9a760e01b611f84565b80156105765750611f7d827fffffffff00000000000000000000000000000000000000000000000000000000611f84565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612023575060208210155b801561202f5750600081115b979650505050505050565b61204381611e1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610857565b600080846001600160a01b0316846040516121149190612b63565b600060405180830381855af49150503d806000811461214f576040519150601f19603f3d011682016040523d82523d6000602084013e612154565b606091505b509150915061217c8282604051806060016040528060278152602001612b9360279139612185565b95945050505050565b60608315612194575081611018565b61101883838151156121a95781518083602001fd5b8060405162461bcd60e51b81526004016108579190612b7f565b6000602082840312156121d557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101857600080fd5b6001600160a01b038116811461095c57600080fd5b60008060006040848603121561222f57600080fd5b833561223a81612205565b9250602084013567ffffffffffffffff8082111561225757600080fd5b818601915086601f83011261226b57600080fd5b81358181111561227a57600080fd5b87602060608302850101111561228f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122c957600080fd5b813567ffffffffffffffff808211156122e4576122e46122a2565b604051601f8301601f19908116603f0116810190828211818310171561230c5761230c6122a2565b8160405283815286602085880101111561232557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561235b57600080fd5b843561236681612205565b9350602085013561237681612205565b925060408501359150606085013567ffffffffffffffff81111561239957600080fd5b6123a5878288016122b8565b91505092959194509250565b803560ff811681146123c257600080fd5b919050565b60008083601f8401126123d957600080fd5b50813567ffffffffffffffff8111156123f157600080fd5b60208301915083602082850101111561240957600080fd5b9250929050565b60008060006040848603121561242557600080fd5b61242e846123b1565b9250602084013567ffffffffffffffff81111561244a57600080fd5b612456868287016123c7565b9497909650939450505050565b60006020828403121561247557600080fd5b813561101881612205565b6000806040838503121561249357600080fd5b823561249e81612205565b9150602083013567ffffffffffffffff8111156124ba57600080fd5b6124c6858286016122b8565b9150509250929050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b602081526000825160ff815116602084015261ffff6020820151166040840152506001600160a01b036020840151166060830152604083015160808084015261068f60a08401826124f4565b60006020828403121561257e57600080fd5b5035919050565b60006040828403121561259757600080fd5b50919050565b600080600080608085870312156125b357600080fd5b84356125be81612205565b935060208501356125ce81612205565b92506040850135915060608501356125e581612205565b939692955090935050565b60008060006060848603121561260557600080fd5b833561261081612205565b9250602084013561262081612205565b929592945050506040919091013590565b60006020828403121561264357600080fd5b611018826123b1565b6000806020838503121561265f57600080fd5b823567ffffffffffffffff8082111561267757600080fd5b818501915085601f83011261268b57600080fd5b81358181111561269a57600080fd5b86602060a0830285010111156126af57600080fd5b60209290920196919550909350505050565b600080600080600080608087890312156126da57600080fd5b6126e3876123b1565b955060208701356126f381612205565b9450604087013567ffffffffffffffff8082111561271057600080fd5b61271c8a838b016123c7565b9096509450606089013591508082111561273557600080fd5b5061274289828a016123c7565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b8035600381106123c257600080fd5b60006060828403121561278b57600080fd5b6040516060810181811067ffffffffffffffff821117156127ae576127ae6122a2565b6040526127ba8361276a565b815260208301356127ca81612205565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60ff8416815260406020820152600061068c6040830184866127f8565b600181811c9082168061285457607f821691505b60208210810361259757634e487b7160e01b600052602260045260246000fd5b60006040828403121561288657600080fd5b6040516040810181811067ffffffffffffffff821117156128a9576128a96122a2565b6040526128b5836123b1565b8152602083013561ffff811681146128cc57600080fd5b60208201529392505050565b600060a082840312156128ea57600080fd5b60405160a0810181811067ffffffffffffffff8211171561290d5761290d6122a2565b6040526129198361276a565b8152602083013561292981612205565b6020820152604083013561293c81612205565b6040820152606083013561294f81612205565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561057657610576612967565b600061ffff8083168181036129ad576129ad612967565b6001019392505050565b601f8211156115e757600081815260208120601f850160051c810160208610156129de5750805b601f850160051c820191505b818110156129fd578281556001016129ea565b505050505050565b815167ffffffffffffffff811115612a1f57612a1f6122a2565b612a3381612a2d8454612840565b846129b7565b602080601f831160018114612a685760008415612a505750858301515b600019600386901b1c1916600185901b1785556129fd565b600085815260208120601f198616915b82811015612a9757888601518255948401946001909101908401612a78565b5085821015612ab55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff84166020820152606060408201526000612aec6060830184866127f8565b9695505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612aec60808301846124f4565b600060208284031215612b3a57600080fd5b8151801515811461101857600080fd5b600060208284031215612b5c57600080fd5b5051919050565b60008251612b758184602087016124d0565b9190910192915050565b60208152600061101860208301846124f456fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dcf8e2b22c0d4e08a6897f55929da1267d37c3462d9605f72a4c2a1dc2a4ee8e64736f6c63430008110033";
var isSuperArgs$W = (xs) => xs.length > 1;
var PluginRepo__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$W(args)) {
      super(...args);
    } else {
      super(_abi$15, _bytecode$W, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$15);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$15, signerOrProvider);
  }
};
PluginRepo__factory.bytecode = _bytecode$W;
PluginRepo__factory.abi = _abi$15;
var _abi$14 = [
  {
    inputs: [
      {
        internalType: "contract PluginRepoRegistry",
        name: "_pluginRepoRegistry",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_subdomain",
        type: "string"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    name: "createPluginRepo",
    outputs: [
      {
        internalType: "contract PluginRepo",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_subdomain",
        type: "string"
      },
      {
        internalType: "address",
        name: "_pluginSetup",
        type: "address"
      },
      {
        internalType: "address",
        name: "_maintainer",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_releaseMetadata",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_buildMetadata",
        type: "bytes"
      }
    ],
    name: "createPluginRepoWithFirstVersion",
    outputs: [
      {
        internalType: "contract PluginRepo",
        name: "pluginRepo",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginRepoBase",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginRepoRegistry",
    outputs: [
      {
        internalType: "contract PluginRepoRegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$V = "0x608060405234801561001057600080fd5b5060405161406338038061406383398101604081905261002f916100a6565b600080546001600160a01b0319166001600160a01b03831617905560405161005690610099565b604051809103906000f080158015610072573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506100d6565b612d0f8061135483390190565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b61126f806100e56000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630b36f03c146200005757806349b19d0814620000875780637bd3e8ac146200009e578063d222cb1e14620000b5575b600080fd5b6000546200006b906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6200006b620000983660046200070e565b620000c9565b6200006b620000af36600462000813565b620000e0565b6001546200006b906001600160a01b031681565b6000620000d88484846200018a565b949350505050565b6000620000ef8787306200018a565b6040517ffc0544270000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063fc0544279062000140906001908990879089906004016200091a565b600060405180830381600087803b1580156200015b57600080fd5b505af115801562000170573d6000803e3d6000fd5b505050506200018081856200029a565b9695505050505050565b600154604080516001600160a01b038481166024808401919091528351808403909101815260449092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de8000000000000000000000000000000000000000000000000000000001790526000926200020f92169062000653565b6000546040517ffdb9df550000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063fdb9df55906200025f9087908790869060040162000966565b600060405180830381600087803b1580156200027a57600080fd5b505af11580156200028f573d6000803e3d6000fd5b505050509392505050565b60408051600680825260e08201909252600091816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002b25790505090506000836001600160a01b03166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003679190620009a8565b90506000846001600160a01b031663afe5eb786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d09190620009a8565b90506000856001600160a01b031663cc98b8f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000413573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004399190620009a8565b60408051606081019091529091508060008152602001866001600160a01b031681526020018381525084600081518110620004785762000478620009c2565b602090810291909101015260408051606081019091528060008152602001866001600160a01b031681526020018281525084600181518110620004bf57620004bf620009c2565b602090810291909101015260408051606081019091528060008152602001866001600160a01b031681526020018481525084600281518110620005065762000506620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001849052845185906003908110620005455762000545620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001839052845185906004908110620005845762000584620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001829052845185906005908110620005c357620005c3620009c2565b60209081029190910101526040517f22844d040000000000000000000000000000000000000000000000000000000081526001600160a01b038716906322844d0490620006179089908890600401620009d8565b600060405180830381600087803b1580156200063257600080fd5b505af115801562000647573d6000803e3d6000fd5b50505050505050505050565b60008282604051620006659062000697565b6200067292919062000a68565b604051809103906000f0801580156200068f573d6000803e3d6000fd5b509392505050565b6107ad8062000a8d83390190565b60008083601f840112620006b857600080fd5b50813567ffffffffffffffff811115620006d157600080fd5b602083019150836020828501011115620006ea57600080fd5b9250929050565b80356001600160a01b03811681146200070957600080fd5b919050565b6000806000604084860312156200072457600080fd5b833567ffffffffffffffff8111156200073c57600080fd5b6200074a86828701620006a5565b90945092506200075f905060208501620006f1565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200079057600080fd5b813567ffffffffffffffff80821115620007ae57620007ae62000768565b604051601f8301601f19908116603f01168101908282118183101715620007d957620007d962000768565b81604052838152866020858801011115620007f357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060a087890312156200082d57600080fd5b863567ffffffffffffffff808211156200084657600080fd5b620008548a838b01620006a5565b90985096508691506200086a60208a01620006f1565b95506200087a60408a01620006f1565b945060608901359150808211156200089157600080fd5b6200089f8a838b016200077e565b93506080890135915080821115620008b657600080fd5b50620008c589828a016200077e565b9150509295509295509295565b6000815180845260005b81811015620008fa57602081850181015186830182015201620008dc565b506000602082860101526020601f19601f83011685010191505092915050565b60ff851681526001600160a01b0384166020820152608060408201526000620009476080830185620008d2565b82810360608401526200095b8185620008d2565b979650505050505050565b604081528260408201528284606083013760006060848301015260006060601f19601f86011683010190506001600160a01b0383166020830152949350505050565b600060208284031215620009bb57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060408083016001600160a01b038087168552602083818701528287518085526060945084880191508289016000805b8381101562000a5757825180516003811062000a3357634e487b7160e01b84526021600452602484fd5b86528087015188168787015289015189860152938701939185019160010162000a09565b50929b9a5050505050505050505050565b6001600160a01b0383168152604060208201526000620000d86040830184620008d256fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122014841925b3ba51b4ee1c8d570075792a0ad38deef0d042bd9d5d5226639456b764736f6c6343000811003360a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612bef62000120600039600081816107c70152818161086201528181610969015281816109ff0152610b440152612bef6000f3fe6080604052600436106101755760003560e01c80639af3e909116100cb578063d68bad2c1161007f578063e0589bd311610059578063e0589bd314610450578063e978afe514610470578063fc0544271461049057600080fd5b8063d68bad2c146103dc578063d96054c4146103fc578063df1d6c441461041c57600080fd5b8063c4d66de8116100b0578063c4d66de814610368578063c9dbc2a414610388578063cc98b8f5146103a857600080fd5b80639af3e90914610314578063afe5eb781461033457600080fd5b80633659cfe61161012d57806352d1902d1161010757806352d1902d146102b35780637be0ca5e146102c85780639aaf9f08146102f457600080fd5b80633659cfe6146102535780634f1ef2861461027357806350abe9101461028657600080fd5b806322844d041161015e57806322844d04146101f15780632675fdd01461021357806328375f671461023357600080fd5b806301ffc9a71461017a57806309e56b14146101af575b600080fd5b34801561018657600080fd5b5061019a6101953660046121c3565b6104b0565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506101e37f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020016101a6565b3480156101fd57600080fd5b5061021161020c36600461221a565b61057c565b005b34801561021f57600080fd5b5061019a61022e366004612345565b61064c565b34801561023f57600080fd5b5061021161024e366004612410565b610697565b34801561025f57600080fd5b5061021161026e366004612463565b6107bd565b610211610281366004612480565b61095f565b34801561029257600080fd5b506102a66102a1366004612463565b610aed565b6040516101a69190612520565b3480156102bf57600080fd5b506101e3610b37565b3480156102d457600080fd5b5060cc546102e29060ff1681565b60405160ff90911681526020016101a6565b34801561030057600080fd5b506102a661030f36600461256c565b610bfc565b34801561032057600080fd5b506102a661032f366004612585565b610d53565b34801561034057600080fd5b506101e37fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b34801561037457600080fd5b50610211610383366004612463565b610d99565b34801561039457600080fd5b506102116103a336600461259d565b610f10565b3480156103b457600080fd5b506101e37f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b3480156103e857600080fd5b506102116103f73660046125f0565b610f46565b34801561040857600080fd5b506102116104173660046125f0565b610f81565b34801561042857600080fd5b506101e3610437366004612631565b60ff16600090815260c9602052604090205461ffff1690565b34801561045c57600080fd5b506102a661046b366004612631565b610fb6565b34801561047c57600080fd5b5061021161048b36600461264c565b61101f565b34801561049c57600080fd5b506102116104ab3660046126c1565b611126565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd4321b4000000000000000000000000000000000000000000000000000000000148061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2b96ad4d00000000000000000000000000000000000000000000000000000000145b8061057657506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105a681611552565b60005b828110156106455760008484838181106105c5576105c5612754565b9050606002018036038101906105db9190612779565b90506000815160028111156105f2576105f26127e2565b0361060f5761060a86826020015183604001516115da565b61063c565b600181516002811115610624576106246127e2565b0361063c5761063c86826020015183604001516115ec565b506001016105a9565b5050505050565b600061065a858585856116f3565b806106735750610673856001600160a01b0385856116f3565b8061068c575061068c6001600160a01b038585856116f3565b90505b949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6106c181611552565b8360ff166000036106fe576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc5460ff9081169085161115610741576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082900361077c576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78484846040516107af93929190612823565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b61094081611867565b6040805160008082526020820190925261095c91839190611891565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109fd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610857565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ad45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b610add82611867565b610ae982826001611891565b5050565b6040805160a081018252600060608083018281526080840183905283526020808401839052838501919091526001600160a01b038516825260cb9052919091205461057690610bfc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd75760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610857565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915284825260ca905291822080549192909160ff169003610c76576040517f8d0aeeb100000000000000000000000000000000000000000000000000000000815260048101849052602401610857565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b03166020820152600283018054919284929084019190610cc990612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612840565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081525050915050919050565b6040805160a0810182526000606080830182815260808401839052835260208301919091529181019190915261057661030f610d9436859003850185612874565b611a31565b600054610100900460ff1615808015610db95750600054600160ff909116105b80610dd35750303b158015610dd3575060005460ff166001145b610e455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610857565b6000805460ff191660011790558015610e68576000805461ff0019166101001790555b610e7182611ac0565b610e9c30837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6115da565b610ec730837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b6115da565b8015610ae9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f3a81611552565b61064585858585611b46565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f7081611552565b610f7b8484846115da565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610fab81611552565b610f7b8484846115ec565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915260ff851680835260c982529184902054845180860190955291845261ffff90911690830181905290916110189061030f90611a31565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361104981611552565b60005b82811015610f7b57600084848381811061106857611068612754565b905060a0020180360381019061107e91906128d8565b9050600081516002811115611095576110956127e2565b036110b6576110b18160200151826040015183608001516115da565b61111d565b6001815160028111156110cb576110cb6127e2565b036110e7576110b18160200151826040015183608001516115ec565b6002815160028111156110fc576110fc6127e2565b0361111d5761111d8160200151826040015183608001518460600151611b46565b5060010161104c565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea61115081611552565b6111836001600160a01b0387167f99718b5000000000000000000000000000000000000000000000000000000000611e02565b6111b9576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660ff166000036111f6576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc546001906112099060ff168961297d565b60ff1611156112555760cc546040517f53db7b7b00000000000000000000000000000000000000000000000000000000815260ff91821660048201529088166024820152604401610857565b60cc5460ff90811690881611156112b05760cc805460ff191660ff891617905560008290036112b0576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff16158015906112ef5750805460ff898116911614155b1561134b5780546040517fff9f367400000000000000000000000000000000000000000000000000000000815260ff8216600482015261010090910461ffff1660248201526001600160a01b0388166044820152606401610857565b60ff8816600090815260c9602052604081208054829061136e9061ffff16612996565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff16815250905060006113b482611a31565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff16610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090921660ff90911617178155908401516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff199092169190911790559083015190915060028201906114a79082612a05565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e6669906114fb908e9087908e908e90612ac5565b60405180910390a28515611545577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b888860405161153c93929190612823565b60405180910390a15b5050505050505050505050565b6115953033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064c92505050565b61095c576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610857565b6115e78383836002611b46565b505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b031615610f7b57600081815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006117788888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806117a357600091505061068f565b6001196001600160a01b038216016117bf57600191505061068f565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd09061180a908990899089908990600401612af6565b602060405180830381865afa925050508015611843575060408051601f3d908101601f1916820190925261184091810190612b28565b60015b1561185b5780156118595760019250505061068f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610ae981611552565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118c4576115e783611e1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561191e575060408051601f3d908101601f1916820190925261191b91810190612b4a565b60015b6119905760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a255760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610857565b506115e7838383611ee9565b600081600001518260200151604051602001611aa392919060f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff16611b3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610857565b61095c81611f0e565b6001600160a01b03848116148015611b6657506001600160a01b03838116145b15611b9d576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611bbc57506001600160a01b03838116145b15611c6b5760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611bee5750805b15611c25576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611c69576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b03168281611d8457600083815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4611df9565b806001600160a01b0316826001600160a01b031614611df9576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610857565b50505050505050565b6000611e0d83611f39565b801561101857506110188383611f84565b6001600160a01b0381163b611e9b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611ef28361203a565b600082511180611eff5750805b156115e757610f7b838361207a565b61095c30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336115da565b6000611f4c826301ffc9a760e01b611f84565b80156105765750611f7d827fffffffff00000000000000000000000000000000000000000000000000000000611f84565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612023575060208210155b801561202f5750600081115b979650505050505050565b61204381611e1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610857565b600080846001600160a01b0316846040516121149190612b63565b600060405180830381855af49150503d806000811461214f576040519150601f19603f3d011682016040523d82523d6000602084013e612154565b606091505b509150915061217c8282604051806060016040528060278152602001612b9360279139612185565b95945050505050565b60608315612194575081611018565b61101883838151156121a95781518083602001fd5b8060405162461bcd60e51b81526004016108579190612b7f565b6000602082840312156121d557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101857600080fd5b6001600160a01b038116811461095c57600080fd5b60008060006040848603121561222f57600080fd5b833561223a81612205565b9250602084013567ffffffffffffffff8082111561225757600080fd5b818601915086601f83011261226b57600080fd5b81358181111561227a57600080fd5b87602060608302850101111561228f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122c957600080fd5b813567ffffffffffffffff808211156122e4576122e46122a2565b604051601f8301601f19908116603f0116810190828211818310171561230c5761230c6122a2565b8160405283815286602085880101111561232557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561235b57600080fd5b843561236681612205565b9350602085013561237681612205565b925060408501359150606085013567ffffffffffffffff81111561239957600080fd5b6123a5878288016122b8565b91505092959194509250565b803560ff811681146123c257600080fd5b919050565b60008083601f8401126123d957600080fd5b50813567ffffffffffffffff8111156123f157600080fd5b60208301915083602082850101111561240957600080fd5b9250929050565b60008060006040848603121561242557600080fd5b61242e846123b1565b9250602084013567ffffffffffffffff81111561244a57600080fd5b612456868287016123c7565b9497909650939450505050565b60006020828403121561247557600080fd5b813561101881612205565b6000806040838503121561249357600080fd5b823561249e81612205565b9150602083013567ffffffffffffffff8111156124ba57600080fd5b6124c6858286016122b8565b9150509250929050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b602081526000825160ff815116602084015261ffff6020820151166040840152506001600160a01b036020840151166060830152604083015160808084015261068f60a08401826124f4565b60006020828403121561257e57600080fd5b5035919050565b60006040828403121561259757600080fd5b50919050565b600080600080608085870312156125b357600080fd5b84356125be81612205565b935060208501356125ce81612205565b92506040850135915060608501356125e581612205565b939692955090935050565b60008060006060848603121561260557600080fd5b833561261081612205565b9250602084013561262081612205565b929592945050506040919091013590565b60006020828403121561264357600080fd5b611018826123b1565b6000806020838503121561265f57600080fd5b823567ffffffffffffffff8082111561267757600080fd5b818501915085601f83011261268b57600080fd5b81358181111561269a57600080fd5b86602060a0830285010111156126af57600080fd5b60209290920196919550909350505050565b600080600080600080608087890312156126da57600080fd5b6126e3876123b1565b955060208701356126f381612205565b9450604087013567ffffffffffffffff8082111561271057600080fd5b61271c8a838b016123c7565b9096509450606089013591508082111561273557600080fd5b5061274289828a016123c7565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b8035600381106123c257600080fd5b60006060828403121561278b57600080fd5b6040516060810181811067ffffffffffffffff821117156127ae576127ae6122a2565b6040526127ba8361276a565b815260208301356127ca81612205565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60ff8416815260406020820152600061068c6040830184866127f8565b600181811c9082168061285457607f821691505b60208210810361259757634e487b7160e01b600052602260045260246000fd5b60006040828403121561288657600080fd5b6040516040810181811067ffffffffffffffff821117156128a9576128a96122a2565b6040526128b5836123b1565b8152602083013561ffff811681146128cc57600080fd5b60208201529392505050565b600060a082840312156128ea57600080fd5b60405160a0810181811067ffffffffffffffff8211171561290d5761290d6122a2565b6040526129198361276a565b8152602083013561292981612205565b6020820152604083013561293c81612205565b6040820152606083013561294f81612205565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561057657610576612967565b600061ffff8083168181036129ad576129ad612967565b6001019392505050565b601f8211156115e757600081815260208120601f850160051c810160208610156129de5750805b601f850160051c820191505b818110156129fd578281556001016129ea565b505050505050565b815167ffffffffffffffff811115612a1f57612a1f6122a2565b612a3381612a2d8454612840565b846129b7565b602080601f831160018114612a685760008415612a505750858301515b600019600386901b1c1916600185901b1785556129fd565b600085815260208120601f198616915b82811015612a9757888601518255948401946001909101908401612a78565b5085821015612ab55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff84166020820152606060408201526000612aec6060830184866127f8565b9695505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612aec60808301846124f4565b600060208284031215612b3a57600080fd5b8151801515811461101857600080fd5b600060208284031215612b5c57600080fd5b5051919050565b60008251612b758184602087016124d0565b9190910192915050565b60208152600061101860208301846124f456fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dcf8e2b22c0d4e08a6897f55929da1267d37c3462d9605f72a4c2a1dc2a4ee8e64736f6c63430008110033";
var isSuperArgs$V = (xs) => xs.length > 1;
var PluginRepoFactory__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$V(args)) {
      super(...args);
    } else {
      super(_abi$14, _bytecode$V, args[0]);
    }
  }
  deploy(_pluginRepoRegistry, overrides) {
    return super.deploy(_pluginRepoRegistry, overrides || {});
  }
  getDeployTransaction(_pluginRepoRegistry, overrides) {
    return super.getDeployTransaction(_pluginRepoRegistry, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$14);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$14, signerOrProvider);
  }
};
PluginRepoFactory__factory.bytecode = _bytecode$V;
PluginRepoFactory__factory.abi = _abi$14;
var _abi$13 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractAlreadyRegistered",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractERC165SupportInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractInterfaceInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [],
    name: "EmptyPluginRepoSubdomain",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "subdomain",
        type: "string"
      }
    ],
    name: "InvalidPluginSubdomain",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "subdomain",
        type: "string"
      },
      {
        indexed: false,
        internalType: "address",
        name: "pluginRepo",
        type: "address"
      }
    ],
    name: "PluginRepoRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "REGISTER_PLUGIN_REPO_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_REGISTRY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "entries",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "contract ENSSubdomainRegistrar",
        name: "_subdomainRegistrar",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "subdomain",
        type: "string"
      },
      {
        internalType: "address",
        name: "pluginRepo",
        type: "address"
      }
    ],
    name: "registerPluginRepo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "subdomainRegistrar",
    outputs: [
      {
        internalType: "contract ENSSubdomainRegistrar",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "targetInterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$U = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611718610119600039600081816102b00152818161034b015281816105c001528181610656015261075101526117186000f3fe6080604052600436106100bb5760003560e01c80634f1ef28611610074578063ce091c861161004e578063ce091c8614610212578063f29ee12514610246578063fdb9df551461028657600080fd5b80634f1ef286146101a857806352d1902d146101bb57806374574eb7146101de57600080fd5b80634162169f116100a55780634162169f1461011f57806344162ef81461013d578063485cc9551461018857600080fd5b8062077393146100c05780633659cfe6146100fd575b600080fd5b3480156100cc57600080fd5b5060fb546100e0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010957600080fd5b5061011d610118366004611347565b6102a6565b005b34801561012b57600080fd5b506097546001600160a01b03166100e0565b34801561014957600080fd5b5060c9546101579060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b34801561019457600080fd5b5061011d6101a3366004611364565b610448565b61011d6101b63660046113b3565b6105b6565b3480156101c757600080fd5b506101d0610744565b6040519081526020016100f4565b3480156101ea57600080fd5b506101d07f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561021e57600080fd5b506101d07f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0981565b34801561025257600080fd5b50610276610261366004611347565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100f4565b34801561029257600080fd5b5061011d6102a1366004611477565b610809565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103495760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103a47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b610429816109a5565b60408051600080825260208201909252610445918391906109de565b50565b600054610100900460ff16158080156104685750600054600160ff909116105b806104825750303b158015610482575060005460ff166001145b6104f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610340565b6000805460ff191660011790558015610517576000805461ff0019166101001790555b7fd4321b40000000000000000000000000000000000000000000000000000000006105428482610b7e565b5060fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156105b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610340565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461072b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b610734826109a5565b610740828260016109de565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610340565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0990610847906001600160a01b031630335b84600036610c39565b8261087e576040517feb59207700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108888484610d27565b6108c25783836040517f5b7dee83000000000000000000000000000000000000000000000000000000008152600401610340929190611525565b600084846040516108d4929190611541565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03868116602485015291935016906389bb414590604401600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b5050505061096383610dd4565b7f8cc06643d6cbee78b006d2df2db4d2487b69dd64bb2c96088280fb29dd93a0b285858560405161099693929190611551565b60405180910390a15050505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610740906001600160a01b0316303361083e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a11576105b183610eb1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a6b575060408051601f3d908101601f19168201909252610a689181019061157e565b60015b610add5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b725760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610340565b506105b1838383610f7c565b600054610100900460ff16610bfb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b610c0482610fa7565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c869088908890889088908890600401611597565b602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906115ca565b610d1f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610340565b505050505050565b6000828280835b81811015610dc5576000848483818110610d4a57610d4a6115ec565b919091013560f81c915050606081118015610d685750607b8160ff16105b15610d735750610db3565b602f8160ff16118015610d895750603a8160ff16105b15610d945750610db3565b8060ff16602d03610da55750610db3565b600095505050505050610dce565b80610dbd81611602565b915050610d2e565b50600193505050505b92915050565b6001600160a01b038116600090815260ca602052604090205460ff1615610e32576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b60c954610e4c906001600160a01b0383169060e01b611053565b610e8d576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6001600160a01b0381163b610f2e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f8583611076565b600082511180610f925750805b156105b157610fa183836110b6565b50505050565b600054610100900460ff166110245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061105e836111c1565b801561106f575061106f8383611225565b9392505050565b61107f81610eb1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610340565b600080846001600160a01b031684604051611150919061166c565b600060405180830381855af49150503d806000811461118b576040519150601f19603f3d011682016040523d82523d6000602084013e611190565b606091505b50915091506111b882826040518060600160405280602781526020016116bc602791396112f4565b95945050505050565b60006111ed827f01ffc9a700000000000000000000000000000000000000000000000000000000611225565b8015610dce575061121e827fffffffff00000000000000000000000000000000000000000000000000000000611225565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156112dd575060208210155b80156112e95750600081115b979650505050505050565b6060831561130357508161106f565b61106f83838151156113185781518083602001fd5b8060405162461bcd60e51b81526004016103409190611688565b6001600160a01b038116811461044557600080fd5b60006020828403121561135957600080fd5b813561106f81611332565b6000806040838503121561137757600080fd5b823561138281611332565b9150602083013561139281611332565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156113c657600080fd5b82356113d181611332565b9150602083013567ffffffffffffffff808211156113ee57600080fd5b818501915085601f83011261140257600080fd5b8135818111156114145761141461139d565b604051601f8201601f19908116603f0116810190838211818310171561143c5761143c61139d565b8160405282815288602084870101111561145557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006040848603121561148c57600080fd5b833567ffffffffffffffff808211156114a457600080fd5b818601915086601f8301126114b857600080fd5b8135818111156114c757600080fd5b8760208285010111156114d957600080fd5b602092830195509350508401356114ef81611332565b809150509250925092565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006115396020830184866114fa565b949350505050565b8183823760009101908152919050565b6040815260006115656040830185876114fa565b90506001600160a01b0383166020830152949350505050565b60006020828403121561159057600080fd5b5051919050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526112e96080830184866114fa565b6000602082840312156115dc57600080fd5b8151801515811461106f57600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164157634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561166357818101518382015260200161164b565b50506000910152565b6000825161167e818460208701611648565b9190910192915050565b60208152600082518060208401526116a7816040850160208701611648565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220370425f5435c24e6923f36cfce27e5ad7504f6329a9dcc948ae81761cd69c7e164736f6c63430008110033";
var isSuperArgs$U = (xs) => xs.length > 1;
var PluginRepoRegistry__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$U(args)) {
      super(...args);
    } else {
      super(_abi$13, _bytecode$U, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$13);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$13, signerOrProvider);
  }
};
PluginRepoRegistry__factory.bytecode = _bytecode$U;
PluginRepoRegistry__factory.abi = _abi$13;
var index$E = Object.freeze({
  __proto__: null,
  IPluginRepo__factory,
  PluginRepo__factory,
  PluginRepoFactory__factory,
  PluginRepoRegistry__factory
});
var _abi$12 = [
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IPluginSetup__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$12);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$12, signerOrProvider);
  }
};
IPluginSetup__factory.abi = _abi$12;
var _abi$11 = [
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var PluginSetup__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$11);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$11, signerOrProvider);
  }
};
PluginSetup__factory.abi = _abi$11;
var _abi$10 = [
  {
    inputs: [
      {
        internalType: "contract PluginRepoRegistry",
        name: "_repoRegistry",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      }
    ],
    name: "IPluginNotSupported",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "currentAppliedSetupId",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "appliedSetupId",
        type: "bytes32"
      }
    ],
    name: "InvalidAppliedSetupId",
    type: "error"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        internalType: "struct PluginRepo.Tag",
        name: "currentVersionTag",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        internalType: "struct PluginRepo.Tag",
        name: "newVersionTag",
        type: "tuple"
      }
    ],
    name: "InvalidUpdateVersion",
    type: "error"
  },
  {
    inputs: [],
    name: "PluginAlreadyInstalled",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      }
    ],
    name: "PluginNonupgradeable",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proxy",
        type: "address"
      },
      {
        internalType: "address",
        name: "implementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      }
    ],
    name: "PluginProxyUpgradeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "PluginRepoNonexistent",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      }
    ],
    name: "SetupAlreadyPrepared",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "caller",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "SetupApplicationUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      }
    ],
    name: "SetupNotApplicable",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "appliedSetupId",
        type: "bytes32"
      }
    ],
    name: "InstallationApplied",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "contract PluginRepo",
        name: "pluginSetupRepo",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        indexed: false,
        internalType: "struct PluginRepo.Tag",
        name: "versionTag",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        indexed: false,
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    name: "InstallationPrepared",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      }
    ],
    name: "UninstallationApplied",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "contract PluginRepo",
        name: "pluginSetupRepo",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        indexed: false,
        internalType: "struct PluginRepo.Tag",
        name: "versionTag",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IPluginSetup.SetupPayload",
        name: "setupPayload",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    name: "UninstallationPrepared",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "appliedSetupId",
        type: "bytes32"
      }
    ],
    name: "UpdateApplied",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "contract PluginRepo",
        name: "pluginSetupRepo",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "release",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "build",
            type: "uint16"
          }
        ],
        indexed: false,
        internalType: "struct PluginRepo.Tag",
        name: "versionTag",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IPluginSetup.SetupPayload",
        name: "setupPayload",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        indexed: false,
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      }
    ],
    name: "UpdatePrepared",
    type: "event"
  },
  {
    inputs: [],
    name: "APPLY_INSTALLATION_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "APPLY_UNINSTALLATION_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "APPLY_UPDATE_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          },
          {
            internalType: "bytes32",
            name: "helpersHash",
            type: "bytes32"
          }
        ],
        internalType: "struct PluginSetupProcessor.ApplyInstallationParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "applyInstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct PluginSetupProcessor.ApplyUninstallationParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "applyUninstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "initData",
            type: "bytes"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          },
          {
            internalType: "bytes32",
            name: "helpersHash",
            type: "bytes32"
          }
        ],
        internalType: "struct PluginSetupProcessor.ApplyUpdateParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "applyUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct PluginSetupProcessor.PrepareInstallationParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "release",
                    type: "uint8"
                  },
                  {
                    internalType: "uint16",
                    name: "build",
                    type: "uint16"
                  }
                ],
                internalType: "struct PluginRepo.Tag",
                name: "versionTag",
                type: "tuple"
              },
              {
                internalType: "contract PluginRepo",
                name: "pluginSetupRepo",
                type: "address"
              }
            ],
            internalType: "struct PluginSetupRef",
            name: "pluginSetupRef",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "address",
                name: "plugin",
                type: "address"
              },
              {
                internalType: "address[]",
                name: "currentHelpers",
                type: "address[]"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              }
            ],
            internalType: "struct IPluginSetup.SetupPayload",
            name: "setupPayload",
            type: "tuple"
          }
        ],
        internalType: "struct PluginSetupProcessor.PrepareUninstallationParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "currentVersionTag",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "release",
                type: "uint8"
              },
              {
                internalType: "uint16",
                name: "build",
                type: "uint16"
              }
            ],
            internalType: "struct PluginRepo.Tag",
            name: "newVersionTag",
            type: "tuple"
          },
          {
            internalType: "contract PluginRepo",
            name: "pluginSetupRepo",
            type: "address"
          },
          {
            components: [
              {
                internalType: "address",
                name: "plugin",
                type: "address"
              },
              {
                internalType: "address[]",
                name: "currentHelpers",
                type: "address[]"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              }
            ],
            internalType: "struct IPluginSetup.SetupPayload",
            name: "setupPayload",
            type: "tuple"
          }
        ],
        internalType: "struct PluginSetupProcessor.PrepareUpdateParams",
        name: "_params",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "repoRegistry",
    outputs: [
      {
        internalType: "contract PluginRepoRegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "states",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "currentAppliedSetupId",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pluginInstallationId",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "preparedSetupId",
        type: "bytes32"
      }
    ],
    name: "validatePreparedSetupId",
    outputs: [],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$T = "0x60806040523480156200001157600080fd5b5060405162002f6038038062002f6083398101604081905262000034916200005a565b600180546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612ec4806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80639665861a11610081578063fafc79da1161005b578063fafc79da1461021a578063fbdc1ef11461022d578063fe6c34741461026957600080fd5b80639665861a146101ab578063ca211f7f146101d2578063d7598122146101f957600080fd5b8063483d209e116100b2578063483d209e14610138578063747e5ec114610163578063851d11f81461019857600080fd5b806322e12c63146100d95780632fb04336146100ee5780633c8c01d114610117575b600080fd5b6100ec6100e7366004611d5d565b61027c565b005b6101016100fc366004611dcc565b61069e565b60405161010e9190611eeb565b60405180910390f35b61012a610125366004611dcc565b6109b5565b60405161010e929190611f91565b60015461014b906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018a7ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad8354881565b60405190815260200161010e565b6100ec6101a6366004611fbb565b610cf6565b61018a7fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f781565b61018a7fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa81565b61020c610207366004612019565b610eb3565b60405161010e9291906120af565b6100ec6102283660046120dd565b61153d565b61025461023b3660046120ff565b6000602081905290815260409020805460019091015482565b6040805192835260208301919091520161010e565b6100ec610277366004612019565b61159b565b817fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f76102a882826117dd565b60006102c0856102bb6020870187612118565b6118dd565b600081815260208181526040822092935061039c906102e79036899003890190890161225f565b61034d6102f760a08a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b828210156103435761033460a083028601368190038101906122f9565b81526020019060010190610317565b5050505050611920565b60c089013561035f60808b018b61238a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060029250611950915050565b90506103a8838261153d565b60006103c96103bf36899003890160208a0161225f565b8860c00135611998565b43845560018401819055905060006103e76080890160608a01612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906104189060208c01906004016123fe565b600060405180830381865afa158015610435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045d9190810190612484565b9050600061046e60208a018a612118565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf919061254e565b9050600082602001516001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610539919061254e565b9050806001600160a01b0316826001600160a01b0316146105ac576105ac61056460208c018c612118565b8261057260808e018e61238a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119df92505050565b60006105bb60a08c018c6122a3565b9050111561062f576001600160a01b038b1663e978afe56105df60a08d018d6122a3565b6040518363ffffffff1660e01b81526004016105fc92919061256b565b600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b505050505b61063c60208b018b612118565b6001600160a01b03168b6001600160a01b03167f24565610ddf61ee73e8501d7f0454657c71f5944882f5c586d7246bf43e13cda8787604051610689929190918252602082015260400190565b60405180910390a35050505050505050505050565b606060006106c0846106b28585018661260e565b6102bb906020810190612118565b600081815260208190526040812091925061073d6106e33687900387018761225f565b6107386106f3606089018961260e565b61070190602081019061264c565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b6892505050565b611998565b9050808260010154146107915760018201546040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044015b60405180910390fd5b60006107a36060870160408801612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906107d19089906004016123fe565b600060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108169190810190612484565b60208101519091506001600160a01b0316639cb0a1248861083a60608a018a61260e565b6040518363ffffffff1660e01b81526004016108579291906127da565b6000604051808303816000875af1158015610876573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089e91908101906128f9565b945060006108f56108b43689900389018961225f565b6108bd88611920565b6040805160208101909152600081527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563906003611950565b60008181526002860160205260409020548554919250111561092d57604051630559b4b760e31b815260048101829052602401610788565b6000818152600285016020526040908190204390556109529060608901908901612118565b6001600160a01b03908116908916337f5fdcd271ff15db84cbc94365956df5504f6d756e111654144648433c11a44530848b610991606082018261260e565b8c6040516109a2949392919061292e565b60405180910390a4505050505092915050565b60006109d4604051806040016040528060608152602001606081525090565b60006109e66060850160408601612118565b6001546040517ff29ee1250000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015292935091169063f29ee12590602401602060405180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612966565b610aa5576040517f0d4feab400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051639af3e90960e01b81526000906001600160a01b03831690639af3e90990610ad49088906004016123fe565b600060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b199190810190612484565b60208101519091506001600160a01b031663f10832f187610b3d606089018961238a565b6040518463ffffffff1660e01b8152600401610b5b93929190612988565b6000604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ba29190810190612a8a565b90945092506000610bb387866118dd565b90506000610bf8610bc93689900389018961225f565b610bd68760200151611920565b8751610be190611b68565b604051806020016040528060008152506001611950565b600083815260208190526040902060018101549192509015610c46576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260028201602052604090205481541015610c7b57604051630559b4b760e31b815260048101839052602401610788565b600082815260028201602052604090204390556001600160a01b03808616908a16337f8ea69cee01fd9fc24e6b9614ea0896c5a1eac8fd8aba383285248cd0e1d8503a858c610ccd606082018261238a565b8e8e604051610ce196959493929190612ad1565b60405180910390a450505050505b9250929050565b817fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa610d2282826117dd565b6000610d35856102bb6020870187612118565b6000818152602081815260408220929350610db890610d5c9036899003890190890161225f565b6108bd610d6c60808a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b8282101561034357610da960a083028601368190038101906122f9565b81526020019060010190610d8c565b9050610dc4838261153d565b438255600060018301819055610ddd60808801886122a3565b90501115610e51576001600160a01b03871663e978afe5610e0160808901896122a3565b6040518363ffffffff1660e01b8152600401610e1e92919061256b565b600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b505050505b610e5e6020870187612118565b6001600160a01b0316876001600160a01b03167fa0e5d4ce6420a0e7a5f0ac10c47b3a672fb661c11f5609bb21b68644d81e17aa83604051610ea291815260200190565b60405180910390a350505050505050565b6060610ed2604051806040016040528060608152602001606081525090565b610ee26060840160408501612b19565b60ff16610ef26020850185612b19565b60ff16141580610f285750610f0d6080840160608501612b36565b61ffff16610f216040850160208601612b36565b61ffff1610155b15610f6657604080517f80d4e90700000000000000000000000000000000000000000000000000000000815261078891859190820190600401612b53565b6000610f79856106b260a087018761260e565b6000818152602081905260408120919250610f9a6106f360a088018861260e565b90506000610fe6604051806040016040528089600001803603810190610fc09190612b6e565b8152602001610fd560a08b0160808c01612118565b6001600160a01b0316905283611998565b9050808360010154146110355760018301546040517f73a4eaa0000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610788565b600061104760a0890160808a01612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e90990611075908b906004016123fe565b600060405180830381865afa158015611092573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ba9190810190612484565b905060006110ce60a08a0160808b01612118565b6001600160a01b0316639af3e9098a6040016040518263ffffffff1660e01b81526004016110fc91906123fe565b600060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111419190810190612484565b9050600081602001516001600160a01b031683602001516001600160a01b031603611238576111e260405180604001604052808c6040018036038101906111889190612b6e565b815260200161119d60a08e0160808f01612118565b6001600160a01b031690526040805160208101909152600081527f569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd9088906002611950565b90506111f160a08b018b61260e565b6111ff90602081019061264c565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908952506114da565b6112867f41de68300000000000000000000000000000000000000000000000000000000061126960a08d018d61260e565b611277906020810190612118565b6001600160a01b031690611b7b565b6112e35761129760a08b018b61260e565b6112a5906020810190612118565b6040517f8174ff550000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610788565b60006112f260a08c018c61260e565b611300906020810190612118565b6001600160a01b03166341de68306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113619190612b8a565b600281111561137257611372611e1c565b146113d05761138460a08b018b61260e565b611392906020810190612118565b6040517fe4356c940000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610788565b81602001516001600160a01b031663a8a9c29e8c8c60000160200160208101906113fa9190612b36565b61140760a08f018f61260e565b6040518463ffffffff1660e01b815260040161142593929190612ba7565b6000604051808303816000875af1158015611444573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261146c9190810190612bd3565b809950819a5050506114d760405180604001604052808c6040018036038101906114969190612b6e565b81526020016114ab60a08e0160808f01612118565b6001600160a01b03168152506114c48a60200151611920565b8a516114cf90611b68565b8c6002611950565b90505b60008181526002870160205260409020548654101561150f57604051630559b4b760e31b815260048101829052602401610788565b6000818152600287016020526040902043905561152f8b828c8b8d611b9e565b505050505050509250929050565b6000828152602081815260408083208484526002810190925290912054815410611596576040517f59730ce600000000000000000000000000000000000000000000000000000000815260048101839052602401610788565b505050565b817ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad835486115c782826117dd565b60006115dd856102bb6080870160608801612118565b60008181526020819052604081209192506116786116003688900388018861225f565b61165c61161060808a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b828210156103435761164d60a083028601368190038101906122f9565b81526020019060010190611630565b8860a00135604051806020016040528060008152506001611950565b6001830154909150156116b7576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116c1838261153d565b60006116df6116d53689900389018961225f565b8860a00135611998565b60018401819055438455905060006116fa60808901896122a3565b9050111561176e576001600160a01b03881663e978afe561171e60808a018a6122a3565b6040518363ffffffff1660e01b815260040161173b92919061256b565b600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b505050505b61177e6080880160608901612118565b6001600160a01b0316886001600160a01b03167f74e616c7264536b98a5ec234d051ae6ce1305bf05c85f9ddc112364440ccf12984846040516117cb929190918252602082015260400190565b60405180910390a35050505050505050565b336001600160a01b0383161480159061188a5750604080516020810182526000815290517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0384169163fdef91069161184791309133918791600401612c2d565b602060405180830381865afa158015611864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118889190612966565b155b156118d9576040517f15d68ee00000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015233602482015260448101829052606401610788565b5050565b604080516001600160a01b0380851660208301528316918101919091526000906060015b6040516020818303038152906040528051906020012090505b92915050565b6000816040516020016119339190611eeb565b604051602081830303815290604052805190602001209050919050565b8451602080870151845185830120604051600094611977949093928a928a92899101612c69565b60405160208183030381529060405280519060200120905095945050505050565b815160208084015160408051845160ff1681850152929093015161ffff16928201929092526001600160a01b0390911660608201526080810182905260009060a001611901565b805115611b21576040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690611a2d9085908590600401612cc4565b600060405180830381600087803b158015611a4757600080fd5b505af1925050508015611a58575060015b61159657611a64612ce6565b806308c379a003611ab75750611a78612d02565b80611a835750611ab9565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107889190612daa565b505b3d808015611ae3576040519150601f19603f3d011682016040523d82523d6000602084013e611ae8565b606091505b508383836040517f96e9e31b00000000000000000000000000000000000000000000000000000000815260040161078893929190612dbd565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690633659cfe690602401611a2d565b6000816040516020016119339190612de9565b6000611b8683611c12565b8015611b975750611b978383611c76565b9392505050565b611bae60a0840160808501612118565b6001600160a01b03908116908616337f3686138d92841c8549b2fe39fda23881fef6aa9b347352114c0869bf5af3e3f28760408801611bf060a08a018a61260e565b8888604051611c03959493929190612e36565b60405180910390a45050505050565b6000611c3e827f01ffc9a700000000000000000000000000000000000000000000000000000000611c76565b801561191a5750611c6f827fffffffff00000000000000000000000000000000000000000000000000000000611c76565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611d2e575060208210155b8015611d3a5750600081115b979650505050505050565b6001600160a01b0381168114611d5a57600080fd5b50565b60008060408385031215611d7057600080fd5b8235611d7b81611d45565b9150602083013567ffffffffffffffff811115611d9757600080fd5b830160e08186031215611da957600080fd5b809150509250929050565b600060808284031215611dc657600080fd5b50919050565b60008060408385031215611ddf57600080fd5b8235611dea81611d45565b9150602083013567ffffffffffffffff811115611e0657600080fd5b611e1285828601611db4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611e5b57611e5b611e1c565b9052565b611e6a828251611e4b565b6020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b600081518084526020808501945080840160005b83811015611ee057611ed2878351611e5f565b965090820190600101611ebf565b509495945050505050565b602081526000611b976020830184611eab565b805160408084528151908401819052600091602091908201906060860190845b81811015611f435783516001600160a01b031683529284019291840191600101611f1e565b50508483015186820387850152805180835290840192506000918401905b80831015611f8657611f74828551611e5f565b91508484019350600183019250611f61565b509695505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184611efe565b949350505050565b60008060408385031215611fce57600080fd5b8235611fd981611d45565b9150602083013567ffffffffffffffff811115611ff557600080fd5b830160a08186031215611da957600080fd5b600060c08284031215611dc657600080fd5b6000806040838503121561202c57600080fd5b823561203781611d45565b9150602083013567ffffffffffffffff81111561205357600080fd5b611e1285828601612007565b60005b8381101561207a578181015183820152602001612062565b50506000910152565b6000815180845261209b81602086016020860161205f565b601f01601f19169290920160200192915050565b6040815260006120c26040830185612083565b82810360208401526120d48185611efe565b95945050505050565b600080604083850312156120f057600080fd5b50508035926020909101359150565b60006020828403121561211157600080fd5b5035919050565b60006020828403121561212a57600080fd5b8135611b9781611d45565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810181811067ffffffffffffffff8211171561218457612184612135565b60405250565b6060810181811067ffffffffffffffff8211171561218457612184612135565b60a0810181811067ffffffffffffffff8211171561218457612184612135565b601f19601f830116810181811067ffffffffffffffff821117156121f0576121f0612135565b6040525050565b60ff81168114611d5a57600080fd5b61ffff81168114611d5a57600080fd5b60006040828403121561222857600080fd5b60405161223481612164565b8091508235612242816121f7565b8152602083013561225281612206565b6020919091015292915050565b60006060828403121561227157600080fd5b60405161227d81612164565b6122878484612216565b8152604083013561229781611d45565b60208201529392505050565b6000808335601e198436030181126122ba57600080fd5b83018035915067ffffffffffffffff8211156122d557600080fd5b602001915060a081023603821315610cef57600080fd5b60038110611d5a57600080fd5b600060a0828403121561230b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561232e5761232e612135565b604052823561233c816122ec565b8152602083013561234c81611d45565b6020820152604083013561235f81611d45565b6040820152606083013561237281611d45565b60608201526080928301359281019290925250919050565b6000808335601e198436030181126123a157600080fd5b83018035915067ffffffffffffffff8211156123bc57600080fd5b602001915036819003821315610cef57600080fd5b80356123dc816121f7565b60ff16825260208101356123ef81612206565b61ffff81166020840152505050565b6040810161191a82846123d1565b805161241781611d45565b919050565b600082601f83011261242d57600080fd5b815167ffffffffffffffff81111561244757612447612135565b60405161245e6020601f19601f85011601826121ca565b81815284602083860101111561247357600080fd5b611fb382602083016020870161205f565b60006020828403121561249657600080fd5b815167ffffffffffffffff808211156124ae57600080fd5b9083019081850360808112156124c357600080fd5b6040516124cf8161218a565b60408212156124dd57600080fd5b60405191506124eb82612164565b83516124f6816121f7565b8252602084015161250681612206565b602083015281815261251a6040850161240c565b6020820152606084015191508282111561253357600080fd5b61253f8783860161241c565b60408201529695505050505050565b60006020828403121561256057600080fd5b8151611b9781611d45565b6020808252818101839052600090604080840186845b87811015612601578135612594816122ec565b61259e8482611e4b565b50848201356125ac81611d45565b6001600160a01b039081168487015282850135906125c982611d45565b90811684860152606090838201356125e081611d45565b16908401526080828101359084015260a09283019290910190600101612581565b5090979650505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261264257600080fd5b9190910192915050565b6000808335601e1984360301811261266357600080fd5b83018035915067ffffffffffffffff82111561267e57600080fd5b6020019150600581901b3603821315610cef57600080fd5b6000808335601e198436030181126126ad57600080fd5b830160208101925035905067ffffffffffffffff8111156126cd57600080fd5b803603821315610cef57600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b600060608301823561271881611d45565b6001600160a01b0380821686526020915081850135601e1986360301811261273f57600080fd5b8501828101903567ffffffffffffffff81111561275b57600080fd5b8060051b360382131561276d57600080fd5b6060888501529384905292600090608088015b818310156127a957853561279381611d45565b8416815294840194600192909201918401612780565b6127b66040890189612696565b9650945088810360408a01526127cd8187876126dc565b9998505050505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184612707565b600067ffffffffffffffff82111561281657612816612135565b5060051b60200190565b600082601f83011261283157600080fd5b8151602061283e826127fc565b6040805161284c83826121ca565b84815260a0948502870184019484820193508886111561286b57600080fd5b8488015b868110156128eb5781818b0312156128875760008081fd5b8351612892816121aa565b815161289d816122ec565b8152818701516128ac81611d45565b81880152818501516128bd81611d45565b818601526060828101516128d081611d45565b9082015260808281015190820152855293850193810161286f565b509098975050505050505050565b60006020828403121561290b57600080fd5b815167ffffffffffffffff81111561292257600080fd5b611fb384828501612820565b84815261293e60208201856123d1565b60a06060820152600061295460a0830185612707565b8281036080840152611d3a8185611eab565b60006020828403121561297857600080fd5b81518015158114611b9757600080fd5b6001600160a01b03841681526040602082015260006120d46040830184866126dc565b6000604082840312156129bd57600080fd5b6040516129c981612164565b809150825167ffffffffffffffff808211156129e457600080fd5b818501915085601f8301126129f857600080fd5b81516020612a05826127fc565b604051612a1282826121ca565b83815260059390931b8501820192828101915089841115612a3257600080fd5b948201945b83861015612a59578551612a4a81611d45565b82529482019490820190612a37565b86525086810151935082841115612a6f57600080fd5b612a7b88858901612820565b81860152505050505092915050565b60008060408385031215612a9d57600080fd5b8251612aa881611d45565b602084015190925067ffffffffffffffff811115612ac557600080fd5b611e12858286016129ab565b868152612ae160208201876123d1565b60c060608201526000612af860c0830186886126dc565b6001600160a01b038516608084015282810360a08401526127cd8185611efe565b600060208284031215612b2b57600080fd5b8135611b97816121f7565b600060208284031215612b4857600080fd5b8135611b9781612206565b60808101612b6182856123d1565b611b9760408301846123d1565b600060408284031215612b8057600080fd5b611b978383612216565b600060208284031215612b9c57600080fd5b8151611b97816122ec565b6001600160a01b038416815261ffff831660208201526060604082015260006120d46060830184612707565b60008060408385031215612be657600080fd5b825167ffffffffffffffff80821115612bfe57600080fd5b612c0a8683870161241c565b93506020850151915080821115612c2057600080fd5b50611e12858286016129ab565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c5f6080830184612083565b9695505050505050565b865160ff16815260208088015161ffff169082015260e081016001600160a01b03871660408301528560608301528460808301528360a083015260048310612cb357612cb3611e1c565b8260c0830152979650505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184612083565b600060033d1115612cff5760046000803e5060005160e01c5b90565b600060443d1015612d105790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715612d5e57505050505090565b8285019150815181811115612d765750505050505090565b843d8701016020828501011115612d905750505050505090565b612d9f602082860101876121ca565b509095945050505050565b602081526000611b976020830184612083565b60006001600160a01b038086168352808516602084015250606060408301526120d46060830184612083565b6020808252825182820181905260009190848201906040850190845b81811015612e2a5783516001600160a01b031683529284019291840191600101612e05565b50909695505050505050565b858152612e4660208201866123d1565b60c060608201526000612e5c60c0830186612707565b8281036080840152612e6e8186611efe565b905082810360a0840152612e828185612083565b9897505050505050505056fea2646970667358221220f123ca3e179dd0541764092bfbb9d8987f8cea6a7052a8952f313efa9c78714164736f6c63430008110033";
var isSuperArgs$T = (xs) => xs.length > 1;
var PluginSetupProcessor__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$T(args)) {
      super(...args);
    } else {
      super(_abi$10, _bytecode$T, args[0]);
    }
  }
  deploy(_repoRegistry, overrides) {
    return super.deploy(_repoRegistry, overrides || {});
  }
  getDeployTransaction(_repoRegistry, overrides) {
    return super.getDeployTransaction(_repoRegistry, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$10);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$10, signerOrProvider);
  }
};
PluginSetupProcessor__factory.bytecode = _bytecode$T;
PluginSetupProcessor__factory.abi = _abi$10;
var index$D = Object.freeze({
  __proto__: null,
  IPluginSetup__factory,
  PluginSetup__factory,
  PluginSetupProcessor__factory
});
var index$C = Object.freeze({
  __proto__: null,
  repo: index$E,
  setup: index$D
});
var _abi$$ = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subnode",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "nodeOwner",
        type: "address"
      }
    ],
    name: "AlreadyRegistered",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "resolver",
        type: "address"
      }
    ],
    name: "InvalidResolver",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_REGISTRAR_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "ens",
    outputs: [
      {
        internalType: "contract ENS",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_managingDao",
        type: "address"
      },
      {
        internalType: "contract ENS",
        name: "_ens",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_node",
        type: "bytes32"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "node",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_label",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_targetAddress",
        type: "address"
      }
    ],
    name: "registerSubnode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_resolver",
        type: "address"
      }
    ],
    name: "setDefaultResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$S = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516115a4610119600039600081816102870152818161032201528181610429015281816104bf01526105ba01526115a46000f3fe6080604052600436106100c75760003560e01c80636133f98511610074578063af7b2fed1161004e578063af7b2fed14610213578063c66485b214610247578063d70754ec1461026757600080fd5b80636133f9851461019f57806389bb4145146101bf5780639848ba51146101df57600080fd5b80634162169f116100a55780634162169f1461014b5780634f1ef2861461016957806352d1902d1461017c57600080fd5b806304f3bcec146100cc5780633659cfe6146101095780633f15457f1461012b575b600080fd5b3480156100d857600080fd5b5060cb546100ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046112a7565b61027d565b005b34801561013757600080fd5b5060c9546100ec906001600160a01b031681565b34801561015757600080fd5b506097546001600160a01b03166100ec565b6101296101773660046112f3565b61041f565b34801561018857600080fd5b506101916105ad565b604051908152602001610100565b3480156101ab57600080fd5b506101296101ba3660046113b7565b610672565b3480156101cb57600080fd5b506101296101da3660046113f8565b6108e0565b3480156101eb57600080fd5b506101917fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1481565b34801561021f57600080fd5b506101917fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff81565b34801561025357600080fd5b506101296102623660046112a7565b610bd6565b34801561027357600080fd5b5061019160ca5481565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661037b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146103f75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610317565b61040081610c95565b6040805160008082526020820190925261041c91839190610cce565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104bd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610317565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105187f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105945760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610317565b61059d82610c95565b6105a982826001610cce565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461064d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610317565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054610100900460ff16158080156106925750600054600160ff909116105b806106ac5750303b1580156106ac575060005460ff166001145b61071e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610317565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561075f576000805461ff0019166101001790555b61076884610e73565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851690811790915560ca8390556040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810184905260009190630178b8bf90602401602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190611428565b90506001600160a01b038116610867576040517f1ae12f8a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382166024820152604401610317565b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580156108da576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c149061091e906001600160a01b031630335b84600036610f1f565b600060ca548460405160200161093e929190918252602082015260400190565b60408051808303601f1901815290829052805160209091012060c9547f02571be3000000000000000000000000000000000000000000000000000000008352600483018290529092506000916001600160a01b03909116906302571be390602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611428565b90506001600160a01b03811615610a35576040517f01f95aba000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382166024820152604401610317565b60c95460ca546040517f06ab59230000000000000000000000000000000000000000000000000000000081526004810191909152602481018790523060448201526001600160a01b03909116906306ab5923906064016020604051808303816000875af1158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190611445565b5060c95460cb546040517f1896f70a000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039182166024820152911690631896f70a90604401600060405180830381600087803b158015610b3857600080fd5b505af1158015610b4c573d6000803e3d6000fd5b505060cb546040517fd5fa2b00000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038881166024830152909116925063d5fa2b009150604401600060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b505050505050505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1490610c0f906001600160a01b03163033610915565b6001600160a01b038216610c655760ca546040517f1ae12f8a00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b0383166024820152604401610317565b5060cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6097547fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff906105a9906001600160a01b03163033610915565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d0657610d018361100d565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d60575060408051601f3d908101601f19168201909252610d5d91810190611445565b60015b610dd25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610317565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610e675760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610317565b50610d018383836110d8565b600054610100900460ff16610ef05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610317565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610f6c908890889088908890889060040161145e565b602060405180830381865afa158015610f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fad91906114b2565b611005576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610317565b505050505050565b6001600160a01b0381163b61108a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610317565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6110e1836110fd565b6000825111806110ee5750805b15610d01576108da838361113d565b6111068161100d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610317565b600080846001600160a01b0316846040516111d791906114f8565b600060405180830381855af49150503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b509150915061123f828260405180606001604052806027815260200161154860279139611248565b95945050505050565b60608315611257575081611261565b6112618383611268565b9392505050565b8151156112785781518083602001fd5b8060405162461bcd60e51b81526004016103179190611514565b6001600160a01b038116811461041c57600080fd5b6000602082840312156112b957600080fd5b813561126181611292565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561130657600080fd5b823561131181611292565b9150602083013567ffffffffffffffff8082111561132e57600080fd5b818501915085601f83011261134257600080fd5b813581811115611354576113546112c4565b604051601f8201601f19908116603f0116810190838211818310171561137c5761137c6112c4565b8160405282815288602084870101111561139557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000606084860312156113cc57600080fd5b83356113d781611292565b925060208401356113e781611292565b929592945050506040919091013590565b6000806040838503121561140b57600080fd5b82359150602083013561141d81611292565b809150509250929050565b60006020828403121561143a57600080fd5b815161126181611292565b60006020828403121561145757600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156114c457600080fd5b8151801515811461126157600080fd5b60005b838110156114ef5781810151838201526020016114d7565b50506000910152565b6000825161150a8184602087016114d4565b9190910192915050565b60208152600082518060208401526115338160408501602087016114d4565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220199e950f495958c9fe43b19951f2b7b2d5ff703f6b3cff0f30265fc0f6adc9f564736f6c63430008110033";
var isSuperArgs$S = (xs) => xs.length > 1;
var ENSSubdomainRegistrar__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$S(args)) {
      super(...args);
    } else {
      super(_abi$$, _bytecode$S, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$$);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$$, signerOrProvider);
  }
};
ENSSubdomainRegistrar__factory.bytecode = _bytecode$S;
ENSSubdomainRegistrar__factory.abi = _abi$$;
var index$B = Object.freeze({
  __proto__: null,
  ENSSubdomainRegistrar__factory
});
var _abi$_ = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractAlreadyRegistered",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractERC165SupportInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractInterfaceInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_REGISTRY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "entries",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "targetInterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var InterfaceBasedRegistry__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$_);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$_, signerOrProvider);
  }
};
InterfaceBasedRegistry__factory.abi = _abi$_;
var _abi$Z = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "TokenNotERC20",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract MerkleMinter",
        name: "minter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IMerkleDistributor",
        name: "distributor",
        type: "address"
      }
    ],
    name: "TokenCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract GovernanceWrappedERC20",
        name: "token",
        type: "address"
      }
    ],
    name: "WrappedToken",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "contract DAO",
        name: "_managingDao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address"
          },
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          }
        ],
        internalType: "struct TokenFactory.TokenConfig",
        name: "_tokenConfig",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "receivers",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          }
        ],
        internalType: "struct GovernanceERC20.MintSettings",
        name: "_mintSettings",
        type: "tuple"
      }
    ],
    name: "createToken",
    outputs: [
      {
        internalType: "contract ERC20VotesUpgradeable",
        name: "",
        type: "address"
      },
      {
        internalType: "contract MerkleMinter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "distributorBase",
    outputs: [
      {
        internalType: "contract MerkleDistributor",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "governanceERC20Base",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "governanceWrappedERC20Base",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "merkleMinterBase",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$R = "";
var isSuperArgs$R = (xs) => xs.length > 1;
var TokenFactory__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$R(args)) {
      super(...args);
    } else {
      super(_abi$Z, _bytecode$R, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$Z);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$Z, signerOrProvider);
  }
};
TokenFactory__factory.bytecode = _bytecode$R;
TokenFactory__factory.abi = _abi$Z;
var index$A = Object.freeze({
  __proto__: null,
  ens: index$B,
  InterfaceBasedRegistry__factory,
  TokenFactory__factory
});
var index$z = Object.freeze({
  __proto__: null,
  dao: index$F,
  plugin: index$C,
  utils: index$A
});
var _abi$Y = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "MULTIPLY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "contract MultiplyHelper",
        name: "_multiplyHelper",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256"
      }
    ],
    name: "multiply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multiplyHelper",
    outputs: [
      {
        internalType: "contract MultiplyHelper",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$Q = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516113f961011960003960008181610523015281816105b9015281816106c001528181610756015261085101526113f96000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780639b97d03a116100595780639b97d03a14610215578063b73fa1e714610236578063c6888fa11461026a578063c9c4bfca1461028a57600080fd5b806352d1902d146101df5780635c60da1b146101f4578063614619541461020957600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e257806306661abd146101175780631794bb3c1461013c575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611098565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012e61012d5481565b60405190815260200161010e565b34801561014857600080fd5b5061015c6101573660046110ef565b6103a3565b005b34801561016a57600080fd5b5061015c610179366004611130565b610519565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061114d565b61015c6101da3660046111bd565b6106b6565b3480156101eb57600080fd5b5061012e610844565b34801561020057600080fd5b50610198610909565b34801561015c57600080fd5b34801561022157600080fd5b5061012e54610198906001600160a01b031681565b34801561024257600080fd5b5061012e7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561027657600080fd5b5061012e610285366004611281565b610941565b34801561029657600080fd5b5061012e7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061039d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156103c35750600054600160ff909116105b806103dd5750303b1580156103dd575060005460ff166001145b6104545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610495576000805461ff0019166101001790555b61049e84610a21565b61012d82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015610513576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106127f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461068e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61069781610aa7565b604080516000808252602082019092526106b391839190610ae0565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461082b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61083482610aa7565b61084082826001610ae0565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161044b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061093c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610982906001600160a01b031630335b84600036610c85565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109d9918790600401918252602082015260400190565b602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061129a565b9392505050565b600054610100900460ff16610a9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b6106b381610d73565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610840906001600160a01b03163033610979565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b1857610b1383610e1f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b72575060408051601f3d908101601f19168201909252610b6f9181019061129a565b60015b610be45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c795760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161044b565b50610b13838383610eea565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cd290889088908890889088906004016112b3565b602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190611307565b610d6b576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161044b565b505050505050565b600054610100900460ff16610df05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163b610e9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ef383610f0f565b600082511180610f005750805b15610b13576105138383610f4f565b610f1881610e1f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610fce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161044b565b600080846001600160a01b031684604051610fe9919061134d565b600060405180830381855af49150503d8060008114611024576040519150601f19603f3d011682016040523d82523d6000602084013e611029565b606091505b5091509150611051828260405180606001604052806027815260200161139d6027913961105a565b95945050505050565b60608315611069575081610a1a565b610a1a838381511561107e5781518083602001fd5b8060405162461bcd60e51b815260040161044b9190611369565b6000602082840312156110aa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1a57600080fd5b6001600160a01b03811681146106b357600080fd5b60008060006060848603121561110457600080fd5b833561110f816110da565b9250602084013561111f816110da565b929592945050506040919091013590565b60006020828403121561114257600080fd5b8135610a1a816110da565b6020810160038310611188577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d057600080fd5b82356111db816110da565b9150602083013567ffffffffffffffff808211156111f857600080fd5b818501915085601f83011261120c57600080fd5b81358181111561121e5761121e61118e565b604051601f8201601f19908116603f011681019083821181831017156112465761124661118e565b8160405282815288602084870101111561125f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129357600080fd5b5035919050565b6000602082840312156112ac57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561131957600080fd5b81518015158114610a1a57600080fd5b60005b8381101561134457818101518382015260200161132c565b50506000910152565b6000825161135f818460208701611329565b9190910192915050565b6020815260008251806020840152611388816040850160208701611329565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122069f36c03cad214bd792f193935796c8899e6d1415ca13750675b1456e60023ff64736f6c63430008110033";
var isSuperArgs$Q = (xs) => xs.length > 1;
var CounterV1__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$Q(args)) {
      super(...args);
    } else {
      super(_abi$Y, _bytecode$Q, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$Y);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$Y, signerOrProvider);
  }
};
CounterV1__factory.bytecode = _bytecode$Q;
CounterV1__factory.abi = _abi$Y;
var _abi$X = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "counterBase",
    outputs: [
      {
        internalType: "contract CounterV1",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multiplyHelperBase",
    outputs: [
      {
        internalType: "contract MultiplyHelper",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$P = "0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c2565b61112d8061182883390190565b6115128061295583390190565b611757806100d16000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639cb0a12411620000625780639cb0a12414620000f7578063a8a9c29e146200011d578063eee774ca1462000144578063f10832f1146200015857600080fd5b806301ffc9a7146200008c5780630af30a7f14620000b85780635c60da1b14620000e5575b600080fd5b620000a36200009d36600462000a70565b6200017f565b60405190151581526020015b60405180910390f35b600154620000cc906001600160a01b031681565b6040516001600160a01b039091168152602001620000af565b6001546001600160a01b0316620000cc565b6200010e6200010836600462000ae6565b62000219565b604051620000af919062000ba3565b620001346200012e36600462000bf0565b6200058c565b604051620000af92919062000d5f565b600054620000cc906001600160a01b031681565b6200016f6200016936600462000d91565b620005b4565b604051620000af92919062000e1d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200021357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606200022a602083018362000e49565b90506000036200023c5760026200023f565b60035b60ff1667ffffffffffffffff8111156200025d576200025d62000ebb565b604051908082528060200260200182016040528015620002b857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200027c5790505b506040805160a081019091529091508060018152602001846001600160a01b03168152602001836000016020810190620002f3919062000ed1565b6001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d815250816000815181106200034b576200034b62000ef1565b60209081029190910101526040805160a0810190915280600181526020908101906200037a9085018562000ed1565b6001600160a01b03168152602001846001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062000f07565b815250816001815181106200043a576200043a62000ef1565b602002602001018190525081806020019062000457919062000e49565b15905062000213576040805160a0810190915260018152602080820190620004829085018562000e49565b600081811062000496576200049662000ef1565b9050602002016020810190620004ad919062000ed1565b6001600160a01b03168152602090810190620004cc9085018562000ed1565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200053c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000562919062000f07565b815250816002815181106200057b576200057b62000ef1565b602002602001018190525092915050565b6060620005ac604051806040016040528060608152602001606081525090565b935093915050565b6000620005d4604051806040016040528060608152602001606081525090565b600080620005e58587018762000f21565b9092509050816001600160a01b038116620006265760008054604080516020810190915291825262000623916001600160a01b039091169062000a09565b90505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c0000000000000000000000000000000000000000000000000000000017905290600090851615620006b8576002620006bb565b60035b60ff1667ffffffffffffffff811115620006d957620006d962000ebb565b6040519080825280602002602001820160405280156200073457816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620006f85790505b5060408051600180825281830190925291925060009190602080830190803683370190505060015490915062000774906001600160a01b03168462000a09565b6040805160a0810190915290985080600081526020018c6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81525082600081518110620007f257620007f262000ef1565b60209081029190910101526040805160a081019091528060008152602001896001600160a01b031681526020018c6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000892573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008b8919062000f07565b81525082600181518110620008d157620008d162000ef1565b60209081029190910101526001600160a01b038616620009c9576040805160a081019091528060008152602001856001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200097e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a4919062000f07565b81525082600281518110620009bd57620009bd62000ef1565b60200260200101819052505b8381600081518110620009e057620009e062000ef1565b6001600160a01b0390921660209283029190910182015290875286015250505050935093915050565b600062000a17838362000a1e565b9392505050565b6000828260405162000a309062000a62565b62000a3d92919062000f50565b604051809103906000f08015801562000a5a573d6000803e3d6000fd5b509392505050565b6107ad8062000f7583390190565b60006020828403121562000a8357600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000a1757600080fd5b6001600160a01b038116811462000aca57600080fd5b50565b60006060828403121562000ae057600080fd5b50919050565b6000806040838503121562000afa57600080fd5b823562000b078162000ab4565b9150602083013567ffffffffffffffff81111562000b2457600080fd5b62000b328582860162000acd565b9150509250929050565b600081516003811062000b5f57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000be45762000bd583855162000b3c565b93850193925060010162000bbf565b50909695505050505050565b60008060006060848603121562000c0657600080fd5b833562000c138162000ab4565b9250602084013561ffff8116811462000c2b57600080fd5b9150604084013567ffffffffffffffff81111562000c4857600080fd5b62000c568682870162000acd565b9150509250925092565b6000815180845260005b8181101562000c885760208185018101518683018201520162000c6a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b8181101562000d0d5783516001600160a01b03168352928401929184019160010162000ce6565b50508483015186820387850152805180835290840192506000918401905b8083101562000d545762000d4182855162000b3c565b9150848401935060018301925062000d2b565b509695505050505050565b60408152600062000d74604083018562000c60565b828103602084015262000d88818562000cc6565b95945050505050565b60008060006040848603121562000da757600080fd5b833562000db48162000ab4565b9250602084013567ffffffffffffffff8082111562000dd257600080fd5b818601915086601f83011262000de757600080fd5b81358181111562000df757600080fd5b87602082850101111562000e0a57600080fd5b6020830194508093505050509250925092565b6001600160a01b038316815260406020820152600062000e41604083018462000cc6565b949350505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811262000e7f57600080fd5b83018035915067ffffffffffffffff82111562000e9b57600080fd5b6020019150600581901b360382131562000eb457600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000ee457600080fd5b813562000a178162000ab4565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000f1a57600080fd5b5051919050565b6000806040838503121562000f3557600080fd5b823562000f428162000ab4565b946020939093013593505050565b6001600160a01b038316815260406020820152600062000e41604083018462000c6056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd77406bebf06645ca57a881e1e6a3d7e060ac0c5a95cfae9f91974391de218d64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611014610119600039600081816103700152818161040b01528181610512015281816105a801526106a301526110146000f3fe6080604052600436106100b15760003560e01c80634f1ef286116100695780635c60da1b1161004e5780635c60da1b146101b1578063b73fa1e7146101c6578063c9c4bfca146101fa57600080fd5b80634f1ef2861461018957806352d1902d1461019c57600080fd5b80633659cfe61161009a5780633659cfe6146101195780634162169f1461013b57806341de68301461016d57600080fd5b806301ffc9a7146100b6578063165c4a16146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610cf5565b61022e565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610d37565b610313565b6040519081526020016100e2565b34801561012557600080fd5b50610139610134366004610d75565b610366565b005b34801561014757600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561017957600080fd5b5060006040516100e29190610d90565b610139610197366004610dce565b610508565b3480156101a857600080fd5b5061010b610696565b3480156101bd57600080fd5b5061015561075b565b3480156101d257600080fd5b5061010b7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561020657600080fd5b5061010b7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102c157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061030d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610354906001600160a01b031630335b84600036610793565b61035e8385610e90565b949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104095760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104647f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104e05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610400565b6104e981610881565b60408051600080825260208201909252610505918391906108ba565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105a65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610400565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461067d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610400565b61068682610881565b610692828260016108ba565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107365760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610400565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061078e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906107e09088908890889088908890600401610eb5565b602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190610f09565b610879576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610400565b505050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610692906001600160a01b0316303361034b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108f2576108ed83610a5f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561094c575060408051601f3d908101601f1916820190925261094991810190610f2b565b60015b6109be5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610400565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a535760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610400565b506108ed838383610b35565b6001600160a01b0381163b610adc5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610400565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610b3e83610b60565b600082511180610b4b5750805b156108ed57610b5a8383610ba0565b50505050565b610b6981610a5f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610c1f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610400565b600080846001600160a01b031684604051610c3a9190610f68565b600060405180830381855af49150503d8060008114610c75576040519150601f19603f3d011682016040523d82523d6000602084013e610c7a565b606091505b5091509150610ca28282604051806060016040528060278152602001610fb860279139610cab565b95945050505050565b60608315610cba575081610cc4565b610cc48383610ccb565b9392505050565b815115610cdb5781518083602001fd5b8060405162461bcd60e51b81526004016104009190610f84565b600060208284031215610d0757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cc457600080fd5b60008060408385031215610d4a57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610d7057600080fd5b919050565b600060208284031215610d8757600080fd5b610cc482610d59565b6020810160038310610db257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610de157600080fd5b610dea83610d59565b9150602083013567ffffffffffffffff80821115610e0757600080fd5b818501915085601f830112610e1b57600080fd5b813581811115610e2d57610e2d610db8565b604051601f8201601f19908116603f01168101908382118183101715610e5557610e55610db8565b81604052828152886020848701011115610e6e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b808202811582820484141761030d57634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215610f1b57600080fd5b81518015158114610cc457600080fd5b600060208284031215610f3d57600080fd5b5051919050565b60005b83811015610f5f578181015183820152602001610f47565b50506000910152565b60008251610f7a818460208701610f44565b9190910192915050565b6020815260008251806020840152610fa3816040850160208701610f44565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d927081e3b37080d1152e74075f3a8896d53cc3d4cec7dbd62a4c7cdb0c634f364736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516113f961011960003960008181610523015281816105b9015281816106c001528181610756015261085101526113f96000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780639b97d03a116100595780639b97d03a14610215578063b73fa1e714610236578063c6888fa11461026a578063c9c4bfca1461028a57600080fd5b806352d1902d146101df5780635c60da1b146101f4578063614619541461020957600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e257806306661abd146101175780631794bb3c1461013c575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611098565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012e61012d5481565b60405190815260200161010e565b34801561014857600080fd5b5061015c6101573660046110ef565b6103a3565b005b34801561016a57600080fd5b5061015c610179366004611130565b610519565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061114d565b61015c6101da3660046111bd565b6106b6565b3480156101eb57600080fd5b5061012e610844565b34801561020057600080fd5b50610198610909565b34801561015c57600080fd5b34801561022157600080fd5b5061012e54610198906001600160a01b031681565b34801561024257600080fd5b5061012e7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561027657600080fd5b5061012e610285366004611281565b610941565b34801561029657600080fd5b5061012e7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061039d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156103c35750600054600160ff909116105b806103dd5750303b1580156103dd575060005460ff166001145b6104545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610495576000805461ff0019166101001790555b61049e84610a21565b61012d82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015610513576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106127f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461068e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61069781610aa7565b604080516000808252602082019092526106b391839190610ae0565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461082b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61083482610aa7565b61084082826001610ae0565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161044b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061093c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610982906001600160a01b031630335b84600036610c85565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109d9918790600401918252602082015260400190565b602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061129a565b9392505050565b600054610100900460ff16610a9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b6106b381610d73565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610840906001600160a01b03163033610979565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b1857610b1383610e1f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b72575060408051601f3d908101601f19168201909252610b6f9181019061129a565b60015b610be45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c795760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161044b565b50610b13838383610eea565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cd290889088908890889088906004016112b3565b602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190611307565b610d6b576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161044b565b505050505050565b600054610100900460ff16610df05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163b610e9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ef383610f0f565b600082511180610f005750805b15610b13576105138383610f4f565b610f1881610e1f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610fce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161044b565b600080846001600160a01b031684604051610fe9919061134d565b600060405180830381855af49150503d8060008114611024576040519150601f19603f3d011682016040523d82523d6000602084013e611029565b606091505b5091509150611051828260405180606001604052806027815260200161139d6027913961105a565b95945050505050565b60608315611069575081610a1a565b610a1a838381511561107e5781518083602001fd5b8060405162461bcd60e51b815260040161044b9190611369565b6000602082840312156110aa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1a57600080fd5b6001600160a01b03811681146106b357600080fd5b60008060006060848603121561110457600080fd5b833561110f816110da565b9250602084013561111f816110da565b929592945050506040919091013590565b60006020828403121561114257600080fd5b8135610a1a816110da565b6020810160038310611188577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d057600080fd5b82356111db816110da565b9150602083013567ffffffffffffffff808211156111f857600080fd5b818501915085601f83011261120c57600080fd5b81358181111561121e5761121e61118e565b604051601f8201601f19908116603f011681019083821181831017156112465761124661118e565b8160405282815288602084870101111561125f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129357600080fd5b5035919050565b6000602082840312156112ac57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561131957600080fd5b81518015158114610a1a57600080fd5b60005b8381101561134457818101518382015260200161132c565b50506000910152565b6000825161135f818460208701611329565b9190910192915050565b6020815260008251806020840152611388816040850160208701611329565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122069f36c03cad214bd792f193935796c8899e6d1415ca13750675b1456e60023ff64736f6c63430008110033";
var isSuperArgs$P = (xs) => xs.length > 1;
var CounterV1PluginSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$P(args)) {
      super(...args);
    } else {
      super(_abi$X, _bytecode$P, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$X);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$X, signerOrProvider);
  }
};
CounterV1PluginSetup__factory.bytecode = _bytecode$P;
CounterV1PluginSetup__factory.abi = _abi$X;
var index$y = Object.freeze({
  __proto__: null,
  CounterV1__factory,
  CounterV1PluginSetup__factory
});
var _abi$W = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "MULTIPLY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "contract MultiplyHelper",
        name: "_multiplyHelper",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_newVariable",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256"
      }
    ],
    name: "multiply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multiplyHelper",
    outputs: [
      {
        internalType: "contract MultiplyHelper",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "newVariable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newVariable",
        type: "uint256"
      }
    ],
    name: "setNewVariable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$O = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516114fb610119600039600081816104ec01528181610582015281816106890152818161071f015261081a01526114fb6000f3fe6080604052600436106100f35760003560e01c80635c60da1b1161008a578063b73fa1e711610059578063b73fa1e714610263578063c6888fa114610297578063c9c4bfca146102b7578063eb990c59146102eb57600080fd5b80635c60da1b1461020a578063614619541461021f5780638d7a72f31461022b5780639b97d03a1461024257600080fd5b80634162169f116100c65780634162169f1461019457806341de6830146101c65780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f857806306661abd1461012d5780631c02ea0e146101525780633659cfe614610174575b600080fd5b34801561010457600080fd5b50610118610113366004611195565b61030b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014461012d5481565b604051908152602001610124565b34801561015e57600080fd5b5061017261016d3660046111d7565b6103f0565b005b34801561018057600080fd5b5061017261018f366004611205565b6104e2565b3480156101a057600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610124565b3480156101d257600080fd5b5060006040516101249190611222565b6101726101f0366004611292565b61067f565b34801561020157600080fd5b5061014461080d565b34801561021657600080fd5b506101ae6108d2565b34801561017257600080fd5b34801561023757600080fd5b5061014461012f5481565b34801561024e57600080fd5b5061012e546101ae906001600160a01b031681565b34801561026f57600080fd5b506101447f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b3480156102a357600080fd5b506101446102b23660046111d7565b61090a565b3480156102c357600080fd5b506101447f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102f757600080fd5b50610172610306366004611356565b6109ea565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061039e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600290610100900460ff16158015610412575060005460ff8083169116105b6104895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461012f84905561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105805760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106575760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b61066081610b18565b6040805160008082526020820190925261067c91839190610b51565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361071d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107787f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b6107fd82610b18565b61080982826001610b51565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ad5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610480565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006109057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d9061094b906001600160a01b031630335b84600036610cf6565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109a2918790600401918252602082015260400190565b602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e3919061139c565b9392505050565b600054600290610100900460ff16158015610a0c575060005460ff8083169116105b610a7e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610480565b6000805461ffff191660ff831617610100179055610a9b85610de4565b61012d83905561012f82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610809906001600160a01b03163033610942565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b8957610b8483610e6a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610be3575060408051601f3d908101601f19168201909252610be09181019061139c565b60015b610c555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610cea5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610480565b50610b84838383610f35565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d4390889088908890889088906004016113b5565b602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190611409565b610ddc576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610480565b505050505050565b600054610100900460ff16610e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b61067c81610f60565b6001600160a01b0381163b610ee75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f3e8361100c565b600082511180610f4b5750805b15610b8457610f5a838361104c565b50505050565b600054610100900460ff16610fdd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61101581610e6a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610480565b600080846001600160a01b0316846040516110e6919061144f565b600060405180830381855af49150503d8060008114611121576040519150601f19603f3d011682016040523d82523d6000602084013e611126565b606091505b509150915061114e828260405180606001604052806027815260200161149f60279139611157565b95945050505050565b606083156111665750816109e3565b6109e3838381511561117b5781518083602001fd5b8060405162461bcd60e51b8152600401610480919061146b565b6000602082840312156111a757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109e357600080fd5b6000602082840312156111e957600080fd5b5035919050565b6001600160a01b038116811461067c57600080fd5b60006020828403121561121757600080fd5b81356109e3816111f0565b602081016003831061125d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156112a557600080fd5b82356112b0816111f0565b9150602083013567ffffffffffffffff808211156112cd57600080fd5b818501915085601f8301126112e157600080fd5b8135818111156112f3576112f3611263565b604051601f8201601f19908116603f0116810190838211818310171561131b5761131b611263565b8160405282815288602084870101111561133457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561136c57600080fd5b8435611377816111f0565b93506020850135611387816111f0565b93969395505050506040820135916060013590565b6000602082840312156113ae57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561141b57600080fd5b815180151581146109e357600080fd5b60005b8381101561144657818101518382015260200161142e565b50506000910152565b6000825161146181846020870161142b565b9190910192915050565b602081526000825180602084015261148a81604085016020870161142b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de332d90a46d4d882afe3ad45381af77a445506a866a9c4310b6a56c2346c3c764736f6c63430008110033";
var isSuperArgs$O = (xs) => xs.length > 1;
var CounterV2__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$O(args)) {
      super(...args);
    } else {
      super(_abi$W, _bytecode$O, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$W);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$W, signerOrProvider);
  }
};
CounterV2__factory.bytecode = _bytecode$O;
CounterV2__factory.abi = _abi$W;
var _abi$V = [
  {
    inputs: [
      {
        internalType: "contract MultiplyHelper",
        name: "_helper",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "counterBase",
    outputs: [
      {
        internalType: "contract CounterV2",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multiplyHelperBase",
    outputs: [
      {
        internalType: "contract MultiplyHelper",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$N = "0x608060405234801561001057600080fd5b5060405161311538038061311583398101604081905261002f916100a6565b600080546001600160a01b0319166001600160a01b03831617905560405161005690610099565b604051809103906000f080158015610072573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506100d6565b61161480611b0183390190565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b611a1c806100e56000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639cb0a12411620000625780639cb0a12414620000f7578063a8a9c29e146200011d578063eee774ca1462000144578063f10832f1146200015857600080fd5b806301ffc9a7146200008c5780630af30a7f14620000b85780635c60da1b14620000e5575b600080fd5b620000a36200009d36600462000d0d565b6200017f565b60405190151581526020015b60405180910390f35b600154620000cc906001600160a01b031681565b6040516001600160a01b039091168152602001620000af565b6001546001600160a01b0316620000cc565b6200010e6200010836600462000d83565b62000219565b604051620000af919062000e40565b620001346200012e36600462000e8d565b6200058c565b604051620000af92919062000fde565b600054620000cc906001600160a01b031681565b6200016f6200016936600462001010565b62000851565b604051620000af9291906200109c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200021357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606200022a6020830183620010c8565b90506000036200023c5760026200023f565b60035b60ff1667ffffffffffffffff8111156200025d576200025d6200111c565b604051908082528060200260200182016040528015620002b857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200027c5790505b506040805160a081019091529091508060018152602001846001600160a01b03168152602001836000016020810190620002f3919062001132565b6001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d815250816000815181106200034b576200034b62001152565b60209081029190910101526040805160a0810190915280600181526020908101906200037a9085018562001132565b6001600160a01b03168152602001846001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062001168565b815250816001815181106200043a576200043a62001152565b6020026020010181905250818060200190620004579190620010c8565b15905062000213576040805160a08101909152600181526020808201906200048290850185620010c8565b600081811062000496576200049662001152565b9050602002016020810190620004ad919062001132565b6001600160a01b03168152602090810190620004cc9085018562001132565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200053c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000562919062001168565b815250816002815181106200057b576200057b62001152565b602002602001018190525092915050565b6060620005ac604051806040016040528060608152602001606081525090565b60008461ffff166001036200067257620005ca604085018562001182565b810190620005d99190620011cc565b90507f1c02ea0eb591e374e2400f8b45bd05ee00999bdf38dee00039e67b24f4be2d43816040516024016200061091815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915292505b604080516001808252818301909252600091816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620006895750506040805160a081018252600181526001600160a01b038a166020808301919091529293509190820190620006fb9088018862001132565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000791919062001168565b81525081600081518110620007aa57620007aa62001152565b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050620007e86020870187620010c8565b6000818110620007fc57620007fc62001152565b905060200201602081019062000813919062001132565b8160008151811062000829576200082962001152565b6001600160a01b03909216602092830291909101820152908452830152509094909350915050565b600062000871604051806040016040528060608152602001606081525090565b6000806200088285870187620011e6565b9092509050816001600160a01b038116620008c357600080546040805160208101909152918252620008c0916001600160a01b039091169062000ca6565b90505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c00000000000000000000000000000000000000000000000000000000179052906000908516156200095557600262000958565b60035b60ff1667ffffffffffffffff8111156200097657620009766200111c565b604051908082528060200260200182016040528015620009d157816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620009955790505b5060408051600180825281830190925291925060009190602080830190803683370190505060015490915062000a11906001600160a01b03168462000ca6565b6040805160a0810190915290985080600081526020018c6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d8152508260008151811062000a8f5762000a8f62001152565b60209081029190910101526040805160a081019091528060008152602001896001600160a01b031681526020018c6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b55919062001168565b8152508260018151811062000b6e5762000b6e62001152565b60209081029190910101526001600160a01b03861662000c66576040805160a081019091528060008152602001856001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c41919062001168565b8152508260028151811062000c5a5762000c5a62001152565b60200260200101819052505b838160008151811062000c7d5762000c7d62001152565b6001600160a01b0390921660209283029190910182015290875286015250505050935093915050565b600062000cb4838362000cbb565b9392505050565b6000828260405162000ccd9062000cff565b62000cda92919062001215565b604051809103906000f08015801562000cf7573d6000803e3d6000fd5b509392505050565b6107ad806200123a83390190565b60006020828403121562000d2057600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000cb457600080fd5b6001600160a01b038116811462000d6757600080fd5b50565b60006060828403121562000d7d57600080fd5b50919050565b6000806040838503121562000d9757600080fd5b823562000da48162000d51565b9150602083013567ffffffffffffffff81111562000dc157600080fd5b62000dcf8582860162000d6a565b9150509250929050565b600081516003811062000dfc57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000e815762000e7283855162000dd9565b93850193925060010162000e5c565b50909695505050505050565b60008060006060848603121562000ea357600080fd5b833562000eb08162000d51565b9250602084013561ffff8116811462000ec857600080fd5b9150604084013567ffffffffffffffff81111562000ee557600080fd5b62000ef38682870162000d6a565b9150509250925092565b6000815180845260005b8181101562000f255760208185018101518683018201520162000f07565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b8181101562000f8c5783516001600160a01b03168352928401929184019160010162000f65565b50508483015186820387850152805180835290840192506000918401905b8083101562000fd35762000fc082855162000dd9565b9150848401935060018301925062000faa565b509695505050505050565b60408152600062000ff3604083018562000efd565b828103602084015262001007818562000f45565b95945050505050565b6000806000604084860312156200102657600080fd5b8335620010338162000d51565b9250602084013567ffffffffffffffff808211156200105157600080fd5b818601915086601f8301126200106657600080fd5b8135818111156200107657600080fd5b8760208285010111156200108957600080fd5b6020830194508093505050509250925092565b6001600160a01b0383168152604060208201526000620010c0604083018462000f45565b949350505050565b6000808335601e19843603018112620010e057600080fd5b83018035915067ffffffffffffffff821115620010fc57600080fd5b6020019150600581901b36038213156200111557600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156200114557600080fd5b813562000cb48162000d51565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200117b57600080fd5b5051919050565b6000808335601e198436030181126200119a57600080fd5b83018035915067ffffffffffffffff821115620011b657600080fd5b6020019150368190038213156200111557600080fd5b600060208284031215620011df57600080fd5b5035919050565b60008060408385031215620011fa57600080fd5b8235620012078162000d51565b946020939093013593505050565b6001600160a01b0383168152604060208201526000620010c0604083018462000efd56fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e3f617a0c62d2336ebe35df2a46c89b0220a067fcf3e6ce1d232bf300dd172d664736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516114fb610119600039600081816104ec01528181610582015281816106890152818161071f015261081a01526114fb6000f3fe6080604052600436106100f35760003560e01c80635c60da1b1161008a578063b73fa1e711610059578063b73fa1e714610263578063c6888fa114610297578063c9c4bfca146102b7578063eb990c59146102eb57600080fd5b80635c60da1b1461020a578063614619541461021f5780638d7a72f31461022b5780639b97d03a1461024257600080fd5b80634162169f116100c65780634162169f1461019457806341de6830146101c65780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f857806306661abd1461012d5780631c02ea0e146101525780633659cfe614610174575b600080fd5b34801561010457600080fd5b50610118610113366004611195565b61030b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014461012d5481565b604051908152602001610124565b34801561015e57600080fd5b5061017261016d3660046111d7565b6103f0565b005b34801561018057600080fd5b5061017261018f366004611205565b6104e2565b3480156101a057600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610124565b3480156101d257600080fd5b5060006040516101249190611222565b6101726101f0366004611292565b61067f565b34801561020157600080fd5b5061014461080d565b34801561021657600080fd5b506101ae6108d2565b34801561017257600080fd5b34801561023757600080fd5b5061014461012f5481565b34801561024e57600080fd5b5061012e546101ae906001600160a01b031681565b34801561026f57600080fd5b506101447f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b3480156102a357600080fd5b506101446102b23660046111d7565b61090a565b3480156102c357600080fd5b506101447f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102f757600080fd5b50610172610306366004611356565b6109ea565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061039e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600290610100900460ff16158015610412575060005460ff8083169116105b6104895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461012f84905561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105805760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106575760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b61066081610b18565b6040805160008082526020820190925261067c91839190610b51565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361071d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107787f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b6107fd82610b18565b61080982826001610b51565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ad5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610480565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006109057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d9061094b906001600160a01b031630335b84600036610cf6565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109a2918790600401918252602082015260400190565b602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e3919061139c565b9392505050565b600054600290610100900460ff16158015610a0c575060005460ff8083169116105b610a7e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610480565b6000805461ffff191660ff831617610100179055610a9b85610de4565b61012d83905561012f82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610809906001600160a01b03163033610942565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b8957610b8483610e6a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610be3575060408051601f3d908101601f19168201909252610be09181019061139c565b60015b610c555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610cea5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610480565b50610b84838383610f35565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d4390889088908890889088906004016113b5565b602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190611409565b610ddc576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610480565b505050505050565b600054610100900460ff16610e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b61067c81610f60565b6001600160a01b0381163b610ee75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f3e8361100c565b600082511180610f4b5750805b15610b8457610f5a838361104c565b50505050565b600054610100900460ff16610fdd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61101581610e6a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610480565b600080846001600160a01b0316846040516110e6919061144f565b600060405180830381855af49150503d8060008114611121576040519150601f19603f3d011682016040523d82523d6000602084013e611126565b606091505b509150915061114e828260405180606001604052806027815260200161149f60279139611157565b95945050505050565b606083156111665750816109e3565b6109e3838381511561117b5781518083602001fd5b8060405162461bcd60e51b8152600401610480919061146b565b6000602082840312156111a757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109e357600080fd5b6000602082840312156111e957600080fd5b5035919050565b6001600160a01b038116811461067c57600080fd5b60006020828403121561121757600080fd5b81356109e3816111f0565b602081016003831061125d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156112a557600080fd5b82356112b0816111f0565b9150602083013567ffffffffffffffff808211156112cd57600080fd5b818501915085601f8301126112e157600080fd5b8135818111156112f3576112f3611263565b604051601f8201601f19908116603f0116810190838211818310171561131b5761131b611263565b8160405282815288602084870101111561133457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561136c57600080fd5b8435611377816111f0565b93506020850135611387816111f0565b93969395505050506040820135916060013590565b6000602082840312156113ae57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561141b57600080fd5b815180151581146109e357600080fd5b60005b8381101561144657818101518382015260200161142e565b50506000910152565b6000825161146181846020870161142b565b9190910192915050565b602081526000825180602084015261148a81604085016020870161142b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de332d90a46d4d882afe3ad45381af77a445506a866a9c4310b6a56c2346c3c764736f6c63430008110033";
var isSuperArgs$N = (xs) => xs.length > 1;
var CounterV2PluginSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$N(args)) {
      super(...args);
    } else {
      super(_abi$V, _bytecode$N, args[0]);
    }
  }
  deploy(_helper, overrides) {
    return super.deploy(_helper, overrides || {});
  }
  getDeployTransaction(_helper, overrides) {
    return super.getDeployTransaction(_helper, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$V);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$V, signerOrProvider);
  }
};
CounterV2PluginSetup__factory.bytecode = _bytecode$N;
CounterV2PluginSetup__factory.abi = _abi$V;
var index$x = Object.freeze({
  __proto__: null,
  CounterV2__factory,
  CounterV2PluginSetup__factory
});
var _abi$U = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "MULTIPLY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256"
      }
    ],
    name: "multiply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$M = "";
var isSuperArgs$M = (xs) => xs.length > 1;
var MultiplyHelper__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$M(args)) {
      super(...args);
    } else {
      super(_abi$U, _bytecode$M, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$U);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$U, signerOrProvider);
  }
};
MultiplyHelper__factory.bytecode = _bytecode$M;
MultiplyHelper__factory.abi = _abi$U;
var index$w = Object.freeze({
  __proto__: null,
  v1: index$y,
  v2: index$x,
  MultiplyHelper__factory
});
var _abi$T = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "definingContract",
        type: "address"
      }
    ],
    name: "MembershipContractAnnounced",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    inputs: [],
    name: "EXECUTE_PROPOSAL_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      }
    ],
    name: "executeProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$L = "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033";
var isSuperArgs$L = (xs) => xs.length > 1;
var Admin__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$L(args)) {
      super(...args);
    } else {
      super(_abi$T, _bytecode$L, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$T);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$T, signerOrProvider);
  }
};
Admin__factory.bytecode = _bytecode$L;
Admin__factory.abi = _abi$T;
var _abi$S = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address"
      }
    ],
    name: "AdminAddressInvalid",
    type: "error"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$K = "0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b61125580610bd583390190565b608051610b5c6100796000396000818160a1015261039e0152610b5c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100cb578063a8a9c29e146100eb578063f10832f11461010c57600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a366004610702565b61012d565b60405190151581526020015b60405180910390f35b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260200161008b565b6100de6100d936600461077b565b6101c6565b60405161008b919061084a565b6100fe6100f9366004610893565b6102f3565b60405161008b92919061098f565b61011f61011a366004610a12565b61031a565b60405161008b929190610a97565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806101c057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b604080516001808252818301909252606091816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816101dd5750506040805160a081018252600181526001600160a01b038616602080830191909152929350919082019061024c90850185610ac1565b6001600160a01b0316815260200160006001600160a01b03168152602001846001600160a01b0316630729d0546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc9190610ade565b815250816000815181106102e2576102e2610af7565b602002602001018190525092915050565b6060610312604051806040016040528060608152602001606081525090565b935093915050565b6000610339604051806040016040528060608152602001606081525090565b600061034784860186610ac1565b90506001600160a01b038116610399576040517f0849afa70000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b6103cb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610647565b6040517fc4d66de80000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529194509084169063c4d66de890602401600060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b50600092506002915061044f9050565b6040519080825280602002602001820160405280156104a857816020015b6040805160a08101825260008082526020808301829052928201819052606082018190526080820152825260001990920191018161046d5790505b506040805160a081019091529091508060008152602001856001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b031663cfceb5886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190610ade565b8152508160008151811061056557610565610af7565b60209081029190910101526040805160a081019091528060008152602001886001600160a01b03168152602001856001600160a01b0316815260200160006001600160a01b03168152602001886001600160a01b0316630729d0546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106139190610ade565b8152508160018151811061062957610629610af7565b60200260200101819052508083602001819052505050935093915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610390565b919050565b60006020828403121561071457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461074457600080fd5b9392505050565b6001600160a01b038116811461076057600080fd5b50565b60006060828403121561077557600080fd5b50919050565b6000806040838503121561078e57600080fd5b82356107998161074b565b9150602083013567ffffffffffffffff8111156107b557600080fd5b6107c185828601610763565b9150509250929050565b6000815160038110610806577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015610887576108798385516107cb565b938501939250600101610866565b50909695505050505050565b6000806000606084860312156108a857600080fd5b83356108b38161074b565b9250602084013561ffff811681146108ca57600080fd5b9150604084013567ffffffffffffffff8111156108e657600080fd5b6108f286828701610763565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156109415783516001600160a01b03168352928401929184019160010161091c565b50508483015186820387850152805180835290840192506000918401905b80831015610984576109728285516107cb565b9150848401935060018301925061095f565b509695505050505050565b604081526000835180604084015260005b818110156109bd57602081870181015160608684010152016109a0565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610a0960608201856108fc565b95945050505050565b600080600060408486031215610a2757600080fd5b8335610a328161074b565b9250602084013567ffffffffffffffff80821115610a4f57600080fd5b818601915086601f830112610a6357600080fd5b813581811115610a7257600080fd5b876020828501011115610a8457600080fd5b6020830194508093505050509250925092565b6001600160a01b0383168152604060208201526000610ab960408301846108fc565b949350505050565b600060208284031215610ad357600080fd5b81356107448161074b565b600060208284031215610af057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209bce921878c12d2ae97c6b4ac4ca06cd4d659b7b7b9ec9e85c38094cf2e83a5464736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033";
var isSuperArgs$K = (xs) => xs.length > 1;
var AdminSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$K(args)) {
      super(...args);
    } else {
      super(_abi$S, _bytecode$K, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$S);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$S, signerOrProvider);
  }
};
AdminSetup__factory.bytecode = _bytecode$K;
AdminSetup__factory.abi = _abi$S;
var index$v = Object.freeze({
  __proto__: null,
  Admin__factory,
  AdminSetup__factory
});
var _abi$R = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "DateOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address"
      }
    ],
    name: "InvalidAddresslistUpdate",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "MinDurationOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ProposalCreationForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecutionForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "RatioOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      }
    ],
    name: "VoteCastForbidden",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "definingContract",
        type: "address"
      }
    ],
    name: "MembershipContractAnnounced",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256"
      }
    ],
    name: "VoteCast",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "votingMode",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "supportThreshold",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minParticipation",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "minDuration",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minProposerVotingPower",
        type: "uint256"
      }
    ],
    name: "VotingSettingsUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "UPDATE_ADDRESSES_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "addAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "addresslistLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "addresslistLengthAtBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      }
    ],
    name: "canVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      },
      {
        internalType: "uint64",
        name: "_startDate",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "_endDate",
        type: "uint64"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "getProposal",
    outputs: [
      {
        internalType: "bool",
        name: "open",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "endDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "snapshotBlock",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.ProposalParameters",
        name: "parameters",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "abstain",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "yes",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "no",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.Tally",
        name: "tally",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      }
    ],
    name: "getVoteOption",
    outputs: [
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      },
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "isListedAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isMinParticipationReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReachedEarly",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minDuration",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minParticipation",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minProposerVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "removeAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "supportThreshold",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "totalVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      }
    ],
    name: "updateVotingSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "votingMode",
    outputs: [
      {
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$J = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b603254610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60325460ff9081161015620000e6576032805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613ee562000120600039600081816109d201528181610a6d01528181610b7401528181610c0a0152610d010152613ee56000f3fe60806040526004361061024f5760003560e01c80637c36e8e811610138578063c7f758a8116100b0578063cf1311491161007f578063f60046b211610064578063f60046b214610726578063f794062e1461073c578063fe0d94c11461075c57600080fd5b8063cf131149146106f1578063da35c6641461071157600080fd5b8063c7f758a81461064b578063c9c4bfca1461067d578063cc63604a146106b1578063ce6366c4146106d157600080fd5b80639cba302111610107578063a84eb999116100ec578063a84eb999146105eb578063b1bb8d261461060b578063c147210e1461062b57600080fd5b80639cba3021146105ab578063a230c524146105cb57600080fd5b80637c36e8e8146104de5780638377c460146104ff5780638a4b00f814610533578063970601d81461055357600080fd5b80633659cfe6116101cb57806352d1902d1161019a578063567157611161017f57806356715761146104685780635c60da1b146104a95780636a6b2d86146104be57600080fd5b806352d1902d14610433578063536f9f421461044857600080fd5b80633659cfe6146103ba5780634162169f146103da57806341de68301461040c5780634f1ef2861461042057600080fd5b806317d1b4041161022257806323d071881161020757806323d071881461036357806327f1608d146103855780633628731c1461039a57600080fd5b806317d1b404146103015780631befc4051461032157600080fd5b806301ffc9a714610254578063054fd2c2146102895780630de21856146102bf5780630dfb278e146102df575b600080fd5b34801561026057600080fd5b5061027461026f366004612ff4565b61077c565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b506101925465010000000000900463ffffffff165b60405163ffffffff9091168152602001610280565b3480156102cb57600080fd5b506102746102da36600461301e565b610828565b3480156102eb57600080fd5b506102ff6102fa36600461304f565b6108cb565b005b34801561030d57600080fd5b5061027461031c366004613094565b610916565b34801561032d57600080fd5b506103557fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b604051908152602001610280565b34801561036f57600080fd5b506101925460ff165b60405161028091906130f8565b34801561039157600080fd5b5061035561092d565b3480156103a657600080fd5b506102ff6103b5366004613150565b610947565b3480156103c657600080fd5b506102ff6103d5366004613192565b6109c8565b3480156103e657600080fd5b5060fb546001600160a01b03165b6040516001600160a01b039091168152602001610280565b34801561041857600080fd5b506000610378565b6102ff61042e36600461321e565b610b6a565b34801561043f57600080fd5b50610355610cf4565b34801561045457600080fd5b5061035561046336600461301e565b610dba565b34801561047457600080fd5b50610192546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff9091168152602001610280565b3480156104b557600080fd5b506103f4610dc5565b3480156104ca57600080fd5b506103556104d936600461301e565b610dfd565b3480156104ea57600080fd5b5061019254610100900463ffffffff166102aa565b34801561050b57600080fd5b506103557f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a3895381565b34801561053f57600080fd5b5061027461054e36600461301e565b610e0a565b34801561055f57600080fd5b5061059e61056e3660046132b1565b6000828152610191602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b60405161028091906132f5565b3480156105b757600080fd5b506103556105c636600461333d565b610e4a565b3480156105d757600080fd5b506102746105e6366004613192565b6110d7565b3480156105f757600080fd5b506102ff610606366004613150565b6110e2565b34801561061757600080fd5b50610274610626366004613422565b611156565b34801561063757600080fd5b506102ff61064636600461344e565b611182565b34801561065757600080fd5b5061066b61066636600461301e565b6112eb565b60405161028096959493929190613583565b34801561068957600080fd5b506103557f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156106bd57600080fd5b506102746106cc36600461301e565b611553565b3480156106dd57600080fd5b506102ff6106ec36600461363b565b61155e565b3480156106fd57600080fd5b5061027461070c36600461301e565b6115b8565b34801561071d57600080fd5b5061035561161a565b34801561073257600080fd5b5061019354610355565b34801561074857600080fd5b50610274610757366004613192565b611626565b34801561076857600080fd5b506102ff61077736600461301e565b61165a565b60006001600160e01b031982167f5f21eb8b0000000000000000000000000000000000000000000000000000000014806107df57506001600160e01b031982167f0bb5c60300000000000000000000000000000000000000000000000000000000145b8061081357506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806108225750610822826116a5565b92915050565b6000818152610191602052604081206003810154600482015460018301548492919061086490600160a81b900467ffffffffffffffff16610dba565b61086e9190613691565b6108789190613691565b6001830154909150610896908290610100900463ffffffff166136a4565b600483015460018401546108b890610100900463ffffffff16620f4240613691565b6108c291906136a4565b11949350505050565b60fb547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe590610909906001600160a01b031630335b84600036611717565b61091282611805565b5050565b6000610923848484611a08565b90505b9392505050565b60006109396001611af0565b6001600160e01b0316905090565b60fb547f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a3895390610980906001600160a01b03163033610900565b61098a8383611b38565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d883836040516109bb9291906136bb565b60405180910390a1505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a6b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610b425760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a62565b610b4b81611c3e565b60408051600080825260208201909252610b6791839190611c77565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c085760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610a62565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c637f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610cdf5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a62565b610ce882611c3e565b61091282826001611c77565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d945760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a62565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b600061082282610dfd565b6000610df87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b6000610822600183611e1c565b6000818152610191602052604081206002810154600382015460058301546004840154610e379190613709565b610e419190613709565b10159392505050565b6000806001610e5843611ecf565b039050610e656101935490565b15801590610e845750610e82338267ffffffffffffffff16611156565b155b15610ebd576040517feab99344000000000000000000000000000000000000000000000000000000008152336004820152602401610a62565b610ecd338c8c89898e8e8e611f53565b600081815261019160205260409020909250610ee98787611fb9565b6001830180547fffffffffffffffffffffff00000000000000000000000000000000ffffffffff166d010000000000000000000000000067ffffffffffffffff938416027fffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffff16176501000000000093831693909302929092177fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff16600160a81b918516919091021790556101925460ff1660018083018054909160ff1990911690836002811115610fbc57610fbc6130d2565b0217905550610192546001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1663ffffffff610100938490041690920291909117905561103161101967ffffffffffffffff8416610dba565b6101925465010000000000900463ffffffff166120fa565b6002820155871561104457600881018890555b60005b898110156110a357816007018b8b838181106110655761106561371c565b90506020028101906110779190613732565b81546001810183556000928352602090922090916003020161109982826137cc565b5050600101611047565b5060008560038111156110b8576110b86130d2565b146110c8576110c883868661155e565b50509998505050505050505050565b600061082282611626565b60fb547f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a389539061111b906001600160a01b03163033610900565b611125838361218a565b7f0ba413f7646035cae0a4ee999d676078fc8a763d1a36a8ef25e4c10f67d8615d83836040516109bb9291906136bb565b6001600160a01b03821660009081526020819052604081206111789083611e1c565b6001149392505050565b603254610100900460ff16158080156111a25750603254600160ff909116105b806111bc5750303b1580156111bc575060325460ff166001145b61122e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a62565b6032805460ff191660011790558015611251576032805461ff0019166101001790555b61125b85856121f3565b6112658383611b38565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d883836040516112969291906136bb565b60405180910390a180156112e4576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052819061134260405180606001604052806000815260200160008152602001600081525090565b6000858152610191602052604081206060919061135e81612282565b81546040805160c08101909152600184018054939a5060ff9283169950909290918391166002811115611393576113936130d2565b60028111156113a4576113a46130d2565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d010000000000000000000000000084048216606080870191909152600160a81b909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b8282101561153c576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916114ab90613752565b80601f01602080910402602001604051908101604052809291908181526020018280546114d790613752565b80156115245780601f106114f957610100808354040283529160200191611524565b820191906000526020600020905b81548152906001019060200180831161150757829003601f168201915b50505050508152505081526020019060010190611458565b505050509250806008015491505091939550919395565b6000610822826122f0565b3361156a848285611a08565b6115a6578381846040517f70b4b254000000000000000000000000000000000000000000000000000000008152600401610a62939291906138fd565b6115b284848385612398565b50505050565b600081815261019160205260408120600581015460018201546115e69190610100900463ffffffff166136a4565b6004820154600183015461160890610100900463ffffffff16620f4240613691565b61161291906136a4565b119392505050565b6000610df861015f5490565b6001600160a01b038116600090815260208190526040812061164790611af0565b6001600160e01b03166001149050919050565b611663816122f0565b61169c576040517f9fefd0f100000000000000000000000000000000000000000000000000000000815260048101829052602401610a62565b610b678161258d565b60006001600160e01b031982167f8678b01e00000000000000000000000000000000000000000000000000000000148061170857506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b806108225750610822826126f5565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690611764908890889088908890889060040161394b565b602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190613989565b6117fd576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610a62565b505050505050565b6118136001620f4240613691565b61182360408301602084016139b8565b63ffffffff16111561188e5761183d6001620f4240613691565b61184d60408301602084016139b8565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff166024820152604401610a62565b620f42406118a260608301604084016139b8565b63ffffffff1611156118c257620f424061184d60608301604084016139b8565b610e106118d560808301606084016139d5565b67ffffffffffffffff16101561193e57610e106118f860808301606084016139d5565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610a62565b6301e1338061195360808301606084016139d5565b67ffffffffffffffff161115611978576301e133806118f860808301606084016139d5565b806101926119868282613a0c565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e90506119b76020830183613b1f565b6119c760408401602085016139b8565b6119d760608501604086016139b8565b6119e760808601606087016139d5565b85608001356040516119fd959493929190613b3c565b60405180910390a150565b600083815261019160205260408120611a2081612282565b611a2e576000915050610926565b6000836003811115611a4257611a426130d2565b03611a51576000915050610926565b6001810154611a72908590600160a81b900467ffffffffffffffff16611156565b611a80576000915050610926565b6001600160a01b038416600090815260068201602052604081205460ff166003811115611aaf57611aaf6130d2565b14158015611ad657506002600182015460ff166002811115611ad357611ad36130d2565b14155b15611ae5576000915050610926565b506001949350505050565b80546000908015611b2f57611b1883611b0a600184613691565b600091825260209091200190565b5464010000000090046001600160e01b0316610926565b60009392505050565b60005b81811015611c2f57611b6d838383818110611b5857611b5861371c565b90506020020160208101906107579190613192565b15611bd757828282818110611b8457611b8461371c565b9050602002016020810190611b999190613192565b6040517fc0b7477d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610a62565b611c256001600080868686818110611bf157611bf161371c565b9050602002016020810190611c069190613192565b6001600160a01b03168152602081019190915260400160002090612733565b5050600101611b3b565b506115b260016127698361276d565b60fb547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610912906001600160a01b03163033610900565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611caf57611caa836127a5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d09575060408051601f3d908101601f19168201909252611d0691810190613b78565b60015b611d7b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a62565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611e105760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a62565b50611caa838383612870565b6000438210611e6d5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610a62565b6000611e7883612895565b84549091506000611e8b86848385612911565b90508015611eb957611ea286611b0a600184613691565b5464010000000090046001600160e01b0316611ebc565b60005b6001600160e01b03169695505050505050565b600067ffffffffffffffff821115611f4f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610a62565b5090565b6000611f5d612972565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a604051611fa59796959493929190613b91565b60405180910390a398975050505050505050565b6000806000611fc742611ecf565b90508467ffffffffffffffff16600003611fe357809250612048565b8492508067ffffffffffffffff168367ffffffffffffffff161015612048576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610a62565b61019254600090612070906901000000000000000000900467ffffffffffffffff1685613ca0565b90508467ffffffffffffffff1660000361208c578092506120f1565b8492508067ffffffffffffffff168367ffffffffffffffff1610156120f1576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610a62565b50509250929050565b6000620f4240821115612145576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f4240600482015260248101839052604401610a62565b61214f82846136a4565b92506000612160620f424085613cd7565b905061216f620f424085613ceb565b915080156121835761218082613cff565b91505b5092915050565b60005b818110156121e4576121aa838383818110611b5857611b5861371c565b6121c057828282818110611b8457611b8461371c565b6121da6000806000868686818110611bf157611bf161371c565b505060010161218d565b506115b2600161298d8361276d565b603254610100900460ff166122705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b61227982612992565b61091281611805565b60008061228e42611ecf565b600184015490915067ffffffffffffffff8083166501000000000090920416118015906122dd5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b8015610926575050905460ff1615919050565b600081815261019160205260408120805460ff16156123125750600092915050565b61231b81612282565b156123635760018082015460ff16600281111561233a5761233a6130d2565b146123485750600092915050565b61235183610828565b61235e5750600092915050565b612379565b61236c836115b8565b6123795750600092915050565b61238283610e0a565b61238f5750600092915050565b50600192915050565b6000848152610191602090815260408083206001600160a01b0386168452600681019092529091205460ff1660028160038111156123d8576123d86130d2565b036123f85760048201546123ee90600190613691565b600483015561245c565b600381600381111561240c5761240c6130d2565b0361242c57600582015461242290600190613691565b600583015561245c565b6001816003811115612440576124406130d2565b0361245c57600382015461245690600190613691565b60038301555b6002856003811115612470576124706130d2565b0361248f576004820154612485906001613709565b60048301556124f1565b60038560038111156124a3576124a36130d2565b036124c25760058201546124b8906001613709565b60058301556124f1565b60018560038111156124d6576124d66130d2565b036124f15760038201546124eb906001613709565b60038301555b6001600160a01b03841660009081526006830160205260409020805486919060ff19166001836003811115612528576125286130d2565b0217905550836001600160a01b0316867fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679287600160405161256a929190613d19565b60405180910390a38280156125835750612583866122f0565b156117fd576117fd865b600081815261019160205260409020805460ff19166001179055611caa6125bc60fb546001600160a01b031690565b826101916000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156126d8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161264790613752565b80601f016020809104026020016040519081016040528092919081815260200182805461267390613752565b80156126c05780601f10612695576101008083540402835291602001916126c0565b820191906000526020600020905b8154815290600101906020018083116126a357829003601f168201915b505050505081525050815260200190600101906125f4565b505050600086815261019160205260409020600801549050612a18565b60006001600160e01b031982167fda35c664000000000000000000000000000000000000000000000000000000001480610822575061082282612ae7565b6000806127518461274343612895565b61274c86612b82565b612c01565b6001600160e01b0391821693501690505b9250929050565b0190565b6000806127988561279361278088611af0565b6001600160e01b0316868863ffffffff16565b612733565b915091505b935093915050565b6001600160a01b0381163b6128225760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a62565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61287983612da4565b6000825111806128865750805b15611caa576115b28383612de4565b600063ffffffff821115611f4f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610a62565b60005b818310156129675760006129288484612eef565b60008781526020902090915063ffffffff86169082015463ffffffff16111561295357809250612961565b61295e816001613709565b93505b50612914565b50805b949350505050565b600061297c61161a565b9050610db761015f80546001019055565b900390565b603254610100900460ff16612a0f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b610b6781612f0a565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf32490612a6790889088908890600401613d34565b6000604051808303816000875af1158015612a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aae9190810190613d5d565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b60006001600160e01b031982167f41de6830000000000000000000000000000000000000000000000000000000001480612b4a57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061082257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610822565b60006001600160e01b03821115611f4f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610a62565b825460009081908015612d4a576000612c1f87611b0a600185613691565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015612ca15760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401610a62565b805163ffffffff808816911603612cea5784612cc288611b0a600186613691565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055612d3a565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b60200151925083915061279d9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a81529182209551925190931664010000000002919093161792019190915590508161279d565b612dad816127a5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612e635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610a62565b600080846001600160a01b031684604051612e7e9190613e63565b600060405180830381855af49150503d8060008114612eb9576040519150601f19603f3d011682016040523d82523d6000602084013e612ebe565b606091505b5091509150612ee68282604051806060016040528060278152602001613e8960279139612fb6565b95945050505050565b6000612efe6002848418613ceb565b61092690848416613709565b603254610100900460ff16612f875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608315612fc5575081610926565b6109268383815115612fda5781518083602001fd5b8060405162461bcd60e51b8152600401610a629190613e75565b60006020828403121561300657600080fd5b81356001600160e01b03198116811461092657600080fd5b60006020828403121561303057600080fd5b5035919050565b600060a0828403121561304957600080fd5b50919050565b600060a0828403121561306157600080fd5b6109268383613037565b6001600160a01b0381168114610b6757600080fd5b80356004811061308f57600080fd5b919050565b6000806000606084860312156130a957600080fd5b8335925060208401356130bb8161306b565b91506130c960408501613080565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60038110610b6757610b676130d2565b60208101613105836130e8565b91905290565b60008083601f84011261311d57600080fd5b50813567ffffffffffffffff81111561313557600080fd5b6020830191508360208260051b850101111561276257600080fd5b6000806020838503121561316357600080fd5b823567ffffffffffffffff81111561317a57600080fd5b6131868582860161310b565b90969095509350505050565b6000602082840312156131a457600080fd5b81356109268161306b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131ee576131ee6131af565b604052919050565b600067ffffffffffffffff821115613210576132106131af565b50601f01601f191660200190565b6000806040838503121561323157600080fd5b823561323c8161306b565b9150602083013567ffffffffffffffff81111561325857600080fd5b8301601f8101851361326957600080fd5b803561327c613277826131f6565b6131c5565b81815286602083850101111561329157600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156132c457600080fd5b8235915060208301356132d68161306b565b809150509250929050565b600481106132f1576132f16130d2565b9052565b6020810161082282846132e1565b67ffffffffffffffff81168114610b6757600080fd5b803561308f81613303565b8015158114610b6757600080fd5b803561308f81613324565b600080600080600080600080600060e08a8c03121561335b57600080fd5b893567ffffffffffffffff8082111561337357600080fd5b818c0191508c601f83011261338757600080fd5b81358181111561339657600080fd5b8d60208285010111156133a857600080fd5b60209283019b509950908b013590808211156133c357600080fd5b506133d08c828d0161310b565b90985096505060408a013594506133e960608b01613319565b93506133f760808b01613319565b925061340560a08b01613080565b915061341360c08b01613332565b90509295985092959850929598565b6000806040838503121561343557600080fd5b82356134408161306b565b946020939093013593505050565b60008060008060e0858703121561346457600080fd5b843561346f8161306b565b935061347e8660208701613037565b925060c085013567ffffffffffffffff81111561349a57600080fd5b6134a68782880161310b565b95989497509550505050565b60005b838110156134cd5781810151838201526020016134b5565b50506000910152565b600081518084526134ee8160208601602086016134b2565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561357657858303601f19018952815180516001600160a01b031684528481015185850152604090810151606091850182905290613562818601836134d6565b9a86019a945050509083019060010161351f565b5090979650505050505050565b60006101a08815158352871515602084015286516135a0816130e8565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e08401526136136101008401878051825260208082015190830152604090810151910152565b8061016084015261362681840186613502565b91505082610180830152979650505050505050565b60008060006060848603121561365057600080fd5b8335925061366060208501613080565b9150604084013561367081613324565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b818103818111156108225761082261367b565b80820281158282048414176108225761082261367b565b60208082528181018390526000908460408401835b868110156136fe5782356136e38161306b565b6001600160a01b0316825291830191908301906001016136d0565b509695505050505050565b808201808211156108225761082261367b565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261374857600080fd5b9190910192915050565b600181811c9082168061376657607f821691505b60208210810361304957634e487b7160e01b600052602260045260246000fd5b601f821115611caa57600081815260208120601f850160051c810160208610156137ad5750805b601f850160051c820191505b818110156117fd578281556001016137b9565b81356137d78161306b565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261382557600080fd5b8501803567ffffffffffffffff81111561383e57600080fd5b803603848301131561384f57600080fd5b6138638161385d8554613752565b85613786565b6000601f821160018114613899576000831561388157508382018601355b600019600385901b1c1916600184901b1785556138f2565b600085815260209020601f19841690835b828110156138c9578685018901358255938801939089019088016138aa565b50848210156138e85760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b8381526001600160a01b03831660208201526060810161296a60408301846132e1565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261397e608083018486613920565b979650505050505050565b60006020828403121561399b57600080fd5b815161092681613324565b63ffffffff81168114610b6757600080fd5b6000602082840312156139ca57600080fd5b8135610926816139a6565b6000602082840312156139e757600080fd5b813561092681613303565b60038110610b6757600080fd5b6000813561082281613303565b8135613a17816139f2565b613a20816130e8565b815460ff821691508160ff1982161783556020840135613a3f816139a6565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008416171784556040850135613a83816139a6565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000851617831717855550505050613b11613acf606084016139ff565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b600060208284031215613b3157600080fd5b8135610926816139f2565b60a08101613b49876130e8565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b600060208284031215613b8a57600080fd5b5051919050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152613bc060a086018a8c613920565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015613c8257601f198684030184528135605e198f3603018112613c0357600080fd5b8e018035613c108161306b565b6001600160a01b0316845280890135898501528781013536829003601e19018112613c3a57600080fd5b0188810190358a811115613c4d57600080fd5b803603821315613c5c57600080fd5b8689860152613c6e8786018284613920565b958a01959450505090870190600101613bde565b50508097505050505050505082608083015298975050505050505050565b67ffffffffffffffff8181168382160190808211156121835761218361367b565b634e487b7160e01b600052601260045260246000fd5b600082613ce657613ce6613cc1565b500690565b600082613cfa57613cfa613cc1565b500490565b60006000198203613d1257613d1261367b565b5060010190565b60408101613d2782856132e1565b8260208301529392505050565b838152606060208201526000613d4d6060830185613502565b9050826040830152949350505050565b6000806040808486031215613d7157600080fd5b835167ffffffffffffffff80821115613d8957600080fd5b818601915086601f830112613d9d57600080fd5b8151602082821115613db157613db16131af565b8160051b613dc08282016131c5565b928352848101820192828101908b851115613dda57600080fd5b83870192505b84831015613e4f57825186811115613df85760008081fd5b8701603f81018d13613e0a5760008081fd5b84810151613e1a613277826131f6565b8181528e8b838501011115613e2f5760008081fd5b613e3e828883018d86016134b2565b845250509183019190830190613de0565b9990920151989a9899505050505050505050565b600082516137488184602087016134b2565b60208152600061092660208301846134d656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df6d825f7bed509d522af2586e0fa2a84e3343868f9c1c00bcdcf0d4575a50bb64736f6c63430008110033";
var isSuperArgs$J = (xs) => xs.length > 1;
var AddresslistVoting__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$J(args)) {
      super(...args);
    } else {
      super(_abi$R, _bytecode$J, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$R);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$R, signerOrProvider);
  }
};
AddresslistVoting__factory.bytecode = _bytecode$J;
AddresslistVoting__factory.abi = _abi$R;
var _abi$Q = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$I = "";
var isSuperArgs$I = (xs) => xs.length > 1;
var AddresslistVotingSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$I(args)) {
      super(...args);
    } else {
      super(_abi$Q, _bytecode$I, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$Q);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$Q, signerOrProvider);
  }
};
AddresslistVotingSetup__factory.bytecode = _bytecode$I;
AddresslistVotingSetup__factory.abi = _abi$Q;
var index$u = Object.freeze({
  __proto__: null,
  AddresslistVoting__factory,
  AddresslistVotingSetup__factory
});
var _abi$P = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "DateOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "MinDurationOutOfBounds",
    type: "error"
  },
  {
    inputs: [],
    name: "NoVotingPower",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ProposalCreationForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecutionForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "RatioOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      }
    ],
    name: "VoteCastForbidden",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "definingContract",
        type: "address"
      }
    ],
    name: "MembershipContractAnnounced",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256"
      }
    ],
    name: "VoteCast",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "votingMode",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "supportThreshold",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minParticipation",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "minDuration",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minProposerVotingPower",
        type: "uint256"
      }
    ],
    name: "VotingSettingsUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      }
    ],
    name: "canVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      },
      {
        internalType: "uint64",
        name: "_startDate",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "_endDate",
        type: "uint64"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "getProposal",
    outputs: [
      {
        internalType: "bool",
        name: "open",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "endDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "snapshotBlock",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.ProposalParameters",
        name: "parameters",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "abstain",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "yes",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "no",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.Tally",
        name: "tally",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      }
    ],
    name: "getVoteOption",
    outputs: [
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getVotingToken",
    outputs: [
      {
        internalType: "contract IVotesUpgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      },
      {
        internalType: "contract IVotesUpgradeable",
        name: "_token",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isMinParticipationReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReachedEarly",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minDuration",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minParticipation",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minProposerVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "supportThreshold",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "totalVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      }
    ],
    name: "updateVotingSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "votingMode",
    outputs: [
      {
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$H = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161381162000120600039600081816107b70152818161085201528181610959015281816109ef0152610ae601526138116000f3fe6080604052600436106101cd5760003560e01c80637c36e8e8116100f7578063c9c4bfca11610095578063da35c66411610064578063da35c664146105c6578063e28c3b19146105db578063f60046b2146105fa578063fe0d94c11461061057600080fd5b8063c9c4bfca14610532578063cc63604a14610566578063ce6366c414610586578063cf131149146105a657600080fd5b80639cba3021116100d15780639cba3021146104a0578063a230c524146104c0578063b2673b07146104e0578063c7f758a81461050057600080fd5b80637c36e8e8146104075780638a4b00f814610428578063970601d81461044857600080fd5b80633659cfe61161016f57806352d1902d1161013e57806352d1902d1461037c578063536f9f421461039157806356715761146103b15780635c60da1b146103f257600080fd5b80633659cfe6146103035780634162169f1461032357806341de6830146103555780634f1ef2861461036957600080fd5b80630dfb278e116101ab5780630dfb278e1461025d57806317d1b4041461027f5780631befc4051461029f57806323d07188146102e157600080fd5b806301ffc9a7146101d2578063054fd2c2146102075780630de218561461023d575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046129f5565b610630565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b506101605465010000000000900463ffffffff165b60405163ffffffff90911681526020016101fe565b34801561024957600080fd5b506101f2610258366004612a1f565b6106a8565b34801561026957600080fd5b5061027d610278366004612a50565b61074b565b005b34801561028b57600080fd5b506101f261029a366004612a95565b610796565b3480156102ab57600080fd5b506102d37fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b6040519081526020016101fe565b3480156102ed57600080fd5b506101605460ff165b6040516101fe9190612af9565b34801561030f57600080fd5b5061027d61031e366004612b0c565b6107ad565b34801561032f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101fe565b34801561036157600080fd5b5060006102f6565b61027d610377366004612b98565b61094f565b34801561038857600080fd5b506102d3610ad9565b34801561039d57600080fd5b506102d36103ac366004612a1f565b610b9f565b3480156103bd57600080fd5b50610160546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff90911681526020016101fe565b3480156103fe57600080fd5b5061033d610c27565b34801561041357600080fd5b5061016054610100900463ffffffff16610228565b34801561043457600080fd5b506101f2610443366004612a1f565b610c5f565b34801561045457600080fd5b50610493610463366004612c2b565b600082815261015f602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b6040516101fe9190612c6f565b3480156104ac57600080fd5b506102d36104bb366004612d03565b610c9f565b3480156104cc57600080fd5b506101f26104db366004612b0c565b610fdd565b3480156104ec57600080fd5b5061027d6104fb366004612de8565b611070565b34801561050c57600080fd5b5061052061051b366004612a1f565b6111ea565b6040516101fe96959493929190612f00565b34801561053e57600080fd5b506102d37f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561057257600080fd5b506101f2610581366004612a1f565b611452565b34801561059257600080fd5b5061027d6105a1366004612fb8565b61145d565b3480156105b257600080fd5b506101f26105c1366004612a1f565b6114b1565b3480156105d257600080fd5b506102d3611513565b3480156105e757600080fd5b50610191546001600160a01b031661033d565b34801561060657600080fd5b50610161546102d3565b34801561061c57600080fd5b5061027d61062b366004612a1f565b61151f565b60006001600160e01b031982167f50eb001e00000000000000000000000000000000000000000000000000000000148061069357506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806106a257506106a28261156a565b92915050565b600081815261015f60205260408120600381015460048201546001830154849291906106e490600160a81b900467ffffffffffffffff16610b9f565b6106ee9190613003565b6106f89190613003565b6001830154909150610716908290610100900463ffffffff16613016565b6004830154600184015461073890610100900463ffffffff16620f4240613003565b6107429190613016565b11949350505050565b60c9547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe590610789906001600160a01b031630335b846000366115dc565b610792826116ca565b5050565b60006107a38484846118cd565b90505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108505760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108ab7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109275760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610847565b61093081611a3a565b6040805160008082526020820190925261094c91839190611a73565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109ed5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610847565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ac45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610847565b610acd82611a3a565b61079282826001611a73565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b795760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610847565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b610191546040517f8e539e8c000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690638e539e8c90602401602060405180830381865afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a2919061302d565b6000610c5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600081815261015f602052604081206002810154600382015460058301546004840154610c8c9190613046565b610c969190613046565b10159392505050565b6000600019430181610cb082610b9f565b905080600003610cec576040517f7c176b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016154610191546001600160a01b0316633a46b1a8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061302d565b1015610dac576040517feab99344000000000000000000000000000000000000000000000000000000008152336004820152602401610847565b610dbc338d8d8a8a8f8f8f611c18565b600081815261015f60205260409020909350610dd88888611c7e565b6001830180547fffffffffffffffffffffff00000000000000000000000000000000ffffffffff166d010000000000000000000000000067ffffffffffffffff938416027fffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffff1617650100000000009390921692909202179055610e5a83611dbf565b60018201805467ffffffffffffffff92909216600160a81b027fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff909216919091179055610eaa6101605460ff1690565b60018083018054909160ff1990911690836002811115610ecc57610ecc612ad3565b021790555061016054610100900463ffffffff166001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff9384160217905561016054610f369184916501000000000090041663ffffffff16611e43565b60028201558815610f4957600881018990555b60005b8a811015610fa857816007018c8c83818110610f6a57610f6a613059565b9050602002810190610f7c919061306f565b815460018101835560009283526020909220909160030201610f9e8282613109565b5050600101610f4c565b506000866003811115610fbd57610fbd612ad3565b14610fcd57610fcd84878761145d565b5050509998505050505050505050565b610191546040517f9ab24eb00000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690639ab24eb090602401602060405180830381865afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611069919061302d565b1192915050565b600054610100900460ff16158080156110905750600054600160ff909116105b806110aa5750303b1580156110aa575060005460ff166001145b61111c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610847565b6000805460ff19166001179055801561113f576000805461ff0019166101001790555b6111498484611ed3565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156111e4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052819061124160405180606001604052806000815260200160008152602001600081525090565b600085815261015f602052604081206060919061125d81611f62565b81546040805160c08101909152600184018054939a5060ff928316995090929091839116600281111561129257611292612ad3565b60028111156112a3576112a3612ad3565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d010000000000000000000000000084048216606080870191909152600160a81b909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b8282101561143b576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916113aa9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546113d69061308f565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b50505050508152505081526020019060010190611357565b505050509250806008015491505091939550919395565b60006106a282611fd0565b336114698482856118cd565b6114a5578381846040517f70b4b2540000000000000000000000000000000000000000000000000000000081526004016108479392919061323a565b6111e484848385612078565b600081815261015f60205260408120600581015460018201546114df9190610100900463ffffffff16613016565b6004820154600183015461150190610100900463ffffffff16620f4240613003565b61150b9190613016565b119392505050565b6000610c5a61012d5490565b61152881611fd0565b611561576040517f9fefd0f100000000000000000000000000000000000000000000000000000000815260048101829052602401610847565b61094c8161231f565b60006001600160e01b031982167f8678b01e0000000000000000000000000000000000000000000000000000000014806115cd57506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b806106a257506106a282612487565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116299088908890889088908890600401613290565b602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a91906132ce565b6116c2576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610847565b505050505050565b6116d86001620f4240613003565b6116e860408301602084016132fd565b63ffffffff161115611753576117026001620f4240613003565b61171260408301602084016132fd565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff166024820152604401610847565b620f424061176760608301604084016132fd565b63ffffffff16111561178757620f424061171260608301604084016132fd565b610e1061179a608083016060840161331a565b67ffffffffffffffff16101561180357610e106117bd608083016060840161331a565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610847565b6301e13380611818608083016060840161331a565b67ffffffffffffffff16111561183d576301e133806117bd608083016060840161331a565b8061016061184b8282613351565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e905061187c6020830183613464565b61188c60408401602085016132fd565b61189c60608501604086016132fd565b6118ac608086016060870161331a565b85608001356040516118c2959493929190613481565b60405180910390a150565b600083815261015f602052604081206118e581611f62565b6118f35760009150506107a6565b600083600381111561190757611907612ad3565b036119165760009150506107a6565b6101915460018201546040517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152600160a81b90920467ffffffffffffffff166024820152911690633a46b1a890604401602060405180830381865afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b9919061302d565b6000036119ca5760009150506107a6565b6001600160a01b038416600090815260068201602052604081205460ff1660038111156119f9576119f9612ad3565b14158015611a2057506002600182015460ff166002811115611a1d57611a1d612ad3565b14155b15611a2f5760009150506107a6565b506001949350505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610792906001600160a01b03163033610780565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611aab57611aa6836124c5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b05575060408051601f3d908101601f19168201909252611b029181019061302d565b60015b611b775760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611c0c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610847565b50611aa6838383612590565b6000611c226125b5565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a604051611c6a97969594939291906134bd565b60405180910390a398975050505050505050565b6000806000611c8c42611dbf565b90508467ffffffffffffffff16600003611ca857809250611d0d565b8492508067ffffffffffffffff168367ffffffffffffffff161015611d0d576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610847565b61016054600090611d35906901000000000000000000900467ffffffffffffffff16856135cc565b90508467ffffffffffffffff16600003611d5157809250611db6565b8492508067ffffffffffffffff168367ffffffffffffffff161015611db6576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610847565b50509250929050565b600067ffffffffffffffff821115611e3f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610847565b5090565b6000620f4240821115611e8e576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f4240600482015260248101839052604401610847565b611e988284613016565b92506000611ea9620f424085613603565b9050611eb8620f424085613617565b91508015611ecc57611ec98261362b565b91505b5092915050565b600054610100900460ff16611f505760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b611f59826125d0565b610792816116ca565b600080611f6e42611dbf565b600184015490915067ffffffffffffffff808316650100000000009092041611801590611fbd5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b80156107a6575050905460ff1615919050565b600081815261015f60205260408120805460ff1615611ff25750600092915050565b611ffb81611f62565b156120435760018082015460ff16600281111561201a5761201a612ad3565b146120285750600092915050565b612031836106a8565b61203e5750600092915050565b612059565b61204c836114b1565b6120595750600092915050565b61206283610c5f565b61206f5750600092915050565b50600192915050565b600084815261015f602052604080822061019154600182015492517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152600160a81b90940467ffffffffffffffff1660248201529193921690633a46b1a890604401602060405180830381865afa158015612108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212c919061302d565b6001600160a01b038516600090815260068401602052604090205490915060ff16600281600381111561216157612161612ad3565b03612180576004830154612176908390613003565b60048401556121e2565b600381600381111561219457612194612ad3565b036121b35760058301546121a9908390613003565b60058401556121e2565b60018160038111156121c7576121c7612ad3565b036121e25760038301546121dc908390613003565b60038401555b60028660038111156121f6576121f6612ad3565b0361221557600483015461220b908390613046565b6004840155612277565b600386600381111561222957612229612ad3565b0361224857600583015461223e908390613046565b6005840155612277565b600186600381111561225c5761225c612ad3565b03612277576003830154612271908390613046565b60038401555b6001600160a01b03851660009081526006840160205260409020805487919060ff191660018360038111156122ae576122ae612ad3565b0217905550846001600160a01b0316877fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679288856040516122ef929190613645565b60405180910390a3838015612308575061230887611fd0565b15612316576123168761231f565b50505050505050565b600081815261015f60205260409020805460ff19166001179055611aa661234e60c9546001600160a01b031690565b8261015f6000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b8282101561246a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916123d99061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546124059061308f565b80156124525780601f1061242757610100808354040283529160200191612452565b820191906000526020600020905b81548152906001019060200180831161243557829003601f168201915b50505050508152505081526020019060010190612386565b505050600086815261015f60205260409020600801549050612656565b60006001600160e01b031982167fda35c6640000000000000000000000000000000000000000000000000000000014806106a257506106a282612725565b6001600160a01b0381163b6125425760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612599836127c0565b6000825111806125a65750805b15611aa6576111e48383612800565b60006125bf611513565b9050610b9c61012d80546001019055565b600054610100900460ff1661264d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b61094c8161290b565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf324906126a590889088908890600401613660565b6000604051808303816000875af11580156126c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126ec9190810190613689565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061278857506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b806106a257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106a2565b6127c9816124c5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61287f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610847565b600080846001600160a01b03168460405161289a919061378f565b600060405180830381855af49150503d80600081146128d5576040519150601f19603f3d011682016040523d82523d6000602084013e6128da565b606091505b509150915061290282826040518060600160405280602781526020016137b5602791396129b7565b95945050505050565b600054610100900460ff166129885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606083156129c65750816107a6565b6107a683838151156129db5781518083602001fd5b8060405162461bcd60e51b815260040161084791906137a1565b600060208284031215612a0757600080fd5b81356001600160e01b0319811681146107a657600080fd5b600060208284031215612a3157600080fd5b5035919050565b600060a08284031215612a4a57600080fd5b50919050565b600060a08284031215612a6257600080fd5b6107a68383612a38565b6001600160a01b038116811461094c57600080fd5b803560048110612a9057600080fd5b919050565b600080600060608486031215612aaa57600080fd5b833592506020840135612abc81612a6c565b9150612aca60408501612a81565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b6003811061094c5761094c612ad3565b60208101612b0683612ae9565b91905290565b600060208284031215612b1e57600080fd5b81356107a681612a6c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b6857612b68612b29565b604052919050565b600067ffffffffffffffff821115612b8a57612b8a612b29565b50601f01601f191660200190565b60008060408385031215612bab57600080fd5b8235612bb681612a6c565b9150602083013567ffffffffffffffff811115612bd257600080fd5b8301601f81018513612be357600080fd5b8035612bf6612bf182612b70565b612b3f565b818152866020838501011115612c0b57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060408385031215612c3e57600080fd5b823591506020830135612c5081612a6c565b809150509250929050565b60048110612c6b57612c6b612ad3565b9052565b602081016106a28284612c5b565b60008083601f840112612c8f57600080fd5b50813567ffffffffffffffff811115612ca757600080fd5b6020830191508360208260051b8501011115612cc257600080fd5b9250929050565b67ffffffffffffffff8116811461094c57600080fd5b8035612a9081612cc9565b801515811461094c57600080fd5b8035612a9081612cea565b600080600080600080600080600060e08a8c031215612d2157600080fd5b893567ffffffffffffffff80821115612d3957600080fd5b818c0191508c601f830112612d4d57600080fd5b813581811115612d5c57600080fd5b8d6020828501011115612d6e57600080fd5b60209283019b509950908b01359080821115612d8957600080fd5b50612d968c828d01612c7d565b90985096505060408a01359450612daf60608b01612cdf565b9350612dbd60808b01612cdf565b9250612dcb60a08b01612a81565b9150612dd960c08b01612cf8565b90509295985092959850929598565b600080600060e08486031215612dfd57600080fd5b8335612e0881612a6c565b9250612e178560208601612a38565b915060c0840135612e2781612a6c565b809150509250925092565b60005b83811015612e4d578181015183820152602001612e35565b50506000910152565b60008151808452612e6e816020860160208601612e32565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612ef3578284038952815180516001600160a01b031685528581015186860152604090810151606091860182905290612edf81870183612e56565b9a87019a9550505090840190600101612ea0565b5091979650505050505050565b60006101a0881515835287151560208401528651612f1d81612ae9565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e0840152612f906101008401878051825260208082015190830152604090810151910152565b80610160840152612fa381840186612e82565b91505082610180830152979650505050505050565b600080600060608486031215612fcd57600080fd5b83359250612fdd60208501612a81565b91506040840135612e2781612cea565b634e487b7160e01b600052601160045260246000fd5b818103818111156106a2576106a2612fed565b80820281158282048414176106a2576106a2612fed565b60006020828403121561303f57600080fd5b5051919050565b808201808211156106a2576106a2612fed565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261308557600080fd5b9190910192915050565b600181811c908216806130a357607f821691505b602082108103612a4a57634e487b7160e01b600052602260045260246000fd5b601f821115611aa657600081815260208120601f850160051c810160208610156130ea5750805b601f850160051c820191505b818110156116c2578281556001016130f6565b813561311481612a6c565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261316257600080fd5b8501803567ffffffffffffffff81111561317b57600080fd5b803603848301131561318c57600080fd5b6131a08161319a855461308f565b856130c3565b6000601f8211600181146131d657600083156131be57508382018601355b600019600385901b1c1916600184901b17855561322f565b600085815260209020601f19841690835b82811015613206578685018901358255938801939089019088016131e7565b50848210156132255760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b8381526001600160a01b03831660208201526060810161325d6040830184612c5b565b949350505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526132c3608083018486613265565b979650505050505050565b6000602082840312156132e057600080fd5b81516107a681612cea565b63ffffffff8116811461094c57600080fd5b60006020828403121561330f57600080fd5b81356107a6816132eb565b60006020828403121561332c57600080fd5b81356107a681612cc9565b6003811061094c57600080fd5b600081356106a281612cc9565b813561335c81613337565b61336581612ae9565b815460ff821691508160ff1982161783556020840135613384816132eb565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000084161717845560408501356133c8816132eb565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000085161783171785555050505061345661341460608401613344565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b60006020828403121561347657600080fd5b81356107a681613337565b60a0810161348e87612ae9565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b600067ffffffffffffffff808a1683526020818a1681850152604060a0818601526134ec60a086018a8c613265565b606086820381880152818983528483019050848a60051b8401018b60005b8c8110156135ae57601f198684030184528135605e198f360301811261352f57600080fd5b8e01803561353c81612a6c565b6001600160a01b0316845280890135898501528781013536829003601e1901811261356657600080fd5b0188810190358a81111561357957600080fd5b80360382131561358857600080fd5b868986015261359a8786018284613265565b958a0195945050509087019060010161350a565b50508097505050505050505082608083015298975050505050505050565b67ffffffffffffffff818116838216019080821115611ecc57611ecc612fed565b634e487b7160e01b600052601260045260246000fd5b600082613612576136126135ed565b500690565b600082613626576136266135ed565b500490565b6000600019820361363e5761363e612fed565b5060010190565b604081016136538285612c5b565b8260208301529392505050565b8381526060602082015260006136796060830185612e82565b9050826040830152949350505050565b600080604080848603121561369d57600080fd5b835167ffffffffffffffff808211156136b557600080fd5b818601915086601f8301126136c957600080fd5b81516020828211156136dd576136dd612b29565b8160051b6136ec828201612b3f565b928352848101820192828101908b85111561370657600080fd5b83870192505b8483101561377b578251868111156137245760008081fd5b8701603f81018d136137365760008081fd5b84810151613746612bf182612b70565b8181528e8b83850101111561375b5760008081fd5b61376a828883018d8601612e32565b84525050918301919083019061370c565b9990920151989a9899505050505050505050565b60008251613085818460208701612e32565b6020815260006107a66020830184612e5656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f8873d6f74502f88659a0e37abcd7a3b81ee6a9676ff1a6ba770e81280f92ef764736f6c63430008110033";
var isSuperArgs$H = (xs) => xs.length > 1;
var TokenVoting__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$H(args)) {
      super(...args);
    } else {
      super(_abi$P, _bytecode$H, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$P);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$P, signerOrProvider);
  }
};
TokenVoting__factory.bytecode = _bytecode$H;
TokenVoting__factory.abi = _abi$P;
var _abi$O = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "TokenNotContract",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "TokenNotERC20",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256"
      }
    ],
    name: "WrongHelpersArrayLength",
    type: "error"
  },
  {
    inputs: [],
    name: "governanceERC20Base",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "governanceWrappedERC20Base",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$G = "";
var isSuperArgs$G = (xs) => xs.length > 1;
var TokenVotingSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$G(args)) {
      super(...args);
    } else {
      super(_abi$O, _bytecode$G, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$O);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$O, signerOrProvider);
  }
};
TokenVotingSetup__factory.bytecode = _bytecode$G;
TokenVotingSetup__factory.abi = _abi$O;
var index$t = Object.freeze({
  __proto__: null,
  TokenVoting__factory,
  TokenVotingSetup__factory
});
var _abi$N = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256"
      }
    ],
    name: "VoteCast",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      }
    ],
    name: "canVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "getVoteOption",
    outputs: [
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isMinParticipationReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReachedEarly",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minParticipation",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "supportThreshold",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IMajorityVoting__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$N);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$N, signerOrProvider);
  }
};
IMajorityVoting__factory.abi = _abi$N;
var _abi$M = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "DateOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "MinDurationOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ProposalCreationForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecutionForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "RatioOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      }
    ],
    name: "VoteCastForbidden",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256"
      }
    ],
    name: "VoteCast",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "votingMode",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "supportThreshold",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minParticipation",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "minDuration",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minProposerVotingPower",
        type: "uint256"
      }
    ],
    name: "VotingSettingsUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      }
    ],
    name: "canVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      },
      {
        internalType: "uint64",
        name: "_startDate",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "_endDate",
        type: "uint64"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "getProposal",
    outputs: [
      {
        internalType: "bool",
        name: "open",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "endDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "snapshotBlock",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.ProposalParameters",
        name: "parameters",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "abstain",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "yes",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "no",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.Tally",
        name: "tally",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      }
    ],
    name: "getVoteOption",
    outputs: [
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isMinParticipationReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReachedEarly",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minDuration",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minParticipation",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minProposerVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "supportThreshold",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "totalVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      }
    ],
    name: "updateVotingSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "votingMode",
    outputs: [
      {
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var MajorityVotingBase__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$M);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$M, signerOrProvider);
  }
};
MajorityVotingBase__factory.abi = _abi$M;
var index$s = Object.freeze({
  __proto__: null,
  addresslist: index$u,
  token: index$t,
  IMajorityVoting__factory,
  MajorityVotingBase__factory
});
var _abi$L = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "addAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_tryExecution",
        type: "bool"
      }
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "canApprove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "hasApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "removeAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IMultisig__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$L);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$L, signerOrProvider);
  }
};
IMultisig__factory.abi = _abi$L;
var _abi$K = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "limit",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "AddresslistLengthOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ApprovalCastForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "DateOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address"
      }
    ],
    name: "InvalidAddresslistUpdate",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "limit",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "actual",
        type: "uint16"
      }
    ],
    name: "MinApprovalsOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ProposalCreationForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecutionForbidden",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "approver",
        type: "address"
      }
    ],
    name: "Approved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "members",
        type: "address[]"
      }
    ],
    name: "MembersRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "definingContract",
        type: "address"
      }
    ],
    name: "MembershipContractAnnounced",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "onlyListed",
        type: "bool"
      },
      {
        indexed: true,
        internalType: "uint16",
        name: "minApprovals",
        type: "uint16"
      }
    ],
    name: "MultisigSettingsUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPDATE_MULTISIG_SETTINGS_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "addAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "addresslistLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "addresslistLengthAtBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_tryExecution",
        type: "bool"
      }
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "canApprove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_allowFailureMap",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_approveProposal",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "_tryExecution",
        type: "bool"
      },
      {
        internalType: "uint64",
        name: "_startDate",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "_endDate",
        type: "uint64"
      }
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "getProposal",
    outputs: [
      {
        internalType: "bool",
        name: "executed",
        type: "bool"
      },
      {
        internalType: "uint16",
        name: "approvals",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "uint16",
            name: "minApprovals",
            type: "uint16"
          },
          {
            internalType: "uint64",
            name: "snapshotBlock",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "endDate",
            type: "uint64"
          }
        ],
        internalType: "struct Multisig.ProposalParameters",
        name: "parameters",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "hasApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      },
      {
        components: [
          {
            internalType: "bool",
            name: "onlyListed",
            type: "bool"
          },
          {
            internalType: "uint16",
            name: "minApprovals",
            type: "uint16"
          }
        ],
        internalType: "struct Multisig.MultisigSettings",
        name: "_multisigSettings",
        type: "tuple"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "isListedAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastMultisigSettingsChange",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multisigSettings",
    outputs: [
      {
        internalType: "bool",
        name: "onlyListed",
        type: "bool"
      },
      {
        internalType: "uint16",
        name: "minApprovals",
        type: "uint16"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]"
      }
    ],
    name: "removeAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "onlyListed",
            type: "bool"
          },
          {
            internalType: "uint16",
            name: "minApprovals",
            type: "uint16"
          }
        ],
        internalType: "struct Multisig.MultisigSettings",
        name: "_multisigSettings",
        type: "tuple"
      }
    ],
    name: "updateMultisigSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$F = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161356a620001206000396000818161081d015281816108b3015281816109ba01528181610a500152610b47015261356a6000f3fe6080604052600436106101b75760003560e01c8063747442d3116100ec578063c9c4bfca1161008a578063e097b3ff11610064578063e097b3ff14610535578063f794062e14610575578063fbd56e4114610595578063fe0d94c1146105b557600080fd5b8063c9c4bfca146104cc578063cc63604a14610500578063da35c6641461052057600080fd5b8063a84eb999116100c6578063a84eb99914610420578063b1bb8d2614610440578063bc20830214610460578063c7f758a81461049b57600080fd5b8063747442d3146103c057806383985259146103e0578063a230c5241461040057600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461036357806352d1902d146103765780635c60da1b1461038b5780636a6b2d86146103a057600080fd5b80633659cfe6146102f55780634162169f1461031557806341de68301461034757600080fd5b806329245f561161019557806329245f561461025f5780632caf024b1461027f578063303f4336146102b35780633628731c146102d557600080fd5b806301ffc9a7146101bc5780632358d5a8146101f157806327f1608d1461023c575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612909565b6105d5565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101dc61020c366004612948565b6000828152610191602090815260408083206001600160a01b038516845260020190915290205460ff1692915050565b34801561024857600080fd5b506102516106b5565b6040519081526020016101e8565b34801561026b57600080fd5b506101dc61027a366004612948565b6106d0565b34801561028b57600080fd5b506102517fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad81565b3480156102bf57600080fd5b506102d36102ce366004612990565b6106e3565b005b3480156102e157600080fd5b506102d36102f03660046129f1565b61072e565b34801561030157600080fd5b506102d3610310366004612a33565b610813565b34801561032157600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561035357600080fd5b5060006040516101e89190612a50565b6102d3610371366004612ae7565b6109b0565b34801561038257600080fd5b50610251610b3a565b34801561039757600080fd5b5061032f610c00565b3480156103ac57600080fd5b506102516103bb366004612b7a565b610c38565b3480156103cc57600080fd5b506102d36103db366004612bb1565b610c46565b3480156103ec57600080fd5b506102d36103fb366004612bd6565b610d59565b34801561040c57600080fd5b506101dc61041b366004612a33565b610f11565b34801561042c57600080fd5b506102d361043b3660046129f1565b610f1c565b34801561044c57600080fd5b506101dc61045b366004612c3e565b61100b565b34801561046c57600080fd5b50610193546104829067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e8565b3480156104a757600080fd5b506104bb6104b6366004612b7a565b611038565b6040516101e8959493929190612d38565b3480156104d857600080fd5b506102517f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561050c57600080fd5b506101dc61051b366004612b7a565b6111ef565b34801561052c57600080fd5b506102516111fa565b34801561054157600080fd5b506101925461055b9060ff811690610100900461ffff1682565b60408051921515835261ffff9091166020830152016101e8565b34801561058157600080fd5b506101dc610590366004612a33565b611206565b3480156105a157600080fd5b506102516105b0366004612dc4565b61123b565b3480156105c157600080fd5b506102d36105d0366004612b7a565b611596565b60006001600160e01b031982167f8f85278600000000000000000000000000000000000000000000000000000000148061063857506001600160e01b031982167fd200f62300000000000000000000000000000000000000000000000000000000145b8061066c57506001600160e01b031982167f0bb5c60300000000000000000000000000000000000000000000000000000000145b806106a057506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806106af57506106af826115e1565b92915050565b60006106c261016061161f565b6001600160e01b0316905090565b60006106dc8383611667565b9392505050565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610721906001600160a01b031630335b846000366116f2565b61072a826117e0565b5050565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610767906001600160a01b03163033610718565b6000826107726106b5565b61077c9190612ebf565b905061ffff8111156107ca576040517f125ae34000000000000000000000000000000000000000000000000000000000815261ffff6004820152602481018290526044015b60405180910390fd5b6107d48484611937565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d88484604051610805929190612ed2565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108b15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661090c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109885760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107c1565b61099181611a40565b604080516000808252602082019092526109ad91839190611a79565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a4e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aa97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610b255760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107c1565b610b2e82611a40565b61072a82826001611a79565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bda5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107c1565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b6000610c337f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60006106af61016083611c1e565b33610c518382611667565b610c99576040517f37eda872000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821660248201526044016107c1565b60008381526101916020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff811660016101009283900461ffff9081168201169092021782556001600160a01b03861680865260028301909452828520805460ff191690911790559051909286917f7b39c92a7e1a86e846edaeff6eba715a046352c596794c2a374269c126a997689190a3828015610d455750610d4584611cd1565b15610d5357610d5384611d14565b50505050565b600054610100900460ff1615808015610d795750600054600160ff909116105b80610d935750303b158015610d93575060005460ff166001145b610e055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c1565b6000805460ff191660011790558015610e28576000805461ff0019166101001790555b610e3185611e7c565b61ffff831115610e78576040517f125ae34000000000000000000000000000000000000000000000000000000000815261ffff6004820152602481018490526044016107c1565b610e828484611937565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d88484604051610eb3929190612ed2565b60405180910390a1610ec4826117e0565b8015610f0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006106af82611206565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610f55906001600160a01b03163033610718565b600082610f606106b5565b610f6a9190612f20565b6101925490915061ffff61010090910481169082161015610fd057610192546040517f2f621d5a00000000000000000000000000000000000000000000000000000000815261ffff808416600483015261010090920490911660248201526044016107c1565b610fda8484611f02565b7f0ba413f7646035cae0a4ee999d676078fc8a763d1a36a8ef25e4c10f67d8615d8484604051610805929190612ed2565b6001600160a01b038216600090815261015f6020526040812061102e9083611c1e565b6001149392505050565b60408051608080820183526000808352602080840182905283850182905260609384018290528582526101918152848220805486519485018752600182015461ffff808216875267ffffffffffffffff6201000083048116888701526a010000000000000000000083048116888b0152720100000000000000000000000000000000000090920490911686880152600383018054895181870281018701909a52808a5260ff841699610100909404909216979594909190859084015b828210156111d8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161114790612f33565b80601f016020809104026020016040519081016040528092919081815260200182805461117390612f33565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081525050815260200190600101906110f4565b505050509250806004015491505091939590929450565b60006106af82611cd1565b6000610c3361012d5490565b6001600160a01b038116600090815261015f602052604081206112289061161f565b6001600160e01b03166001149050919050565b600080600161124943611f6e565b6112539190612f67565b6101935490915067ffffffffffffffff808316911611156112ae57335b6040517feab993440000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107c1565b6101925460ff1680156112d257506112d0338267ffffffffffffffff1661100b565b155b156112dd5733611270565b8367ffffffffffffffff166000036112ff576112f842611f6e565b9350611373565b61130842611f6e565b67ffffffffffffffff168467ffffffffffffffff1610156113735761132c42611f6e565b6040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff918216600482015290851660248201526044016107c1565b8367ffffffffffffffff168367ffffffffffffffff1610156113d5576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8086166004830152841660248201526044016107c1565b6113e5338c8c87878e8e8e611ff2565b6000818152610191602052604090206001810180547fffffffffffffffffffffffffffff00000000000000000000000000000000ffff166201000067ffffffffffffffff868116919091027fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff16919091176a010000000000000000000089831602177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff8116720100000000000000000000000000000000000092891692909202918217835561019254610100900461ffff167fffffffffffff0000000000000000ffffffffffffffffffffffffffffffff00009091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090921691909117179055909250871561151757600481018890555b60005b8981101561157657816003018b8b8381811061153857611538612f8f565b905060200281019061154a9190612fa5565b81546001810183556000928352602090922090916003020161156c828261300b565b505060010161151a565b508615611587576115878387610c46565b50509998505050505050505050565b61159f81611cd1565b6115d8576040517f9fefd0f1000000000000000000000000000000000000000000000000000000008152600481018290526024016107c1565b6109ad81611d14565b60006001600160e01b031982167fda35c6640000000000000000000000000000000000000000000000000000000014806106af57506106af82612058565b8054600090801561165e5761164783611639600184612f20565b600091825260209091200190565b5464010000000090046001600160e01b03166106dc565b60009392505050565b60008281526101916020526040812061167f816120f3565b61168d5760009150506106af565b60018101546116ad90849062010000900467ffffffffffffffff1661100b565b6116bb5760009150506106af565b6001600160a01b038316600090815260028201602052604090205460ff16156116e85760009150506106af565b5060019392505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069061173f9088908890889088908890600401613167565b602060405180830381865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178091906131a5565b6117d8576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016107c1565b505050505050565b60006117ea6106b5565b905061ffff811661180160408401602085016131d2565b61ffff16111561185c578061181c60408401602085016131d2565b6040517f2f621d5a00000000000000000000000000000000000000000000000000000000815261ffff9283166004820152911660248201526044016107c1565b600161186e60408401602085016131d2565b61ffff16101561188a57600161181c60408401602085016131d2565b8161019261189882826131ef565b9050506118a443611f6e565b61019380547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556118ee60408301602084016131d2565b61ffff167f7d8a9a57630acbcfb28eb55b1ce0ff7b3d0dc9edea594075a8a6af35278a4cf96119206020850185613252565b604051901515815260200160405180910390a25050565b60005b81811015611a305761196c83838381811061195757611957612f8f565b90506020020160208101906105909190612a33565b156119d65782828281811061198357611983612f8f565b90506020020160208101906119989190612a33565b6040517fc0b7477d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107c1565b611a26600161015f60008686868181106119f2576119f2612f8f565b9050602002016020810190611a079190612a33565b6001600160a01b0316815260208101919091526040016000209061216c565b505060010161193a565b50610d536101606121a2836121a6565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59061072a906001600160a01b03163033610718565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ab157611aac836121de565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b0b575060408051601f3d908101601f19168201909252611b089181019061326f565b60015b611b7d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016107c1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611c125760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016107c1565b50611aac8383836122a9565b6000438210611c6f5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016107c1565b6000611c7a836122ce565b84549091506000611c8d8684838561234a565b90508015611cbb57611ca486611639600184612f20565b5464010000000090046001600160e01b0316611cbe565b60005b6001600160e01b03169695505050505050565b600081815261019160205260408120611ce9816120f3565b611cf65750600092915050565b6001810154905461ffff918216610100909104909116101592915050565b600081815261019160205260409020805460ff19166001178155610d53611d4360c9546001600160a01b031690565b836101916000868152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b82821015611e5f576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191611dce90612f33565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa90612f33565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b50505050508152505081526020019060010190611d7b565b5050506000878152610191602052604090206004015490506123a8565b600054610100900460ff16611ef95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b6109ad81612477565b60005b81811015611f5e57611f2283838381811061195757611957612f8f565b611f385782828281811061198357611983612f8f565b611f54600061015f60008686868181106119f2576119f2612f8f565b5050600101611f05565b50610d53610160612523836121a6565b600067ffffffffffffffff821115611fee5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016107c1565b5090565b6000611ffc612528565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516120449796959493929190613288565b60405180910390a398975050505050505050565b60006001600160e01b031982167f41de68300000000000000000000000000000000000000000000000000000000014806120bb57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b806106af57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106af565b6000806120ff42611f6e565b835490915060ff161580156121335750600183015467ffffffffffffffff8083166a01000000000000000000009092041611155b80156106dc5750600183015467ffffffffffffffff80831672010000000000000000000000000000000000009092041610159392505050565b60008061218a8461217c436122ce565b61218586612543565b6125c2565b6001600160e01b0391821693501690505b9250929050565b0190565b6000806121d1856121cc6121b98861161f565b6001600160e01b0316868863ffffffff16565b61216c565b915091505b935093915050565b6001600160a01b0381163b61225b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107c1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6122b283612765565b6000825111806122bf5750805b15611aac57610d5383836127a5565b600063ffffffff821115611fee5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016107c1565b60005b818310156123a057600061236184846128b0565b60008781526020902090915063ffffffff86169082015463ffffffff16111561238c5780925061239a565b612397816001612ebf565b93505b5061234d565b509392505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf324906123f790889088908890600401613397565b6000604051808303816000875af1158015612416573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261243e91908101906133c0565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166124f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b900390565b60006125326111fa565b9050610bfd61012d80546001019055565b60006001600160e01b03821115611fee5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016107c1565b82546000908190801561270b5760006125e087611639600185612f20565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b0316602084015291925090871610156126625760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016107c1565b805163ffffffff8088169116036126ab578461268388611639600186612f20565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556126fb565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506121d69050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816121d6565b61276e816121de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107c1565b600080846001600160a01b03168460405161283f91906134c6565b600060405180830381855af49150503d806000811461287a576040519150601f19603f3d011682016040523d82523d6000602084013e61287f565b606091505b50915091506128a7828260405180606001604052806027815260200161350e602791396128cb565b95945050505050565b60006128bf60028484186134d8565b6106dc90848416612ebf565b606083156128da5750816106dc565b6106dc83838151156128ef5781518083602001fd5b8060405162461bcd60e51b81526004016107c191906134fa565b60006020828403121561291b57600080fd5b81356001600160e01b0319811681146106dc57600080fd5b6001600160a01b03811681146109ad57600080fd5b6000806040838503121561295b57600080fd5b82359150602083013561296d81612933565b809150509250929050565b60006040828403121561298a57600080fd5b50919050565b6000604082840312156129a257600080fd5b6106dc8383612978565b60008083601f8401126129be57600080fd5b50813567ffffffffffffffff8111156129d657600080fd5b6020830191508360208260051b850101111561219b57600080fd5b60008060208385031215612a0457600080fd5b823567ffffffffffffffff811115612a1b57600080fd5b612a27858286016129ac565b90969095509350505050565b600060208284031215612a4557600080fd5b81356106dc81612933565b6020810160038310612a7257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ab757612ab7612a78565b604052919050565b600067ffffffffffffffff821115612ad957612ad9612a78565b50601f01601f191660200190565b60008060408385031215612afa57600080fd5b8235612b0581612933565b9150602083013567ffffffffffffffff811115612b2157600080fd5b8301601f81018513612b3257600080fd5b8035612b45612b4082612abf565b612a8e565b818152866020838501011115612b5a57600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060208284031215612b8c57600080fd5b5035919050565b80151581146109ad57600080fd5b8035612bac81612b93565b919050565b60008060408385031215612bc457600080fd5b82359150602083013561296d81612b93565b60008060008060808587031215612bec57600080fd5b8435612bf781612933565b9350602085013567ffffffffffffffff811115612c1357600080fd5b612c1f878288016129ac565b9094509250612c3390508660408701612978565b905092959194509250565b60008060408385031215612c5157600080fd5b8235612c5c81612933565b946020939093013593505050565b60005b83811015612c85578181015183820152602001612c6d565b50506000910152565b60008151808452612ca6816020860160208601612c6a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612d2b578284038952815180516001600160a01b031685528581015186860152604090810151606091860182905290612d1781870183612c8e565b9a87019a9550505090840190600101612cd8565b5091979650505050505050565b6000610100871515835261ffff808816602085015280875116604085015250602086015167ffffffffffffffff80821660608601528060408901511660808601528060608901511660a086015250508060c0840152612d9981840186612cba565b9150508260e08301529695505050505050565b803567ffffffffffffffff81168114612bac57600080fd5b600080600080600080600080600060e08a8c031215612de257600080fd5b893567ffffffffffffffff80821115612dfa57600080fd5b818c0191508c601f830112612e0e57600080fd5b813581811115612e1d57600080fd5b8d6020828501011115612e2f57600080fd5b60209283019b509950908b01359080821115612e4a57600080fd5b50612e578c828d016129ac565b90985096505060408a01359450612e7060608b01612ba1565b9350612e7e60808b01612ba1565b9250612e8c60a08b01612dac565b9150612e9a60c08b01612dac565b90509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b808201808211156106af576106af612ea9565b60208082528181018390526000908460408401835b86811015612f15578235612efa81612933565b6001600160a01b031682529183019190830190600101612ee7565b509695505050505050565b818103818111156106af576106af612ea9565b600181811c90821680612f4757607f821691505b60208210810361298a57634e487b7160e01b600052602260045260246000fd5b67ffffffffffffffff828116828216039080821115612f8857612f88612ea9565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112612fbb57600080fd5b9190910192915050565b601f821115611aac57600081815260208120601f850160051c81016020861015612fec5750805b601f850160051c820191505b818110156117d857828155600101612ff8565b813561301681612933565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261306457600080fd5b8501803567ffffffffffffffff81111561307d57600080fd5b803603848301131561308e57600080fd5b6130a28161309c8554612f33565b85612fc5565b6000601f8211600181146130d857600083156130c057508382018601355b600019600385901b1c1916600184901b178555613131565b600085815260209020601f19841690835b82811015613108578685018901358255938801939089019088016130e9565b50848210156131275760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261319a60808301848661313c565b979650505050505050565b6000602082840312156131b757600080fd5b81516106dc81612b93565b61ffff811681146109ad57600080fd5b6000602082840312156131e457600080fd5b81356106dc816131c2565b81356131fa81612b93565b815460ff19811691151560ff169182178355602084013561321a816131c2565b62ffff008160081b16837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008416171784555050505050565b60006020828403121561326457600080fd5b81356106dc81612b93565b60006020828403121561328157600080fd5b5051919050565b600067ffffffffffffffff808a1683526020818a1681850152604060a0818601526132b760a086018a8c61313c565b606086820381880152818983528483019050848a60051b8401018b60005b8c81101561337957601f198684030184528135605e198f36030181126132fa57600080fd5b8e01803561330781612933565b6001600160a01b0316845280890135898501528781013536829003601e1901811261333157600080fd5b0188810190358a81111561334457600080fd5b80360382131561335357600080fd5b8689860152613365878601828461313c565b958a019594505050908701906001016132d5565b50508097505050505050505082608083015298975050505050505050565b8381526060602082015260006133b06060830185612cba565b9050826040830152949350505050565b60008060408084860312156133d457600080fd5b835167ffffffffffffffff808211156133ec57600080fd5b818601915086601f83011261340057600080fd5b815160208282111561341457613414612a78565b8160051b613423828201612a8e565b928352848101820192828101908b85111561343d57600080fd5b83870192505b848310156134b25782518681111561345b5760008081fd5b8701603f81018d1361346d5760008081fd5b8481015161347d612b4082612abf565b8181528e8b8385010111156134925760008081fd5b6134a1828883018d8601612c6a565b845250509183019190830190613443565b9990920151989a9899505050505050505050565b60008251612fbb818460208701612c6a565b6000826134f557634e487b7160e01b600052601260045260246000fd5b500490565b6020815260006106dc6020830184612c8e56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa224dc426ff8ba829bf55fe9cee44047fb2db64dbd39957239d52693c9d982964736f6c63430008110033";
var isSuperArgs$F = (xs) => xs.length > 1;
var Multisig__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$F(args)) {
      super(...args);
    } else {
      super(_abi$K, _bytecode$F, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$K);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$K, signerOrProvider);
  }
};
Multisig__factory.bytecode = _bytecode$F;
Multisig__factory.abi = _abi$K;
var _abi$J = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$E = "";
var isSuperArgs$E = (xs) => xs.length > 1;
var MultisigSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$E(args)) {
      super(...args);
    } else {
      super(_abi$J, _bytecode$E, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$J);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$J, signerOrProvider);
  }
};
MultisigSetup__factory.bytecode = _bytecode$E;
MultisigSetup__factory.abi = _abi$J;
var index$r = Object.freeze({
  __proto__: null,
  IMultisig__factory,
  Multisig__factory,
  MultisigSetup__factory
});
var index$q = Object.freeze({
  __proto__: null,
  admin: index$v,
  majorityVoting: index$s,
  multisig: index$r
});
var _abi$I = [
  {
    inputs: [],
    name: "PlaceholderSetupCannotBeUsed",
    type: "error"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$D = "0x608060405234801561001057600080fd5b50610671806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100a3578063a8a9c29e146100c3578063f10832f1146100e457600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a36600461024a565b610105565b60405190151581526020015b60405180910390f35b6040516000815260200161008b565b6100b66100b13660046102d4565b61019e565b60405161008b91906103ae565b6100d66100d13660046103f7565b6101d2565b60405161008b9291906104fe565b6100f76100f2366004610581565b6101f9565b60405161008b929190610604565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b5000000000000000000000000000000000000000000000000000000000148061019857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606101f1604051806040016040528060608152602001606081525090565b935093915050565b6000610218604051806040016040528060608152602001606081525090565b6040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561025c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461028c57600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b757600080fd5b919050565b6000606082840312156102ce57600080fd5b50919050565b600080604083850312156102e757600080fd5b6102f083610293565b9150602083013567ffffffffffffffff81111561030c57600080fd5b610318858286016102bc565b9150509250929050565b600081516003811061035d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83525060208181015173ffffffffffffffffffffffffffffffffffffffff90811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156103eb576103dd838551610322565b9385019392506001016103ca565b50909695505050505050565b60008060006060848603121561040c57600080fd5b61041584610293565b9250602084013561ffff8116811461042c57600080fd5b9150604084013567ffffffffffffffff81111561044857600080fd5b610454868287016102bc565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156104b057835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161047e565b50508483015186820387850152805180835290840192506000918401905b808310156104f3576104e1828551610322565b915084840193506001830192506104ce565b509695505050505050565b604081526000835180604084015260005b8181101561052c576020818701810151606086840101520161050f565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610578606082018561045e565b95945050505050565b60008060006040848603121561059657600080fd5b61059f84610293565b9250602084013567ffffffffffffffff808211156105bc57600080fd5b818601915086601f8301126105d057600080fd5b8135818111156105df57600080fd5b8760208285010111156105f157600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610633604083018461045e565b94935050505056fea26469706673582212209e5aa47002642e3fc226cbcbdbcaae5cce4aaf6cced5eb357df52ed883460b6d64736f6c63430008110033";
var isSuperArgs$D = (xs) => xs.length > 1;
var PlaceholderSetup__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$D(args)) {
      super(...args);
    } else {
      super(_abi$I, _bytecode$D, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$I);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$I, signerOrProvider);
  }
};
PlaceholderSetup__factory.bytecode = _bytecode$D;
PlaceholderSetup__factory.abi = _abi$I;
var index$p = Object.freeze({
  __proto__: null,
  PlaceholderSetup__factory
});
var _abi$H = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Claimed",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]"
      }
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]"
      }
    ],
    name: "unclaimedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IMerkleDistributor__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$H);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$H, signerOrProvider);
  }
};
IMerkleDistributor__factory.abi = _abi$H;
var _abi$G = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "distributor",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "tree",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "context",
        type: "bytes"
      }
    ],
    name: "MerkleMinted",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "_distributorBase",
        type: "address"
      }
    ],
    name: "changeDistributorBase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "distributorBase",
    outputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_tree",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_context",
        type: "bytes"
      }
    ],
    name: "merkleMint",
    outputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "distributor",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20MintableUpgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IMerkleMinter__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$G);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$G, signerOrProvider);
  }
};
IMerkleMinter__factory.abi = _abi$G;
var _abi$F = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      }
    ],
    name: "TokenAlreadyClaimed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "TokenClaimInvalid",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Claimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]"
      }
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]"
      }
    ],
    name: "unclaimedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$C = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611b4261011960003960008181610466015281816104fc015281816106030152818161069901526107940152611b426000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780636133f985116100595780636133f985146102295780639e34070f14610249578063c9c4bfca14610269578063fc0c546a1461029d57600080fd5b806352d1902d146101df57806358beca34146101f45780635c60da1b1461021457600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e25780632e7ba6ef146101175780632eb4a7ab14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046115ff565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004611656565b61031a565b005b34801561014557600080fd5b5061015061012e5481565b60405190815260200161010e565b34801561016a57600080fd5b506101376101793660046116ef565b61045c565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061170c565b6101376101da36600461177b565b6105f9565b3480156101eb57600080fd5b50610150610787565b34801561020057600080fd5b5061015061020f366004611823565b61084c565b34801561022057600080fd5b50610198610888565b34801561023557600080fd5b506101376102443660046118ef565b6108c0565b34801561025557600080fd5b50610102610264366004611930565b610a31565b34801561027557600080fd5b506101507f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102a957600080fd5b5061012d54610198906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3a499815000000000000000000000000000000000000000000000000000000001480610314575061031482610a73565b92915050565b61032385610a31565b15610362576040517f35c500ed000000000000000000000000000000000000000000000000000000008152600481018690526024015b60405180910390fd5b6103a1858585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b5692505050565b6103f0576040517f8fbd3f25000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038516602482015260448101849052606401610359565b6103f985610bd4565b61012d54610411906001600160a01b03168585610c13565b836001600160a01b0316857f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0268560405161044d91815260200190565b60405180910390a35050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104fa5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105d15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610359565b6105da81610c98565b604080516000808252602082019092526105f691839190610cd5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106975760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106f27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461076e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610359565b61077782610c98565b61078382826001610cd5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108275760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610359565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061085785610a31565b1561086457506000610880565b61087085858585610b56565b61087b57600061087d565b825b90505b949350505050565b60006108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156108e05750600054600160ff909116105b806108fa5750303b1580156108fa575060005460ff166001145b61096c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610359565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156109ad576000805461ff0019166101001790555b6109b684610e75565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905561012e8290558015610a2b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600080610a406101008461195f565b90506000610a5061010085611973565b600092835261012f602052604090922054600190921b9182169091149392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de6830000000000000000000000000000000000000000000000000000000001480610b0657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061031457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610314565b600080858585604051602001610ba49392919092835260609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166020830152603482015260540190565b604051602081830303815290604052805190602001209050610bca8361012e5483610efb565b9695505050505050565b6000610be26101008361195f565b90506000610bf261010084611973565b600092835261012f60205260409092208054600190931b9092179091555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c93908490610f13565b505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610783906001600160a01b0316303384600036610ff8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d0857610c93836110e6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d62575060408051601f3d908101601f19168201909252610d5f91810190611987565b60015b610dd45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610359565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610e695760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610359565b50610c938383836111b1565b600054610100900460ff16610ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610359565b6105f6816111d6565b600082610f088584611282565b1490505b9392505050565b6000610f68826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112cf9092919063ffffffff16565b805190915015610c935780806020019051810190610f8691906119a0565b610c935760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610359565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069061104590889088908890889088906004016119c2565b602060405180830381865afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906119a0565b6110de576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610359565b505050505050565b6001600160a01b0381163b6111635760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610359565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6111ba836112de565b6000825111806111c75750805b15610c9357610a2b838361131e565b600054610100900460ff166112535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610359565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600081815b84518110156112c7576112b3828683815181106112a6576112a6611a16565b6020026020010151611429565b9150806112bf81611a2c565b915050611287565b509392505050565b60606108808484600085611455565b6112e7816110e6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61139d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610359565b600080846001600160a01b0316846040516113b89190611a96565b600060405180830381855af49150503d80600081146113f3576040519150601f19603f3d011682016040523d82523d6000602084013e6113f8565b606091505b50915091506114208282604051806060016040528060278152602001611ae660279139611547565b95945050505050565b6000818310611445576000828152602084905260409020610f0c565b5060009182526020526040902090565b6060824710156114cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610359565b600080866001600160a01b031685876040516114e99190611a96565b60006040518083038185875af1925050503d8060008114611526576040519150601f19603f3d011682016040523d82523d6000602084013e61152b565b606091505b509150915061153c87838387611560565b979650505050505050565b60608315611556575081610f0c565b610f0c83836115d5565b606083156115cf5782516000036115c8576001600160a01b0385163b6115c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610359565b5081610880565b61088083835b8151156115e55781518083602001fd5b8060405162461bcd60e51b81526004016103599190611ab2565b60006020828403121561161157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f0c57600080fd5b6001600160a01b03811681146105f657600080fd5b60008060008060006080868803121561166e57600080fd5b85359450602086013561168081611641565b935060408601359250606086013567ffffffffffffffff808211156116a457600080fd5b818801915088601f8301126116b857600080fd5b8135818111156116c757600080fd5b8960208260051b85010111156116dc57600080fd5b9699959850939650602001949392505050565b60006020828403121561170157600080fd5b8135610f0c81611641565b602081016003831061172e57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561177357611773611734565b604052919050565b6000806040838503121561178e57600080fd5b823561179981611641565b915060208381013567ffffffffffffffff808211156117b757600080fd5b818601915086601f8301126117cb57600080fd5b8135818111156117dd576117dd611734565b6117ef84601f19601f8401160161174a565b9150808252878482850101111561180557600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806080858703121561183957600080fd5b8435935060208086013561184c81611641565b935060408601359250606086013567ffffffffffffffff8082111561187057600080fd5b818801915088601f83011261188457600080fd5b81358181111561189657611896611734565b8060051b91506118a784830161174a565b818152918301840191848101908b8411156118c157600080fd5b938501935b838510156118df578435825293850193908501906118c6565b989b979a50959850505050505050565b60008060006060848603121561190457600080fd5b833561190f81611641565b9250602084013561191f81611641565b929592945050506040919091013590565b60006020828403121561194257600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b60008261196e5761196e611949565b500490565b60008261198257611982611949565b500690565b60006020828403121561199957600080fd5b5051919050565b6000602082840312156119b257600080fd5b81518015158114610f0c57600080fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a6b57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015611a8d578181015183820152602001611a75565b50506000910152565b60008251611aa8818460208701611a72565b9190910192915050565b6020815260008251806020840152611ad1816040850160208701611a72565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f1e7e1ef06609ed8e5907fe67f84e5aa4ad7ee86889ab36abf57b508d78f9cd364736f6c63430008110033";
var isSuperArgs$C = (xs) => xs.length > 1;
var MerkleDistributor__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$C(args)) {
      super(...args);
    } else {
      super(_abi$F, _bytecode$C, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$F);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$F, signerOrProvider);
  }
};
MerkleDistributor__factory.bytecode = _bytecode$C;
MerkleDistributor__factory.abi = _abi$F;
var _abi$E = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "distributor",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "tree",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "context",
        type: "bytes"
      }
    ],
    name: "MerkleMinted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "CHANGE_DISTRIBUTOR_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MERKLE_MINT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "_distributorBase",
        type: "address"
      }
    ],
    name: "changeDistributorBase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "distributorBase",
    outputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "contract IERC20MintableUpgradeable",
        name: "_token",
        type: "address"
      },
      {
        internalType: "contract IMerkleDistributor",
        name: "_distributorBase",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_tree",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_context",
        type: "bytes"
      }
    ],
    name: "merkleMint",
    outputs: [
      {
        internalType: "contract IMerkleDistributor",
        name: "distributor",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20MintableUpgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$B = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612062610119600039600081816103ca01528181610466015281816105740152818161060c015261070e01526120626000f3fe608060405260043610620000fb5760003560e01c80635c60da1b1162000095578063c9c4bfca1162000060578063c9c4bfca14620002c0578063d3feb83014620002f6578063ec8528f9146200031b578063fc0c546a146200033e57600080fd5b80635c60da1b146200022857806379708a6b1462000240578063c0c53b8b1462000276578063c97b8903146200029b57600080fd5b80634162169f11620000d65780634162169f14620001a657806341de683014620001da5780634f1ef28614620001f957806352d1902d146200021057600080fd5b806301ffc9a7146200010057806304e56116146200013a5780633659cfe6146200017f575b600080fd5b3480156200010d57600080fd5b50620001256200011f366004620013dc565b62000361565b60405190151581526020015b60405180910390f35b3480156200014757600080fd5b50620001707f41f49f8a4bf63d8f5630a1a87118692c5e9c20298af5f644b801ec1cadb6263081565b60405190815260200162000131565b3480156200018c57600080fd5b50620001a46200019e36600462001436565b620003c0565b005b348015620001b357600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200162000131565b348015620001e757600080fd5b50600060405162000131919062001456565b620001a46200020a366004620014c7565b6200056a565b3480156200021d57600080fd5b506200017062000701565b3480156200023557600080fd5b50620001c1620007c8565b3480156200024d57600080fd5b50620001707fd3a9da86ba539ea5147566d228763cc88a4062e19bf6dfe0e702a700041c790681565b3480156200028357600080fd5b50620001a46200029536600462001597565b62000801565b348015620002a857600080fd5b50620001a4620002ba36600462001436565b6200098b565b348015620002cd57600080fd5b50620001707f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156200030357600080fd5b50620001c16200031536600462001635565b620009fc565b3480156200032857600080fd5b5061012e54620001c1906001600160a01b031681565b3480156200034b57600080fd5b5061012d54620001c1906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f0a0c4da0000000000000000000000000000000000000000000000000000000001480620003ba5750620003ba8262000bec565b92915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620004645760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620004c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146200053e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016200045b565b620005498162000cd2565b60408051600080825260208201909252620005679183919062000d0d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036200060a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016200045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620006667f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614620006e45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016200045b565b620006ef8262000cd2565b620006fd8282600162000d0d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007a35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016200045b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000620007fc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff1615808015620008225750600054600160ff909116105b806200083e5750303b1580156200083e575060005460ff166001145b620008b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016200045b565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015620008f4576000805461ff0019166101001790555b620008ff8462000ebe565b61012d80546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff199283161790925561012e805492851692909116919091179055801562000985576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60c9547fd3a9da86ba539ea5147566d228763cc88a4062e19bf6dfe0e702a700041c790690620009cb906001600160a01b031630335b8460003662000f48565b5061012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60c9546000907f41f49f8a4bf63d8f5630a1a87118692c5e9c20298af5f644b801ec1cadb626309062000a3a906001600160a01b03163033620009c1565b61012e5460009062000b10906001600160a01b03167f6133f9850000000000000000000000000000000000000000000000000000000062000a8360c9546001600160a01b031690565b61012d546040516001600160a01b03928316602482015291166044820152606481018d905260840160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200103d565b61012d546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152602482018c90529293509116906340c10f1990604401600060405180830381600087803b15801562000b7b57600080fd5b505af115801562000b90573d6000803e3d6000fd5b5050505088816001600160a01b03167fd1fa72dcd8da0c53cf180de7043b2742dfda59fc1514e739a747b096eacbef578a8a8a8a8a60405162000bd8959493929190620016ea565b60405180910390a398975050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148062000c8057507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b80620003ba57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614620003ba565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590620006fd906001600160a01b03163033620009c1565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000d485762000d438362001081565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000da5575060408051601f3d908101601f1916820190925262000da29181019062001727565b60015b62000e195760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016200045b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811462000eb05760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016200045b565b5062000d438383836200114e565b600054610100900460ff1662000f3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200045b565b620005678162001179565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069062000f97908890889088908890889060040162001741565b602060405180830381865afa15801562000fb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fdb919062001781565b62001035576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016200045b565b505050505050565b600082826040516200104f90620013ce565b6200105c929190620017f9565b604051809103906000f08015801562001079573d6000803e3d6000fd5b509392505050565b6001600160a01b0381163b620011005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016200045b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620011598362001227565b600082511180620011675750805b1562000d435762000985838362001269565b600054610100900460ff16620011f85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200045b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620012328162001081565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620012ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016200045b565b600080846001600160a01b03168460405162001307919062001825565b600060405180830381855af49150503d806000811462001344576040519150601f19603f3d011682016040523d82523d6000602084013e62001349565b606091505b509150915062001374828260405180606001604052806027815260200162002006602791396200137d565b95945050505050565b606083156200138e5750816200139a565b6200139a8383620013a1565b9392505050565b815115620013b25781518083602001fd5b8060405162461bcd60e51b81526004016200045b919062001843565b6107ad806200185983390190565b600060208284031215620013ef57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200139a57600080fd5b6001600160a01b03811681146200056757600080fd5b6000602082840312156200144957600080fd5b81356200139a8162001420565b602081016003831062001492577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215620014db57600080fd5b8235620014e88162001420565b9150602083013567ffffffffffffffff808211156200150657600080fd5b818501915085601f8301126200151b57600080fd5b81358181111562001530576200153062001498565b604051601f8201601f19908116603f011681019083821181831017156200155b576200155b62001498565b816040528281528860208487010111156200157557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600060608486031215620015ad57600080fd5b8335620015ba8162001420565b92506020840135620015cc8162001420565b91506040840135620015de8162001420565b809150509250925092565b60008083601f840112620015fc57600080fd5b50813567ffffffffffffffff8111156200161557600080fd5b6020830191508360208285010111156200162e57600080fd5b9250929050565b600080600080600080608087890312156200164f57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156200167657600080fd5b620016848a838b01620015e9565b909650945060608901359150808211156200169e57600080fd5b50620016ad89828a01620015e9565b979a9699509497509295939492505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b85815260606020820152600062001706606083018688620016bf565b82810360408401526200171b818587620016bf565b98975050505050505050565b6000602082840312156200173a57600080fd5b5051919050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015262001776608083018486620016bf565b979650505050505050565b6000602082840312156200179457600080fd5b815180151581146200139a57600080fd5b60005b83811015620017c2578181015183820152602001620017a8565b50506000910152565b60008151808452620017e5816020860160208601620017a5565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082015260006200181d6040830184620017cb565b949350505050565b6000825162001839818460208701620017a5565b9190910192915050565b6020815260006200139a6020830184620017cb56fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200da50166c080611e4978511dd6febacd07d8d15209ee46ad8cb68db149f7c6ef64736f6c63430008110033";
var isSuperArgs$B = (xs) => xs.length > 1;
var MerkleMinter__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$B(args)) {
      super(...args);
    } else {
      super(_abi$E, _bytecode$B, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$E);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$E, signerOrProvider);
  }
};
MerkleMinter__factory.bytecode = _bytecode$B;
MerkleMinter__factory.abi = _abi$E;
var index$o = Object.freeze({
  __proto__: null,
  IMerkleDistributor__factory,
  IMerkleMinter__factory,
  MerkleDistributor__factory,
  MerkleMinter__factory
});
var _abi$D = [
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address"
      }
    ],
    name: "InvalidAddresslistUpdate",
    type: "error"
  },
  {
    inputs: [],
    name: "addresslistLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "addresslistLengthAtBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "isListedAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var Addresslist__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$D);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$D, signerOrProvider);
  }
};
Addresslist__factory.abi = _abi$D;
var index$n = Object.freeze({
  __proto__: null,
  Addresslist__factory
});
var index$m = Object.freeze({
  __proto__: null,
  counterExample: index$w,
  governance: index$q,
  placeholderVersion: index$p,
  token: index$o,
  utils: index$n
});
var _abi$C = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "UnkownCallback",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "sig",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "CallbackReceived",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "handleCallback",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "registerCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$A = "0x608060405234801561001057600080fd5b50610408806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806373be85531461003b578063fd292c5e14610083575b600080fd5b61004e610049366004610271565b6100f4565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6100f2610091366004610333565b7fffffffff000000000000000000000000000000000000000000000000000000008216600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e083901c1790555050565b005b6000806101018484610109565b949350505050565b7fffffffff00000000000000000000000000000000000000000000000000000000808316600090815260208190526040812054909160e09190911b9081166101ad576040517f54bdcc3e0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000080861660048301528216602482015260440160405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516101fe929190610366565b60405180910390a29392505050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461023d57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561028457600080fd5b61028d8361020d565b9150602083013567ffffffffffffffff808211156102aa57600080fd5b818501915085601f8301126102be57600080fd5b8135818111156102d0576102d0610242565b604051601f8201601f19908116603f011681019083821181831017156102f8576102f8610242565b8160405282815288602084870101111561031157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561034657600080fd5b61034f8361020d565b915061035d6020840161020d565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8316815260006020604081840152835180604085015260005b818110156103b057858101830151858201606001528201610394565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220f6806505f34053dc8a6aaa0ca726f1ab920e4012035e1671d5a4cb26716028b164736f6c63430008110033";
var isSuperArgs$A = (xs) => xs.length > 1;
var CallbackHandlerMockHelper__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$A(args)) {
      super(...args);
    } else {
      super(_abi$C, _bytecode$A, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$C);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$C, signerOrProvider);
  }
};
CallbackHandlerMockHelper__factory.bytecode = _bytecode$A;
CallbackHandlerMockHelper__factory.abi = _abi$C;
var index$l = Object.freeze({
  __proto__: null,
  CallbackHandlerMockHelper__factory
});
var _abi$B = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256"
      }
    ],
    name: "consumeGas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "store",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$z = "0x608060405234801561001057600080fd5b50610163806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636057361d1461003b578063a329e8de1461006d575b600080fd5b61005b6100493660046100b5565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008061007b3660046100b5565b610082565b005b60005b818110156100b157600081815260208190526040902060019055806100a9816100ce565b915050610085565b5050565b6000602082840312156100c757600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610126577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220a195996a4aea2ec0feac03e2c52dc6c8ac143c1812d679fe4d1fd2b3ad7d7b6d64736f6c63430008110033";
var isSuperArgs$z = (xs) => xs.length > 1;
var GasConsumer__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$z(args)) {
      super(...args);
    } else {
      super(_abi$B, _bytecode$z, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$B);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$B, signerOrProvider);
  }
};
GasConsumer__factory.bytecode = _bytecode$z;
GasConsumer__factory.abi = _abi$B;
var index$k = Object.freeze({
  __proto__: null,
  GasConsumer__factory
});
var _abi$A = [
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newNum",
        type: "uint256"
      }
    ],
    name: "setTest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$y = "0x6080604052600a60005534801561001557600080fd5b50610118806100256000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636ca1f933146037578063a9cc471814605c575b600080fd5b604a604236600460ca565b600081905590565b60405190815260200160405180910390f35b60626064565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416374696f6e457865637574653a526576657274000000000000000000000000604482015260640160405180910390fd5b60006020828403121560db57600080fd5b503591905056fea2646970667358221220ef30671210f4d6f984c46eec111d0de75e9566c0ff33c6afb60bf1899b1d4d9b64736f6c63430008110033";
var isSuperArgs$y = (xs) => xs.length > 1;
var ActionExecute__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$y(args)) {
      super(...args);
    } else {
      super(_abi$A, _bytecode$y, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$A);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$A, signerOrProvider);
  }
};
ActionExecute__factory.bytecode = _bytecode$y;
ActionExecute__factory.abi = _abi$A;
var _abi$z = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "AnyAddressDisallowedForWhoAndWhere",
    type: "error"
  },
  {
    inputs: [],
    name: "ConditionNotPresentForAnyAddress",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "currentCondition",
        type: "address"
      },
      {
        internalType: "address",
        name: "newCondition",
        type: "address"
      }
    ],
    name: "PermissionAlreadyGrantedForDifferentCondition",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionsForAnyAddressDisallowed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "_reference",
        type: "string"
      }
    ],
    name: "Deposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "failureMap",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "execResults",
        type: "bytes[]"
      }
    ],
    name: "Executed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IPermissionCondition",
        name: "condition",
        type: "address"
      }
    ],
    name: "Granted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "MetadataSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "NativeTokenDeposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      }
    ],
    name: "Revoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "signatureValidator",
        type: "address"
      }
    ],
    name: "SignatureValidatorSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "magicNumber",
        type: "bytes4"
      }
    ],
    name: "StandardCallbackRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "forwarder",
        type: "address"
      }
    ],
    name: "TrustedForwarderSet",
    type: "event"
  },
  {
    inputs: [],
    name: "ROOT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "_items",
        type: "tuple[]"
      }
    ],
    name: "applyMultiTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.SingleTargetPermission[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "applySingleTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "callId",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "_actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes[]",
        name: "execResults",
        type: "bytes[]"
      },
      {
        internalType: "uint256",
        name: "failureMap",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "grant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "contract IPermissionCondition",
        name: "_condition",
        type: "address"
      }
    ],
    name: "grantWithCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "pastVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_callbackSelector",
        type: "bytes4"
      },
      {
        internalType: "bytes4",
        name: "_magicNumber",
        type: "bytes4"
      }
    ],
    name: "registerStandardCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "revoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "setMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "setSignatureValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$x = "0x60806040523480156200001157600080fd5b5060405162001af138038062001af183398101604081905262000034916200044d565b600054610100900460ff1615808015620000555750600054600160ff909116105b8062000085575062000072306200016c60201b620006f51760201c565b15801562000085575060005460ff166001145b620000ee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000112576000805461ff0019166101001790555b6200011d826200017b565b801562000164576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50506200047f565b6001600160a01b03163b151590565b600054610100900460ff16620001e85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620000e5565b620001f381620001f6565b50565b620001f3308260008051602062001ad18339815191526200021b838383600262000220565b505050565b6001600160a01b038481161480156200024157506001600160a01b03838116145b1562000260576040516385f1ba9960e01b815260040160405180910390fd5b6001600160a01b0384811614806200028057506001600160a01b03838116145b15620002f057600060008051602062001ad1833981519152831480620002a35750805b15620002c2576040516324159e5b60e01b815260040160405180910390fd5b6001196001600160a01b03831601620002ee576040516324aadf4360e21b815260040160405180910390fd5b505b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526001600160601b0319606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168281620003e65760008381526001602090815260409182902080546001600160a01b0319166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a462000444565b806001600160a01b0316826001600160a01b03161462000444576040516305cc3c4f60e11b81526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401620000e5565b50505050505050565b6000602082840312156200046057600080fd5b81516001600160a01b03811681146200047857600080fd5b9392505050565b611642806200048f6000396000f3fe6080604052600436106101295760003560e01c8063c71bf324116100a5578063d96054c411610074578063e978afe511610059578063e978afe51461037c578063ee57e36f1461039c578063fdef9106146103bb57600080fd5b8063d96054c41461035c578063da7422281461021b57600080fd5b8063c71bf324146102d2578063c9dbc2a414610300578063ce1b815f14610320578063d68bad2c1461033c57600080fd5b80633e2ab0d9116100fc578063bf963977116100e1578063bf96397714610266578063bfe07da61461029e578063c4a50145146102b257600080fd5b80633e2ab0d91461021b578063bd85b0391461023957600080fd5b806309e56b141461012e5780631626ba7e1461017557806322844d04146101c95780632675fdd0146101eb575b600080fd5b34801561013a57600080fd5b506101627f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020015b60405180910390f35b34801561018157600080fd5b50610198610190366004610dcb565b600092915050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161016c565b3480156101d557600080fd5b506101e96101e4366004610e27565b6103e0565b005b3480156101f757600080fd5b5061020b610206366004610eaf565b6104b0565b604051901515815260200161016c565b34801561022757600080fd5b506101e9610236366004610f1b565b50565b34801561024557600080fd5b50610162610254366004610f3f565b60336020526000908152604090205481565b34801561027257600080fd5b50610162610281366004610f58565b603460209081526000928352604080842090915290825290205481565b6101e96102ac366004610fcd565b50505050565b3480156102be57600080fd5b506101e96102cd36600461105e565b505050565b3480156102de57600080fd5b506102f26102ed3660046110a1565b6104fb565b60405161016c929190611261565b34801561030c57600080fd5b506101e961031b366004611283565b61054e565b34801561032c57600080fd5b506040516000815260200161016c565b34801561034857600080fd5b506101e96103573660046112d6565b610584565b34801561036857600080fd5b506101e96103773660046112d6565b6105b9565b34801561038857600080fd5b506101e9610397366004611317565b6105ee565b3480156103a857600080fd5b506101e96103b736600461138c565b5050565b3480156103c757600080fd5b5061020b6103d6366004610eaf565b6001949350505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361040a81610704565b60005b828110156104a9576000848483818110610429576104296113ce565b90506060020180360381019061043f91906113f3565b90506000815160028111156104565761045661143e565b036104735761046e8682602001518360400151610791565b6104a0565b6001815160028111156104885761048861143e565b036104a0576104a0868260200151836040015161079e565b5060010161040d565b5050505050565b60006104be858585856108b0565b806104d757506104d7856001600160a01b0385856108b0565b806104f057506104f06001600160a01b038585856108b0565b90505b949350505050565b60606000336001600160a01b03167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed78686848660405161053e9493929190611454565b60405180910390a2935093915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361057881610704565b6104a985858585610a24565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105ae81610704565b6102ac848484610791565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105e381610704565b6102ac84848461079e565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361061881610704565b60005b828110156102ac576000848483818110610637576106376113ce565b905060a0020180360381019061064d919061151f565b90506000815160028111156106645761066461143e565b0361068557610680816020015182604001518360800151610791565b6106ec565b60018151600281111561069a5761069a61143e565b036106b65761068081602001518260400151836080015161079e565b6002815160028111156106cb576106cb61143e565b036106ec576106ec8160200151826040015183608001518460600151610a24565b5060010161061b565b6001600160a01b03163b151590565b6107473033836000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104b092505050565b610236576040517f1e09743f000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290526064015b60405180910390fd5b6102cd8383836002610a24565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b0316156102ac5760008181526001602090815260409182902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080600160006109358888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806109605760009150506104f3565b6001196001600160a01b0382160161097c5760019150506104f3565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd0906109c79089908990899089906004016115ae565b602060405180830381865afa925050508015610a00575060408051601f3d908101601f191682019092526109fd918101906115ea565b60015b15610a18578015610a16576001925050506104f3565b505b50600095945050505050565b6001600160a01b03848116148015610a4457506001600160a01b03838116145b15610a7b576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480610a9a57506001600160a01b03838116145b15610b495760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480610acc5750805b15610b03576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601610b47576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168281610c6d5760008381526001602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4610ce2565b806001600160a01b0316826001600160a01b031614610ce2576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610788565b50505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610d2457610d24610ceb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d5357610d53610ceb565b604052919050565b600082601f830112610d6c57600080fd5b813567ffffffffffffffff811115610d8657610d86610ceb565b610d996020601f19601f84011601610d2a565b818152846020838601011115610dae57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610dde57600080fd5b82359150602083013567ffffffffffffffff811115610dfc57600080fd5b610e0885828601610d5b565b9150509250929050565b6001600160a01b038116811461023657600080fd5b600080600060408486031215610e3c57600080fd5b8335610e4781610e12565b9250602084013567ffffffffffffffff80821115610e6457600080fd5b818601915086601f830112610e7857600080fd5b813581811115610e8757600080fd5b876020606083028501011115610e9c57600080fd5b6020830194508093505050509250925092565b60008060008060808587031215610ec557600080fd5b8435610ed081610e12565b93506020850135610ee081610e12565b925060408501359150606085013567ffffffffffffffff811115610f0357600080fd5b610f0f87828801610d5b565b91505092959194509250565b600060208284031215610f2d57600080fd5b8135610f3881610e12565b9392505050565b600060208284031215610f5157600080fd5b5035919050565b60008060408385031215610f6b57600080fd5b8235610f7681610e12565b946020939093013593505050565b60008083601f840112610f9657600080fd5b50813567ffffffffffffffff811115610fae57600080fd5b602083019150836020828501011115610fc657600080fd5b9250929050565b60008060008060608587031215610fe357600080fd5b8435610fee81610e12565b935060208501359250604085013567ffffffffffffffff81111561101157600080fd5b61101d87828801610f84565b95989497509550505050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461105957600080fd5b919050565b60008060006060848603121561107357600080fd5b61107c84611029565b925061108a60208501611029565b915061109860408501611029565b90509250925092565b6000806000606084860312156110b657600080fd5b8335925060208085013567ffffffffffffffff808211156110d657600080fd5b818701915087601f8301126110ea57600080fd5b8135818111156110fc576110fc610ceb565b8060051b61110b858201610d2a565b918252838101850191858101908b84111561112557600080fd5b86860192505b838310156111af5782358581111561114257600080fd5b86016060818e03601f1901121561115857600080fd5b611160610d01565b8882013561116d81610e12565b815260408201358982015260608201358781111561118b5760008081fd5b6111998f8b83860101610d5b565b604083015250835250918601919086019061112b565b989b989a5050505060409690960135955050505050565b6000815180845260005b818110156111ec576020818501810151868301820152016111d0565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b858110156112545782840389526112428483516111c6565b9885019893509084019060010161122a565b5091979650505050505050565b604081526000611274604083018561120c565b90508260208301529392505050565b6000806000806080858703121561129957600080fd5b84356112a481610e12565b935060208501356112b481610e12565b92506040850135915060608501356112cb81610e12565b939692955090935050565b6000806000606084860312156112eb57600080fd5b83356112f681610e12565b9250602084013561130681610e12565b929592945050506040919091013590565b6000806020838503121561132a57600080fd5b823567ffffffffffffffff8082111561134257600080fd5b818501915085601f83011261135657600080fd5b81358181111561136557600080fd5b86602060a08302850101111561137a57600080fd5b60209290920196919550909350505050565b6000806020838503121561139f57600080fd5b823567ffffffffffffffff8111156113b657600080fd5b6113c285828601610f84565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b80356003811061105957600080fd5b60006060828403121561140557600080fd5b61140d610d01565b611416836113e4565b8152602083013561142681610e12565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600060808201868352602060808185015281875180845260a08601915060a08160051b870101935082890160005b828110156114f7578786037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60018452815180516001600160a01b0316875285810151868801526040908101516060918801829052906114e3818901836111c6565b975050509284019290840190600101611482565b50505050508460408401528281036060840152611514818561120c565b979650505050505050565b600060a0828403121561153157600080fd5b60405160a0810181811067ffffffffffffffff8211171561155457611554610ceb565b604052611560836113e4565b8152602083013561157081610e12565b6020820152604083013561158381610e12565b6040820152606083013561159681610e12565b60608201526080928301359281019290925250919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526115e060808301846111c6565b9695505050505050565b6000602082840312156115fc57600080fd5b81518015158114610f3857600080fdfea264697066735822122026fdb8afa815512654155aade9e08103580cc9c18bb4103de01f19301233ff2564736f6c63430008110033815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33";
var isSuperArgs$x = (xs) => xs.length > 1;
var DAOMock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$x(args)) {
      super(...args);
    } else {
      super(_abi$z, _bytecode$x, args[0]);
    }
  }
  deploy(initialOwner, overrides) {
    return super.deploy(initialOwner, overrides || {});
  }
  getDeployTransaction(initialOwner, overrides) {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$z);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$z, signerOrProvider);
  }
};
DAOMock__factory.bytecode = _bytecode$x;
DAOMock__factory.abi = _abi$z;
var _abi$y = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var _bytecode$w = "0x608060405234801561001057600080fd5b506101d8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631626ba7e14610030575b600080fd5b61006561003e3660046100c9565b7f414243440000000000000000000000000000000000000000000000000000000092915050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156100dc57600080fd5b82359150602083013567ffffffffffffffff808211156100fb57600080fd5b818501915085601f83011261010f57600080fd5b8135818111156101215761012161009a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101675761016761009a565b8160405282815288602084870101111561018057600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220d95519071cb111dd4f57a7d40d7ecd8368a4400e9919e8cd0887cfdf48bb0d1264736f6c63430008110033";
var isSuperArgs$w = (xs) => xs.length > 1;
var ERC1271Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$w(args)) {
      super(...args);
    } else {
      super(_abi$y, _bytecode$w, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$y);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$y, signerOrProvider);
  }
};
ERC1271Mock__factory.bytecode = _bytecode$w;
ERC1271Mock__factory.abi = _abi$y;
var index$j = Object.freeze({
  __proto__: null,
  callbackHandlerHelperMockSol: index$l,
  gasConsumerHelperSol: index$k,
  ActionExecute__factory,
  DAOMock__factory,
  ERC1271Mock__factory
});
var _abi$x = [
  {
    inputs: [],
    name: "ADD_PERMISSIONED_SELECTOR",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "getSelector",
    outputs: [
      {
        internalType: "bytes4",
        name: "sig",
        type: "bytes4"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var _bytecode$v = "0x608060405234801561001057600080fd5b506103d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630cbd17c8146100465780632675fdd014610091578063eafcb109146100b4575b600080fd5b61005b6100543660046101c2565b6020015190565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100a461009f3660046102ba565b6100db565b6040519015158152602001610088565b61005b7f44fff9200000000000000000000000000000000000000000000000000000000081565b604080516020601f84018190048102820181019092528281526000917f44fff920000000000000000000000000000000000000000000000000000000009161013d91869086908190840183828082843760009201919091525061005492505050565b7fffffffff00000000000000000000000000000000000000000000000000000000161461016957600080fd5b6000806101798460048188610355565b810190610186919061037f565b1098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101d457600080fd5b813567ffffffffffffffff808211156101ec57600080fd5b818401915084601f83011261020057600080fd5b81358181111561021257610212610193565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561025857610258610193565b8160405282815287602084870101111561027157600080fd5b826020860160208301376000928101602001929092525095945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b557600080fd5b919050565b6000806000806000608086880312156102d257600080fd5b6102db86610291565b94506102e960208701610291565b935060408601359250606086013567ffffffffffffffff8082111561030d57600080fd5b818801915088601f83011261032157600080fd5b81358181111561033057600080fd5b89602082850101111561034257600080fd5b9699959850939650602001949392505050565b6000808585111561036557600080fd5b8386111561037257600080fd5b5050820193919092039150565b6000806040838503121561039257600080fd5b5050803592602090910135915056fea264697066735822122023f7df25ac7c898561a62c1c60713577257f9b434ab4615b20a988635698497064736f6c63430008110033";
var isSuperArgs$v = (xs) => xs.length > 1;
var TestParameterScopingPermissionCondition__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$v(args)) {
      super(...args);
    } else {
      super(_abi$x, _bytecode$v, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$x);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$x, signerOrProvider);
  }
};
TestParameterScopingPermissionCondition__factory.bytecode = _bytecode$v;
TestParameterScopingPermissionCondition__factory.abi = _abi$x;
var index$i = Object.freeze({
  __proto__: null,
  TestParameterScopingPermissionCondition__factory
});
var _abi$w = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_result",
        type: "bool"
      }
    ],
    name: "setWillPerform",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$u = "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5061025d8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632675fdd01461003b578063e20939911461006b575b600080fd5b610057610049366004610104565b60005460ff16949350505050565b604051901515815260200160405180910390f35b6100aa6100793660046101fe565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b803573ffffffffffffffffffffffffffffffffffffffff811681146100d057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561011a57600080fd5b610123856100ac565b9350610131602086016100ac565b925060408501359150606085013567ffffffffffffffff8082111561015557600080fd5b818701915087601f83011261016957600080fd5b81358181111561017b5761017b6100d5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101c1576101c16100d5565b816040528281528a60208487010111156101da57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561021057600080fd5b8135801515811461022057600080fd5b939250505056fea2646970667358221220b5e7f0e6414db1fed4dfa5a1f3cf7fbd627cb8d03aadb7a9c588eea20301ab8f64736f6c63430008110033";
var isSuperArgs$u = (xs) => xs.length > 1;
var PermissionConditionMock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$u(args)) {
      super(...args);
    } else {
      super(_abi$w, _bytecode$u, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$w);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$w, signerOrProvider);
  }
};
PermissionConditionMock__factory.bytecode = _bytecode$u;
PermissionConditionMock__factory.abi = _abi$w;
var _abi$v = [
  {
    inputs: [],
    name: "AnyAddressDisallowedForWhoAndWhere",
    type: "error"
  },
  {
    inputs: [],
    name: "ConditionNotPresentForAnyAddress",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "currentCondition",
        type: "address"
      },
      {
        internalType: "address",
        name: "newCondition",
        type: "address"
      }
    ],
    name: "PermissionAlreadyGrantedForDifferentCondition",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionsForAnyAddressDisallowed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IPermissionCondition",
        name: "condition",
        type: "address"
      }
    ],
    name: "Granted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "here",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address"
      }
    ],
    name: "Revoked",
    type: "event"
  },
  {
    inputs: [],
    name: "ROOT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TEST_PERMISSION_1_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TEST_PERMISSION_2_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "_items",
        type: "tuple[]"
      }
    ],
    name: "applyMultiTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.SingleTargetPermission[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "applySingleTargetPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAnyAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "getAuthPermission",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "getPermissionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "grant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "contract IPermissionCondition",
        name: "_condition",
        type: "address"
      }
    ],
    name: "grantWithCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address"
      }
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      }
    ],
    name: "revoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$t = "";
var isSuperArgs$t = (xs) => xs.length > 1;
var PermissionManagerTest__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$t(args)) {
      super(...args);
    } else {
      super(_abi$v, _bytecode$t, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$v);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$v, signerOrProvider);
  }
};
PermissionManagerTest__factory.bytecode = _bytecode$t;
PermissionManagerTest__factory.abi = _abi$v;
var index$h = Object.freeze({
  __proto__: null,
  parameterScopingPermissionConditionTestSol: index$i,
  PermissionConditionMock__factory,
  PermissionManagerTest__factory
});
var _abi$u = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$s = "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033";
var isSuperArgs$s = (xs) => xs.length > 1;
var PluginCloneableV1Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$s(args)) {
      super(...args);
    } else {
      super(_abi$u, _bytecode$s, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$u);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$u, signerOrProvider);
  }
};
PluginCloneableV1Mock__factory.bytecode = _bytecode$s;
PluginCloneableV1Mock__factory.abi = _abi$u;
var _abi$t = [
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$r = "0x608060405234801561001057600080fd5b5060d78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636accab8c146037578063c4d66de8146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6064605c3660046066565b506001600055565b005b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea2646970667358221220c9935c94287392ba9d2acf99b6948ce94a75e34de32039d798a6fa4b7ae8216e64736f6c63430008110033";
var isSuperArgs$r = (xs) => xs.length > 1;
var PluginCloneableV1MockBad__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$r(args)) {
      super(...args);
    } else {
      super(_abi$t, _bytecode$r, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$t);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$t, signerOrProvider);
  }
};
PluginCloneableV1MockBad__factory.bytecode = _bytecode$r;
PluginCloneableV1MockBad__factory.abi = _abi$t;
var _abi$s = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$q = "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610536806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636accab8c116100505780636accab8c146100d6578063c4d66de8146100ed578063efe51cca1461010257600080fd5b806301ffc9a7146100775780634162169f1461009f57806341de6830146100c7575b600080fd5b61008a610085366004610440565b61010b565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b60016040516100969190610489565b6100df60975481565b604051908152602001610096565b6101006100fb3660046104ca565b6101a4565b005b6100df60985481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061019e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101c45750600054600160ff909116105b806101de5750303b1580156101de575060005460ff166001145b6102555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610296576000805461ff0019166101001790555b61029f826102f3565b6001609755600260985580156102ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b6103798161037c565b50565b600054610100900460ff166103f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561045257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461048257600080fd5b9392505050565b60208101600383106104c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104dc57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048257600080fdfea26469706673582212200ea6280dfefac73805a1b303425ef753ef22dbb28b5ca575821ff308200f0ad564736f6c63430008110033";
var isSuperArgs$q = (xs) => xs.length > 1;
var PluginCloneableV2Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$q(args)) {
      super(...args);
    } else {
      super(_abi$s, _bytecode$q, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$s);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$s, signerOrProvider);
  }
};
PluginCloneableV2Mock__factory.bytecode = _bytecode$q;
PluginCloneableV2Mock__factory.abi = _abi$s;
var index$g = Object.freeze({
  __proto__: null,
  PluginCloneableV1Mock__factory,
  PluginCloneableV1MockBad__factory,
  PluginCloneableV2Mock__factory
});
var _abi$r = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$p = "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61060a806112eb83390190565b6112708061007b6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056006600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056006600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058f99608850e87a7b2a54f7e053960188fc7663ad9983d367e39ef6df058ef0564736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033";
var isSuperArgs$p = (xs) => xs.length > 1;
var PluginCloneableSetupV1Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$p(args)) {
      super(...args);
    } else {
      super(_abi$r, _bytecode$p, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$r);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$r, signerOrProvider);
  }
};
PluginCloneableSetupV1Mock__factory.bytecode = _bytecode$p;
PluginCloneableSetupV1Mock__factory.abi = _abi$r;
var _abi$q = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$o = "0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100c1565b61060a8061134083390190565b60f68061194a83390190565b611270806100d06000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056006600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056006600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b8df31769eb653e9a963a6a68a74b3be28c25b04f35980d44fd0296dd3904dc64736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033608060405234801561001057600080fd5b5060d78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636accab8c146037578063c4d66de8146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6064605c3660046066565b506001600055565b005b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea2646970667358221220c9935c94287392ba9d2acf99b6948ce94a75e34de32039d798a6fa4b7ae8216e64736f6c63430008110033";
var isSuperArgs$o = (xs) => xs.length > 1;
var PluginCloneableSetupV1MockBad__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$o(args)) {
      super(...args);
    } else {
      super(_abi$q, _bytecode$o, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$q);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$q, signerOrProvider);
  }
};
PluginCloneableSetupV1MockBad__factory.bytecode = _bytecode$o;
PluginCloneableSetupV1MockBad__factory.abi = _abi$q;
var _abi$p = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$n = "0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100c2565b61060a8061134183390190565b6106238061194b83390190565b611270806100d16000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056007600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056007600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205ee05b5577199e41f81cf5762968e559c66516b57146805cebf5e1b477d3417264736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610536806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636accab8c116100505780636accab8c146100d6578063c4d66de8146100ed578063efe51cca1461010257600080fd5b806301ffc9a7146100775780634162169f1461009f57806341de6830146100c7575b600080fd5b61008a610085366004610440565b61010b565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b60016040516100969190610489565b6100df60975481565b604051908152602001610096565b6101006100fb3660046104ca565b6101a4565b005b6100df60985481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061019e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101c45750600054600160ff909116105b806101de5750303b1580156101de575060005460ff166001145b6102555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610296576000805461ff0019166101001790555b61029f826102f3565b6001609755600260985580156102ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b6103798161037c565b50565b600054610100900460ff166103f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561045257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461048257600080fd5b9392505050565b60208101600383106104c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104dc57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048257600080fdfea26469706673582212200ea6280dfefac73805a1b303425ef753ef22dbb28b5ca575821ff308200f0ad564736f6c63430008110033";
var isSuperArgs$n = (xs) => xs.length > 1;
var PluginCloneableSetupV2Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$n(args)) {
      super(...args);
    } else {
      super(_abi$p, _bytecode$n, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$p);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$p, signerOrProvider);
  }
};
PluginCloneableSetupV2Mock__factory.bytecode = _bytecode$n;
PluginCloneableSetupV2Mock__factory.abi = _abi$p;
var index$f = Object.freeze({
  __proto__: null,
  PluginCloneableSetupV1Mock__factory,
  PluginCloneableSetupV1MockBad__factory,
  PluginCloneableSetupV2Mock__factory
});
var index$e = Object.freeze({
  __proto__: null,
  pluginCloneableMockSol: index$g,
  pluginCloneableSetupMockSol: index$f
});
var _abi$o = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "DO_SOMETHING_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_param1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_param2",
        type: "uint256"
      }
    ],
    name: "addPermissioned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "msgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_param1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_param2",
        type: "uint256"
      }
    ],
    name: "subPermissioned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$m = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161135e610119600039600081816103910152818161042c015281816105cc01528181610662015261075d015261135e6000f3fe6080604052600436106100d25760003560e01c806344fff9201161007f5780635c60da1b116100595780635c60da1b14610226578063c4d66de81461023b578063c9c4bfca1461025b578063d737d0c71461028f57600080fd5b806344fff920146101de5780634f1ef286146101fe57806352d1902d1461021157600080fd5b80633ad65dff116100b05780633ad65dff146101705780634162169f1461019057806341de6830146101c257600080fd5b806301ffc9a7146100d757806335fddd251461010c5780633659cfe61461014e575b600080fd5b3480156100e357600080fd5b506100f76100f236600461102b565b6102a2565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b506101407fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e81565b604051908152602001610103565b34801561015a57600080fd5b5061016e610169366004611082565b610387565b005b34801561017c57600080fd5b5061014061018b36600461109f565b610529565b34801561019c57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610103565b3480156101ce57600080fd5b50600060405161010391906110c1565b3480156101ea57600080fd5b506101406101f936600461109f565b61057c565b61016e61020c3660046110ff565b6105c2565b34801561021d57600080fd5b50610140610750565b34801561023257600080fd5b506101aa610815565b34801561024757600080fd5b5061016e610256366004611082565b61084d565b34801561026757600080fd5b506101407f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561029b57600080fd5b50336101aa565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061033557507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061038157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361042a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104857f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105015760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610421565b61050a8161098c565b60408051600080825260208201909252610526918391906109c5565b50565b60c9546000907fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e9061056a906001600160a01b031630335b84600036610b6a565b61057483856111d9565b949350505050565b60c9546000907fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e906105b8906001600160a01b03163033610561565b61057483856111ec565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610421565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610421565b6107408261098c565b61074c828260016109c5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610421565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006108487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff161580801561086d5750600054600160ff909116105b806108875750303b158015610887575060005460ff166001145b6108f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610421565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561093a576000805461ff0019166101001790555b61094382610c58565b801561074c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59061074c906001600160a01b03163033610561565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109fd576109f883610cde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a57575060408051601f3d908101601f19168201909252610a54918101906111ff565b60015b610ac95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610421565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610421565b506109f8838383610db4565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610bb79088908890889088908890600401611218565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061126c565b610c50576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610421565b505050505050565b600054610100900460ff16610cd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610421565b61052681610ddf565b6001600160a01b0381163b610d5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610421565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610dbd83610e96565b600082511180610dca5750805b156109f857610dd98383610ed6565b50505050565b600054610100900460ff16610e5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610421565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e9f81610cde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610421565b600080846001600160a01b031684604051610f7091906112b2565b600060405180830381855af49150503d8060008114610fab576040519150601f19603f3d011682016040523d82523d6000602084013e610fb0565b606091505b5091509150610fd8828260405180606001604052806027815260200161130260279139610fe1565b95945050505050565b60608315610ff0575081610ffa565b610ffa8383611001565b9392505050565b8151156110115781518083602001fd5b8060405162461bcd60e51b815260040161042191906112ce565b60006020828403121561103d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ffa57600080fd5b6001600160a01b038116811461052657600080fd5b60006020828403121561109457600080fd5b8135610ffa8161106d565b600080604083850312156110b257600080fd5b50508035926020909101359150565b60208101600383106110e357634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561111257600080fd5b823561111d8161106d565b9150602083013567ffffffffffffffff8082111561113a57600080fd5b818501915085601f83011261114e57600080fd5b813581811115611160576111606110e9565b604051601f8201601f19908116603f01168101908382118183101715611188576111886110e9565b816040528281528860208487010111156111a157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610381576103816111c3565b80820180821115610381576103816111c3565b60006020828403121561121157600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561127e57600080fd5b81518015158114610ffa57600080fd5b60005b838110156112a9578181015183820152602001611291565b50506000910152565b600082516112c481846020870161128e565b9190910192915050565b60208152600082518060208401526112ed81604085016020870161128e565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e4d9c235b205f968b3c64cd01c07625cf1034abc5fd4cd06baa1a372ee067ac664736f6c63430008110033";
var isSuperArgs$m = (xs) => xs.length > 1;
var TestPlugin__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$m(args)) {
      super(...args);
    } else {
      super(_abi$o, _bytecode$m, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$o);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$o, signerOrProvider);
  }
};
TestPlugin__factory.bytecode = _bytecode$m;
TestPlugin__factory.abi = _abi$o;
var index$d = Object.freeze({
  __proto__: null,
  TestPlugin__factory
});
var _abi$n = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "allowedId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_where",
        type: "address"
      },
      {
        internalType: "address",
        name: "_who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_permissionId",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "isGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$l = "0x608060405234801561001057600080fd5b5060405161024238038061024283398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b6101e38061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632675fdd01461003b5780637ffca28214610063575b600080fd5b61004e6100493660046100cf565b61007a565b60405190151581526020015b60405180910390f35b61006c60005481565b60405190815260200161005a565b60008061008a836004818761016a565b8101906100979190610194565b60005414979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ca57600080fd5b919050565b6000806000806000608086880312156100e757600080fd5b6100f0866100a6565b94506100fe602087016100a6565b935060408601359250606086013567ffffffffffffffff8082111561012257600080fd5b818801915088601f83011261013657600080fd5b81358181111561014557600080fd5b89602082850101111561015757600080fd5b9699959850939650602001949392505050565b6000808585111561017a57600080fd5b8386111561018757600080fd5b5050820193919092039150565b6000602082840312156101a657600080fd5b503591905056fea2646970667358221220a703264c39ea15006c2d12fa736d52f029f573bb523a97de430b21e68b30d89d64736f6c63430008110033";
var isSuperArgs$l = (xs) => xs.length > 1;
var TestIdGatingCondition__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$l(args)) {
      super(...args);
    } else {
      super(_abi$n, _bytecode$l, args[0]);
    }
  }
  deploy(_id, overrides) {
    return super.deploy(_id, overrides || {});
  }
  getDeployTransaction(_id, overrides) {
    return super.getDeployTransaction(_id, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$n);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$n, signerOrProvider);
  }
};
TestIdGatingCondition__factory.bytecode = _bytecode$l;
TestIdGatingCondition__factory.abi = _abi$n;
var _abi$m = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "ObjectIdNotAssigned",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "ID_GATED_ACTION_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "createNewObject",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "idGatedAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "ownedIds",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$k = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611495610119600039600081816103b50152818161045001528181610557015281816105ed01526106e801526114956000f3fe6080604052600436106100d25760003560e01c806352d1902d1161007f5780637d5e6aaa116100595780637d5e6aaa14610232578063992c39de14610252578063c4d66de814610272578063c9c4bfca1461029257600080fd5b806352d1902d146101d15780635c60da1b146101e6578063628c68aa146101fb57600080fd5b80634162169f116100b05780634162169f1461017057806341de6830146101a25780634f1ef286146101be57600080fd5b806301ffc9a7146100d75780633659cfe61461010c578063369ce53c1461012e575b600080fd5b3480156100e357600080fd5b506100f76100f2366004611161565b6102c6565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b5061012c6101273660046111b8565b6103ab565b005b34801561013a57600080fd5b506101627f13c93c3c138ff6cda03d08545766e5edbd7eaae2b4c303f9aefd54f1f178526c81565b604051908152602001610103565b34801561017c57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610103565b3480156101ae57600080fd5b50600060405161010391906111d5565b61012c6101cc366004611213565b61054d565b3480156101dd57600080fd5b506101626106db565b3480156101f257600080fd5b5061018a6107a0565b34801561020757600080fd5b5061018a6102163660046112d7565b61012d602052600090815260409020546001600160a01b031681565b34801561023e57600080fd5b5061012c61024d3660046112d7565b6107d8565b34801561025e57600080fd5b5061016261026d3660046111b8565b610948565b34801561027e57600080fd5b5061012c61028d3660046111b8565b61099a565b34801561029e57600080fd5b506101627f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035957507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103a557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361044e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104a97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105255760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610445565b61052e81610ad9565b6040805160008082526020820190925261054a91839190610b16565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105eb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610445565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106467f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106c25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610445565b6106cb82610ad9565b6106d782826001610b16565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461077b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610445565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600081815261012d602052604090205481907f13c93c3c138ff6cda03d08545766e5edbd7eaae2b4c303f9aefd54f1f178526c906001600160a01b031661084e576040517f52f22e6200000000000000000000000000000000000000000000000000000000815260048101839052602401610445565b600082815261012d60205260408082205490517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163fdef9106916108aa9130913391879136906004016112f0565b602060405180830381865afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190611344565b6109435760c9546040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015230602482015233604482015260648101829052608401610445565b505050565b61012e8054600081815261012d60205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055825491929061099083611366565b9190505550919050565b600054610100900460ff16158080156109ba5750600054600160ff909116105b806109d45750303b1580156109d4575060005460ff166001145b610a465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610445565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a87576000805461ff0019166101001790555b610a9082610cb6565b80156106d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906106d7906001600160a01b0316303384600036610d3c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b495761094383610e2a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ba3575060408051601f3d908101601f19168201909252610ba0918101906113ac565b60015b610c155760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610445565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610caa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610445565b50610943838383610ef5565b600054610100900460ff16610d335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610445565b61054a81610f20565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d8990889088908890889088906004016112f0565b602060405180830381865afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca9190611344565b610e22576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610445565b505050505050565b6001600160a01b0381163b610ea75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610445565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610efe83610fcc565b600082511180610f0b5750805b1561094357610f1a838361100c565b50505050565b600054610100900460ff16610f9d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610445565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fd581610e2a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61108b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610445565b600080846001600160a01b0316846040516110a691906113e9565b600060405180830381855af49150503d80600081146110e1576040519150601f19603f3d011682016040523d82523d6000602084013e6110e6565b606091505b509150915061110e828260405180606001604052806027815260200161143960279139611117565b95945050505050565b60608315611126575081611130565b6111308383611137565b9392505050565b8151156111475781518083602001fd5b8060405162461bcd60e51b81526004016104459190611405565b60006020828403121561117357600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461113057600080fd5b6001600160a01b038116811461054a57600080fd5b6000602082840312156111ca57600080fd5b8135611130816111a3565b60208101600383106111f757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561122657600080fd5b8235611231816111a3565b9150602083013567ffffffffffffffff8082111561124e57600080fd5b818501915085601f83011261126257600080fd5b813581811115611274576112746111fd565b604051601f8201601f19908116603f0116810190838211818310171561129c5761129c6111fd565b816040528281528860208487010111156112b557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e957600080fd5b5035919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135657600080fd5b8151801515811461113057600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113a557634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156113be57600080fd5b5051919050565b60005b838110156113e05781810151838201526020016113c8565b50506000910152565b600082516113fb8184602087016113c5565b9190910192915050565b60208152600082518060208401526114248160408501602087016113c5565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cf7d7038b643135a4c16e20d731cf6204de0dece998141d83226ce36d013d09864736f6c63430008110033";
var isSuperArgs$k = (xs) => xs.length > 1;
var TestSharedPlugin__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$k(args)) {
      super(...args);
    } else {
      super(_abi$m, _bytecode$k, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$m);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$m, signerOrProvider);
  }
};
TestSharedPlugin__factory.bytecode = _bytecode$k;
TestSharedPlugin__factory.abi = _abi$m;
var index$c = Object.freeze({
  __proto__: null,
  TestIdGatingCondition__factory,
  TestSharedPlugin__factory
});
var _abi$l = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$j = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033";
var isSuperArgs$j = (xs) => xs.length > 1;
var PluginUUPSUpgradeableV1Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$j(args)) {
      super(...args);
    } else {
      super(_abi$l, _bytecode$j, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$l);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$l, signerOrProvider);
  }
};
PluginUUPSUpgradeableV1Mock__factory.bytecode = _bytecode$j;
PluginUUPSUpgradeableV1Mock__factory.abi = _abi$l;
var _abi$k = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "initializeV1toV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$i = "";
var isSuperArgs$i = (xs) => xs.length > 1;
var PluginUUPSUpgradeableV2Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$i(args)) {
      super(...args);
    } else {
      super(_abi$k, _bytecode$i, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$k);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$k, signerOrProvider);
  }
};
PluginUUPSUpgradeableV2Mock__factory.bytecode = _bytecode$i;
PluginUUPSUpgradeableV2Mock__factory.abi = _abi$k;
var _abi$j = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "initializeV1toV3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "initializeV2toV3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state3",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$h = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033";
var isSuperArgs$h = (xs) => xs.length > 1;
var PluginUUPSUpgradeableV3Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$h(args)) {
      super(...args);
    } else {
      super(_abi$j, _bytecode$h, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$j);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$j, signerOrProvider);
  }
};
PluginUUPSUpgradeableV3Mock__factory.bytecode = _bytecode$h;
PluginUUPSUpgradeableV3Mock__factory.abi = _abi$j;
var index$b = Object.freeze({
  __proto__: null,
  PluginUUPSUpgradeableV1Mock__factory,
  PluginUUPSUpgradeableV2Mock__factory,
  PluginUUPSUpgradeableV3Mock__factory
});
var _abi$i = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$g = "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61132b806112e983390190565b61126e8061007b6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c5565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd36600462000639565b620001ca565b6040516200009791906200070a565b620000f9620000f336600462000757565b620001e2565b60405162000097929190620008a6565b620001206200011a366004620008ee565b6200020a565b60405162000097929190620009bc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db60006001806200026f565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b935093915050565b60006200022a604051806040016040528060608152602001606081525090565b60005462000242906001600160a01b03168562000411565b9150620002506002620004b7565b81526200026160006002816200026f565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029057600080fd5b6200029c8484620009fe565b6001600160a01b031667ffffffffffffffff811115620002c057620002c0620008d8565b6040519080825280602002602001820160405280156200033957816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002df5790505b509050835b836001600160a01b0316816001600160a01b0316101562000409576040518060a001604052808460028111156200037957620003796200068d565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003cc8784620009fe565b6001600160a01b031681518110620003e857620003e862000a28565b60200260200101819052508080620004009062000a3e565b9150506200033e565b509392505050565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057b565b6060816001600160a01b031667ffffffffffffffff811115620004de57620004de620008d8565b60405190808252806020026020018201604052801562000508578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000575578082826001600160a01b03168151811062000548576200054862000a28565b6001600160a01b0390921660209283029190910190910152806200056c8162000a3e565b9150506200050e565b50919050565b600082826040516200058d90620005b7565b6200059a92919062000a67565b604051809103906000f08015801562000409573d6000803e3d6000fd5b6107ad8062000a8c83390190565b600060208284031215620005d857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b03811681146200062157600080fd5b919050565b6000606082840312156200057557600080fd5b600080604083850312156200064d57600080fd5b620006588362000609565b9150602083013567ffffffffffffffff8111156200067557600080fd5b620006838582860162000626565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c657634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074b576200073c838551620006a3565b93850193925060010162000726565b50909695505050505050565b6000806000606084860312156200076d57600080fd5b620007788462000609565b9250602084013561ffff811681146200079057600080fd5b9150604084013567ffffffffffffffff811115620007ad57600080fd5b620007bb8682870162000626565b9150509250925092565b6000815180845260005b81811015620007ed57602081850181015186830182015201620007cf565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008545783516001600160a01b0316835292840192918401916001016200082d565b50508483015186820387850152805180835290840192506000918401905b808310156200089b5762000888828551620006a3565b9150848401935060018301925062000872565b509695505050505050565b604081526000620008bb6040830185620007c5565b8281036020840152620008cf81856200080d565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090257600080fd5b6200090d8362000609565b9150602083013567ffffffffffffffff808211156200092b57600080fd5b818501915085601f8301126200094057600080fd5b813581811115620009555762000955620008d8565b604051601f8201601f19908116603f01168101908382118183101715620009805762000980620008d8565b816040528281528860208487010111156200099a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e060408301846200080d565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a215762000a21620009e8565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5d5762000a5d620009e8565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e06040830184620007c556fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122044e37b669a98caabd3b1c8d16e430caab2ea67edd4dcf95059efc47741a7fc9f64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033";
var isSuperArgs$g = (xs) => xs.length > 1;
var PluginUUPSUpgradeableSetupV1Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$g(args)) {
      super(...args);
    } else {
      super(_abi$i, _bytecode$g, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$i);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$i, signerOrProvider);
  }
};
PluginUUPSUpgradeableSetupV1Mock__factory.bytecode = _bytecode$g;
PluginUUPSUpgradeableSetupV1Mock__factory.abi = _abi$i;
var _abi$h = [
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$f = "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61132b8061098683390190565b61090b8061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100af578063a8a9c29e146100cf578063f10832f1146100f057600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a366004610478565b610111565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200161008b565b6100c26100bd3660046104e8565b6101aa565b60405161008b91906105b2565b6100e26100dd3660046105fb565b6101c0565b60405161008b9291906106f5565b6101036100fe366004610770565b6101e7565b60405161008b929190610832565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806101a457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606101b96000600180610231565b9392505050565b60606101df604051806040016040528060608152602001606081525090565b935093915050565b6000610206604051806040016040528060608152602001606081525090565b6000915061021460016103bf565b81526102236000600181610231565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b03161161025157600080fd5b61025b8484610872565b6001600160a01b031667ffffffffffffffff81111561027c5761027c61075a565b6040519080825280602002602001820160405280156102f357816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161029a5790505b509050835b836001600160a01b0316816001600160a01b031610156103b7576040518060a0016040528084600281111561032f5761032f610536565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826103808784610872565b6001600160a01b03168151811061039957610399610899565b602002602001018190525080806103af906108af565b9150506102f8565b509392505050565b6060816001600160a01b031667ffffffffffffffff8111156103e3576103e361075a565b60405190808252806020026020018201604052801561040c578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015610472578082826001600160a01b03168151811061044857610448610899565b6001600160a01b03909216602092830291909101909101528061046a816108af565b915050610412565b50919050565b60006020828403121561048a57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146101b957600080fd5b80356001600160a01b03811681146104d157600080fd5b919050565b60006060828403121561047257600080fd5b600080604083850312156104fb57600080fd5b610504836104ba565b9150602083013567ffffffffffffffff81111561052057600080fd5b61052c858286016104d6565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811061056e57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156105ef576105e183855161054c565b9385019392506001016105ce565b50909695505050505050565b60008060006060848603121561061057600080fd5b610619846104ba565b9250602084013561ffff8116811461063057600080fd5b9150604084013567ffffffffffffffff81111561064c57600080fd5b610658868287016104d6565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156106a75783516001600160a01b031683529284019291840191600101610682565b50508483015186820387850152805180835290840192506000918401905b808310156106ea576106d882855161054c565b915084840193506001830192506106c5565b509695505050505050565b604081526000835180604084015260005b818110156107235760208187018101516060868401015201610706565b50600060608285010152601f19601f8201168301905060608382030160208401526107516060820185610662565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561078357600080fd5b61078c836104ba565b9150602083013567ffffffffffffffff808211156107a957600080fd5b818501915085601f8301126107bd57600080fd5b8135818111156107cf576107cf61075a565b604051601f8201601f19908116603f011681019083821181831017156107f7576107f761075a565b8160405282815288602084870101111561081057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b03831681526040602082015260006108546040830184610662565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038281168282160390808211156108925761089261085c565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038083168181036108cb576108cb61085c565b600101939250505056fea26469706673582212207a1e5b31581e09f22c645bfe8bf797b4af34af5e86a6c12a38b5ce3251e8b85d64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033";
var isSuperArgs$f = (xs) => xs.length > 1;
var PluginUUPSUpgradeableSetupV1MockBad__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$f(args)) {
      super(...args);
    } else {
      super(_abi$h, _bytecode$f, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$h);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$h, signerOrProvider);
  }
};
PluginUUPSUpgradeableSetupV1MockBad__factory.bytecode = _bytecode$f;
PluginUUPSUpgradeableSetupV1MockBad__factory.abi = _abi$h;
var _abi$g = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$e = "";
var isSuperArgs$e = (xs) => xs.length > 1;
var PluginUUPSUpgradeableSetupV2Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$e(args)) {
      super(...args);
    } else {
      super(_abi$g, _bytecode$e, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$g);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$g, signerOrProvider);
  }
};
PluginUUPSUpgradeableSetupV2Mock__factory.bytecode = _bytecode$e;
PluginUUPSUpgradeableSetupV2Mock__factory.abi = _abi$g;
var _abi$f = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$d = "0x608060405234801561001057600080fd5b5060405161001d906100f1565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100fe565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040516100af9061010b565b604051809103906000f0801580156100cb573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055610118565b61132b806114a383390190565b611416806127ce83390190565b61154b80613be483390190565b61137c806101276000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620006d3565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd36600462000747565b620001ca565b60405162000097919062000818565b620000f9620000f336600462000865565b620001e2565b60405162000097929190620009b4565b620001206200011a366004620009fc565b6200031e565b6040516200009792919062000aca565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db600060018062000383565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b8361ffff166001036200028c576200021b600362000525565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef46950000000000000000000000000000000000000000000000000000000017905291506200028660016003600062000383565b60208201525b8361ffff166002036200031657620002a5600362000525565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140457680000000000000000000000000000000000000000000000000000000017905291506200031060026003600062000383565b60208201525b935093915050565b60006200033e604051806040016040528060608152602001606081525090565b60005462000356906001600160a01b031685620005e9565b915062000364600362000525565b815262000375600060038162000383565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b031611620003a457600080fd5b620003b0848462000b0c565b6001600160a01b031667ffffffffffffffff811115620003d457620003d4620009e6565b6040519080825280602002602001820160405280156200044d57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620003f35790505b509050835b836001600160a01b0316816001600160a01b031610156200051d576040518060a001604052808460028111156200048d576200048d6200079b565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620004e0878462000b0c565b6001600160a01b031681518110620004fc57620004fc62000b36565b60200260200101819052508080620005149062000b4c565b91505062000452565b509392505050565b6060816001600160a01b031667ffffffffffffffff8111156200054c576200054c620009e6565b60405190808252806020026020018201604052801562000576578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015620005e3578082826001600160a01b031681518110620005b657620005b662000b36565b6001600160a01b039092166020928302919091019091015280620005da8162000b4c565b9150506200057c565b50919050565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152600082826040516200069b90620006c5565b620006a892919062000b75565b604051809103906000f0801580156200051d573d6000803e3d6000fd5b6107ad8062000b9a83390190565b600060208284031215620006e657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b03811681146200072f57600080fd5b919050565b600060608284031215620005e357600080fd5b600080604083850312156200075b57600080fd5b620007668362000717565b9150602083013567ffffffffffffffff8111156200078357600080fd5b620007918582860162000734565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620007d457634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000859576200084a838551620007b1565b93850193925060010162000834565b50909695505050505050565b6000806000606084860312156200087b57600080fd5b620008868462000717565b9250602084013561ffff811681146200089e57600080fd5b9150604084013567ffffffffffffffff811115620008bb57600080fd5b620008c98682870162000734565b9150509250925092565b6000815180845260005b81811015620008fb57602081850181015186830182015201620008dd565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009625783516001600160a01b0316835292840192918401916001016200093b565b50508483015186820387850152805180835290840192506000918401905b80831015620009a95762000996828551620007b1565b9150848401935060018301925062000980565b509695505050505050565b604081526000620009c96040830185620008d3565b8281036020840152620009dd81856200091b565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a1057600080fd5b62000a1b8362000717565b9150602083013567ffffffffffffffff8082111562000a3957600080fd5b818501915085601f83011262000a4e57600080fd5b81358181111562000a635762000a63620009e6565b604051601f8201601f19908116603f0116810190838211818310171562000a8e5762000a8e620009e6565b8160405282815288602084870101111562000aa857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000aee60408301846200091b565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000b2f5762000b2f62000af6565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000b6b5762000b6b62000af6565b6001019392505050565b6001600160a01b038316815260406020820152600062000aee6040830184620008d356fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122096cff59a71f485568765feb311351bd2bc091e56d1eb2549868abdb3ec1c112f64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516112fd61011960003960008181610342015281816103dd015281816104e40152818161057a015261067501526112fd6000f3fe6080604052600436106100c75760003560e01c80635c60da1b11610074578063c9c4bfca1161004e578063c9c4bfca146101f3578063e27e9a4e14610227578063efe51cca1461023c57600080fd5b80635c60da1b146101a75780636accab8c146101bc578063c4d66de8146101d357600080fd5b806341de6830116100a557806341de6830146101555780634f1ef2861461017157806352d1902d1461018457600080fd5b806301ffc9a7146100cc5780633659cfe6146101015780634162169f14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ff6565b610253565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c36600461104d565b610338565b005b34801561012f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b34801561016157600080fd5b5060006040516100f8919061106a565b61012161017f3660046110da565b6104da565b34801561019057600080fd5b50610199610668565b6040519081526020016100f8565b3480156101b357600080fd5b5061013d61072d565b3480156101c857600080fd5b5061019961012d5481565b3480156101df57600080fd5b506101216101ee36600461104d565b610765565b3480156101ff57600080fd5b506101997f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561023357600080fd5b50610121610867565b34801561024857600080fd5b5061019961012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102e657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061033257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103db5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104367f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104b25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b6104bb81610953565b604080516000808252602082019092526104d791839190610990565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105785760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016103d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b61065882610953565b61066482826001610990565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103d2565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600290610100900460ff16158015610787575060005460ff8083169116105b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b6000805461ffff191660ff83161761010017905561081682610b35565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290610100900460ff16158015610889575060005460ff8083169116105b6108fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610664906001600160a01b0316303384600036610bbb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c8576109c383610ca9565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a22575060408051601f3d908101601f19168201909252610a1f9181019061119e565b60015b610a945760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b295760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103d2565b506109c3838383610d7f565b600054610100900460ff16610bb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b6104d781610daa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c0890889088908890889088906004016111b7565b602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061120b565b610ca1576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103d2565b505050505050565b6001600160a01b0381163b610d265760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d8883610e61565b600082511180610d955750805b156109c357610da48383610ea1565b50505050565b600054610100900460ff16610e275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e6a81610ca9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103d2565b600080846001600160a01b031684604051610f3b9190611251565b600060405180830381855af49150503d8060008114610f76576040519150601f19603f3d011682016040523d82523d6000602084013e610f7b565b606091505b5091509150610fa382826040518060600160405280602781526020016112a160279139610fac565b95945050505050565b60608315610fbb575081610fc5565b610fc58383610fcc565b9392505050565b815115610fdc5781518083602001fd5b8060405162461bcd60e51b81526004016103d2919061126d565b60006020828403121561100857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fc557600080fd5b6001600160a01b03811681146104d757600080fd5b60006020828403121561105f57600080fd5b8135610fc581611038565b60208101600383106110a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156110ed57600080fd5b82356110f881611038565b9150602083013567ffffffffffffffff8082111561111557600080fd5b818501915085601f83011261112957600080fd5b81358181111561113b5761113b6110ab565b604051601f8201601f19908116603f01168101908382118183101715611163576111636110ab565b8160405282815288602084870101111561117c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156111b057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561121d57600080fd5b81518015158114610fc557600080fd5b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000825161126381846020870161122d565b9190910192915050565b602081526000825180602084015261128c81604085016020870161122d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6e1ded66efe06d100f62c192b98b893065508d3441b03f5a77f7abf7ffd7e964736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033";
var isSuperArgs$d = (xs) => xs.length > 1;
var PluginUUPSUpgradeableSetupV3Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$d(args)) {
      super(...args);
    } else {
      super(_abi$f, _bytecode$d, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$f);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$f, signerOrProvider);
  }
};
PluginUUPSUpgradeableSetupV3Mock__factory.bytecode = _bytecode$d;
PluginUUPSUpgradeableSetupV3Mock__factory.abi = _abi$f;
var _abi$e = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pluginUUPSUpgradeableV3",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    name: "prepareInstallation",
    outputs: [
      {
        internalType: "address",
        name: "plugin",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUninstallation",
    outputs: [
      {
        components: [
          {
            internalType: "enum PermissionLib.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "address",
            name: "where",
            type: "address"
          },
          {
            internalType: "address",
            name: "who",
            type: "address"
          },
          {
            internalType: "address",
            name: "condition",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "permissionId",
            type: "bytes32"
          }
        ],
        internalType: "struct PermissionLib.MultiTargetPermission[]",
        name: "permissions",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_currentBuild",
        type: "uint16"
      },
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "currentHelpers",
            type: "address[]"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IPluginSetup.SetupPayload",
        name: "_payload",
        type: "tuple"
      }
    ],
    name: "prepareUpdate",
    outputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "helpers",
            type: "address[]"
          },
          {
            components: [
              {
                internalType: "enum PermissionLib.Operation",
                name: "operation",
                type: "uint8"
              },
              {
                internalType: "address",
                name: "where",
                type: "address"
              },
              {
                internalType: "address",
                name: "who",
                type: "address"
              },
              {
                internalType: "address",
                name: "condition",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "permissionId",
                type: "bytes32"
              }
            ],
            internalType: "struct PermissionLib.MultiTargetPermission[]",
            name: "permissions",
            type: "tuple[]"
          }
        ],
        internalType: "struct IPluginSetup.PreparedSetupData",
        name: "preparedSetupData",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$c = "0x608060405234801561001057600080fd5b5060405162005212380380620052128339810160408190526100319161013c565b60405161003d90610112565b604051809103906000f080158015610059573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905560405161008690610120565b604051809103906000f0801580156100a2573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040516100cf9061012e565b604051809103906000f0801580156100eb573d6000803e3d6000fd5b5050600080546001600160a01b0319166001600160a01b039290921691909117905561016c565b61132b806200158683390190565b61141680620028b183390190565b61154b8062003cc783390190565b60006020828403121561014e57600080fd5b81516001600160a01b038116811461016557600080fd5b9392505050565b61140a806200017c6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b6200008536600462000761565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd366004620007d5565b620001ca565b604051620000979190620008a6565b620000f9620000f3366004620008f3565b620001e2565b6040516200009792919062000a42565b620001206200011a36600462000a8a565b62000278565b6040516200009792919062000b58565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db6000600180620002dd565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b8361ffff166003036200022a576200021f600360046000620002dd565b602082015262000270565b8361ffff16600114806200024257508361ffff166002145b156200027057620002558585856200047f565b90925090506200026a600460056000620002dd565b60208201525b935093915050565b600062000298604051806040016040528060608152602001606081525090565b600054620002b0906001600160a01b031685620005ad565b9150620002be600362000653565b8152620002cf6000600381620002dd565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b031611620002fe57600080fd5b6200030a848462000b9a565b6001600160a01b031667ffffffffffffffff8111156200032e576200032e62000a74565b604051908082528060200260200182016040528015620003a757816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816200034d5790505b509050835b836001600160a01b0316816001600160a01b0316101562000477576040518060a00160405280846002811115620003e757620003e762000829565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826200043a878462000b9a565b6001600160a01b03168151811062000456576200045662000bc4565b602002602001018190525080806200046e9062000bda565b915050620003ac565b509392505050565b60606200049f604051806040016040528060608152602001606081525090565b8361ffff166001036200052957620004b8600362000653565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef469500000000000000000000000000000000000000000000000000000000179052915062000523600160036000620002dd565b60208201525b8361ffff16600203620002705762000542600362000653565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140457680000000000000000000000000000000000000000000000000000000017905291506200026a600260036000620002dd565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000717565b6060816001600160a01b031667ffffffffffffffff8111156200067a576200067a62000a74565b604051908082528060200260200182016040528015620006a4578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000711578082826001600160a01b031681518110620006e457620006e462000bc4565b6001600160a01b039092166020928302919091019091015280620007088162000bda565b915050620006aa565b50919050565b60008282604051620007299062000753565b6200073692919062000c03565b604051809103906000f08015801562000477573d6000803e3d6000fd5b6107ad8062000c2883390190565b6000602082840312156200077457600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b0381168114620007bd57600080fd5b919050565b6000606082840312156200071157600080fd5b60008060408385031215620007e957600080fd5b620007f483620007a5565b9150602083013567ffffffffffffffff8111156200081157600080fd5b6200081f85828601620007c2565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200086257634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620008e757620008d88385516200083f565b938501939250600101620008c2565b50909695505050505050565b6000806000606084860312156200090957600080fd5b6200091484620007a5565b9250602084013561ffff811681146200092c57600080fd5b9150604084013567ffffffffffffffff8111156200094957600080fd5b6200095786828701620007c2565b9150509250925092565b6000815180845260005b8181101562000989576020818501810151868301820152016200096b565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009f05783516001600160a01b031683529284019291840191600101620009c9565b50508483015186820387850152805180835290840192506000918401905b8083101562000a375762000a248285516200083f565b9150848401935060018301925062000a0e565b509695505050505050565b60408152600062000a57604083018562000961565b828103602084015262000a6b8185620009a9565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a9e57600080fd5b62000aa983620007a5565b9150602083013567ffffffffffffffff8082111562000ac757600080fd5b818501915085601f83011262000adc57600080fd5b81358181111562000af15762000af162000a74565b604051601f8201601f19908116603f0116810190838211818310171562000b1c5762000b1c62000a74565b8160405282815288602084870101111562000b3657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000b7c6040830184620009a9565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000bbd5762000bbd62000b84565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000bf95762000bf962000b84565b6001019392505050565b6001600160a01b038316815260406020820152600062000b7c60408301846200096156fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122079f2acd32c16646ddc77eb36843a38e815c11c2f7d9862f7b3534d534889698e64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516112fd61011960003960008181610342015281816103dd015281816104e40152818161057a015261067501526112fd6000f3fe6080604052600436106100c75760003560e01c80635c60da1b11610074578063c9c4bfca1161004e578063c9c4bfca146101f3578063e27e9a4e14610227578063efe51cca1461023c57600080fd5b80635c60da1b146101a75780636accab8c146101bc578063c4d66de8146101d357600080fd5b806341de6830116100a557806341de6830146101555780634f1ef2861461017157806352d1902d1461018457600080fd5b806301ffc9a7146100cc5780633659cfe6146101015780634162169f14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ff6565b610253565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c36600461104d565b610338565b005b34801561012f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b34801561016157600080fd5b5060006040516100f8919061106a565b61012161017f3660046110da565b6104da565b34801561019057600080fd5b50610199610668565b6040519081526020016100f8565b3480156101b357600080fd5b5061013d61072d565b3480156101c857600080fd5b5061019961012d5481565b3480156101df57600080fd5b506101216101ee36600461104d565b610765565b3480156101ff57600080fd5b506101997f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561023357600080fd5b50610121610867565b34801561024857600080fd5b5061019961012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102e657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061033257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103db5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104367f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104b25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b6104bb81610953565b604080516000808252602082019092526104d791839190610990565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105785760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016103d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b61065882610953565b61066482826001610990565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103d2565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600290610100900460ff16158015610787575060005460ff8083169116105b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b6000805461ffff191660ff83161761010017905561081682610b35565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290610100900460ff16158015610889575060005460ff8083169116105b6108fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610664906001600160a01b0316303384600036610bbb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c8576109c383610ca9565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a22575060408051601f3d908101601f19168201909252610a1f9181019061119e565b60015b610a945760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b295760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103d2565b506109c3838383610d7f565b600054610100900460ff16610bb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b6104d781610daa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c0890889088908890889088906004016111b7565b602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061120b565b610ca1576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103d2565b505050505050565b6001600160a01b0381163b610d265760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d8883610e61565b600082511180610d955750805b156109c357610da48383610ea1565b50505050565b600054610100900460ff16610e275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e6a81610ca9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103d2565b600080846001600160a01b031684604051610f3b9190611251565b600060405180830381855af49150503d8060008114610f76576040519150601f19603f3d011682016040523d82523d6000602084013e610f7b565b606091505b5091509150610fa382826040518060600160405280602781526020016112a160279139610fac565b95945050505050565b60608315610fbb575081610fc5565b610fc58383610fcc565b9392505050565b815115610fdc5781518083602001fd5b8060405162461bcd60e51b81526004016103d2919061126d565b60006020828403121561100857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fc557600080fd5b6001600160a01b03811681146104d757600080fd5b60006020828403121561105f57600080fd5b8135610fc581611038565b60208101600383106110a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156110ed57600080fd5b82356110f881611038565b9150602083013567ffffffffffffffff8082111561111557600080fd5b818501915085601f83011261112957600080fd5b81358181111561113b5761113b6110ab565b604051601f8201601f19908116603f01168101908382118183101715611163576111636110ab565b8160405282815288602084870101111561117c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156111b057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561121d57600080fd5b81518015158114610fc557600080fd5b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000825161126381846020870161122d565b9190910192915050565b602081526000825180602084015261128c81604085016020870161122d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6e1ded66efe06d100f62c192b98b893065508d3441b03f5a77f7abf7ffd7e964736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033";
var isSuperArgs$c = (xs) => xs.length > 1;
var PluginUUPSUpgradeableSetupV4Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$c(args)) {
      super(...args);
    } else {
      super(_abi$e, _bytecode$c, args[0]);
    }
  }
  deploy(_pluginUUPSUpgradeableV3, overrides) {
    return super.deploy(_pluginUUPSUpgradeableV3, overrides || {});
  }
  getDeployTransaction(_pluginUUPSUpgradeableV3, overrides) {
    return super.getDeployTransaction(_pluginUUPSUpgradeableV3, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$e);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$e, signerOrProvider);
  }
};
PluginUUPSUpgradeableSetupV4Mock__factory.bytecode = _bytecode$c;
PluginUUPSUpgradeableSetupV4Mock__factory.abi = _abi$e;
var index$a = Object.freeze({
  __proto__: null,
  PluginUUPSUpgradeableSetupV1Mock__factory,
  PluginUUPSUpgradeableSetupV1MockBad__factory,
  PluginUUPSUpgradeableSetupV2Mock__factory,
  PluginUUPSUpgradeableSetupV3Mock__factory,
  PluginUUPSUpgradeableSetupV4Mock__factory
});
var index$9 = Object.freeze({
  __proto__: null,
  pluginUupsUpgradeableMockSol: index$b,
  pluginUupsUpgradeableSetupMockSol: index$a
});
var _abi$d = [
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address"
      }
    ],
    name: "InvalidAddresslistUpdate",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_newAddresses",
        type: "address[]"
      }
    ],
    name: "addAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "addresslistLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "addresslistLengthAtBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_blockNumber",
        type: "uint256"
      }
    ],
    name: "isListedAtBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_exitingAddresses",
        type: "address[]"
      }
    ],
    name: "removeAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$b = "0x608060405234801561001057600080fd5b50610988806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a84eb99911610050578063a84eb999146100ba578063b1bb8d26146100cd578063f794062e146100f057600080fd5b806327f1608d146100775780633628731c146100925780636a6b2d86146100a7575b600080fd5b61007f610103565b6040519081526020015b60405180910390f35b6100a56100a03660046107e2565b61011d565b005b61007f6100b5366004610857565b61012b565b6100a56100c83660046107e2565b61013e565b6100e06100db366004610899565b610148565b6040519015158152602001610089565b6100e06100fe3660046108c3565b610181565b600061010f60016101c2565b6001600160e01b0316905090565b610127828261020b565b5050565b6000610138600183610336565b92915050565b61012782826103e9565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081206101779083610336565b6001149392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081206101af906101c2565b6001600160e01b03166001149050919050565b80546000908015610201576101ea836101dc6001846108f4565b600091825260209091200190565b5464010000000090046001600160e01b0316610204565b60005b9392505050565b60005b818110156103215761024083838381811061022b5761022b610907565b90506020020160208101906100fe91906108c3565b156102bc5782828281811061025757610257610907565b905060200201602081019061026c91906108c3565b6040517fc0b7477d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b61031760016000808686868181106102d6576102d6610907565b90506020020160208101906102eb91906108c3565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002090610452565b505060010161020e565b5061033060016104868361048a565b50505050565b60004382106103875760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016102b3565b6000610392836104c2565b845490915060006103a586848385610542565b905080156103d3576103bc866101dc6001846108f4565b5464010000000090046001600160e01b03166103d6565b60005b6001600160e01b03169695505050505050565b60005b818110156104435761040983838381811061022b5761022b610907565b61041f5782828281811061025757610257610907565b61043960008060008686868181106102d6576102d6610907565b50506001016103ec565b5061033060016105a08361048a565b60008061047084610462436104c2565b61046b866105a5565b610624565b6001600160e01b03918216969116945092505050565b0190565b6000806104b5856104b061049d886101c2565b6001600160e01b0316868863ffffffff16565b610452565b915091505b935093915050565b600063ffffffff82111561053e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016102b3565b5090565b60005b8183101561059857600061055984846107c7565b60008781526020902090915063ffffffff86169082015463ffffffff16111561058457809250610592565b61058f81600161091d565b93505b50610545565b509392505050565b900390565b60006001600160e01b0382111561053e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016102b3565b82546000908190801561076d576000610642876101dc6001856108f4565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b0316602084015291925090871610156106c45760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016102b3565b805163ffffffff80881691160361070d57846106e5886101dc6001866108f4565b80546001600160e01b03929092166401000000000263ffffffff90921691909117905561075d565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506104ba9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816104ba565b60006107d66002848418610930565b6102049084841661091d565b600080602083850312156107f557600080fd5b823567ffffffffffffffff8082111561080d57600080fd5b818501915085601f83011261082157600080fd5b81358181111561083057600080fd5b8660208260051b850101111561084557600080fd5b60209290920196919550909350505050565b60006020828403121561086957600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461089457600080fd5b919050565b600080604083850312156108ac57600080fd5b6108b583610870565b946020939093013593505050565b6000602082840312156108d557600080fd5b61020482610870565b634e487b7160e01b600052601160045260246000fd5b81810381811115610138576101386108de565b634e487b7160e01b600052603260045260246000fd5b80820180821115610138576101386108de565b60008261094d57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122080d9c453eafa972d52b7c1efe486696db814277072f220b27be1b29d1460f7f564736f6c63430008110033";
var isSuperArgs$b = (xs) => xs.length > 1;
var AddresslistMock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$b(args)) {
      super(...args);
    } else {
      super(_abi$d, _bytecode$b, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$d);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$d, signerOrProvider);
  }
};
AddresslistMock__factory.bytecode = _bytecode$b;
AddresslistMock__factory.abi = _abi$d;
var _abi$c = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "deployClone",
    outputs: [
      {
        internalType: "address",
        name: "clone",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$a = "0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b6112558061021b83390190565b6080516101a96100726000396000606801526101a96000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630227bcf014610030575b600080fd5b610038610061565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60006100a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166100a7565b905090565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661016e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b91905056fea264697066735822122048e9d17fc1daa61d2be9461606c003a21df02f24ba6ccd710a0fd5002d47503564736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033";
var isSuperArgs$a = (xs) => xs.length > 1;
var AdminCloneFactory__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$a(args)) {
      super(...args);
    } else {
      super(_abi$c, _bytecode$a, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$c);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$c, signerOrProvider);
  }
};
AdminCloneFactory__factory.bytecode = _bytecode$a;
AdminCloneFactory__factory.abi = _abi$c;
var _abi$b = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "DateOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "limit",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "actual",
        type: "uint64"
      }
    ],
    name: "MinDurationOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "ProposalCreationForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecutionForbidden",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "RatioOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      }
    ],
    name: "VoteCastForbidden",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "endDate",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    name: "ProposalCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    name: "ProposalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum IMajorityVoting.VoteOption",
        name: "voteOption",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256"
      }
    ],
    name: "VoteCast",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "votingMode",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "supportThreshold",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minParticipation",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "minDuration",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minProposerVotingPower",
        type: "uint256"
      }
    ],
    name: "VotingSettingsUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "canExecute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      }
    ],
    name: "canVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "getProposal",
    outputs: [
      {
        internalType: "bool",
        name: "open",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "endDate",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "snapshotBlock",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.ProposalParameters",
        name: "parameters",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "abstain",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "yes",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "no",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.Tally",
        name: "tally",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct IDAO.Action[]",
        name: "actions",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "allowFailureMap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address"
      }
    ],
    name: "getVoteOption",
    outputs: [
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      }
    ],
    name: "initializeMock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isMinParticipationReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      }
    ],
    name: "isSupportThresholdReachedEarly",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minDuration",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minParticipation",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "minProposerVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pluginType",
    outputs: [
      {
        internalType: "enum IPlugin.PluginType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "supportThreshold",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "totalVotingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MajorityVotingBase.VotingMode",
            name: "votingMode",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "supportThreshold",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "minParticipation",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "minDuration",
            type: "uint64"
          },
          {
            internalType: "uint256",
            name: "minProposerVotingPower",
            type: "uint256"
          }
        ],
        internalType: "struct MajorityVotingBase.VotingSettings",
        name: "_votingSettings",
        type: "tuple"
      }
    ],
    name: "updateVotingSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256"
      },
      {
        internalType: "enum IMajorityVoting.VoteOption",
        name: "_voteOption",
        type: "uint8"
      },
      {
        internalType: "bool",
        name: "_tryEarlyExecution",
        type: "bool"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "votingMode",
    outputs: [
      {
        internalType: "enum MajorityVotingBase.VotingMode",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$9 = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161285a6200012060003960008181610740015281816107db015281816108e2015281816109780152610a6f015261285a6000f3fe6080604052600436106101b75760003560e01c80635c60da1b116100ec578063c9c4bfca1161008a578063cf13114911610064578063cf1311491461057b578063da35c6641461059b578063f60046b2146105b0578063fe0d94c1146105c657600080fd5b8063c9c4bfca14610507578063cc63604a1461053b578063ce6366c41461055b57600080fd5b80638a4b00f8116100c65780638a4b00f814610433578063970601d8146104535780639cba3021146104ab578063c7f758a8146104d557600080fd5b80635c60da1b146103dd578063693e0064146103f25780637c36e8e81461041257600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461035357806352d1902d14610366578063536f9f421461037b578063567157611461039c57600080fd5b80633659cfe6146102ed5780634162169f1461030d57806341de68301461033f57600080fd5b80630dfb278e116101955780630dfb278e1461024757806317d1b404146102695780631befc4051461028957806323d07188146102cb57600080fd5b806301ffc9a7146101bc578063054fd2c2146101f15780630de2185614610227575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611dcd565b6105e6565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101605465010000000000900463ffffffff165b60405163ffffffff90911681526020016101e8565b34801561023357600080fd5b506101dc610242366004611df7565b61065e565b34801561025357600080fd5b50610267610262366004611e28565b6106e1565b005b34801561027557600080fd5b506101dc610284366004611e6d565b61072c565b34801561029557600080fd5b506102bd7fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b6040519081526020016101e8565b3480156102d757600080fd5b506101605460ff165b6040516101e89190611ed1565b3480156102f957600080fd5b50610267610308366004611ee4565b610736565b34801561031957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561034b57600080fd5b5060006102e0565b610267610361366004611f70565b6108d8565b34801561037257600080fd5b506102bd610a62565b34801561038757600080fd5b506102bd610396366004611df7565b50600090565b3480156103a857600080fd5b50610160546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff90911681526020016101e8565b3480156103e957600080fd5b50610327610b27565b3480156103fe57600080fd5b5061026761040d366004612003565b610b5f565b34801561041e57600080fd5b5061016054610100900463ffffffff16610212565b34801561043f57600080fd5b506101dc61044e366004611df7565b610c83565b34801561045f57600080fd5b5061049e61046e366004612039565b600082815261015f602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b6040516101e8919061207d565b3480156104b757600080fd5b506102bd6104c6366004612111565b60009998505050505050505050565b3480156104e157600080fd5b506104f56104f0366004611df7565b610cc3565b6040516101e8969594939291906122c4565b34801561051357600080fd5b506102bd7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561054757600080fd5b506101dc610556366004611df7565b610f3d565b34801561056757600080fd5b5061026761057636600461237c565b610f48565b34801561058757600080fd5b506101dc610596366004611df7565b610f50565b3480156105a757600080fd5b506102bd610fb2565b3480156105bc57600080fd5b50610161546102bd565b3480156105d257600080fd5b506102676105e1366004611df7565b610fbe565b60006001600160e01b031982167f8678b01e00000000000000000000000000000000000000000000000000000000148061064957506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b80610658575061065882611009565b92915050565b600081815261015f602052604081206003810154600482015483919061068490836123d2565b61068e91906123d2565b60018301549091506106ac908290610100900463ffffffff166123e5565b600483015460018401546106ce90610100900463ffffffff16620f42406123d2565b6106d891906123e5565b11949350505050565b60c9547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe59061071f906001600160a01b031630335b84600036611047565b61072882611135565b5050565b60015b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107d95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108347f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146108b05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107d0565b6108b981611338565b604080516000808252602082019092526108d591839190611371565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109765760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a4d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107d0565b610a5682611338565b61072882826001611371565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b025760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107d0565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000610b5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff1615808015610b7f5750600054600160ff909116105b80610b995750303b158015610b99575060005460ff166001145b610c0b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107d0565b6000805460ff191660011790558015610c2e576000805461ff0019166101001790555b610c388383611511565b8015610c7e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600081815261015f602052604081206002810154600382015460058301546004840154610cb091906123fc565b610cba91906123fc565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290528190610d1a60405180606001604052806000815260200160008152602001600081525090565b600085815261015f6020526040812060609190610d36816115a0565b81546040805160c08101909152600184018054939a5060ff9283169950909290918391166002811115610d6b57610d6b611eab565b6002811115610d7c57610d7c611eab565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d0100000000000000000000000000840482166060808701919091527501000000000000000000000000000000000000000000909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b82821015610f26576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191610e959061240f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec19061240f565b8015610f0e5780601f10610ee357610100808354040283529160200191610f0e565b820191906000526020600020905b815481529060010190602001808311610ef157829003601f168201915b50505050508152505081526020019060010190610e42565b505050509250806008015491505091939550919395565b60006106588261160e565b335b50505050565b600081815261015f6020526040812060058101546001820154610f7e9190610100900463ffffffff166123e5565b60048201546001830154610fa090610100900463ffffffff16620f42406123d2565b610faa91906123e5565b119392505050565b6000610b5a61012d5490565b610fc78161160e565b611000576040517f9fefd0f1000000000000000000000000000000000000000000000000000000008152600481018290526024016107d0565b6108d5816116b6565b60006001600160e01b031982167fda35c66400000000000000000000000000000000000000000000000000000000148061065857506106588261181e565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906110949088908890889088908890600401612443565b602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190612497565b61112d576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016107d0565b505050505050565b6111436001620f42406123d2565b61115360408301602084016124c6565b63ffffffff1611156111be5761116d6001620f42406123d2565b61117d60408301602084016124c6565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff1660248201526044016107d0565b620f42406111d260608301604084016124c6565b63ffffffff1611156111f257620f424061117d60608301604084016124c6565b610e1061120560808301606084016124e3565b67ffffffffffffffff16101561126e57610e1061122860808301606084016124e3565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9283166004820152911660248201526044016107d0565b6301e1338061128360808301606084016124e3565b67ffffffffffffffff1611156112a8576301e1338061122860808301606084016124e3565b806101606112b6828261251a565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e90506112e7602083018361262d565b6112f760408401602085016124c6565b61130760608501604086016124c6565b61131760808601606087016124e3565b856080013560405161132d95949392919061264a565b60405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610728906001600160a01b03163033610716565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113a457610c7e836118b9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113fe575060408051601f3d908101601f191682019092526113fb91810190612686565b60015b6114705760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016107d0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146115055760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016107d0565b50610c7e83838361198f565b600054610100900460ff1661158e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b611597826119b4565b61072881611135565b6000806115ac42611a3a565b600184015490915067ffffffffffffffff8083166501000000000090920416118015906115fb5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b801561072f575050905460ff1615919050565b600081815261015f60205260408120805460ff16156116305750600092915050565b611639816115a0565b156116815760018082015460ff16600281111561165857611658611eab565b146116665750600092915050565b61166f8361065e565b61167c5750600092915050565b611697565b61168a83610f50565b6116975750600092915050565b6116a083610c83565b6116ad5750600092915050565b50600192915050565b600081815261015f60205260409020805460ff19166001179055610c7e6116e560c9546001600160a01b031690565b8261015f6000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611801576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916117709061240f565b80601f016020809104026020016040519081016040528092919081815260200182805461179c9061240f565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b5050505050815250508152602001906001019061171d565b505050600086815261015f60205260409020600801549050611abe565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061188157506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061065857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610658565b6001600160a01b0381163b6119365760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107d0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61199883611b8d565b6000825111806119a55750805b15610c7e57610f4a8383611bcd565b600054610100900460ff16611a315760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b6108d581611cd8565b600067ffffffffffffffff821115611aba5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016107d0565b5090565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf32490611b0d9088908890889060040161269f565b6000604051808303816000875af1158015611b2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5491908101906126c8565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b611b96816118b9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611c4c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107d0565b600080846001600160a01b031684604051611c6791906127ce565b600060405180830381855af49150503d8060008114611ca2576040519150601f19603f3d011682016040523d82523d6000602084013e611ca7565b606091505b5091509150611ccf82826040518060600160405280602781526020016127fe60279139611d8f565b95945050505050565b600054610100900460ff16611d555760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60608315611d9e57508161072f565b61072f8383815115611db35781518083602001fd5b8060405162461bcd60e51b81526004016107d091906127ea565b600060208284031215611ddf57600080fd5b81356001600160e01b03198116811461072f57600080fd5b600060208284031215611e0957600080fd5b5035919050565b600060a08284031215611e2257600080fd5b50919050565b600060a08284031215611e3a57600080fd5b61072f8383611e10565b6001600160a01b03811681146108d557600080fd5b803560048110611e6857600080fd5b919050565b600080600060608486031215611e8257600080fd5b833592506020840135611e9481611e44565b9150611ea260408501611e59565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b600381106108d5576108d5611eab565b60208101611ede83611ec1565b91905290565b600060208284031215611ef657600080fd5b813561072f81611e44565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f4057611f40611f01565b604052919050565b600067ffffffffffffffff821115611f6257611f62611f01565b50601f01601f191660200190565b60008060408385031215611f8357600080fd5b8235611f8e81611e44565b9150602083013567ffffffffffffffff811115611faa57600080fd5b8301601f81018513611fbb57600080fd5b8035611fce611fc982611f48565b611f17565b818152866020838501011115611fe357600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060c0838503121561201657600080fd5b823561202181611e44565b91506120308460208501611e10565b90509250929050565b6000806040838503121561204c57600080fd5b82359150602083013561205e81611e44565b809150509250929050565b6004811061207957612079611eab565b9052565b602081016106588284612069565b60008083601f84011261209d57600080fd5b50813567ffffffffffffffff8111156120b557600080fd5b6020830191508360208260051b85010111156120d057600080fd5b9250929050565b67ffffffffffffffff811681146108d557600080fd5b8035611e68816120d7565b80151581146108d557600080fd5b8035611e68816120f8565b600080600080600080600080600060e08a8c03121561212f57600080fd5b893567ffffffffffffffff8082111561214757600080fd5b818c0191508c601f83011261215b57600080fd5b81358181111561216a57600080fd5b8d602082850101111561217c57600080fd5b60209283019b509950908b0135908082111561219757600080fd5b506121a48c828d0161208b565b90985096505060408a013594506121bd60608b016120ed565b93506121cb60808b016120ed565b92506121d960a08b01611e59565b91506121e760c08b01612106565b90509295985092959850929598565b60005b838110156122115781810151838201526020016121f9565b50506000910152565b600081518084526122328160208601602086016121f6565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156122b7578284038952815180516001600160a01b0316855285810151868601526040908101516060918601829052906122a38187018361221a565b9a87019a9550505090840190600101612264565b5091979650505050505050565b60006101a08815158352871515602084015286516122e181611ec1565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e08401526123546101008401878051825260208082015190830152604090810151910152565b8061016084015261236781840186612246565b91505082610180830152979650505050505050565b60008060006060848603121561239157600080fd5b833592506123a160208501611e59565b915060408401356123b1816120f8565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610658576106586123bc565b8082028115828204841417610658576106586123bc565b80820180821115610658576106586123bc565b600181811c9082168061242357607f821691505b602082108103611e2257634e487b7160e01b600052602260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156124a957600080fd5b815161072f816120f8565b63ffffffff811681146108d557600080fd5b6000602082840312156124d857600080fd5b813561072f816124b4565b6000602082840312156124f557600080fd5b813561072f816120d7565b600381106108d557600080fd5b60008135610658816120d7565b813561252581612500565b61252e81611ec1565b815460ff821691508160ff198216178355602084013561254d816124b4565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008416171784556040850135612591816124b4565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000085161783171785555050505061261f6125dd6060840161250d565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b60006020828403121561263f57600080fd5b813561072f81612500565b60a0810161265787611ec1565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b60006020828403121561269857600080fd5b5051919050565b8381526060602082015260006126b86060830185612246565b9050826040830152949350505050565b60008060408084860312156126dc57600080fd5b835167ffffffffffffffff808211156126f457600080fd5b818601915086601f83011261270857600080fd5b815160208282111561271c5761271c611f01565b8160051b61272b828201611f17565b928352848101820192828101908b85111561274557600080fd5b83870192505b848310156127ba578251868111156127635760008081fd5b8701603f81018d136127755760008081fd5b84810151612785611fc982611f48565b8181528e8b83850101111561279a5760008081fd5b6127a9828883018d86016121f6565b84525050918301919083019061274b565b9990920151989a9899505050505050505050565b600082516127e08184602087016121f6565b9190910192915050565b60208152600061072f602083018461221a56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122027884b30dbdde13026a691c72a9363d4430f832cb63f5274fbb01760109def0764736f6c63430008110033";
var isSuperArgs$9 = (xs) => xs.length > 1;
var MajorityVotingMock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$9(args)) {
      super(...args);
    } else {
      super(_abi$b, _bytecode$9, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$b);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$b, signerOrProvider);
  }
};
MajorityVotingMock__factory.bytecode = _bytecode$9;
MajorityVotingMock__factory.abi = _abi$b;
var index$8 = Object.freeze({
  __proto__: null,
  clonable: index$e,
  pluginTestSol: index$d,
  sharedPluginTestSol: index$c,
  uupsUpgradeable: index$9,
  AddresslistMock__factory,
  AdminCloneFactory__factory,
  MajorityVotingMock__factory
});
var _abi$a = [
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "receivers",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          }
        ],
        internalType: "struct GovernanceERC20.MintSettings",
        name: "_mintSettings",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receiversArrayLength",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountsArrayLength",
        type: "uint256"
      }
    ],
    name: "MintSettingsArrayLengthMismatch",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromDelegate",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "toDelegate",
        type: "address"
      }
    ],
    name: "DelegateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousBalance",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newBalance",
        type: "uint256"
      }
    ],
    name: "DelegateVotesChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MINT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "pos",
        type: "uint32"
      }
    ],
    name: "checkpoints",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "fromBlock",
            type: "uint32"
          },
          {
            internalType: "uint224",
            name: "votes",
            type: "uint224"
          }
        ],
        internalType: "struct ERC20VotesUpgradeable.Checkpoint",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      }
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "delegateBySig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "receivers",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          }
        ],
        internalType: "struct GovernanceERC20.MintSettings",
        name: "_mintSettings",
        type: "tuple"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "numCheckpoints",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$8 = "0x60806040523480156200001157600080fd5b5060405162003cd838038062003cd8833981016040819052620000349162000d28565b83838383620000468484848462000054565b50505050505050506200103f565b600054610100900460ff1615808015620000755750600054600160ff909116105b80620000a5575062000092306200024760201b62000f1e1760201c565b158015620000a5575060005460ff166001145b6200010e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000132576000805461ff0019166101001790555b602082015151825151146200016d578151516020830151516040516398b1381560e01b81526004810192909252602482015260440162000105565b62000179848462000256565b6200018484620002c2565b6200018f856200034c565b60005b825151811015620001f857620001ef83600001518281518110620001ba57620001ba62000e8d565b602002602001015184602001518381518110620001db57620001db62000e8d565b6020026020010151620003cb60201b60201c565b60010162000192565b50801562000240576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b600054610100900460ff16620002b25760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b620002be82826200047f565b5050565b600054610100900460ff166200031e5760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b6200034981604051806040016040528060018152602001603160f81b815250620004fd60201b60201c565b50565b600054610100900460ff16620003a85760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b620003e282826200057360201b62000f2d1760201c565b6001600160e01b03620003f6620006428216565b11156200045f5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840162000105565b6200047961010062000ffa6200064860201b17836200065f565b50505050565b600054610100900460ff16620004db5760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b6068620004e9838262000f31565b506069620004f8828262000f31565b505050565b600054610100900460ff16620005595760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b815160209283012081519190920120609791909155609855565b6001600160a01b038216620005cb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000105565b8060676000828254620005df919062001013565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620002be60008383620007f1565b60675490565b600062000656828462001013565b90505b92915050565b82546000908190818115620006bf576200068e876200068060018562001029565b600091825260209091200190565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152620006d4565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350620006f284868860201c565b92506000821180156200070b5750805163ffffffff1643145b15620007625762000727836200086760201b620010061760201c565b62000739886200068060018662001029565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007e7565b8660405180604001604052806200078443620008d660201b620010891760201c565b63ffffffff168152602001620007a5866200086760201b620010061760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b620008098383836200093d60201b620011051760201c565b6001600160a01b03821615801590620008305750620008288262000989565b63ffffffff16155b80156200085557506001600160a01b03828116600090815260fe602052604090205416155b15620004f857620004f88280620009b8565b60006001600160e01b03821115620008d25760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840162000105565b5090565b600063ffffffff821115620008d25760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840162000105565b62000955838383620004f860201b620007b21760201c565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054620004f89291821691168362000a2f565b6001600160a01b038116600090815260ff60209081526040822054620006599162001089620008d6821b17901c565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4620004798284835b816001600160a01b0316836001600160a01b03161415801562000a525750600081115b15620004f8576001600160a01b0383161562000adf576001600160a01b038316600090815260ff602090815260408220829162000a9c919062000b6a901b6200113717856200065f565b91509150846001600160a01b031660008051602062003cb8833981519152838360405162000ad4929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615620004f8576001600160a01b038216600090815260ff602090815260408220829162000b23919062000648901b62000ffa17856200065f565b91509150836001600160a01b031660008051602062003cb8833981519152838360405162000b5b929190918252602082015260400190565b60405180910390a25050505050565b600062000656828462001029565b6001600160a01b03811681146200034957600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000bc95762000bc962000b8e565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000bfa5762000bfa62000b8e565b604052919050565b600082601f83011262000c1457600080fd5b81516001600160401b0381111562000c305762000c3062000b8e565b602062000c46601f8301601f1916820162000bcf565b828152858284870101111562000c5b57600080fd5b60005b8381101562000c7b57858101830151828201840152820162000c5e565b506000928101909101919091529392505050565b60006001600160401b0382111562000cab5762000cab62000b8e565b5060051b60200190565b600082601f83011262000cc757600080fd5b8151602062000ce062000cda8362000c8f565b62000bcf565b82815260059290921b8401810191818101908684111562000d0057600080fd5b8286015b8481101562000d1d578051835291830191830162000d04565b509695505050505050565b6000806000806080858703121562000d3f57600080fd5b845162000d4c8162000b78565b602086810151919550906001600160401b038082111562000d6c57600080fd5b62000d7a89838a0162000c02565b9550604088015191508082111562000d9157600080fd5b62000d9f89838a0162000c02565b9450606088015191508082111562000db657600080fd5b908701906040828a03121562000dcb57600080fd5b62000dd562000ba4565b82518281111562000de557600080fd5b8301601f81018b1362000df757600080fd5b805162000e0862000cda8262000c8f565b81815260059190911b8201860190868101908d83111562000e2857600080fd5b928701925b8284101562000e5357835162000e438162000b78565b8252928701929087019062000e2d565b8452505050828401518281111562000e6a57600080fd5b62000e788b82860162000cb5565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000eb857607f821691505b60208210810362000ed957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f857600081815260208120601f850160051c8101602086101562000f085750805b601f850160051c820191505b8181101562000f295782815560010162000f14565b505050505050565b81516001600160401b0381111562000f4d5762000f4d62000b8e565b62000f658162000f5e845462000ea3565b8462000edf565b602080601f83116001811462000f9d576000841562000f845750858301515b600019600386901b1c1916600185901b17855562000f29565b600085815260208120601f198616915b8281101562000fce5788860151825594840194600190910190840162000fad565b508582101562000fed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000659576200065962000ffd565b8181038181111562000659576200065962000ffd565b612c49806200104f6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063b2d2989c11610097578063dab27fa911610071578063dab27fa9146103fa578063dd62ed3e1461040d578063e30443bc14610446578063f1127ed81461045957600080fd5b8063b2d2989c146103ad578063c3cda520146103d4578063d505accf146103e757600080fd5b806395d89b41116100d357806395d89b411461036c5780639ab24eb014610374578063a457c2d714610387578063a9059cbb1461039a57600080fd5b806370a082311461031d5780637ecebe00146103465780638e539e8c1461035957600080fd5b806339509351116101665780634162169f116101405780634162169f14610290578063587cde1e146102b65780635c19a95c146102e25780636fcfff45146102f557600080fd5b806339509351146102555780633a46b1a81461026857806340c10f191461027b57600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063313ce5671461023e5780633644e5151461024d57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d736600461248c565b610496565b60405190151581526020015b60405180910390f35b6101f96105cf565b6040516101e891906124b6565b6101dc610214366004612519565b610661565b6067545b6040519081526020016101e8565b6101dc610239366004612545565b610679565b604051601281526020016101e8565b61021d61069d565b6101dc610263366004612519565b6106ac565b61021d610276366004612519565b6106eb565b61028e610289366004612519565b61076a565b005b610130546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b61029e6102c4366004612586565b6001600160a01b03908116600090815260fe60205260409020541690565b61028e6102f0366004612586565b6107b7565b610308610303366004612586565b6107c4565b60405163ffffffff90911681526020016101e8565b61021d61032b366004612586565b6001600160a01b031660009081526065602052604090205490565b61021d610354366004612586565b6107e6565b61021d6103673660046125a3565b610804565b6101f9610861565b61021d610382366004612586565b610870565b6101dc610395366004612519565b6108f7565b6101dc6103a8366004612519565b6109a1565b61021d7fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c81565b61028e6103e23660046125d2565b6109af565b61028e6103f536600461262c565b610ae5565b61028e610408366004612809565b610c49565b61021d61041b366004612953565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61028e610454366004612519565b610e4b565b61046c61046736600461298c565b610e9a565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101e8565b60006001600160e01b031982167f36372b070000000000000000000000000000000000000000000000000000000014806104f957506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061052d57506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061056157506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b8061059557506001600160e01b031982167f40c10f1900000000000000000000000000000000000000000000000000000000145b806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105de906129c3565b80601f016020809104026020016040519081016040528092919081815260200182805461060a906129c3565b80156106575780601f1061062c57610100808354040283529160200191610657565b820191906000526020600020905b81548152906001019060200180831161063a57829003601f168201915b5050505050905090565b60003361066f818585611143565b5060019392505050565b60003361068785828561129b565b61069285858561132d565b506001949350505050565b60006106a7611527565b905090565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061066f90829086906106e6908790612a0d565b611143565b60004382106107415760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff6020526040902061076390836115a2565b9392505050565b610130547fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c906107a8906001600160a01b0316303384600036611699565b6107b28383611787565b505050565b6107c1338261181f565b50565b6001600160a01b038116600090815260ff60205260408120546105c990611089565b6001600160a01b038116600090815260cb60205260408120546105c9565b60004382106108555760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610738565b6105c9610100836115a2565b6060606980546105de906129c3565b6001600160a01b038116600090815260ff602052604081205480156108e4576001600160a01b038316600090815260ff602052604090206108b2600183612a20565b815481106108c2576108c2612a33565b60009182526020909120015464010000000090046001600160e01b03166108e7565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610738565b6106928286868403611143565b60003361066f81858561132d565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610738565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206118b1565b85858561191a565b9050610a8481611942565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610738565b610adc818861181f565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610738565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611942565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826118b1565b90506000610bcf8287878761191a565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610738565b610c3d8a8a8a611143565b50505050505050505050565b600054610100900460ff1615808015610c695750600054600160ff909116105b80610c835750303b158015610c83575060005460ff166001145b610cf55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610738565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d36576000805461ff0019166101001790555b60208201515182515114610d88578151516020830151516040517f98b1381500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610738565b610d92848461196a565b610d9b846119df565b610da485611a89565b60005b825151811015610dfd57610df583600001518281518110610dca57610dca612a33565b602002602001015184602001518381518110610de857610de8612a33565b6020026020010151611787565b600101610da7565b508015610e44576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03821660009081526065602052604090205481811015610e7f576107b283610e7a8385612a20565b611787565b818111156107b2576107b283610e958484612a20565b611b2f565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610ede57610ede612a33565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038216610f835760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610738565b8060676000828254610f959190612a0d565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610ff660008383611b48565b5050565b60006107638284612a0d565b60006001600160e01b038211156110855760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610738565b5090565b600063ffffffff8211156110855760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03838116600090815260fe60205260408082205485841683529120546107b292918216911683611baa565b60006107638284612a20565b6001600160a01b0383166111be5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03821661123a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152606660209081526040808320938616835292905220546000198114611327578181101561131a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610738565b6113278484848403611143565b50505050565b6001600160a01b0383166113a95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0382166114255760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b038316600090815260656020526040902054818110156114b45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115149086815260200190565b60405180910390a3611327848484611b48565b60006106a77f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61155660975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b8154600090818160058111156115fc5760006115bd84611ce7565b6115c79085612a20565b600088815260209020909150869082015463ffffffff1611156115ec578091506115fa565b6115f7816001612a0d565b92505b505b808210156116495760006116108383611dcf565b600088815260209020909150869082015463ffffffff16111561163557809150611643565b611640816001612a0d565b92505b506115fc565b80156116835761166c8661165e600184612a20565b600091825260209091200190565b5464010000000090046001600160e01b0316611686565b60005b6001600160e01b03169695505050505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116e69088908890889088908890600401612a49565b602060405180830381865afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190612a9d565b61177f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610738565b505050505050565b6117918282610f2d565b6067546001600160e01b0310156118105760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610738565b611327610100610ffa83611dea565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611327828483611baa565b60006105c96118be611527565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061192b87878787611f3e565b9150915061193881612002565b5095945050505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b600054610100900460ff166119d55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610ff68282612167565b600054610100900460ff16611a4a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b6107c1816040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506121eb565b600054610100900460ff16611af45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611b398282612270565b61132761010061113783611dea565b611b53838383611105565b6001600160a01b03821615801590611b775750611b6f826107c4565b63ffffffff16155b8015611b9b57506001600160a01b03828116600090815260fe602052604090205416155b156107b2576107b2828361181f565b816001600160a01b0316836001600160a01b031614158015611bcc5750600081115b156107b2576001600160a01b03831615611c5a576001600160a01b038316600090815260ff602052604081208190611c079061113785611dea565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611c4f929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156107b2576001600160a01b038216600090815260ff602052604081208190611c9090610ffa85611dea565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611cd8929190918252602082015260400190565b60405180910390a25050505050565b600081600003611cf957506000919050565b60006001611d06846123e2565b901c6001901b90506001818481611d1f57611d1f612abf565b048201901c90506001818481611d3757611d37612abf565b048201901c90506001818481611d4f57611d4f612abf565b048201901c90506001818481611d6757611d67612abf565b048201901c90506001818481611d7f57611d7f612abf565b048201901c90506001818481611d9757611d97612abf565b048201901c90506001818481611daf57611daf612abf565b048201901c905061076381828581611dc957611dc9612abf565b04612476565b6000611dde6002848418612ad5565b61076390848416612a0d565b82546000908190818115611e3757611e078761165e600185612a20565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e4c565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e6c84868863ffffffff16565b9250600082118015611e845750805163ffffffff1643145b15611ec957611e9283611006565b611ea18861165e600186612a20565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055611f34565b866040518060400160405280611ede43611089565b63ffffffff168152602001611ef286611006565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f755750600090506003611ff9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fc9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ff257600060019250925050611ff9565b9150600090505b94509492505050565b600081600481111561201657612016612af7565b0361201e5750565b600181600481111561203257612032612af7565b0361207f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610738565b600281600481111561209357612093612af7565b036120e05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610738565b60038160048111156120f4576120f4612af7565b036107c15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610738565b600054610100900460ff166121d25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b60686121de8382612b53565b5060696107b28282612b53565b600054610100900460ff166122565760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b815160209283012081519190920120609791909155609855565b6001600160a01b0382166122ec5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0382166000908152606560205260409020548181101561237b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03831660008181526065602090815260408083208686039055606780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107b283600084611b48565b600080608083901c156123f757608092831c92015b604083901c1561240957604092831c92015b602083901c1561241b57602092831c92015b601083901c1561242d57601092831c92015b600883901c1561243f57600892831c92015b600483901c1561245157600492831c92015b600283901c1561246357600292831c92015b600183901c156105c95760010192915050565b60008183106124855781610763565b5090919050565b60006020828403121561249e57600080fd5b81356001600160e01b03198116811461076357600080fd5b600060208083528351808285015260005b818110156124e3578581018301518582016040015282016124c7565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146107c157600080fd5b6000806040838503121561252c57600080fd5b823561253781612504565b946020939093013593505050565b60008060006060848603121561255a57600080fd5b833561256581612504565b9250602084013561257581612504565b929592945050506040919091013590565b60006020828403121561259857600080fd5b813561076381612504565b6000602082840312156125b557600080fd5b5035919050565b803560ff811681146125cd57600080fd5b919050565b60008060008060008060c087890312156125eb57600080fd5b86356125f681612504565b95506020870135945060408701359350612612606088016125bc565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561264757600080fd5b873561265281612504565b9650602088013561266281612504565b9550604088013594506060880135935061267e608089016125bc565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156126d3576126d361269a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156127025761270261269a565b604052919050565b600082601f83011261271b57600080fd5b813567ffffffffffffffff8111156127355761273561269a565b6127486020601f19601f840116016126d9565b81815284602083860101111561275d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156127945761279461269a565b5060051b60200190565b600082601f8301126127af57600080fd5b813560206127c46127bf8361277a565b6126d9565b82815260059290921b840181019181810190868411156127e357600080fd5b8286015b848110156127fe57803583529183019183016127e7565b509695505050505050565b6000806000806080858703121561281f57600080fd5b843561282a81612504565b935060208581013567ffffffffffffffff8082111561284857600080fd5b61285489838a0161270a565b9550604088013591508082111561286a57600080fd5b61287689838a0161270a565b9450606088013591508082111561288c57600080fd5b908701906040828a0312156128a057600080fd5b6128a86126b0565b8235828111156128b757600080fd5b8301601f81018b136128c857600080fd5b80356128d66127bf8261277a565b81815260059190911b8201860190868101908d8311156128f557600080fd5b928701925b8284101561291c57833561290d81612504565b825292870192908701906128fa565b8452505050828401358281111561293257600080fd5b61293e8b82860161279e565b85830152508094505050505092959194509250565b6000806040838503121561296657600080fd5b823561297181612504565b9150602083013561298181612504565b809150509250929050565b6000806040838503121561299f57600080fd5b82356129aa81612504565b9150602083013563ffffffff8116811461298157600080fd5b600181811c908216806129d757607f821691505b60208210810361196457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105c9576105c96129f7565b818103818111156105c9576105c96129f7565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215612aaf57600080fd5b8151801515811461076357600080fd5b634e487b7160e01b600052601260045260246000fd5b600082612af257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b601f8211156107b257600081815260208120601f850160051c81016020861015612b345750805b601f850160051c820191505b8181101561177f57828155600101612b40565b815167ffffffffffffffff811115612b6d57612b6d61269a565b612b8181612b7b84546129c3565b84612b0d565b602080601f831160018114612bb65760008415612b9e5750858301515b600019600386901b1c1916600185901b17855561177f565b600085815260208120601f198616915b82811015612be557888601518255948401946001909101908401612bc6565b5085821015612c035787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220512375dccb8ed2f8409278533eb61bc5c248e947ac0a35f90aa7a3f1fda13e7e64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724";
var isSuperArgs$8 = (xs) => xs.length > 1;
var GovernanceERC20Mock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$8(args)) {
      super(...args);
    } else {
      super(_abi$a, _bytecode$8, args[0]);
    }
  }
  deploy(_dao, _name, _symbol, _mintSettings, overrides) {
    return super.deploy(_dao, _name, _symbol, _mintSettings, overrides || {});
  }
  getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides) {
    return super.getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$a);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$a, signerOrProvider);
  }
};
GovernanceERC20Mock__factory.bytecode = _bytecode$8;
GovernanceERC20Mock__factory.abi = _abi$a;
var _abi$9 = [
  {
    inputs: [
      {
        internalType: "string",
        name: "URI_",
        type: "string"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "TransferSingle",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "URI",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "address",
        name: "operator",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode$7 = "";
var isSuperArgs$7 = (xs) => xs.length > 1;
var TestERC1155__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$7(args)) {
      super(...args);
    } else {
      super(_abi$9, _bytecode$7, args[0]);
    }
  }
  deploy(URI_, overrides) {
    return super.deploy(URI_, overrides || {});
  }
  getDeployTransaction(URI_, overrides) {
    return super.getDeployTransaction(URI_, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$9);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$9, signerOrProvider);
  }
};
TestERC1155__factory.bytecode = _bytecode$7;
TestERC1155__factory.abi = _abi$9;
var _abi$8 = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string"
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals_",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8"
      }
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$6 = "0x60806040526005805460ff191660121790553480156200001e57600080fd5b50604051620012d5380380620012d583398101604081905262000041916200038b565b828260036200005183826200048c565b5060046200006082826200048c565b5050506200007533826200007e60201b60201c565b505050620005a0565b6001600160a01b03821660009081526020819052604090205481811015620000bc57620000b783620000b183856200056e565b620000dc565b505050565b81811115620000b757620000b783620000d684846200056e565b62000192565b6001600160a01b038216620001385760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546200014c91906200058a565b90915550506001600160a01b03821660008181526020818152604080832080548601905551848152600080516020620012b5833981519152910160405180910390a35050565b6001600160a01b038216620001f45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016200012f565b6001600160a01b038216600090815260208190526040902054818110156200026a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016200012f565b6001600160a01b038316600081815260208181526040808320868603905560028054879003905551858152919291600080516020620012b5833981519152910160405180910390a3620000b7836000846001600160e01b038416565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002ee57600080fd5b81516001600160401b03808211156200030b576200030b620002c6565b604051601f8301601f19908116603f01168101908282118183101715620003365762000336620002c6565b816040528381526020925086838588010111156200035357600080fd5b600091505b8382101562000377578582018301518183018401529082019062000358565b600093810190920192909252949350505050565b600080600060608486031215620003a157600080fd5b83516001600160401b0380821115620003b957600080fd5b620003c787838801620002dc565b94506020860151915080821115620003de57600080fd5b50620003ed86828701620002dc565b925050604084015190509250925092565b600181811c908216806200041357607f821691505b6020821081036200043457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000b757600081815260208120601f850160051c81016020861015620004635750805b601f850160051c820191505b8181101562000484578281556001016200046f565b505050505050565b81516001600160401b03811115620004a857620004a8620002c6565b620004c081620004b98454620003fe565b846200043a565b602080601f831160018114620004f85760008415620004df5750858301515b600019600386901b1c1916600185901b17855562000484565b600085815260208120601f198616915b82811015620005295788860151825594840194600190910190840162000508565b5085821015620005485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000584576200058462000558565b92915050565b8082018082111562000584576200058462000558565b610d0580620005b06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637a1395aa1161008c578063a9059cbb11610066578063a9059cbb14610209578063dd62ed3e1461021c578063e30443bc14610255578063f785ef721461026857600080fd5b80637a1395aa146101aa57806395d89b41146101ee578063a457c2d7146101f657600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016e57806370a082311461018157600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610275565b6040516101049190610ac1565b60405180910390f35b61012061011b366004610b49565b610307565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610b73565b610321565b60055460ff165b60405160ff9091168152602001610104565b61012061017c366004610b49565b610345565b61013461018f366004610baf565b6001600160a01b031660009081526020819052604090205490565b6101ec6101b8366004610bd1565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b005b6100f7610384565b610120610204366004610b49565b610393565b610120610217366004610b49565b610442565b61013461022a366004610bf4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101ec610263366004610b49565b610450565b60055461015c9060ff1681565b60606003805461028490610c27565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610c27565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b5050505050905090565b6000336103158185856104a4565b60019150505b92915050565b60003361032f8582856105fc565b61033a8585856106ac565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610315908290869061037f908790610ca9565b6104a4565b60606004805461028490610c27565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104355760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61033a82868684036104a4565b6000336103158185856106ac565b6001600160a01b03821660009081526020819052604090205481811015610489576104848361047f8385610cbc565b610899565b505050565b81811115610484576104848361049f8484610cbc565b610958565b6001600160a01b03831661051f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03821661059b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106a657818110156106995760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042c565b6106a684848484036104a4565b50505050565b6001600160a01b0383166107285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0382166107a45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b038316600090815260208190526040902054818110156108335760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106a6565b6001600160a01b0382166108ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042c565b80600260008282546109019190610ca9565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166109d45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03821660009081526020819052604090205481811015610a635760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600060208083528351808285015260005b81811015610aee57858101830151858201604001528201610ad2565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80356001600160a01b0381168114610b4457600080fd5b919050565b60008060408385031215610b5c57600080fd5b610b6583610b2d565b946020939093013593505050565b600080600060608486031215610b8857600080fd5b610b9184610b2d565b9250610b9f60208501610b2d565b9150604084013590509250925092565b600060208284031215610bc157600080fd5b610bca82610b2d565b9392505050565b600060208284031215610be357600080fd5b813560ff81168114610bca57600080fd5b60008060408385031215610c0757600080fd5b610c1083610b2d565b9150610c1e60208401610b2d565b90509250929050565b600181811c90821680610c3b57607f821691505b602082108103610c74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561031b5761031b610c7a565b8181038181111561031b5761031b610c7a56fea2646970667358221220ae786a8de7c95ce137a7fe8805369fe3c7863d200c2ebd905a604d41888300e764736f6c63430008110033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
var isSuperArgs$6 = (xs) => xs.length > 1;
var TestERC20__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$6(args)) {
      super(...args);
    } else {
      super(_abi$8, _bytecode$6, args[0]);
    }
  }
  deploy(name_, symbol_, amountToMint, overrides) {
    return super.deploy(name_, symbol_, amountToMint, overrides || {});
  }
  getDeployTransaction(name_, symbol_, amountToMint, overrides) {
    return super.getDeployTransaction(name_, symbol_, amountToMint, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$8);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$8, signerOrProvider);
  }
};
TestERC20__factory.bytecode = _bytecode$6;
TestERC20__factory.abi = _abi$8;
var _abi$7 = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string"
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "operator",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$5 = "0x60806040523480156200001157600080fd5b5060405162001a4538038062001a45833981016040819052620000349162000123565b818160006200004483826200021c565b5060016200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61174d80620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146101ff578063b88d4fde14610212578063c87b56dd14610225578063e985e9c51461023857600080fd5b80636352211e146101b057806370a08231146101c357806395d89b41146101e45780639dc29fac146101ec57600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806323b872dd1461017757806340c10f191461018a57806342842e0e1461019d57600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004611382565b610274565b60405190151581526020015b60405180910390f35b61012a610359565b60405161011991906113ef565b61014a610145366004611402565b6103eb565b6040516001600160a01b039091168152602001610119565b610175610170366004611437565b610412565b005b610175610185366004611461565b610566565b610175610198366004611437565b6105ed565b6101756101ab366004611461565b6105fb565b61014a6101be366004611402565b610616565b6101d66101d136600461149d565b61067b565b604051908152602001610119565b61012a610715565b6101756101fa366004611437565b610724565b61017561020d3660046114b8565b61072d565b61017561022036600461150a565b610738565b61012a610233366004611402565b6107c6565b61010d6102463660046115e6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061030757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461036890611619565b80601f016020809104026020016040519081016040528092919081815260200182805461039490611619565b80156103e15780601f106103b6576101008083540402835291602001916103e1565b820191906000526020600020905b8154815290600101906020018083116103c457829003601f168201915b5050505050905090565b60006103f68261083a565b506000908152600460205260409020546001600160a01b031690565b600061041d82610616565b9050806001600160a01b0316836001600160a01b0316036104ab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104e557506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6105575760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a2565b61056183836108a1565b505050565b610570338261091c565b6105e25760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b61056183838361099b565b6105f78282610bde565b5050565b61056183838360405180602001604052806000815250610738565b6000818152600260205260408120546001600160a01b0316806103535760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b60006001600160a01b0382166106f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104a2565b506001600160a01b031660009081526003602052604090205490565b60606001805461036890611619565b6105f781610d84565b6105f7338383610e34565b610742338361091c565b6107b45760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b6107c084848484610f20565b50505050565b60606107d18261083a565b60006107e860408051602081019091526000815290565b905060008151116108085760405180602001604052806000815250610833565b8061081284610fa9565b604051602001610823929190611653565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661089e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906108e382610616565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061092883610616565b9050806001600160a01b0316846001600160a01b0316148061096f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806109935750836001600160a01b0316610988846103eb565b6001600160a01b0316145b949350505050565b826001600160a01b03166109ae82610616565b6001600160a01b031614610a2a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6001600160a01b038216610aa55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104a2565b610ab28383836001611049565b826001600160a01b0316610ac582610616565b6001600160a01b031614610b415760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610c345760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104a2565b6000818152600260205260409020546001600160a01b031615610c995760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b610ca7600083836001611049565b6000818152600260205260409020546001600160a01b031615610d0c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610d8f82610616565b9050610d9f816000846001611049565b610da882610616565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603610e955760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a2565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f2b84848461099b565b610f37848484846110d1565b6107c05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b60606000610fb683611272565b600101905060008167ffffffffffffffff811115610fd657610fd66114f4565b6040519080825280601f01601f191660200182016040528015611000576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461100a57509392505050565b60018111156107c0576001600160a01b0384161561108f576001600160a01b03841660009081526003602052604081208054839290611089908490611698565b90915550505b6001600160a01b038316156107c0576001600160a01b038316600090815260036020526040812080548392906110c69084906116ab565b909155505050505050565b60006001600160a01b0384163b15611267576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061112e9033908990889088906004016116be565b6020604051808303816000875af1925050508015611169575060408051601f3d908101601f19168201909252611166918101906116fa565b60015b61121c573d808015611197576040519150601f19603f3d011682016040523d82523d6000602084013e61119c565b606091505b5080516000036112145760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610993565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112bb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106112e7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061130557662386f26fc10000830492506010015b6305f5e100831061131d576305f5e100830492506008015b612710831061133157612710830492506004015b60648310611343576064830492506002015b600a83106103535760010192915050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461089e57600080fd5b60006020828403121561139457600080fd5b813561083381611354565b60005b838110156113ba5781810151838201526020016113a2565b50506000910152565b600081518084526113db81602086016020860161139f565b601f01601f19169290920160200192915050565b60208152600061083360208301846113c3565b60006020828403121561141457600080fd5b5035919050565b80356001600160a01b038116811461143257600080fd5b919050565b6000806040838503121561144a57600080fd5b6114538361141b565b946020939093013593505050565b60008060006060848603121561147657600080fd5b61147f8461141b565b925061148d6020850161141b565b9150604084013590509250925092565b6000602082840312156114af57600080fd5b6108338261141b565b600080604083850312156114cb57600080fd5b6114d48361141b565b9150602083013580151581146114e957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561152057600080fd5b6115298561141b565b93506115376020860161141b565b925060408501359150606085013567ffffffffffffffff8082111561155b57600080fd5b818701915087601f83011261156f57600080fd5b813581811115611581576115816114f4565b604051601f8201601f19908116603f011681019083821181831017156115a9576115a96114f4565b816040528281528a60208487010111156115c257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156115f957600080fd5b6116028361141b565b91506116106020840161141b565b90509250929050565b600181811c9082168061162d57607f821691505b60208210810361164d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161166581846020880161139f565b83519083019061167981836020880161139f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561035357610353611682565b8082018082111561035357610353611682565b60006001600160a01b038087168352808616602084015250836040830152608060608301526116f060808301846113c3565b9695505050505050565b60006020828403121561170c57600080fd5b81516108338161135456fea26469706673582212200cd0966f74b1cac4d1ae34ab4d4b220618fb971dd467f1413232e41fa50a495864736f6c63430008110033";
var isSuperArgs$5 = (xs) => xs.length > 1;
var TestERC721__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$5(args)) {
      super(...args);
    } else {
      super(_abi$7, _bytecode$5, args[0]);
    }
  }
  deploy(name_, symbol_, overrides) {
    return super.deploy(name_, symbol_, overrides || {});
  }
  getDeployTransaction(name_, symbol_, overrides) {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$7);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$7, signerOrProvider);
  }
};
TestERC721__factory.bytecode = _bytecode$5;
TestERC721__factory.abi = _abi$7;
var index$7 = Object.freeze({
  __proto__: null,
  GovernanceERC20Mock__factory,
  TestERC1155__factory,
  TestERC20__factory,
  TestERC721__factory
});
var _abi$6 = [
  {
    inputs: [
      {
        internalType: "string",
        name: "subdomain",
        type: "string"
      }
    ],
    name: "isSubdomainValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var _bytecode$4 = "0x608060405234801561001057600080fd5b5061024d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a6fe91aa14610030575b600080fd5b61004361003e366004610117565b610057565b604051901515815260200160405180910390f35b6000610063838361006c565b90505b92915050565b6000828280835b8181101561010a57600084848381811061008f5761008f610189565b919091013560f81c9150506060811180156100ad5750607b8160ff16105b156100b857506100f8565b602f8160ff161180156100ce5750603a8160ff16105b156100d957506100f8565b8060ff16602d036100ea57506100f8565b600095505050505050610066565b80610102816101b8565b915050610073565b5060019695505050505050565b6000806020838503121561012a57600080fd5b823567ffffffffffffffff8082111561014257600080fd5b818501915085601f83011261015657600080fd5b81358181111561016557600080fd5b86602082850101111561017757600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610210577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212206abc490182a5fa6da85ec289a4a51a0dfbc2de4ceff05eea73dd8265aa0cd1c164736f6c63430008110033";
var isSuperArgs$4 = (xs) => xs.length > 1;
var RegistryUtils__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$4(args)) {
      super(...args);
    } else {
      super(_abi$6, _bytecode$4, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$6);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$6, signerOrProvider);
  }
};
RegistryUtils__factory.bytecode = _bytecode$4;
RegistryUtils__factory.abi = _abi$6;
var index$6 = Object.freeze({
  __proto__: null,
  RegistryUtils__factory
});
var _abi$5 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractAlreadyRegistered",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractERC165SupportInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "ContractInterfaceInvalid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "Registered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "REGISTER_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UPGRADE_REGISTRY_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "entries",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "bytes4",
        name: "targetInterface",
        type: "bytes4"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address"
      }
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "targetInterfaceId",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode$3 = "0x60a06040523060805234801561001457600080fd5b506080516113e761004c6000396000818161027801528181610313015281816105c50152818161065b015261075601526113e76000f3fe6080604052600436106100b15760003560e01c80634f1ef2861161006957806374574eb71161004e57806374574eb7146101c6578063f29ee125146101fa578063f2c59caf1461023a57600080fd5b80634f1ef2861461019057806352d1902d146101a357600080fd5b80634162169f1161009a5780634162169f146100f857806344162ef8146101255780634420e4861461017057600080fd5b80633659cfe6146100b657806339871111146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d136600461111a565b61026e565b005b3480156100e457600080fd5b506100d66100f3366004611137565b610410565b34801561010457600080fd5b506097546040516001600160a01b0390911681526020015b60405180910390f35b34801561013157600080fd5b5060c95461013f9060e01b81565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161011c565b34801561017c57600080fd5b506100d661018b36600461111a565b610534565b6100d661019e3660046111c4565b6105bb565b3480156101af57600080fd5b506101b8610749565b60405190815260200161011c565b3480156101d257600080fd5b506101b87f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561020657600080fd5b5061022a61021536600461111a565b60ca6020526000908152604090205460ff1681565b604051901515815260200161011c565b34801561024657600080fd5b506101b87fffb51f414ffad7ae6aa3ebe7a53cbd03087d492fd38b0f6cbaa8704085baac4581565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103115760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661036c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146103e85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610308565b6103f18161080e565b6040805160008082526020820190925261040d91839190610847565b50565b600054610100900460ff16158080156104305750600054600160ff909116105b8061044a5750303b15801561044a575060005460ff166001145b6104bc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610308565b6000805460ff1916600117905580156104df576000805461ff0019166101001790555b6104e983836109e7565b801561052f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6097547fffb51f414ffad7ae6aa3ebe7a53cbd03087d492fd38b0f6cbaa8704085baac4590610572906001600160a01b031630335b84600036610aa2565b61057b82610b90565b6040516001600160a01b03831681527f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e99060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106595760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610308565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107305760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610308565b6107398261080e565b61074582826001610847565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610308565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610745906001600160a01b03163033610569565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561087a5761052f83610c6d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156108d4575060408051601f3d908101601f191682019092526108d191810190611288565b60015b6109465760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610308565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146109db5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610308565b5061052f838383610d43565b600054610100900460ff16610a645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610308565b610a6d82610d6e565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610aef90889088908890889088906004016112a1565b602060405180830381865afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3091906112f5565b610b88576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610308565b505050505050565b6001600160a01b038116600090815260ca602052604090205460ff1615610bee576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610308565b60c954610c08906001600160a01b0383169060e01b610e25565b610c49576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610308565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6001600160a01b0381163b610cea5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610308565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d4c83610e48565b600082511180610d595750805b1561052f57610d688383610e88565b50505050565b600054610100900460ff16610deb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610308565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610e3083610f93565b8015610e415750610e418383610ff8565b9392505050565b610e5181610c6d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610308565b600080846001600160a01b031684604051610f22919061133b565b600060405180830381855af49150503d8060008114610f5d576040519150601f19603f3d011682016040523d82523d6000602084013e610f62565b606091505b5091509150610f8a828260405180606001604052806027815260200161138b602791396110c7565b95945050505050565b6000610fbf827f01ffc9a700000000000000000000000000000000000000000000000000000000610ff8565b8015610ff25750610ff0827fffffffff00000000000000000000000000000000000000000000000000000000610ff8565b155b92915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156110b0575060208210155b80156110bc5750600081115b979650505050505050565b606083156110d6575081610e41565b610e4183838151156110eb5781518083602001fd5b8060405162461bcd60e51b81526004016103089190611357565b6001600160a01b038116811461040d57600080fd5b60006020828403121561112c57600080fd5b8135610e4181611105565b6000806040838503121561114a57600080fd5b823561115581611105565b915060208301357fffffffff000000000000000000000000000000000000000000000000000000008116811461118a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d757600080fd5b82356111e281611105565b9150602083013567ffffffffffffffff808211156111ff57600080fd5b818501915085601f83011261121357600080fd5b81358181111561122557611225611195565b604051601f8201601f19908116603f0116810190838211818310171561124d5761124d611195565b8160405282815288602084870101111561126657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129a57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561130757600080fd5b81518015158114610e4157600080fd5b60005b8381101561133257818101518382015260200161131a565b50506000910152565b6000825161134d818460208701611317565b9190910192915050565b6020815260008251806020840152611376816040850160208701611317565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a9286eb673e4ffd0726bc4f3575e1d44acdacdfef315115d1853a40aaffdac1a64736f6c63430008110033";
var isSuperArgs$3 = (xs) => xs.length > 1;
var InterfaceBasedRegistryMock__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$3(args)) {
      super(...args);
    } else {
      super(_abi$5, _bytecode$3, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$5);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$5, signerOrProvider);
  }
};
InterfaceBasedRegistryMock__factory.bytecode = _bytecode$3;
InterfaceBasedRegistryMock__factory.abi = _abi$5;
var _abi$4 = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      }
    ],
    name: "RatioOutOfBounds",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_ratio",
        type: "uint256"
      }
    ],
    name: "applyRatioCeiled",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getRatioBase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var _bytecode$2 = "0x608060405234801561001057600080fd5b50610236806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633d9de6701461003b578063a027562014610052575b600080fd5b620f42405b60405190815260200160405180910390f35b610040610060366004610109565b600061006c8383610075565b90505b92915050565b6000620f42408211156100c4576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f424060048201526024810183905260440160405180910390fd5b6100ce828461015a565b925060006100df620f4240856101a0565b90506100ee620f4240856101b4565b91508015610102576100ff826101c8565b91505b5092915050565b6000806040838503121561011c57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761006f5761006f61012b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826101af576101af610171565b500690565b6000826101c3576101c3610171565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101f9576101f961012b565b506001019056fea2646970667358221220be5cfa0a432b7b982a4a50ce52432c520f3d2db1fa0e89d7c3b8c3ffc9adfec864736f6c63430008110033";
var isSuperArgs$2 = (xs) => xs.length > 1;
var RatioTest__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$2(args)) {
      super(...args);
    } else {
      super(_abi$4, _bytecode$2, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$4);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$4, signerOrProvider);
  }
};
RatioTest__factory.bytecode = _bytecode$2;
RatioTest__factory.abi = _abi$4;
var index$5 = Object.freeze({
  __proto__: null,
  registryUtilsTestSol: index$6,
  InterfaceBasedRegistryMock__factory,
  RatioTest__factory
});
var index$4 = Object.freeze({
  __proto__: null,
  dao: index$j,
  permission: index$h,
  plugin: index$8,
  token: index$7,
  utils: index$5
});
var _abi$3 = [
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "receivers",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          }
        ],
        internalType: "struct GovernanceERC20.MintSettings",
        name: "_mintSettings",
        type: "tuple"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address"
      },
      {
        internalType: "address",
        name: "where",
        type: "address"
      },
      {
        internalType: "address",
        name: "who",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "permissionId",
        type: "bytes32"
      }
    ],
    name: "DaoUnauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receiversArrayLength",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountsArrayLength",
        type: "uint256"
      }
    ],
    name: "MintSettingsArrayLengthMismatch",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromDelegate",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "toDelegate",
        type: "address"
      }
    ],
    name: "DelegateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousBalance",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newBalance",
        type: "uint256"
      }
    ],
    name: "DelegateVotesChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MINT_PERMISSION_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "pos",
        type: "uint32"
      }
    ],
    name: "checkpoints",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "fromBlock",
            type: "uint32"
          },
          {
            internalType: "uint224",
            name: "votes",
            type: "uint224"
          }
        ],
        internalType: "struct ERC20VotesUpgradeable.Checkpoint",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract IDAO",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      }
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "delegateBySig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IDAO",
        name: "_dao",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "receivers",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          }
        ],
        internalType: "struct GovernanceERC20.MintSettings",
        name: "_mintSettings",
        type: "tuple"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "numCheckpoints",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$1 = "0x60806040523480156200001157600080fd5b5060405162003ad838038062003ad8833981016040819052620000349162000d20565b62000042848484846200004c565b5050505062001037565b600054610100900460ff16158080156200006d5750600054600160ff909116105b806200009d57506200008a306200023f60201b62000eb11760201c565b1580156200009d575060005460ff166001145b620001065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156200012a576000805461ff0019166101001790555b6020820151518251511462000165578151516020830151516040516398b1381560e01b815260048101929092526024820152604401620000fd565b6200017184846200024e565b6200017c84620002ba565b620001878562000344565b60005b825151811015620001f057620001e783600001518281518110620001b257620001b262000e85565b602002602001015184602001518381518110620001d357620001d362000e85565b6020026020010151620003c360201b60201c565b6001016200018a565b50801562000238576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b600054610100900460ff16620002aa5760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b620002b6828262000477565b5050565b600054610100900460ff16620003165760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b6200034181604051806040016040528060018152602001603160f81b815250620004f560201b60201c565b50565b600054610100900460ff16620003a05760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b620003da82826200056b60201b62000ec01760201c565b6001600160e01b03620003ee6200063a8216565b1115620004575760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401620000fd565b6200047161010062000f8d6200064060201b178362000657565b50505050565b600054610100900460ff16620004d35760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b6068620004e1838262000f29565b506069620004f0828262000f29565b505050565b600054610100900460ff16620005515760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b815160209283012081519190920120609791909155609855565b6001600160a01b038216620005c35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000fd565b8060676000828254620005d791906200100b565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620002b660008383620007e9565b60675490565b60006200064e82846200100b565b90505b92915050565b82546000908190818115620006b75762000686876200067860018562001021565b600091825260209091200190565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152620006cc565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350620006ea84868860201c565b9250600082118015620007035750805163ffffffff1643145b156200075a576200071f836200085f60201b62000f991760201c565b62000731886200067860018662001021565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007df565b8660405180604001604052806200077c43620008ce60201b6200101c1760201c565b63ffffffff1681526020016200079d866200085f60201b62000f991760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b620008018383836200093560201b620010981760201c565b6001600160a01b03821615801590620008285750620008208262000981565b63ffffffff16155b80156200084d57506001600160a01b03828116600090815260fe602052604090205416155b15620004f057620004f08280620009b0565b60006001600160e01b03821115620008ca5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620000fd565b5090565b600063ffffffff821115620008ca5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620000fd565b6200094d838383620004f060201b620007941760201c565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054620004f09291821691168362000a27565b6001600160a01b038116600090815260ff6020908152604082205462000651916200101c620008ce821b17901c565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4620004718284835b816001600160a01b0316836001600160a01b03161415801562000a4a5750600081115b15620004f0576001600160a01b0383161562000ad7576001600160a01b038316600090815260ff602090815260408220829162000a94919062000b62901b620010ca178562000657565b91509150846001600160a01b031660008051602062003ab8833981519152838360405162000acc929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615620004f0576001600160a01b038216600090815260ff602090815260408220829162000b1b919062000640901b62000f8d178562000657565b91509150836001600160a01b031660008051602062003ab8833981519152838360405162000b53929190918252602082015260400190565b60405180910390a25050505050565b60006200064e828462001021565b6001600160a01b03811681146200034157600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000bc15762000bc162000b86565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000bf25762000bf262000b86565b604052919050565b600082601f83011262000c0c57600080fd5b81516001600160401b0381111562000c285762000c2862000b86565b602062000c3e601f8301601f1916820162000bc7565b828152858284870101111562000c5357600080fd5b60005b8381101562000c7357858101830151828201840152820162000c56565b506000928101909101919091529392505050565b60006001600160401b0382111562000ca35762000ca362000b86565b5060051b60200190565b600082601f83011262000cbf57600080fd5b8151602062000cd862000cd28362000c87565b62000bc7565b82815260059290921b8401810191818101908684111562000cf857600080fd5b8286015b8481101562000d15578051835291830191830162000cfc565b509695505050505050565b6000806000806080858703121562000d3757600080fd5b845162000d448162000b70565b602086810151919550906001600160401b038082111562000d6457600080fd5b62000d7289838a0162000bfa565b9550604088015191508082111562000d8957600080fd5b62000d9789838a0162000bfa565b9450606088015191508082111562000dae57600080fd5b908701906040828a03121562000dc357600080fd5b62000dcd62000b9c565b82518281111562000ddd57600080fd5b8301601f81018b1362000def57600080fd5b805162000e0062000cd28262000c87565b81815260059190911b8201860190868101908d83111562000e2057600080fd5b928701925b8284101562000e4b57835162000e3b8162000b70565b8252928701929087019062000e25565b8452505050828401518281111562000e6257600080fd5b62000e708b82860162000cad565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000eb057607f821691505b60208210810362000ed157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f057600081815260208120601f850160051c8101602086101562000f005750805b601f850160051c820191505b8181101562000f215782815560010162000f0c565b505050505050565b81516001600160401b0381111562000f455762000f4562000b86565b62000f5d8162000f56845462000e9b565b8462000ed7565b602080601f83116001811462000f95576000841562000f7c5750858301515b600019600386901b1c1916600185901b17855562000f21565b600085815260208120601f198616915b8281101562000fc65788860151825594840194600190910190840162000fa5565b508582101562000fe55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000651576200065162000ff5565b8181038181111562000651576200065162000ff5565b612a5180620010476000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636fcfff45116100f9578063a9059cbb11610097578063d505accf11610071578063d505accf146103dc578063dab27fa9146103ef578063dd62ed3e14610402578063f1127ed81461043b57600080fd5b8063a9059cbb1461038f578063b2d2989c146103a2578063c3cda520146103c957600080fd5b80638e539e8c116100d35780638e539e8c1461034e57806395d89b41146103615780639ab24eb014610369578063a457c2d71461037c57600080fd5b80636fcfff45146102ea57806370a08231146103125780637ecebe001461033b57600080fd5b80633644e5151161016657806340c10f191161014057806340c10f19146102705780634162169f14610285578063587cde1e146102ab5780635c19a95c146102d757600080fd5b80633644e51514610242578063395093511461024a5780633a46b1a81461025d57600080fd5b806318160ddd1161019757806318160ddd1461020e57806323b872dd14610220578063313ce5671461023357600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063095ea7b3146101fb575b600080fd5b6101d16101cc366004612294565b610478565b60405190151581526020015b60405180910390f35b6101ee6105b1565b6040516101dd91906122be565b6101d1610209366004612321565b610643565b6067545b6040519081526020016101dd565b6101d161022e36600461234d565b61065b565b604051601281526020016101dd565b61021261067f565b6101d1610258366004612321565b61068e565b61021261026b366004612321565b6106cd565b61028361027e366004612321565b61074c565b005b610130546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b6102936102b936600461238e565b6001600160a01b03908116600090815260fe60205260409020541690565b6102836102e536600461238e565b610799565b6102fd6102f836600461238e565b6107a6565b60405163ffffffff90911681526020016101dd565b61021261032036600461238e565b6001600160a01b031660009081526065602052604090205490565b61021261034936600461238e565b6107c8565b61021261035c3660046123ab565b6107e6565b6101ee610843565b61021261037736600461238e565b610852565b6101d161038a366004612321565b6108d9565b6101d161039d366004612321565b610983565b6102127fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c81565b6102836103d73660046123da565b610991565b6102836103ea366004612434565b610ac7565b6102836103fd366004612611565b610c2b565b61021261041036600461275b565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61044e610449366004612794565b610e2d565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101dd565b60006001600160e01b031982167f36372b070000000000000000000000000000000000000000000000000000000014806104db57506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061050f57506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061054357506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b8061057757506001600160e01b031982167f40c10f1900000000000000000000000000000000000000000000000000000000145b806105ab57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105c0906127cb565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec906127cb565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b5050505050905090565b6000336106518185856110d6565b5060019392505050565b60003361066985828561122e565b6106748585856112c0565b506001949350505050565b60006106896114ba565b905090565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061065190829086906106c8908790612815565b6110d6565b60004382106107235760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff602052604090206107459083611535565b9392505050565b610130547fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c9061078a906001600160a01b031630338460003661162c565b610794838361171a565b505050565b6107a333826117b2565b50565b6001600160a01b038116600090815260ff60205260408120546105ab9061101c565b6001600160a01b038116600090815260cb60205260408120546105ab565b60004382106108375760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161071a565b6105ab61010083611535565b6060606980546105c0906127cb565b6001600160a01b038116600090815260ff602052604081205480156108c6576001600160a01b038316600090815260ff60205260409020610894600183612828565b815481106108a4576108a461283b565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156109765760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161071a565b61067482868684036110d6565b6000336106518185856112c0565b834211156109e15760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161071a565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a5b90610a539060a00160405160208183030381529060405280519060200120611844565b8585856118ad565b9050610a66816118d5565b8614610ab45760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161071a565b610abe81886117b2565b50505050505050565b83421115610b175760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161071a565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b468c6118d5565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ba182611844565b90506000610bb1828787876118ad565b9050896001600160a01b0316816001600160a01b031614610c145760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161071a565b610c1f8a8a8a6110d6565b50505050505050505050565b600054610100900460ff1615808015610c4b5750600054600160ff909116105b80610c655750303b158015610c65575060005460ff166001145b610cd75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071a565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d18576000805461ff0019166101001790555b60208201515182515114610d6a578151516020830151516040517f98b138150000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161071a565b610d7484846118fd565b610d7d84611972565b610d8685611a1c565b60005b825151811015610ddf57610dd783600001518281518110610dac57610dac61283b565b602002602001015184602001518381518110610dca57610dca61283b565b602002602001015161171a565b600101610d89565b508015610e26576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610e7157610e7161283b565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038216610f165760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161071a565b8060676000828254610f289190612815565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610f8960008383611ac2565b5050565b60006107458284612815565b60006001600160e01b038211156110185760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f3234206269747300000000000000000000000000000000000000000000000000606482015260840161071a565b5090565b600063ffffffff8211156110185760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b03838116600090815260fe602052604080822054858416835291205461079492918216911683611b24565b60006107458284612828565b6001600160a01b0383166111515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0382166111cd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526066602090815260408083209386168352929052205460001981146112ba57818110156112ad5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161071a565b6112ba84848484036110d6565b50505050565b6001600160a01b03831661133c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0382166113b85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b038316600090815260656020526040902054818110156114475760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114a79086815260200190565b60405180910390a36112ba848484611ac2565b60006106897f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6114e960975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561158f57600061155084611c61565b61155a9085612828565b600088815260209020909150869082015463ffffffff16111561157f5780915061158d565b61158a816001612815565b92505b505b808210156115dc5760006115a38383611d49565b600088815260209020909150869082015463ffffffff1611156115c8578091506115d6565b6115d3816001612815565b92505b5061158f565b8015611616576115ff866115f1600184612828565b600091825260209091200190565b5464010000000090046001600160e01b0316611619565b60005b6001600160e01b03169695505050505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116799088908890889088908890600401612851565b602060405180830381865afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba91906128a5565b611712576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161071a565b505050505050565b6117248282610ec0565b6067546001600160e01b0310156117a35760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f74657300000000000000000000000000000000606482015260840161071a565b6112ba610100610f8d83611d64565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46112ba828483611b24565b60006105ab6118516114ba565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006118be87878787611eb8565b915091506118cb81611f7c565b5095945050505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b600054610100900460ff166119685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b610f8982826120e1565b600054610100900460ff166119dd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b6107a3816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612165565b600054610100900460ff16611a875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611acd838383611098565b6001600160a01b03821615801590611af15750611ae9826107a6565b63ffffffff16155b8015611b1557506001600160a01b03828116600090815260fe602052604090205416155b156107945761079482836117b2565b816001600160a01b0316836001600160a01b031614158015611b465750600081115b15610794576001600160a01b03831615611bd4576001600160a01b038316600090815260ff602052604081208190611b81906110ca85611d64565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bc9929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610794576001600160a01b038216600090815260ff602052604081208190611c0a90610f8d85611d64565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611c52929190918252602082015260400190565b60405180910390a25050505050565b600081600003611c7357506000919050565b60006001611c80846121ea565b901c6001901b90506001818481611c9957611c996128c7565b048201901c90506001818481611cb157611cb16128c7565b048201901c90506001818481611cc957611cc96128c7565b048201901c90506001818481611ce157611ce16128c7565b048201901c90506001818481611cf957611cf96128c7565b048201901c90506001818481611d1157611d116128c7565b048201901c90506001818481611d2957611d296128c7565b048201901c905061074581828581611d4357611d436128c7565b0461227e565b6000611d5860028484186128dd565b61074590848416612815565b82546000908190818115611db157611d81876115f1600185612828565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611dc6565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611de684868863ffffffff16565b9250600082118015611dfe5750805163ffffffff1643145b15611e4357611e0c83610f99565b611e1b886115f1600186612828565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055611eae565b866040518060400160405280611e584361101c565b63ffffffff168152602001611e6c86610f99565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611eef5750600090506003611f73565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f43573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f6c57600060019250925050611f73565b9150600090505b94509492505050565b6000816004811115611f9057611f906128ff565b03611f985750565b6001816004811115611fac57611fac6128ff565b03611ff95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161071a565b600281600481111561200d5761200d6128ff565b0361205a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161071a565b600381600481111561206e5761206e6128ff565b036107a35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161071a565b600054610100900460ff1661214c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b6068612158838261295b565b506069610794828261295b565b600054610100900460ff166121d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b815160209283012081519190920120609791909155609855565b600080608083901c156121ff57608092831c92015b604083901c1561221157604092831c92015b602083901c1561222357602092831c92015b601083901c1561223557601092831c92015b600883901c1561224757600892831c92015b600483901c1561225957600492831c92015b600283901c1561226b57600292831c92015b600183901c156105ab5760010192915050565b600081831061228d5781610745565b5090919050565b6000602082840312156122a657600080fd5b81356001600160e01b03198116811461074557600080fd5b600060208083528351808285015260005b818110156122eb578581018301518582016040015282016122cf565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146107a357600080fd5b6000806040838503121561233457600080fd5b823561233f8161230c565b946020939093013593505050565b60008060006060848603121561236257600080fd5b833561236d8161230c565b9250602084013561237d8161230c565b929592945050506040919091013590565b6000602082840312156123a057600080fd5b81356107458161230c565b6000602082840312156123bd57600080fd5b5035919050565b803560ff811681146123d557600080fd5b919050565b60008060008060008060c087890312156123f357600080fd5b86356123fe8161230c565b9550602087013594506040870135935061241a606088016123c4565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561244f57600080fd5b873561245a8161230c565b9650602088013561246a8161230c565b95506040880135945060608801359350612486608089016123c4565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156124db576124db6124a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561250a5761250a6124a2565b604052919050565b600082601f83011261252357600080fd5b813567ffffffffffffffff81111561253d5761253d6124a2565b6125506020601f19601f840116016124e1565b81815284602083860101111561256557600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561259c5761259c6124a2565b5060051b60200190565b600082601f8301126125b757600080fd5b813560206125cc6125c783612582565b6124e1565b82815260059290921b840181019181810190868411156125eb57600080fd5b8286015b8481101561260657803583529183019183016125ef565b509695505050505050565b6000806000806080858703121561262757600080fd5b84356126328161230c565b935060208581013567ffffffffffffffff8082111561265057600080fd5b61265c89838a01612512565b9550604088013591508082111561267257600080fd5b61267e89838a01612512565b9450606088013591508082111561269457600080fd5b908701906040828a0312156126a857600080fd5b6126b06124b8565b8235828111156126bf57600080fd5b8301601f81018b136126d057600080fd5b80356126de6125c782612582565b81815260059190911b8201860190868101908d8311156126fd57600080fd5b928701925b828410156127245783356127158161230c565b82529287019290870190612702565b8452505050828401358281111561273a57600080fd5b6127468b8286016125a6565b85830152508094505050505092959194509250565b6000806040838503121561276e57600080fd5b82356127798161230c565b915060208301356127898161230c565b809150509250929050565b600080604083850312156127a757600080fd5b82356127b28161230c565b9150602083013563ffffffff8116811461278957600080fd5b600181811c908216806127df57607f821691505b6020821081036118f757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105ab576105ab6127ff565b818103818111156105ab576105ab6127ff565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156128b757600080fd5b8151801515811461074557600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826128fa57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b601f82111561079457600081815260208120601f850160051c8101602086101561293c5750805b601f850160051c820191505b8181101561171257828155600101612948565b815167ffffffffffffffff811115612975576129756124a2565b6129898161298384546127cb565b84612915565b602080601f8311600181146129be57600084156129a65750858301515b600019600386901b1c1916600185901b178555611712565b600085815260208120601f198616915b828110156129ed578886015182559484019460019091019084016129ce565b5085821015612a0b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122041caba7a2487d56f35f548b7b8ba855e47da6845347c133e79ffcf608c69803e64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724";
var isSuperArgs$1 = (xs) => xs.length > 1;
var GovernanceERC20__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$1(args)) {
      super(...args);
    } else {
      super(_abi$3, _bytecode$1, args[0]);
    }
  }
  deploy(_dao, _name, _symbol, _mintSettings, overrides) {
    return super.deploy(_dao, _name, _symbol, _mintSettings, overrides || {});
  }
  getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides) {
    return super.getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$3);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$3, signerOrProvider);
  }
};
GovernanceERC20__factory.bytecode = _bytecode$1;
GovernanceERC20__factory.abi = _abi$3;
var _abi$2 = [
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromDelegate",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "toDelegate",
        type: "address"
      }
    ],
    name: "DelegateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousBalance",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newBalance",
        type: "uint256"
      }
    ],
    name: "DelegateVotesChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "pos",
        type: "uint32"
      }
    ],
    name: "checkpoints",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "fromBlock",
            type: "uint32"
          },
          {
            internalType: "uint224",
            name: "votes",
            type: "uint224"
          }
        ],
        internalType: "struct ERC20VotesUpgradeable.Checkpoint",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      }
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "delegateBySig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "depositFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getPastVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "numCheckpoints",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "withdrawTo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode = "0x60806040523480156200001157600080fd5b50604051620034723803806200347283398101604081905262000034916200053b565b620000418383836200004a565b5050506200071f565b600054610100900460ff16158080156200006b5750600054600160ff909116105b806200009b575062000088306200019760201b62000dd61760201c565b1580156200009b575060005460ff166001145b620001045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000128576000805461ff0019166101001790555b620001348383620001a6565b6200013f8362000212565b6200014a846200029c565b801562000191576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b03163b151590565b600054610100900460ff16620002025760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200020e828262000303565b5050565b600054610100900460ff166200026e5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200029981604051806040016040528060018152602001603160f81b8152506200038160201b60201c565b50565b600054610100900460ff16620002f85760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200029981620003f7565b600054610100900460ff166200035f5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b60686200036d838262000653565b5060696200037c828262000653565b505050565b600054610100900460ff16620003dd5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b815160209283012081519190920120609791909155609855565b600054610100900460ff16620004535760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200049e57600080fd5b81516001600160401b0380821115620004bb57620004bb62000476565b604051601f8301601f19908116603f01168101908282118183101715620004e657620004e662000476565b816040528381526020925086838588010111156200050357600080fd5b600091505b8382101562000527578582018301518183018401529082019062000508565b600093810190920192909252949350505050565b6000806000606084860312156200055157600080fd5b83516001600160a01b03811681146200056957600080fd5b60208501519093506001600160401b03808211156200058757600080fd5b62000595878388016200048c565b93506040860151915080821115620005ac57600080fd5b50620005bb868287016200048c565b9150509250925092565b600181811c90821680620005da57607f821691505b602082108103620005fb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200037c57600081815260208120601f850160051c810160208610156200062a5750805b601f850160051c820191505b818110156200064b5782815560010162000636565b505050505050565b81516001600160401b038111156200066f576200066f62000476565b6200068781620006808454620005c5565b8462000601565b602080601f831160018114620006bf5760008415620006a65750858301515b600019600386901b1c1916600185901b1785556200064b565b600085815260208120601f198616915b82811015620006f057888601518255948401946001909101908401620006cf565b50858210156200070f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d23806200072f6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636f307dc3116100f95780639ab24eb011610097578063c3cda52011610071578063c3cda520146103d9578063d505accf146103ec578063dd62ed3e146103ff578063f1127ed81461043857600080fd5b80639ab24eb0146103a0578063a457c2d7146103b3578063a9059cbb146103c657600080fd5b80637ecebe00116100d35780637ecebe001461035f5780638e539e8c14610372578063906571471461038557806395d89b411461039857600080fd5b80636f307dc3146102fa5780636fcfff451461030e57806370a082311461033657600080fd5b80632f4f21e2116101665780633950935111610140578063395093511461027b5780633a46b1a81461028e578063587cde1e146102a15780635c19a95c146102e557600080fd5b80632f4f21e214610246578063313ce567146102595780633644e5151461027357600080fd5b806318160ddd1161019757806318160ddd1461020e578063205c28781461022057806323b872dd1461023357600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063095ea7b3146101fb575b600080fd5b6101d16101cc366004612712565b610475565b60405190151581526020015b60405180910390f35b6101ee6105ae565b6040516101dd9190612760565b6101d16102093660046127a8565b610640565b6067545b6040519081526020016101dd565b6101d161022e3660046127a8565b610658565b6101d16102413660046127d4565b61066b565b6101d16102543660046127a8565b61068f565b61026161069b565b60405160ff90911681526020016101dd565b6102126106aa565b6101d16102893660046127a8565b6106b4565b61021261029c3660046127a8565b6106f3565b6102cd6102af366004612815565b6001600160a01b03908116600090815260fe60205260409020541690565b6040516001600160a01b0390911681526020016101dd565b6102f86102f3366004612815565b61076b565b005b610130546102cd906001600160a01b031681565b61032161031c366004612815565b610778565b60405163ffffffff90911681526020016101dd565b610212610344366004612815565b6001600160a01b031660009081526065602052604090205490565b61021261036d366004612815565b61079a565b610212610380366004612832565b6107b8565b6102f86103933660046128ee565b610815565b6101ee61096a565b6102126103ae366004612815565b610979565b6101d16103c13660046127a8565b610a00565b6101d16103d43660046127a8565b610aaa565b6102f86103e7366004612973565b610ab8565b6102f86103fa3660046129cf565b610bee565b61021261040d366004612a40565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61044b610446366004612a79565b610d52565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101dd565b60006001600160e01b031982167f0f13099a0000000000000000000000000000000000000000000000000000000014806104d857506001600160e01b031982167f36372b0700000000000000000000000000000000000000000000000000000000145b8061050c57506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061054057506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061057457506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b806105a857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105bd90612ab0565b80601f01602080910402602001604051908101604052809291908181526020018280546105e990612ab0565b80156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b5050505050905090565b60003361064e818585610de5565b5060019392505050565b60006106648383610f3d565b9392505050565b600033610679858285610f6a565b610684858585610ff6565b506001949350505050565b600061066483836111f0565b60006106a5611216565b905090565b60006106a56112a5565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061064e90829086906106ee908790612afa565b610de5565b60004382106107495760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff602052604090206106649083611320565b6107753382611417565b50565b6001600160a01b038116600090815260ff60205260408120546105a8906114a9565b6001600160a01b038116600090815260cb60205260408120546105a8565b60004382106108095760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610740565b6105a861010083611320565b600054610100900460ff16158080156108355750600054600160ff909116105b8061084f5750303b15801561084f575060005460ff166001145b6108c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610740565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610902576000805461ff0019166101001790555b61090c8383611529565b610915836115a2565b61091e8461164c565b8015610964576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6060606980546105bd90612ab0565b6001600160a01b038116600090815260ff602052604081205480156109ed576001600160a01b038316600090815260ff602052604090206109bb600183612b0d565b815481106109cb576109cb612b20565b60009182526020909120015464010000000090046001600160e01b03166109f0565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015610a9d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610740565b6106848286868403610de5565b60003361064e818585610ff6565b83421115610b085760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610740565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610b8290610b7a9060a001604051602081830303815290604052805190602001206116c0565b858585611729565b9050610b8d81611753565b8614610bdb5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610740565b610be58188611417565b50505050505050565b83421115610c3e5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610740565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610c6d8c611753565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610cc8826116c0565b90506000610cd882878787611729565b9050896001600160a01b0316816001600160a01b031614610d3b5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610740565b610d468a8a8a610de5565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610d9657610d96612b20565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038316610e605760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b038216610edc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f49338361177b565b61013054610f61906001600160a01b03168484611785565b50600192915050565b6001600160a01b0383811660009081526066602090815260408083209386168352929052205460001981146109645781811015610fe95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610740565b6109648484848403610de5565b6001600160a01b0383166110725760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0382166110ee5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0383166000908152606560205260409020548181101561117d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111dd9086815260200190565b60405180910390a3610964848484611806565b6101305460009061120c906001600160a01b0316333085611868565b610f6183836118b9565b61013054604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa925050508015611296575060408051601f3d908101601f1916820190925261129391810190612b36565b60015b6112a05750601290565b919050565b60006106a57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6112d460975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561137a57600061133b846118c3565b6113459085612b0d565b600088815260209020909150869082015463ffffffff16111561136a57809150611378565b611375816001612afa565b92505b505b808210156113c757600061138e83836119ab565b600088815260209020909150869082015463ffffffff1611156113b3578091506113c1565b6113be816001612afa565b92505b5061137a565b8015611401576113ea866113dc600184612b0d565b600091825260209091200190565b5464010000000090046001600160e01b0316611404565b60005b6001600160e01b03169695505050505050565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46109648284836119c6565b600063ffffffff8211156115255760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610740565b5090565b600054610100900460ff166115945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61159e8282611b03565b5050565b600054610100900460ff1661160d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b610775816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250611b87565b600054610100900460ff166116b75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61077581611c0c565b60006105a86116cd6112a5565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061173a87878787611cb2565b9150915061174781611d76565b5090505b949350505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b61159e8282611edb565b6040516001600160a01b0383166024820152604481018290526118019084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ef4565b505050565b611811838383611fd9565b6001600160a01b03821615801590611835575061182d82610778565b63ffffffff16155b801561185957506001600160a01b03828116600090815260fe602052604090205416155b15611801576118018283611417565b6040516001600160a01b03808516602483015283166044820152606481018290526109649085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117ca565b61159e828261200b565b6000816000036118d557506000919050565b600060016118e2846120a3565b901c6001901b905060018184816118fb576118fb612b53565b048201901c9050600181848161191357611913612b53565b048201901c9050600181848161192b5761192b612b53565b048201901c9050600181848161194357611943612b53565b048201901c9050600181848161195b5761195b612b53565b048201901c9050600181848161197357611973612b53565b048201901c9050600181848161198b5761198b612b53565b048201901c9050610664818285816119a5576119a5612b53565b04612137565b60006119ba6002848418612b69565b61066490848416612afa565b816001600160a01b0316836001600160a01b0316141580156119e85750600081115b15611801576001600160a01b03831615611a76576001600160a01b038316600090815260ff602052604081208190611a239061214d85612159565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611a6b929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611801576001600160a01b038216600090815260ff602052604081208190611aac906122ad85612159565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611af4929190918252602082015260400190565b60405180910390a25050505050565b600054610100900460ff16611b6e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b6068611b7a8382612bd9565b5060696118018282612bd9565b600054610100900460ff16611bf25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b815160209283012081519190920120609791909155609855565b600054610100900460ff16611c775760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ce95750600090506003611d6d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d3d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d6657600060019250925050611d6d565b9150600090505b94509492505050565b6000816004811115611d8a57611d8a612c99565b03611d925750565b6001816004811115611da657611da6612c99565b03611df35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610740565b6002816004811115611e0757611e07612c99565b03611e545760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610740565b6003816004811115611e6857611e68612c99565b036107755760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610740565b611ee582826122b9565b61096461010061214d83612159565b6000611f49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661242b9092919063ffffffff16565b8051909150156118015780806020019051810190611f679190612caf565b6118015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054611801929182169116836119c6565b612015828261243a565b6067546001600160e01b0310156120945760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610740565b6109646101006122ad83612159565b600080608083901c156120b857608092831c92015b604083901c156120ca57604092831c92015b602083901c156120dc57602092831c92015b601083901c156120ee57601092831c92015b600883901c1561210057600892831c92015b600483901c1561211257600492831c92015b600283901c1561212457600292831c92015b600183901c156105a85760010192915050565b60008183106121465781610664565b5090919050565b60006106648284612b0d565b825460009081908181156121a657612176876113dc600185612b0d565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b031660208201526121bb565b60408051808201909152600080825260208201525b905080602001516001600160e01b031693506121db84868863ffffffff16565b92506000821180156121f35750805163ffffffff1643145b156122385761220183612503565b612210886113dc600186612b0d565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556122a3565b86604051806040016040528061224d436114a9565b63ffffffff16815260200161226186612503565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106648284612afa565b6001600160a01b0382166123355760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b038216600090815260656020526040902054818110156123c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b03831660008181526065602090815260408083208686039055606780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361180183600084611806565b606061174b8484600085612582565b6001600160a01b0382166124905760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610740565b80606760008282546124a29190612afa565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361159e60008383611806565b60006001600160e01b038211156115255760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610740565b6060824710156125fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610740565b600080866001600160a01b031685876040516126169190612cd1565b60006040518083038185875af1925050503d8060008114612653576040519150601f19603f3d011682016040523d82523d6000602084013e612658565b606091505b509150915061266987838387612674565b979650505050505050565b606083156126e35782516000036126dc576001600160a01b0385163b6126dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610740565b508161174b565b61174b83838151156126f85781518083602001fd5b8060405162461bcd60e51b81526004016107409190612760565b60006020828403121561272457600080fd5b81356001600160e01b03198116811461066457600080fd5b60005b8381101561275757818101518382015260200161273f565b50506000910152565b602081526000825180602084015261277f81604085016020870161273c565b601f01601f19169190910160400192915050565b6001600160a01b038116811461077557600080fd5b600080604083850312156127bb57600080fd5b82356127c681612793565b946020939093013593505050565b6000806000606084860312156127e957600080fd5b83356127f481612793565b9250602084013561280481612793565b929592945050506040919091013590565b60006020828403121561282757600080fd5b813561066481612793565b60006020828403121561284457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261287257600080fd5b813567ffffffffffffffff8082111561288d5761288d61284b565b604051601f8301601f19908116603f011681019082821181831017156128b5576128b561284b565b816040528381528660208588010111156128ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561290357600080fd5b833561290e81612793565b9250602084013567ffffffffffffffff8082111561292b57600080fd5b61293787838801612861565b9350604086013591508082111561294d57600080fd5b5061295a86828701612861565b9150509250925092565b60ff8116811461077557600080fd5b60008060008060008060c0878903121561298c57600080fd5b863561299781612793565b9550602087013594506040870135935060608701356129b581612964565b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a0312156129ea57600080fd5b87356129f581612793565b96506020880135612a0581612793565b955060408801359450606088013593506080880135612a2381612964565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612a5357600080fd5b8235612a5e81612793565b91506020830135612a6e81612793565b809150509250929050565b60008060408385031215612a8c57600080fd5b8235612a9781612793565b9150602083013563ffffffff81168114612a6e57600080fd5b600181811c90821680612ac457607f821691505b60208210810361177557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105a8576105a8612ae4565b818103818111156105a8576105a8612ae4565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612b4857600080fd5b815161066481612964565b634e487b7160e01b600052601260045260246000fd5b600082612b8657634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561180157600081815260208120601f850160051c81016020861015612bb25750805b601f850160051c820191505b81811015612bd157828155600101612bbe565b505050505050565b815167ffffffffffffffff811115612bf357612bf361284b565b612c0781612c018454612ab0565b84612b8b565b602080601f831160018114612c3c5760008415612c245750858301515b600019600386901b1c1916600185901b178555612bd1565b600085815260208120601f198616915b82811015612c6b57888601518255948401946001909101908401612c4c565b5085821015612c895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612cc157600080fd5b8151801515811461066457600080fd5b60008251612ce381846020870161273c565b919091019291505056fea2646970667358221220f8232a488630a0f1eaef4afb12d23bc9b68523c9c47b3d23e6824c7f01ee171f64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069";
var isSuperArgs = (xs) => xs.length > 1;
var GovernanceWrappedERC20__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi$2, _bytecode, args[0]);
    }
  }
  deploy(_token, _name, _symbol, overrides) {
    return super.deploy(_token, _name, _symbol, overrides || {});
  }
  getDeployTransaction(_token, _name, _symbol, overrides) {
    return super.getDeployTransaction(_token, _name, _symbol, overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new utils_exports.Interface(_abi$2);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$2, signerOrProvider);
  }
};
GovernanceWrappedERC20__factory.bytecode = _bytecode;
GovernanceWrappedERC20__factory.abi = _abi$2;
var _abi$1 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "depositFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "withdrawTo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IGovernanceWrappedERC20__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi$1);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi$1, signerOrProvider);
  }
};
IGovernanceWrappedERC20__factory.abi = _abi$1;
var index$3 = Object.freeze({
  __proto__: null,
  GovernanceERC20__factory,
  GovernanceWrappedERC20__factory,
  IGovernanceWrappedERC20__factory
});
var _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IERC20MintableUpgradeable__factory = class {
  static createInterface() {
    return new utils_exports.Interface(_abi);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi, signerOrProvider);
  }
};
IERC20MintableUpgradeable__factory.abi = _abi;
var index$2 = Object.freeze({
  __proto__: null,
  governance: index$3,
  IERC20MintableUpgradeable__factory
});
var index$1 = Object.freeze({
  __proto__: null,
  erc20: index$2
});
var index = Object.freeze({
  __proto__: null,
  core: index$G,
  framework: index$z,
  plugins: index$m,
  test: index$4,
  token: index$1
});
var activeContractsList = activeContracts;

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn = __toESM(require_bn());

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/_version.js
var version2 = "logger/5.6.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel3) {
  LogLevel3["DEBUG"] = "DEBUG";
  LogLevel3["INFO"] = "INFO";
  LogLevel3["WARNING"] = "WARNING";
  LogLevel3["ERROR"] = "ERROR";
  LogLevel3["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode2;
(function(ErrorCode4) {
  ErrorCode4["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode4["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode4["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode4["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode4["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode4["TIMEOUT"] = "TIMEOUT";
  ErrorCode4["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode4["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode4["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode4["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode4["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode4["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode4["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode4["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode4["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode4["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode4["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode4["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
})(ErrorCode2 || (ErrorCode2 = {}));
var HEX = "0123456789abcdef";
var Logger2 = class {
  constructor(version12) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version12,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(Logger2.levels.DEBUG, args);
  }
  info(...args) {
    this._log(Logger2.levels.INFO, args);
  }
  warn(...args) {
    this._log(Logger2.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = Logger2.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX[value[i] >> 4];
            hex += HEX[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code) {
      case ErrorCode2.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode2.CALL_EXCEPTION:
      case ErrorCode2.INSUFFICIENT_FUNDS:
      case ErrorCode2.MISSING_NEW:
      case ErrorCode2.NONCE_EXPIRED:
      case ErrorCode2.REPLACEMENT_UNDERPRICED:
      case ErrorCode2.TRANSACTION_REPLACED:
      case ErrorCode2.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name, value) {
    return this.throwError(message, Logger2.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, Logger2.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, Logger2.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger2.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new Logger2(version2);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      Logger2.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version12) {
    return new Logger2(version12);
  }
};
Logger2.errors = ErrorCode2;
Logger2.levels = LogLevel;

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/_version.js
var version3 = "bytes/5.6.1";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/index.js
var logger2 = new Logger2(version3);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes2(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify2(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger2.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString2(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger2.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes2(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger2.throwArgumentError("invalid arrayify value", "value", value);
}
function isHexString2(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify2(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger2.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString2(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger2.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes2(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger2.throwArgumentError("invalid hexlify value", "value", value);
}
function hexZeroPad2(value, length) {
  if (typeof value !== "string") {
    value = hexlify2(value);
  } else if (!isHexString2(value)) {
    logger2.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger2.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version4 = "bignumber/5.6.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN = import_bn.default.BN;
var logger3 = new Logger2(version4);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber2.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString2(value) || typeof value === "bigint" || isBytes2(value));
}
var _warnedToStringRadix = false;
var BigNumber2 = class {
  constructor(constructorGuard, hex) {
    logger3.checkNew(new.target, BigNumber2);
    if (constructorGuard !== _constructorGuard) {
      logger3.throwError("cannot call constructor directly; use BigNumber.from", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return BigNumber2.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o = BigNumber2.from(other);
    if (o.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger3.throwError("this platform does not support BigInt", Logger2.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger3.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger3.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger2.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger3.throwError("BigNumber.toString does not accept parameters", Logger2.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof BigNumber2) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber2(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber2(_constructorGuard, toHex(new BN(value)));
      }
      return logger3.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return BigNumber2.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return BigNumber2.from(anyValue.toString());
    }
    if (isBytes2(anyValue)) {
      return BigNumber2.from(hexlify2(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return BigNumber2.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString2(hex) || hex[0] === "-" && isHexString2(hex.substring(1))) {
            return BigNumber2.from(hex);
          }
        }
      }
    }
    return logger3.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger3.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber2.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber2.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger3.throwError(fault, Logger2.errors.NUMERIC_FAULT, params);
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var logger4 = new Logger2(version4);
var _constructorGuard2 = {};
var Zero = BigNumber2.from(0);
var NegativeOne = BigNumber2.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger4.throwError(message, Logger2.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber2.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger4.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber2.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger4.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger4.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger4.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber2.from(whole);
  const fractionValue = BigNumber2.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger4.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger4.throwArgumentError("invalid fixed format", "format", value);
        }
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type) {
          logger4.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger4.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger4.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new FixedFormat(_constructorGuard2, signed, width, decimals);
  }
};
var FixedNumber2 = class {
  constructor(constructorGuard, hex, value, format) {
    logger4.checkNew(new.target, FixedNumber2);
    if (constructorGuard !== _constructorGuard2) {
      logger4.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger2.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger4.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber2.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber2.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber2.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber2.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber2.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber2.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger4.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = FixedNumber2.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger4.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber2.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad2(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber2.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return FixedNumber2.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad2(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber2(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify2(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber2.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber2(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return FixedNumber2.fromString(value, format);
    }
    if (isBytes2(value)) {
      return FixedNumber2.fromBytes(value, format);
    }
    try {
      return FixedNumber2.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger2.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger4.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber2.from(1);
var BUMP = FixedNumber2.from("0.5");

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/constants/lib.esm/addresses.js
var AddressZero = "0x0000000000000000000000000000000000000000";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2 = BigNumber2.from(-1);
var Zero2 = BigNumber2.from(0);
var One = BigNumber2.from(1);
var Two = BigNumber2.from(2);
var WeiPerEther = BigNumber2.from("1000000000000000000");
var MaxUint256 = BigNumber2.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigNumber2.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = BigNumber2.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// ../../node_modules/@aragon/sdk-client/dist/sdk-client.esm.js
init_lib16();
var import_graphql_request = __toESM(require_dist());

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_js_sha3 = __toESM(require_sha3());

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/logger/lib.esm/_version.js
var version5 = "logger/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors2 = false;
var _censorErrors2 = false;
var LogLevels2 = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel2 = LogLevels2["default"];
var _globalLogger2 = null;
function _checkNormalize2() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError2 = _checkNormalize2();
var LogLevel2;
(function(LogLevel3) {
  LogLevel3["DEBUG"] = "DEBUG";
  LogLevel3["INFO"] = "INFO";
  LogLevel3["WARNING"] = "WARNING";
  LogLevel3["ERROR"] = "ERROR";
  LogLevel3["OFF"] = "OFF";
})(LogLevel2 || (LogLevel2 = {}));
var ErrorCode3;
(function(ErrorCode4) {
  ErrorCode4["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode4["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode4["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode4["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode4["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode4["TIMEOUT"] = "TIMEOUT";
  ErrorCode4["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode4["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode4["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode4["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode4["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode4["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode4["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode4["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode4["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode4["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode4["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode4["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
})(ErrorCode3 || (ErrorCode3 = {}));
var HEX2 = "0123456789abcdef";
var Logger3 = class {
  constructor(version12) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version12,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels2[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel2 > LogLevels2[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(Logger3.levels.DEBUG, args);
  }
  info(...args) {
    this._log(Logger3.levels.INFO, args);
  }
  warn(...args) {
    this._log(Logger3.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors2) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = Logger3.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX2[value[i] >> 4];
            hex += HEX2[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name, value) {
    return this.throwError(message, Logger3.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError2) {
      this.throwError("platform missing String.prototype.normalize", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError2
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, Logger3.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, Logger3.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, Logger3.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, Logger3.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger3.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger3.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger3.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger2) {
      _globalLogger2 = new Logger3(version5);
    }
    return _globalLogger2;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors2) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors2 = !!censorship;
    _permanentCensorErrors2 = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels2[logLevel.toLowerCase()];
    if (level == null) {
      Logger3.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel2 = level;
  }
  static from(version12) {
    return new Logger3(version12);
  }
};
Logger3.errors = ErrorCode3;
Logger3.levels = LogLevel2;

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bytes/lib.esm/_version.js
var version6 = "bytes/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bytes/lib.esm/index.js
var logger5 = new Logger3(version6);
function isHexable2(value) {
  return !!value.toHexString;
}
function addSlice2(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice2(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isInteger2(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes3(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger2(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger2(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify3(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger5.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice2(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable2(value)) {
    value = value.toHexString();
  }
  if (isHexString3(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0x0" + hex.substring(2);
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger5.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice2(new Uint8Array(result));
  }
  if (isBytes3(value)) {
    return addSlice2(new Uint8Array(value));
  }
  return logger5.throwArgumentError("invalid arrayify value", "value", value);
}
function isHexString3(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters2 = "0123456789abcdef";
function hexlify3(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger5.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters2[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable2(value)) {
    return value.toHexString();
  }
  if (isHexString3(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger5.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes3(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters2[(v & 240) >> 4] + HexCharacters2[v & 15];
    }
    return result;
  }
  return logger5.throwArgumentError("invalid hexlify value", "value", value);
}
function hexZeroPad3(value, length) {
  if (typeof value !== "string") {
    value = hexlify3(value);
  } else if (!isHexString3(value)) {
    logger5.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger5.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak2563(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify3(data));
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn2 = __toESM(require_bn());

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version7 = "bignumber/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN2 = import_bn2.default.BN;
var logger6 = new Logger3(version7);
var _constructorGuard3 = {};
var MAX_SAFE2 = 9007199254740991;
function isBigNumberish2(value) {
  return value != null && (BigNumber3.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString3(value) || typeof value === "bigint" || isBytes3(value));
}
var _warnedToStringRadix2 = false;
var BigNumber3 = class {
  constructor(constructorGuard, hex) {
    logger6.checkNew(new.target, BigNumber3);
    if (constructorGuard !== _constructorGuard3) {
      logger6.throwError("cannot call constructor directly; use BigNumber.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber2(toBN2(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber2(toBN2(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return BigNumber3.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber2(toBN2(this).add(toBN2(other)));
  }
  sub(other) {
    return toBigNumber2(toBN2(this).sub(toBN2(other)));
  }
  div(other) {
    const o = BigNumber3.from(other);
    if (o.isZero()) {
      throwFault3("division by zero", "div");
    }
    return toBigNumber2(toBN2(this).div(toBN2(other)));
  }
  mul(other) {
    return toBigNumber2(toBN2(this).mul(toBN2(other)));
  }
  mod(other) {
    const value = toBN2(other);
    if (value.isNeg()) {
      throwFault3("cannot modulo negative values", "mod");
    }
    return toBigNumber2(toBN2(this).umod(value));
  }
  pow(other) {
    const value = toBN2(other);
    if (value.isNeg()) {
      throwFault3("cannot raise to negative values", "pow");
    }
    return toBigNumber2(toBN2(this).pow(value));
  }
  and(other) {
    const value = toBN2(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault3("cannot 'and' negative values", "and");
    }
    return toBigNumber2(toBN2(this).and(value));
  }
  or(other) {
    const value = toBN2(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault3("cannot 'or' negative values", "or");
    }
    return toBigNumber2(toBN2(this).or(value));
  }
  xor(other) {
    const value = toBN2(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault3("cannot 'xor' negative values", "xor");
    }
    return toBigNumber2(toBN2(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault3("cannot mask negative values", "mask");
    }
    return toBigNumber2(toBN2(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault3("cannot shift negative values", "shl");
    }
    return toBigNumber2(toBN2(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault3("cannot shift negative values", "shr");
    }
    return toBigNumber2(toBN2(this).shrn(value));
  }
  eq(other) {
    return toBN2(this).eq(toBN2(other));
  }
  lt(other) {
    return toBN2(this).lt(toBN2(other));
  }
  lte(other) {
    return toBN2(this).lte(toBN2(other));
  }
  gt(other) {
    return toBN2(this).gt(toBN2(other));
  }
  gte(other) {
    return toBN2(this).gte(toBN2(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN2(this).isZero();
  }
  toNumber() {
    try {
      return toBN2(this).toNumber();
    } catch (error) {
      throwFault3("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger6.throwError("this platform does not support BigInt", Logger3.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix2) {
          _warnedToStringRadix2 = true;
          logger6.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger6.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger3.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger6.throwError("BigNumber.toString does not accept parameters", Logger3.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN2(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof BigNumber3) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber3(_constructorGuard3, toHex2(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber3(_constructorGuard3, toHex2(new BN2(value)));
      }
      return logger6.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault3("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE2 || value <= -MAX_SAFE2) {
        throwFault3("overflow", "BigNumber.from", value);
      }
      return BigNumber3.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return BigNumber3.from(anyValue.toString());
    }
    if (isBytes3(anyValue)) {
      return BigNumber3.from(hexlify3(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return BigNumber3.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString3(hex) || hex[0] === "-" && isHexString3(hex.substring(1))) {
            return BigNumber3.from(hex);
          }
        }
      }
    }
    return logger6.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex2(value) {
  if (typeof value !== "string") {
    return toHex2(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger6.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex2(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber2(value) {
  return BigNumber3.from(toHex2(value));
}
function toBN2(value) {
  const hex = BigNumber3.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN2("-" + hex.substring(3), 16);
  }
  return new BN2(hex.substring(2), 16);
}
function throwFault3(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger6.throwError(fault, Logger3.errors.NUMERIC_FAULT, params);
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var logger7 = new Logger3(version7);
var _constructorGuard4 = {};
var Zero3 = BigNumber3.from(0);
var NegativeOne3 = BigNumber3.from(-1);
function throwFault4(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger7.throwError(message, Logger3.errors.NUMERIC_FAULT, params);
}
var zeros2 = "0";
while (zeros2.length < 256) {
  zeros2 += zeros2;
}
function getMultiplier2(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber3.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros2.substring(0, decimals);
  }
  return logger7.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed2(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  value = BigNumber3.from(value);
  const negative = value.lt(Zero3);
  if (negative) {
    value = value.mul(NegativeOne3);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed2(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger7.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger7.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger7.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault4("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber3.from(whole);
  const fractionValue = BigNumber3.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne3);
  }
  return wei;
}
var FixedFormat2 = class {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard4) {
      logger7.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier2(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof FixedFormat2) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger7.throwArgumentError("invalid fixed format", "format", value);
        }
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type) {
          logger7.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger7.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger7.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new FixedFormat2(_constructorGuard4, signed, width, decimals);
  }
};
var FixedNumber3 = class {
  constructor(constructorGuard, hex, value, format) {
    logger7.checkNew(new.target, FixedNumber3);
    if (constructorGuard !== _constructorGuard4) {
      logger7.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger7.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed2(this._value, this.format.decimals);
    const b = parseFixed2(other._value, other.format.decimals);
    return FixedNumber3.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed2(this._value, this.format.decimals);
    const b = parseFixed2(other._value, other.format.decimals);
    return FixedNumber3.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed2(this._value, this.format.decimals);
    const b = parseFixed2(other._value, other.format.decimals);
    return FixedNumber3.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed2(this._value, this.format.decimals);
    const b = parseFixed2(other._value, other.format.decimals);
    return FixedNumber3.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber3.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE2.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber3.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE2.toFormat(result.format));
    }
    return result;
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger7.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = FixedNumber3.from("1" + zeros2.substring(0, decimals), this.format);
    const bump = BUMP2.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger7.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber3.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad3(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber3.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish2(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return FixedNumber3.fromString(formatFixed2(value, decimals), FixedFormat2.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat2.from(format);
    const numeric = parseFixed2(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero3)) {
      throwFault4("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad3(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed2(numeric, fixedFormat.decimals);
    return new FixedNumber3(_constructorGuard4, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat2.from(format);
    if (arrayify3(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber3.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed2(numeric, fixedFormat.decimals);
    return new FixedNumber3(_constructorGuard4, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return FixedNumber3.fromString(value, format);
    }
    if (isBytes3(value)) {
      return FixedNumber3.fromBytes(value, format);
    }
    try {
      return FixedNumber3.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger3.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger7.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE2 = FixedNumber3.from(1);
var BUMP2 = FixedNumber3.from("0.5");

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne4 = BigNumber3.from(-1);
var Zero4 = BigNumber3.from(0);
var One2 = BigNumber3.from(1);
var Two2 = BigNumber3.from(2);
var WeiPerEther2 = BigNumber3.from("1000000000000000000");
var MaxUint2562 = BigNumber3.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt2562 = BigNumber3.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt2562 = BigNumber3.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/lib.esm/_version.js
var version8 = "strings/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/lib.esm/utf8.js
var logger8 = new Logger3(version8);
var UnicodeNormalizationForm2;
(function(UnicodeNormalizationForm3) {
  UnicodeNormalizationForm3["current"] = "";
  UnicodeNormalizationForm3["NFC"] = "NFC";
  UnicodeNormalizationForm3["NFD"] = "NFD";
  UnicodeNormalizationForm3["NFKC"] = "NFKC";
  UnicodeNormalizationForm3["NFKD"] = "NFKD";
})(UnicodeNormalizationForm2 || (UnicodeNormalizationForm2 = {}));
var Utf8ErrorReason2;
(function(Utf8ErrorReason3) {
  Utf8ErrorReason3["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason3["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason3["OVERRUN"] = "string overrun";
  Utf8ErrorReason3["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason3["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason3["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason3["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason2 || (Utf8ErrorReason2 = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger8.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason2.BAD_PREFIX || reason === Utf8ErrorReason2.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason2.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason2.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs2 = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs2.error;
  }
  bytes = arrayify3(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason2.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason2.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason2.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason2.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason2.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason2.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason2.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes2(str, form = UnicodeNormalizationForm2.current) {
  if (form != UnicodeNormalizationForm2.current) {
    logger8.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify3(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String2(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

// ../../node_modules/@aragon/sdk-client/dist/sdk-client.esm.js
init_lib23();
init_lib25();

// ../../node_modules/@aragon/sdk-ipfs/dist/sdk-ipfs.esm.js
var import_isomorphic_unfetch = __toESM(require_browser2());
function _AsyncGenerator(gen) {
  var front, back;
  function resume(key, arg) {
    try {
      var result = gen[key](arg), value = result.value, overloaded = value instanceof _OverloadYield;
      Promise.resolve(overloaded ? value.v : value).then(function(arg2) {
        if (overloaded) {
          var nextKey = "return" === key ? "return" : "next";
          if (!value.k || arg2.done)
            return resume(nextKey, arg2);
          arg2 = gen[nextKey](arg2).value;
        }
        settle(result.done ? "return" : "normal", arg2);
      }, function(err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }
  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value,
          done: true
        });
        break;
      case "throw":
        front.reject(value);
        break;
      default:
        front.resolve({
          value,
          done: false
        });
    }
    (front = front.next) ? resume(front.key, front.arg) : back = null;
  }
  this._invoke = function(key, arg) {
    return new Promise(function(resolve, reject) {
      var request = {
        key,
        arg,
        resolve,
        reject,
        next: null
      };
      back ? back = back.next = request : (front = back = request, resume(key, arg));
    });
  }, "function" != typeof gen.return && (this.return = void 0);
}
_AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function() {
  return this;
}, _AsyncGenerator.prototype.next = function(arg) {
  return this._invoke("next", arg);
}, _AsyncGenerator.prototype.throw = function(arg) {
  return this._invoke("throw", arg);
}, _AsyncGenerator.prototype.return = function(arg) {
  return this._invoke("return", arg);
};
function _OverloadYield(value, kind) {
  this.v = value, this.k = kind;
}
function _asyncGeneratorDelegate(inner) {
  var iter = {}, waiting = false;
  function pump(key, value) {
    return waiting = true, value = new Promise(function(resolve) {
      resolve(inner[key](value));
    }), {
      done: false,
      value: new _OverloadYield(value, 1)
    };
  }
  return iter["undefined" != typeof Symbol && Symbol.iterator || "@@iterator"] = function() {
    return this;
  }, iter.next = function(value) {
    return waiting ? (waiting = false, value) : pump("next", value);
  }, "function" == typeof inner.throw && (iter.throw = function(value) {
    if (waiting)
      throw waiting = false, value;
    return pump("throw", value);
  }), "function" == typeof inner.return && (iter.return = function(value) {
    return waiting ? (waiting = false, value) : pump("return", value);
  }), iter;
}
function _asyncIterator(iterable) {
  var method, async, sync, retry = 2;
  for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--; ) {
    if (async && null != (method = iterable[async]))
      return method.call(iterable);
    if (sync && null != (method = iterable[sync]))
      return new AsyncFromSyncIterator(method.call(iterable));
    async = "@@asyncIterator", sync = "@@iterator";
  }
  throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(s) {
  function AsyncFromSyncIteratorContinuation(r) {
    if (Object(r) !== r)
      return Promise.reject(new TypeError(r + " is not an object."));
    var done = r.done;
    return Promise.resolve(r.value).then(function(value) {
      return {
        value,
        done
      };
    });
  }
  return AsyncFromSyncIterator = function(s2) {
    this.s = s2, this.n = s2.next;
  }, AsyncFromSyncIterator.prototype = {
    s: null,
    n: null,
    next: function() {
      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
    },
    return: function(value) {
      var ret = this.s.return;
      return void 0 === ret ? Promise.resolve({
        value,
        done: true
      }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
    },
    throw: function(value) {
      var thr = this.s.return;
      return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
    }
  }, new AsyncFromSyncIterator(s);
}
function _awaitAsyncGenerator(value) {
  return new _OverloadYield(value, 0);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap2(innerFn, outerFn, self2, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context2(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self2, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap2;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self2, context) {
    var state = "suspendedStart";
    return function(method, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method)
          throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self2, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (void 0 === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method))
          return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context2(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object = Object(val), keys = [];
    for (var key in object)
      keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object)
          return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports.values = values, Context2.prototype = {
    constructor: Context2,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function _wrapAsyncGenerator(fn) {
  return function() {
    return new _AsyncGenerator(fn.apply(this, arguments));
  };
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Network;
(function(Network2) {
  function request(_x5, _x6, _x7) {
    return _request.apply(this, arguments);
  }
  function _request() {
    _request = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(config, path, _ref) {
      var method, params, body, signal, url, headers, endpoint, _i2, _Object$entries2, _Object$entries2$_i, key, value, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              method = _ref.method, params = _ref.params, body = _ref.body, signal = _ref.signal;
              url = config.url, headers = config.headers;
              endpoint = new URL(path, url);
              for (_i2 = 0, _Object$entries2 = Object.entries(params || {}); _i2 < _Object$entries2.length; _i2++) {
                _Object$entries2$_i = _Object$entries2[_i2], key = _Object$entries2$_i[0], value = _Object$entries2$_i[1];
                if (value != null) {
                  endpoint.searchParams.set(key, String(value));
                }
              }
              _context3.next = 6;
              return (0, import_isomorphic_unfetch.default)(endpoint.href, {
                method: method || "GET",
                headers,
                body,
                signal
              });
            case 6:
              response = _context3.sent;
              if (response.ok) {
                _context3.next = 9;
                break;
              }
              throw Object.assign(new Error(response.status + ": " + response.statusText), {
                response
              });
            case 9:
              return _context3.abrupt("return", response.json());
            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _request.apply(this, arguments);
  }
  Network2.request = request;
  function stream(_x, _x2, _x3) {
    return _stream.apply(this, arguments);
  }
  function _stream() {
    _stream = _wrapAsyncGenerator(function(_ref2, path, _ref3) {
      var url = _ref2.url, headers = _ref2.headers;
      var method = _ref3.method, params = _ref3.params, body = _ref3.body, signal = _ref3.signal;
      return _regeneratorRuntime().mark(function _callee() {
        var endpoint, _i, _Object$entries, _Object$entries$_i, key, value, res, msg;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                endpoint = new URL(path, url);
                for (_i = 0, _Object$entries = Object.entries(params || {}); _i < _Object$entries.length; _i++) {
                  _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], value = _Object$entries$_i[1];
                  if (value != null) {
                    endpoint.searchParams.set(key, String(value));
                  }
                }
                method = method || "GET";
                _context.next = 5;
                return _awaitAsyncGenerator((0, import_isomorphic_unfetch.default)(endpoint.href, {
                  method,
                  headers,
                  body,
                  signal
                }));
              case 5:
                res = _context.sent;
                if (res.ok) {
                  _context.next = 9;
                  break;
                }
                msg = res.status + ": " + res.statusText;
                throw Object.assign(new Error(msg), {
                  response: res
                });
              case 9:
                if (res.body) {
                  _context.next = 11;
                  break;
                }
                throw Object.assign(new Error("Missing response body"), {
                  response: res
                });
              case 11:
                return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(streamedBytes(res.body))), "t0", 12);
              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })();
    });
    return _stream.apply(this, arguments);
  }
  Network2.stream = stream;
  function streamedBytes(_x4) {
    return _streamedBytes.apply(this, arguments);
  }
  function _streamedBytes() {
    _streamedBytes = _wrapAsyncGenerator(_regeneratorRuntime().mark(function _callee2(stream2) {
      var error, reader, result;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              error = null;
              reader = stream2.getReader();
              _context2.prev = 2;
            case 3:
              _context2.next = 6;
              return _awaitAsyncGenerator(reader.read());
            case 6:
              result = _context2.sent;
              if (!result.done) {
                _context2.next = 9;
                break;
              }
              return _context2.abrupt("break", 13);
            case 9:
              _context2.next = 11;
              return result.value;
            case 11:
              _context2.next = 3;
              break;
            case 13:
              _context2.next = 18;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](2);
              error = _context2.t0;
            case 18:
              _context2.prev = 18;
              reader.cancel();
              reader.releaseLock();
              return _context2.finish(18);
            case 22:
              if (!error) {
                _context2.next = 24;
                break;
              }
              throw error;
            case 24:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[2, 15, 18, 22]]);
    }));
    return _streamedBytes.apply(this, arguments);
  }
})(Network || (Network = {}));
var Helpers;
(function(Helpers2) {
  function getName3(file) {
    return file.name;
  }
  Helpers2.getName = getName3;
  function handleError(error) {
    var _error$response;
    if ((_error$response = error.response) != null && _error$response.ok) {
      return new Error("Error parsing body");
    } else {
      return error;
    }
  }
  Helpers2.handleError = handleError;
  function streamToUInt8Array(_x) {
    return _streamToUInt8Array.apply(this, arguments);
  }
  function _streamToUInt8Array() {
    _streamToUInt8Array = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(stream) {
      var chunks, byteCount, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, mergedArray, lastIndex, _i, _chunks, _chunk;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              chunks = [];
              byteCount = 0;
              _iteratorAbruptCompletion = false;
              _didIteratorError = false;
              _context.prev = 4;
              _iterator = _asyncIterator(stream);
            case 6:
              _context.next = 8;
              return _iterator.next();
            case 8:
              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {
                _context.next = 15;
                break;
              }
              chunk = _step.value;
              chunks.push(chunk);
              byteCount += chunk.length;
            case 12:
              _iteratorAbruptCompletion = false;
              _context.next = 6;
              break;
            case 15:
              _context.next = 21;
              break;
            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](4);
              _didIteratorError = true;
              _iteratorError = _context.t0;
            case 21:
              _context.prev = 21;
              _context.prev = 22;
              if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
                _context.next = 26;
                break;
              }
              _context.next = 26;
              return _iterator["return"]();
            case 26:
              _context.prev = 26;
              if (!_didIteratorError) {
                _context.next = 29;
                break;
              }
              throw _iteratorError;
            case 29:
              return _context.finish(26);
            case 30:
              return _context.finish(21);
            case 31:
              mergedArray = new Uint8Array(byteCount);
              lastIndex = 0;
              for (_i = 0, _chunks = chunks; _i < _chunks.length; _i++) {
                _chunk = _chunks[_i];
                mergedArray.set(_chunk, lastIndex);
                lastIndex += _chunk.length;
              }
              return _context.abrupt("return", mergedArray);
            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 17, 21, 31], [22, , 26, 30]]);
    }));
    return _streamToUInt8Array.apply(this, arguments);
  }
  Helpers2.streamToUInt8Array = streamToUInt8Array;
  function toVersionResponse(data) {
    var version12 = data.Version, commit = data.Commit, repo = data.Repo, system = data.System, golang = data.Golang;
    return {
      version: version12,
      commit,
      repo,
      system,
      golang
    };
  }
  Helpers2.toVersionResponse = toVersionResponse;
  function toNodeInfoResponse(data) {
    var id2 = data.ID, addresses = data.Addresses, agentVersion = data.AgentVersion, protocolVersion = data.ProtocolVersion, protocols = data.Protocols, publicKey = data.PublicKey;
    return {
      id: id2,
      addresses,
      agentVersion,
      protocolVersion,
      protocols,
      publicKey
    };
  }
  Helpers2.toNodeInfoResponse = toNodeInfoResponse;
  function toAddResponse(data) {
    var bytes = data.Bytes, hash = data.Hash, name = data.Name, size = data.Size;
    return {
      bytes,
      hash,
      name,
      size
    };
  }
  Helpers2.toAddResponse = toAddResponse;
  function toPinResponse(data) {
    var pins = data.Pins, progress = data.Progress;
    return {
      pins,
      progress
    };
  }
  Helpers2.toPinResponse = toPinResponse;
  function getVersionParams(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      number: options.number,
      commit: options.commit,
      all: options.all
    });
  }
  Helpers2.getVersionParams = getVersionParams;
  function getNodeInfoParams(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      arg: options.arg,
      format: options.format,
      "peerid-base": options.peeridBase
    });
  }
  Helpers2.getNodeInfoParams = getNodeInfoParams;
  function getAddParams(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      quiet: options.quiet,
      quieter: options.quieter,
      silent: options.silent,
      progress: options.progress,
      trickle: options.trickle,
      "only-hash": options.onlyHash,
      "wrap-with-directory": options.wrapWithDirectory,
      chunker: options.chunker,
      pin: options.pin,
      "raw-leaves": options.rawLeaves,
      nocopy: options.noCopy,
      fscache: options.fsCache,
      "cid-version": options.cidVersion,
      hash: options.hash,
      inline: options.inline,
      "inline-limit": options.inlineLimit
    });
  }
  Helpers2.getAddParams = getAddParams;
  function getCatParams(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      offset: options.offset,
      length: options.length,
      progress: options.progress
    });
  }
  Helpers2.getCatParams = getCatParams;
  function getPinOptions(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      recursive: options.recursive,
      progress: options.progress
    });
  }
  Helpers2.getPinOptions = getPinOptions;
  function getUnpinOptions(options) {
    if (options === void 0) {
      options = {};
    }
    return encodeParams({
      recursive: options.recursive
    });
  }
  Helpers2.getUnpinOptions = getUnpinOptions;
  function encodeParams(options) {
    return Object.fromEntries(Object.entries(options).filter(function(_ref) {
      var v = _ref[1];
      return v != null;
    }));
  }
})(Helpers || (Helpers = {}));
var API;
(function(API2) {
  function version12(cluster, options) {
    if (options === void 0) {
      options = {};
    }
    return Network.request(cluster, "version", {
      method: "POST",
      params: Helpers.getVersionParams(options),
      signal: options.signal
    }).then(function(response) {
      return Helpers.toVersionResponse(response);
    })["catch"](function(e) {
      throw Helpers.handleError(e);
    });
  }
  API2.version = version12;
  function nodeInfo(cluster, options) {
    if (options === void 0) {
      options = {};
    }
    return Network.request(cluster, "id", {
      method: "POST",
      params: Helpers.getNodeInfoParams(options),
      signal: options.signal
    }).then(function(response) {
      return Helpers.toNodeInfoResponse(response);
    })["catch"](function(e) {
      throw Helpers.handleError(e);
    });
  }
  API2.nodeInfo = nodeInfo;
  function add(cluster, file, options) {
    if (options === void 0) {
      options = {};
    }
    if (!(file instanceof File) && !(file instanceof Blob) && !(file instanceof Uint8Array) && typeof file !== "string") {
      throw new Error("Invalid file");
    }
    var body = new FormData();
    if (typeof file === "string") {
      body.append("path", file);
    } else if (file instanceof Uint8Array) {
      body.append("path", new Blob([file]));
    } else {
      body.append("path", file, getName(file) || "file");
    }
    return Network.request(cluster, "add", {
      params: Helpers.getAddParams(options),
      method: "POST",
      body,
      signal: options.signal
    }).then(function(response) {
      return Helpers.toAddResponse(response);
    })["catch"](function(e) {
      throw Helpers.handleError(e);
    });
  }
  API2.add = add;
  function cat(_x, _x2, _x3) {
    return _cat.apply(this, arguments);
  }
  function _cat() {
    _cat = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(cluster, path, options) {
      var stream;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }
              if (path) {
                _context.next = 3;
                break;
              }
              throw new Error("Invalid CID");
            case 3:
              stream = Network.stream(cluster, "cat", {
                method: "POST",
                params: _extends({}, Helpers.getCatParams(options), {
                  arg: path
                }),
                signal: options.signal
              });
              return _context.abrupt("return", Helpers.streamToUInt8Array(stream));
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _cat.apply(this, arguments);
  }
  API2.cat = cat;
  function pin(cluster, path, options) {
    if (options === void 0) {
      options = {};
    }
    return Network.request(cluster, "pin/add", {
      params: _extends({}, Helpers.getPinOptions(options), {
        arg: path
      }),
      method: "POST",
      signal: options.signal
    }).then(function(response) {
      return Helpers.toPinResponse(response);
    });
  }
  API2.pin = pin;
  function unpin(cluster, path, options) {
    if (options === void 0) {
      options = {};
    }
    return Network.request(cluster, "pin/rm", {
      params: _extends({}, Helpers.getUnpinOptions(options), {
        arg: path
      }),
      method: "POST",
      signal: options.signal
    }).then(function(response) {
      return Helpers.toPinResponse(response);
    });
  }
  API2.unpin = unpin;
})(API || (API = {}));
var getName = function getName2(file) {
  return file.name;
};
var Client = function() {
  function Client3(url, headers) {
    var newUrl = typeof url === "string" ? new URL(url) : url;
    if (!newUrl.pathname.endsWith("/")) {
      newUrl.pathname += "/";
    }
    this.url = newUrl;
    this.headers = headers || {};
  }
  var _proto = Client3.prototype;
  _proto.version = function version12(options) {
    return API.version(this, options);
  };
  _proto.nodeInfo = function nodeInfo(options) {
    return API.nodeInfo(this, options);
  };
  _proto.add = function add(file, options) {
    return API.add(this, file, options);
  };
  _proto.cat = function cat(path, options) {
    return API.cat(this, path, options);
  };
  _proto.pin = function pin(path, options) {
    return API.pin(this, path, options);
  };
  _proto.unpin = function unpin(path, options) {
    return API.unpin(this, path, options);
  };
  return Client3;
}();

// ../../node_modules/@aragon/sdk-client/dist/sdk-client.esm.js
init_lib11();
init_lib12();

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn3 = __toESM(require_bn());

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version9 = "bignumber/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN3 = import_bn3.default.BN;
var logger9 = new Logger3(version9);
var _constructorGuard5 = {};
var MAX_SAFE3 = 9007199254740991;
function isBigNumberish3(value) {
  return value != null && (BigNumber4.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString3(value) || typeof value === "bigint" || isBytes3(value));
}
var _warnedToStringRadix3 = false;
var BigNumber4 = class {
  constructor(constructorGuard, hex) {
    logger9.checkNew(new.target, BigNumber4);
    if (constructorGuard !== _constructorGuard5) {
      logger9.throwError("cannot call constructor directly; use BigNumber.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber3(toBN3(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber3(toBN3(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return BigNumber4.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber3(toBN3(this).add(toBN3(other)));
  }
  sub(other) {
    return toBigNumber3(toBN3(this).sub(toBN3(other)));
  }
  div(other) {
    const o = BigNumber4.from(other);
    if (o.isZero()) {
      throwFault5("division by zero", "div");
    }
    return toBigNumber3(toBN3(this).div(toBN3(other)));
  }
  mul(other) {
    return toBigNumber3(toBN3(this).mul(toBN3(other)));
  }
  mod(other) {
    const value = toBN3(other);
    if (value.isNeg()) {
      throwFault5("cannot modulo negative values", "mod");
    }
    return toBigNumber3(toBN3(this).umod(value));
  }
  pow(other) {
    const value = toBN3(other);
    if (value.isNeg()) {
      throwFault5("cannot raise to negative values", "pow");
    }
    return toBigNumber3(toBN3(this).pow(value));
  }
  and(other) {
    const value = toBN3(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault5("cannot 'and' negative values", "and");
    }
    return toBigNumber3(toBN3(this).and(value));
  }
  or(other) {
    const value = toBN3(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault5("cannot 'or' negative values", "or");
    }
    return toBigNumber3(toBN3(this).or(value));
  }
  xor(other) {
    const value = toBN3(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault5("cannot 'xor' negative values", "xor");
    }
    return toBigNumber3(toBN3(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault5("cannot mask negative values", "mask");
    }
    return toBigNumber3(toBN3(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault5("cannot shift negative values", "shl");
    }
    return toBigNumber3(toBN3(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault5("cannot shift negative values", "shr");
    }
    return toBigNumber3(toBN3(this).shrn(value));
  }
  eq(other) {
    return toBN3(this).eq(toBN3(other));
  }
  lt(other) {
    return toBN3(this).lt(toBN3(other));
  }
  lte(other) {
    return toBN3(this).lte(toBN3(other));
  }
  gt(other) {
    return toBN3(this).gt(toBN3(other));
  }
  gte(other) {
    return toBN3(this).gte(toBN3(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN3(this).isZero();
  }
  toNumber() {
    try {
      return toBN3(this).toNumber();
    } catch (error) {
      throwFault5("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger9.throwError("this platform does not support BigInt", Logger3.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix3) {
          _warnedToStringRadix3 = true;
          logger9.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger9.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger3.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger9.throwError("BigNumber.toString does not accept parameters", Logger3.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN3(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof BigNumber4) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber4(_constructorGuard5, toHex3(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber4(_constructorGuard5, toHex3(new BN3(value)));
      }
      return logger9.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault5("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE3 || value <= -MAX_SAFE3) {
        throwFault5("overflow", "BigNumber.from", value);
      }
      return BigNumber4.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return BigNumber4.from(anyValue.toString());
    }
    if (isBytes3(anyValue)) {
      return BigNumber4.from(hexlify3(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return BigNumber4.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString3(hex) || hex[0] === "-" && isHexString3(hex.substring(1))) {
            return BigNumber4.from(hex);
          }
        }
      }
    }
    return logger9.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex3(value) {
  if (typeof value !== "string") {
    return toHex3(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger9.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex3(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber3(value) {
  return BigNumber4.from(toHex3(value));
}
function toBN3(value) {
  const hex = BigNumber4.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN3("-" + hex.substring(3), 16);
  }
  return new BN3(hex.substring(2), 16);
}
function throwFault5(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger9.throwError(fault, Logger3.errors.NUMERIC_FAULT, params);
}
function _base36To163(value) {
  return new BN3(value, 36).toString(16);
}

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var logger10 = new Logger3(version9);
var _constructorGuard6 = {};
var Zero5 = BigNumber4.from(0);
var NegativeOne5 = BigNumber4.from(-1);
function throwFault6(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger10.throwError(message, Logger3.errors.NUMERIC_FAULT, params);
}
var zeros3 = "0";
while (zeros3.length < 256) {
  zeros3 += zeros3;
}
function getMultiplier3(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber4.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros3.substring(0, decimals);
  }
  return logger10.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed3(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier3(decimals);
  value = BigNumber4.from(value);
  const negative = value.lt(Zero5);
  if (negative) {
    value = value.mul(NegativeOne5);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed3(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier3(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger10.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger10.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger10.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault6("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber4.from(whole);
  const fractionValue = BigNumber4.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne5);
  }
  return wei;
}
var FixedFormat3 = class {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard6) {
      logger10.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier3(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof FixedFormat3) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger10.throwArgumentError("invalid fixed format", "format", value);
        }
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type) {
          logger10.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger10.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger10.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new FixedFormat3(_constructorGuard6, signed, width, decimals);
  }
};
var FixedNumber4 = class {
  constructor(constructorGuard, hex, value, format) {
    logger10.checkNew(new.target, FixedNumber4);
    if (constructorGuard !== _constructorGuard6) {
      logger10.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger3.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger10.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed3(this._value, this.format.decimals);
    const b = parseFixed3(other._value, other.format.decimals);
    return FixedNumber4.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed3(this._value, this.format.decimals);
    const b = parseFixed3(other._value, other.format.decimals);
    return FixedNumber4.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed3(this._value, this.format.decimals);
    const b = parseFixed3(other._value, other.format.decimals);
    return FixedNumber4.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed3(this._value, this.format.decimals);
    const b = parseFixed3(other._value, other.format.decimals);
    return FixedNumber4.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber4.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE3.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber4.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE3.toFormat(result.format));
    }
    return result;
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger10.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = FixedNumber4.from("1" + zeros3.substring(0, decimals), this.format);
    const bump = BUMP3.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger10.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber4.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad3(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber4.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish3(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return FixedNumber4.fromString(formatFixed3(value, decimals), FixedFormat3.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat3.from(format);
    const numeric = parseFixed3(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero5)) {
      throwFault6("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad3(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed3(numeric, fixedFormat.decimals);
    return new FixedNumber4(_constructorGuard6, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat3.from(format);
    if (arrayify3(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber4.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed3(numeric, fixedFormat.decimals);
    return new FixedNumber4(_constructorGuard6, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return FixedNumber4.fromString(value, format);
    }
    if (isBytes3(value)) {
      return FixedNumber4.fromBytes(value, format);
    }
    try {
      return FixedNumber4.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger3.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger10.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE3 = FixedNumber4.from(1);
var BUMP3 = FixedNumber4.from("0.5");

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/rlp/lib.esm/_version.js
var version10 = "rlp/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/rlp/lib.esm/index.js
var logger11 = new Logger3(version10);

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/lib.esm/_version.js
var version11 = "address/5.5.0";

// ../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/lib.esm/index.js
var logger12 = new Logger3(version11);
function getChecksumAddress(address) {
  if (!isHexString3(address, 20)) {
    logger12.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify3(keccak2563(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block2 = expanded.substring(0, safeDigits);
    expanded = parseInt(block2, 10) % 97 + expanded.substring(block2.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress2(address) {
  let result = null;
  if (typeof address !== "string") {
    logger12.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger12.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger12.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To163(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger12.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress2(address) {
  try {
    getAddress2(address);
    return true;
  } catch (error) {
  }
  return false;
}

// ../../node_modules/@aragon/sdk-client/dist/sdk-client.esm.js
function _AsyncGenerator2(gen) {
  var front, back;
  function resume(key, arg) {
    try {
      var result = gen[key](arg), value = result.value, overloaded = value instanceof _OverloadYield2;
      Promise.resolve(overloaded ? value.v : value).then(function(arg2) {
        if (overloaded) {
          var nextKey = "return" === key ? "return" : "next";
          if (!value.k || arg2.done)
            return resume(nextKey, arg2);
          arg2 = gen[nextKey](arg2).value;
        }
        settle(result.done ? "return" : "normal", arg2);
      }, function(err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }
  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value,
          done: true
        });
        break;
      case "throw":
        front.reject(value);
        break;
      default:
        front.resolve({
          value,
          done: false
        });
    }
    (front = front.next) ? resume(front.key, front.arg) : back = null;
  }
  this._invoke = function(key, arg) {
    return new Promise(function(resolve, reject) {
      var request = {
        key,
        arg,
        resolve,
        reject,
        next: null
      };
      back ? back = back.next = request : (front = back = request, resume(key, arg));
    });
  }, "function" != typeof gen.return && (this.return = void 0);
}
_AsyncGenerator2.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function() {
  return this;
}, _AsyncGenerator2.prototype.next = function(arg) {
  return this._invoke("next", arg);
}, _AsyncGenerator2.prototype.throw = function(arg) {
  return this._invoke("throw", arg);
}, _AsyncGenerator2.prototype.return = function(arg) {
  return this._invoke("return", arg);
};
function _OverloadYield2(value, kind) {
  this.v = value, this.k = kind;
}
function _asyncGeneratorDelegate2(inner) {
  var iter = {}, waiting = false;
  function pump(key, value) {
    return waiting = true, value = new Promise(function(resolve) {
      resolve(inner[key](value));
    }), {
      done: false,
      value: new _OverloadYield2(value, 1)
    };
  }
  return iter["undefined" != typeof Symbol && Symbol.iterator || "@@iterator"] = function() {
    return this;
  }, iter.next = function(value) {
    return waiting ? (waiting = false, value) : pump("next", value);
  }, "function" == typeof inner.throw && (iter.throw = function(value) {
    if (waiting)
      throw waiting = false, value;
    return pump("throw", value);
  }), "function" == typeof inner.return && (iter.return = function(value) {
    return waiting ? (waiting = false, value) : pump("return", value);
  }), iter;
}
function _asyncIterator2(iterable) {
  var method, async, sync, retry = 2;
  for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--; ) {
    if (async && null != (method = iterable[async]))
      return method.call(iterable);
    if (sync && null != (method = iterable[sync]))
      return new AsyncFromSyncIterator2(method.call(iterable));
    async = "@@asyncIterator", sync = "@@iterator";
  }
  throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator2(s) {
  function AsyncFromSyncIteratorContinuation(r) {
    if (Object(r) !== r)
      return Promise.reject(new TypeError(r + " is not an object."));
    var done = r.done;
    return Promise.resolve(r.value).then(function(value) {
      return {
        value,
        done
      };
    });
  }
  return AsyncFromSyncIterator2 = function(s2) {
    this.s = s2, this.n = s2.next;
  }, AsyncFromSyncIterator2.prototype = {
    s: null,
    n: null,
    next: function() {
      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
    },
    return: function(value) {
      var ret = this.s.return;
      return void 0 === ret ? Promise.resolve({
        value,
        done: true
      }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
    },
    throw: function(value) {
      var thr = this.s.return;
      return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
    }
  }, new AsyncFromSyncIterator2(s);
}
function _awaitAsyncGenerator2(value) {
  return new _OverloadYield2(value, 0);
}
function _regeneratorRuntime2() {
  _regeneratorRuntime2 = function() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap2(innerFn, outerFn, self2, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context2(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self2, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap2;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self2, context) {
    var state = "suspendedStart";
    return function(method, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method)
          throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self2, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method, method = delegate.iterator[methodName];
    if (void 0 === method)
      return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context2(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object = Object(val), keys = [];
    for (var key in object)
      keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object)
          return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports.values = values, Context2.prototype = {
    constructor: Context2,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function _wrapAsyncGenerator2(fn) {
  return function() {
    return new _AsyncGenerator2(fn.apply(this, arguments));
  };
}
function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator2(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  strings.raw = raw;
  return strings;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var erc20ContractAbi = [{
  name: "Transfer",
  inputs: [{
    type: "address",
    name: "sender",
    indexed: true
  }, {
    type: "address",
    name: "receiver",
    indexed: true
  }, {
    type: "uint256",
    name: "value",
    indexed: false
  }],
  anonymous: false,
  type: "event"
}, {
  name: "Approval",
  inputs: [{
    type: "address",
    name: "owner",
    indexed: true
  }, {
    type: "address",
    name: "spender",
    indexed: true
  }, {
    type: "uint256",
    name: "value",
    indexed: false
  }],
  anonymous: false,
  type: "event"
}, {
  name: "transfer",
  outputs: [{
    type: "bool",
    name: ""
  }],
  inputs: [{
    type: "address",
    name: "_to"
  }, {
    type: "uint256",
    name: "_value"
  }],
  stateMutability: "nonpayable",
  type: "function"
}, {
  name: "approve",
  outputs: [{
    type: "bool",
    name: ""
  }],
  inputs: [{
    type: "address",
    name: "_spender"
  }, {
    type: "uint256",
    name: "_value"
  }],
  stateMutability: "nonpayable",
  type: "function"
}, {
  name: "symbol",
  outputs: [{
    type: "string",
    name: ""
  }],
  inputs: [],
  stateMutability: "view",
  type: "function"
}, {
  name: "decimals",
  outputs: [{
    type: "uint256",
    name: ""
  }],
  inputs: [],
  stateMutability: "view",
  type: "function"
}, {
  name: "balanceOf",
  outputs: [{
    type: "uint256",
    name: ""
  }],
  inputs: [{
    type: "address",
    name: "arg0"
  }],
  stateMutability: "view",
  type: "function"
}, {
  name: "allowance",
  outputs: [{
    type: "uint256",
    name: ""
  }],
  inputs: [{
    type: "address",
    name: "arg0"
  }, {
    type: "address",
    name: "arg1"
  }],
  stateMutability: "view",
  type: "function"
}, {
  name: "totalSupply",
  outputs: [{
    type: "uint256",
    name: ""
  }],
  inputs: [],
  stateMutability: "view",
  type: "function"
}];
var _templateObject;
var _templateObject2;
var QueryDao = (0, import_graphql_request.gql)(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  query Dao($address: ID!) {\n    dao(id: $address){\n      id\n      subdomain\n      metadata\n      createdAt\n      plugins{\n        id\n        __typename\n      }\n    }\n  }\n"])));
var QueryDaos = (0, import_graphql_request.gql)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n  query Daos ($limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: Dao_orderBy!) {\n    daos(first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n      id\n      subdomain\n      metadata\n      plugins{\n        id\n        __typename\n      }\n    }\n  }\n"])));
var _templateObject$1;
var QueryTokenBalances = (0, import_graphql_request.gql)(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteralLoose(["\nquery TokenBalances($where: TokenBalance_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenBalance_orderBy!) {\n  tokenBalances (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    lastUpdated\n    __typename\n    ... on ERC20Balance {\n      balance\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n    }\n    ... on ERC721Balance {\n      token {\n        name\n        symbol\n        id\n      }\n    }\n    ... on NativeBalance {\n      balance\n    }\n  }\n}\n"])));
var _templateObject$2;
var QueryTokenTransfers = (0, import_graphql_request.gql)(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteralLoose(["\nquery TokenTransfers($where: TokenTransfer_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenTransfer_orderBy!) {\n  tokenTransfers (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    from\n    to\n    type\n    createdAt\n    txHash\n    proposal{\n      id\n    }\n    __typename\n    ... on ERC20Transfer {\n      amount\n      token {\n        id\n        name\n        symbol\n        decimals\n      }\n    }\n    ... on ERC721Transfer {\n      token{\n      	id\n        name\n        symbol\n      }\n      \n    }\n    ... on NativeTransfer {\n      amount\n    }\n  }\n}\n"])));
var Permissions = {
  UPGRADE_PERMISSION: "UPGRADE_PERMISSION",
  SET_METADATA_PERMISSION: "SET_METADATA_PERMISSION",
  EXECUTE_PERMISSION: "EXECUTE_PERMISSION",
  WITHDRAW_PERMISSION: "WITHDRAW_PERMISSION",
  SET_SIGNATURE_VALIDATOR_PERMISSION: "SET_SIGNATURE_VALIDATOR_PERMISSION",
  SET_TRUSTED_FORWARDER_PERMISSION: "SET_TRUSTED_FORWARDER_PERMISSION",
  ROOT_PERMISSION: "ROOT_PERMISSION",
  CREATE_VERSION_PERMISSION: "CREATE_VERSION_PERMISSION",
  REGISTER_PERMISSION: "REGISTER_PERMISSION",
  REGISTER_DAO_PERMISSION: "REGISTER_DAO_PERMISSION",
  REGISTER_ENS_SUBDOMAIN_PERMISSION: "REGISTER_ENS_SUBDOMAIN_PERMISSION",
  MINT_PERMISSION: "MINT_PERMISSION",
  MERKLE_MINT_PERMISSION: "MERKLE_MINT_PERMISSION",
  MODIFY_ALLOWLIST_PERMISSION: "MODIFY_ALLOWLIST_PERMISSION",
  SET_CONFIGURATION_PERMISSION: "SET_CONFIGURATION_PERMISSION"
};
var PermissionIds = Object.entries(Permissions).reduce(function(acc, _ref) {
  var _extends22;
  var k = _ref[0], v = _ref[1];
  return _extends2({}, acc, (_extends22 = {}, _extends22[k + "_ID"] = keccak2563(toUtf8Bytes2(v)), _extends22));
}, {});
Object.freeze(Permissions);
Object.freeze(PermissionIds);
var DaoCreationSteps;
(function(DaoCreationSteps2) {
  DaoCreationSteps2["CREATING"] = "creating";
  DaoCreationSteps2["DONE"] = "done";
})(DaoCreationSteps || (DaoCreationSteps = {}));
var DaoDepositSteps;
(function(DaoDepositSteps2) {
  DaoDepositSteps2["CHECKED_ALLOWANCE"] = "checkedAllowance";
  DaoDepositSteps2["UPDATING_ALLOWANCE"] = "updatingAllowance";
  DaoDepositSteps2["UPDATED_ALLOWANCE"] = "updatedAllowance";
  DaoDepositSteps2["DEPOSITING"] = "depositing";
  DaoDepositSteps2["DONE"] = "done";
})(DaoDepositSteps || (DaoDepositSteps = {}));
var TransferType;
(function(TransferType2) {
  TransferType2["DEPOSIT"] = "deposit";
  TransferType2["WITHDRAW"] = "withdraw";
})(TransferType || (TransferType = {}));
var TokenType;
(function(TokenType2) {
  TokenType2["NATIVE"] = "native";
  TokenType2["ERC20"] = "erc20";
  TokenType2["ERC721"] = "erc721";
})(TokenType || (TokenType = {}));
var TransferSortBy;
(function(TransferSortBy2) {
  TransferSortBy2["CREATED_AT"] = "createdAt";
})(TransferSortBy || (TransferSortBy = {}));
var AssetBalanceSortBy;
(function(AssetBalanceSortBy2) {
  AssetBalanceSortBy2["LAST_UPDATED"] = "lastUpdated";
})(AssetBalanceSortBy || (AssetBalanceSortBy = {}));
var DaoSortBy;
(function(DaoSortBy2) {
  DaoSortBy2["CREATED_AT"] = "createdAt";
  DaoSortBy2["SUBDOMAIN"] = "subdomain";
  DaoSortBy2["POPULARITY"] = "totalProposals";
})(DaoSortBy || (DaoSortBy = {}));
var SubgraphPluginTypeName;
(function(SubgraphPluginTypeName2) {
  SubgraphPluginTypeName2["TOKEN_VOTING"] = "TokenVotingPlugin";
  SubgraphPluginTypeName2["ADDRESS_LIST"] = "AddresslistVotingPlugin";
  SubgraphPluginTypeName2["ADMIN"] = "AdminPlugin";
  SubgraphPluginTypeName2["MULTISIG"] = "MultisigPlugin";
})(SubgraphPluginTypeName || (SubgraphPluginTypeName = {}));
var SubgraphPluginTypeMap = /* @__PURE__ */ new Map([[SubgraphPluginTypeName.TOKEN_VOTING, "token-voting.plugin.dao.eth"], [SubgraphPluginTypeName.ADDRESS_LIST, "address-list-voting.plugin.dao.eth"], [SubgraphPluginTypeName.ADMIN, "admin.plugin.dao.eth"], [SubgraphPluginTypeName.MULTISIG, "multisig.plugin.dao.eth"]]);
var SubgraphTransferType;
(function(SubgraphTransferType2) {
  SubgraphTransferType2["DEPOSIT"] = "Deposit";
  SubgraphTransferType2["WITHDRAW"] = "Withdraw";
})(SubgraphTransferType || (SubgraphTransferType = {}));
var SubgraphTransferTypeMap = /* @__PURE__ */ new Map([[TransferType.DEPOSIT, SubgraphTransferType.DEPOSIT], [TransferType.WITHDRAW, SubgraphTransferType.WITHDRAW]]);
var ProposalStatus;
(function(ProposalStatus2) {
  ProposalStatus2["ACTIVE"] = "Active";
  ProposalStatus2["PENDING"] = "Pending";
  ProposalStatus2["SUCCEEDED"] = "Succeeded";
  ProposalStatus2["EXECUTED"] = "Executed";
  ProposalStatus2["DEFEATED"] = "Defeated";
})(ProposalStatus || (ProposalStatus = {}));
var VoteValues;
(function(VoteValues2) {
  VoteValues2[VoteValues2["ABSTAIN"] = 1] = "ABSTAIN";
  VoteValues2[VoteValues2["YES"] = 2] = "YES";
  VoteValues2[VoteValues2["NO"] = 3] = "NO";
})(VoteValues || (VoteValues = {}));
var VotingMode;
(function(VotingMode2) {
  VotingMode2["STANDARD"] = "Standard";
  VotingMode2["EARLY_EXECUTION"] = "EarlyExecution";
  VotingMode2["VOTE_REPLACEMENT"] = "VoteReplacement";
})(VotingMode || (VotingMode = {}));
var SubgraphVoteValues;
(function(SubgraphVoteValues2) {
  SubgraphVoteValues2["YES"] = "Yes";
  SubgraphVoteValues2["NO"] = "No";
  SubgraphVoteValues2["ABSTAIN"] = "Abstain";
})(SubgraphVoteValues || (SubgraphVoteValues = {}));
var SubgraphVoteValuesMap = /* @__PURE__ */ new Map([[SubgraphVoteValues.YES, VoteValues.YES], [SubgraphVoteValues.NO, VoteValues.NO], [SubgraphVoteValues.ABSTAIN, VoteValues.ABSTAIN]]);
var ProposalSortBy;
(function(ProposalSortBy2) {
  ProposalSortBy2["CREATED_AT"] = "createdAt";
  ProposalSortBy2["NAME"] = "name";
  ProposalSortBy2["POPULARITY"] = "popularity";
  ProposalSortBy2["VOTES"] = "votes";
})(ProposalSortBy || (ProposalSortBy = {}));
var ProposalCreationSteps;
(function(ProposalCreationSteps2) {
  ProposalCreationSteps2["CREATING"] = "creating";
  ProposalCreationSteps2["DONE"] = "done";
})(ProposalCreationSteps || (ProposalCreationSteps = {}));
var VoteProposalStep;
(function(VoteProposalStep2) {
  VoteProposalStep2["VOTING"] = "voting";
  VoteProposalStep2["DONE"] = "done";
})(VoteProposalStep || (VoteProposalStep = {}));
var ExecuteProposalStep;
(function(ExecuteProposalStep2) {
  ExecuteProposalStep2["EXECUTING"] = "executing";
  ExecuteProposalStep2["DONE"] = "done";
})(ExecuteProposalStep || (ExecuteProposalStep = {}));
var PrepareInstallationStep;
(function(PrepareInstallationStep2) {
  PrepareInstallationStep2["PREPARING"] = "preparing";
  PrepareInstallationStep2["DONE"] = "done";
})(PrepareInstallationStep || (PrepareInstallationStep = {}));
var PermissionOperationType;
(function(PermissionOperationType2) {
  PermissionOperationType2[PermissionOperationType2["GRANT"] = 0] = "GRANT";
  PermissionOperationType2[PermissionOperationType2["REVOKE"] = 1] = "REVOKE";
  PermissionOperationType2[PermissionOperationType2["GRANT_WITH_CONDITION"] = 2] = "GRANT_WITH_CONDITION";
})(PermissionOperationType || (PermissionOperationType = {}));
var SupportedNetworksArray = ["mainnet", "goerli", "matic", "maticmum"];
var DaoRole;
(function(DaoRole2) {
  DaoRole2["UPGRADE_ROLE"] = "UPGRADE_ROLE";
  DaoRole2["DAO_CONFIG_ROLE"] = "DAO_CONFIG_ROLE";
  DaoRole2["EXEC_ROLE"] = "EXEC_ROLE";
  DaoRole2["WITHDRAW_ROLE"] = "WITHDRAW_ROLE";
  DaoRole2["SET_SIGNATURE_VALIDATOR_ROLE"] = "SET_SIGNATURE_VALIDATOR_ROLE";
})(DaoRole || (DaoRole = {}));
var SortDirection;
(function(SortDirection2) {
  SortDirection2["ASC"] = "asc";
  SortDirection2["DESC"] = "desc";
})(SortDirection || (SortDirection = {}));
var daoFactoryAddressMap = /* @__PURE__ */ new Map();
var daoRegistryAddressMap = /* @__PURE__ */ new Map();
var pluginRepoRegistryAddressMap = /* @__PURE__ */ new Map();
var gasFeeEstimationFactorMap = /* @__PURE__ */ new Map();
var providersMap = /* @__PURE__ */ new Map();
var providerIdxMap = /* @__PURE__ */ new Map();
var signerMap = /* @__PURE__ */ new Map();
var Web3Module = function() {
  function Web3Module2(context) {
    providerIdxMap.set(this, -1);
    if (context.web3Providers) {
      providersMap.set(this, context.web3Providers);
      providerIdxMap.set(this, 0);
    }
    if (context.signer) {
      this.useSigner(context.signer);
    }
    if (context.daoFactoryAddress) {
      daoFactoryAddressMap.set(this, context.daoFactoryAddress);
    }
    if (context.daoRegistryAddress) {
      daoRegistryAddressMap.set(this, context.daoRegistryAddress);
    }
    if (context.pluginRepoRegistryAddress) {
      pluginRepoRegistryAddressMap.set(this, context.pluginRepoRegistryAddress);
    }
    if (context.gasFeeEstimationFactor) {
      gasFeeEstimationFactorMap.set(this, context.gasFeeEstimationFactor);
    }
    Object.freeze(Web3Module2.prototype);
    Object.freeze(this);
  }
  var _proto = Web3Module2.prototype;
  _proto.useSigner = function useSigner(signer) {
    if (!signer) {
      throw new Error("Empty wallet or signer");
    }
    signerMap.set(this, signer);
  };
  _proto.shiftProvider = function shiftProvider() {
    if (!this.providers.length) {
      throw new Error("No endpoints");
    } else if (this.providers.length <= 1) {
      throw new Error("No other endpoints");
    }
    providerIdxMap.set(this, (this.providerIdx + 1) % this.providers.length);
  };
  _proto.getSigner = function getSigner() {
    return this.signer || null;
  };
  _proto.getConnectedSigner = function getConnectedSigner() {
    var signer = this.getSigner();
    if (!signer) {
      throw new Error("No signer");
    } else if (!signer.provider && !this.getProvider()) {
      throw new Error("No provider");
    } else if (signer.provider) {
      return signer;
    }
    var provider = this.getProvider();
    if (!provider)
      throw new Error("No provider");
    signer = signer.connect(provider);
    return signer;
  };
  _proto.getProvider = function getProvider() {
    return this.providers[this.providerIdx] || null;
  };
  _proto.isUp = function isUp() {
    var provider = this.getProvider();
    if (!provider)
      return Promise.reject(new Error("No provider"));
    return provider.getNetwork().then(function() {
      return true;
    })["catch"](function() {
      return false;
    });
  };
  _proto.ensureOnline = function() {
    var _ensureOnline = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var i;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              if (this.providers.length) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", Promise.reject(new Error("No provider")));
            case 2:
              i = 0;
            case 3:
              if (!(i < this.providers.length)) {
                _context.next = 12;
                break;
              }
              _context.next = 6;
              return this.isUp();
            case 6:
              if (!_context.sent) {
                _context.next = 8;
                break;
              }
              return _context.abrupt("return");
            case 8:
              this.shiftProvider();
            case 9:
              i++;
              _context.next = 3;
              break;
            case 12:
              throw new Error("No providers available");
            case 13:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }();
  _proto.attachContract = function attachContract(address, abi) {
    if (!address)
      throw new Error("Invalid contract address");
    else if (!abi)
      throw new Error("Invalid contract ABI");
    var signer = this.getSigner();
    if (!signer && !this.getProvider()) {
      throw new Error("No signer");
    }
    var provider = this.getProvider();
    if (!provider)
      throw new Error("No provider");
    var contract = new Contract(address, abi, provider);
    if (!signer) {
      return contract;
    } else if (signer instanceof Wallet) {
      return contract.connect(signer.connect(provider));
    }
    return contract.connect(signer);
  };
  _proto.getMaxFeePerGas = function getMaxFeePerGas() {
    return this.getConnectedSigner().getFeeData().then(function(feeData) {
      if (!feeData.maxFeePerGas) {
        return Promise.reject(new Error("Cannot estimate gas"));
      }
      return feeData.maxFeePerGas.toBigInt();
    });
  };
  _proto.getApproximateGasFee = function getApproximateGasFee(estimatedFee) {
    var _this = this;
    return this.getMaxFeePerGas().then(function(maxFeePerGas) {
      var max = estimatedFee * maxFeePerGas;
      var factor = _this.gasFeeEstimationFactor * Web3Module2.PRECISION_FACTOR_BASE;
      var average = max * BigInt(Math.trunc(factor)) / BigInt(Web3Module2.PRECISION_FACTOR_BASE);
      return {
        average,
        max
      };
    });
  };
  _proto.getDaoFactoryAddress = function getDaoFactoryAddress() {
    if (!this.daoFactoryAddress) {
      throw new NoDaoFactory();
    }
    return this.daoFactoryAddress;
  };
  _proto.getPluginRepoRegistryAddress = function getPluginRepoRegistryAddress() {
    if (!this.pluginRepoRegistryAddress) {
      throw new NoPluginRepoRegistry();
    }
    return this.pluginRepoRegistryAddress;
  };
  _proto.getDaoRegistry = function getDaoRegistry() {
    if (!this.daoRegistryAddress) {
      throw new NoDaoRegistry();
    }
    return this.daoRegistryAddress;
  };
  _createClass(Web3Module2, [{
    key: "daoFactoryAddress",
    get: function get() {
      return daoFactoryAddressMap.get(this) || "";
    }
  }, {
    key: "daoRegistryAddress",
    get: function get() {
      return daoRegistryAddressMap.get(this) || "";
    }
  }, {
    key: "pluginRepoRegistryAddress",
    get: function get() {
      return pluginRepoRegistryAddressMap.get(this) || "";
    }
  }, {
    key: "gasFeeEstimationFactor",
    get: function get() {
      return gasFeeEstimationFactorMap.get(this) || 1;
    }
  }, {
    key: "providers",
    get: function get() {
      return providersMap.get(this) || [];
    }
  }, {
    key: "providerIdx",
    get: function get() {
      return providerIdxMap.get(this);
    }
  }, {
    key: "signer",
    get: function get() {
      return signerMap.get(this);
    }
  }]);
  return Web3Module2;
}();
Web3Module.PRECISION_FACTOR_BASE = 1e3;
var clientsMap = /* @__PURE__ */ new Map();
var clientsIdxMap = /* @__PURE__ */ new Map();
var IPFSModule = function() {
  function IPFSModule2(context) {
    var _context$ipfs;
    clientsIdxMap.set(this, -1);
    if ((_context$ipfs = context.ipfs) != null && _context$ipfs.length) {
      clientsIdxMap.set(this, Math.floor(Math.random() * context.ipfs.length));
      clientsMap.set(this, context.ipfs);
    }
    Object.freeze(IPFSModule2.prototype);
    Object.freeze(this);
  }
  var _proto = IPFSModule2.prototype;
  _proto.getClient = function getClient() {
    if (!this.clients[this.clientsIdx]) {
      throw new Error("No IPFS endpoints available");
    }
    return this.clients[this.clientsIdx];
  };
  _proto.shiftClient = function shiftClient() {
    var _this$clients;
    if (!this.clients.length) {
      throw new Error("No IPFS endpoints available");
    } else if (((_this$clients = this.clients) == null ? void 0 : _this$clients.length) < 2) {
      throw new Error("No other endpoints");
    }
    clientsIdxMap.set(this, (this.clientsIdx + 1) % this.clients.length);
  };
  _proto.isUp = function isUp() {
    var _this$clients2;
    if (!((_this$clients2 = this.clients) != null && _this$clients2.length))
      return Promise.resolve(false);
    return this.getClient().nodeInfo().then(function() {
      return true;
    })["catch"](function() {
      return false;
    });
  };
  _proto.ensureOnline = function() {
    var _ensureOnline = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var i, _this$clients3;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              if (this.clients.length) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", Promise.reject(new Error("IPFS client is not initialized")));
            case 2:
              i = 0;
            case 3:
              if (!(i < ((_this$clients3 = this.clients) == null ? void 0 : _this$clients3.length))) {
                _context.next = 12;
                break;
              }
              _context.next = 6;
              return this.isUp();
            case 6:
              if (!_context.sent) {
                _context.next = 8;
                break;
              }
              return _context.abrupt("return");
            case 8:
              this.shiftClient();
            case 9:
              i++;
              _context.next = 3;
              break;
            case 12:
              throw new Error("No IPFS nodes available");
            case 13:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }();
  _proto.getOnlineClient = function getOnlineClient() {
    var _this = this;
    return this.ensureOnline().then(function() {
      return _this.getClient();
    });
  };
  _proto.add = function() {
    var _add = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(input) {
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.getOnlineClient().then(function(client) {
                return client.add(input).then(function(res) {
                  return res.hash;
                });
              })["catch"](function(e) {
                throw new Error("Could not upload data: " + ((e == null ? void 0 : e.message) || ""));
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function add(_x) {
      return _add.apply(this, arguments);
    }
    return add;
  }();
  _proto.pin = function() {
    var _pin = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee3(input) {
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.getOnlineClient().then(function(client) {
                return client.pin(input);
              })["catch"](function(e) {
                throw new Error("Could not pin data: " + ((e == null ? void 0 : e.message) || ""));
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
      }, _callee3, this);
    }));
    function pin(_x2) {
      return _pin.apply(this, arguments);
    }
    return pin;
  }();
  _proto.fetchBytes = function fetchBytes(cid) {
    return this.getOnlineClient().then(function(client) {
      return client.cat(cid);
    });
  };
  _proto.fetchString = function fetchString(cid) {
    return this.fetchBytes(cid).then(function(bytes) {
      return new TextDecoder().decode(bytes);
    })["catch"](function(e) {
      throw new Error("Could not upload data: " + ((e == null ? void 0 : e.message) || ""));
    });
  };
  _createClass(IPFSModule2, [{
    key: "clients",
    get: function get() {
      return clientsMap.get(this) || [];
    }
  }, {
    key: "clientsIdx",
    get: function get() {
      return clientsIdxMap.get(this);
    }
  }]);
  return IPFSModule2;
}();
var _templateObject$3;
var QueryStatus = (0, import_graphql_request.gql)(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteralLoose(["\n{\n  _meta{\n    deployment\n  }\n}\n"])));
var GraphqlModule = function() {
  function GraphqlModule2(context) {
    var _context$graphql;
    this.clientIdx = -1;
    this.clients = [];
    if ((_context$graphql = context.graphql) != null && _context$graphql.length) {
      this.clients = context.graphql;
      this.clientIdx = Math.floor(Math.random() * context.graphql.length);
    }
  }
  var _proto = GraphqlModule2.prototype;
  _proto.getClient = function getClient() {
    if (!this.clients.length) {
      throw new ClientNotInitializedError("graphql");
    }
    return this.clients[this.clientIdx];
  };
  _proto.shiftClient = function shiftClient() {
    if (!this.clients.length) {
      throw new ClientNotInitializedError("graphql");
    } else if (this.clients.length < 2) {
      throw new NoNodesAvailableError("graphql");
    }
    this.clientIdx = (this.clientIdx + 1) % this.clients.length;
  };
  _proto.isUp = function isUp() {
    return this.getClient().request(QueryStatus).then(function(res) {
      var _res$_meta;
      return !!((_res$_meta = res._meta) != null && _res$_meta.deployment);
    })["catch"](function() {
      return false;
    });
  };
  _proto.ensureOnline = function() {
    var _ensureOnline = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var i;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              if (this.clients.length) {
                _context.next = 2;
                break;
              }
              throw new ClientNotInitializedError("graphql");
            case 2:
              i = 0;
            case 3:
              if (!(i < this.clients.length)) {
                _context.next = 12;
                break;
              }
              _context.next = 6;
              return this.isUp();
            case 6:
              if (!_context.sent) {
                _context.next = 8;
                break;
              }
              return _context.abrupt("return");
            case 8:
              this.shiftClient();
            case 9:
              i++;
              _context.next = 3;
              break;
            case 12:
              throw new NoNodesAvailableError("graphql");
            case 13:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }();
  _proto.request = function request(_ref) {
    var _this = this;
    var query = _ref.query, params = _ref.params, name = _ref.name;
    if (!this.clients.length) {
      throw new ClientNotInitializedError("graphql");
    }
    var retries = this.clients.length;
    return runAndRetry({
      func: function func() {
        return _this.getClient().request(query, params);
      },
      onFail: function onFail(e) {
        if (e instanceof import_graphql_request.ClientError) {
          if (e.response.status < 500) {
            throw new GraphQLError(name || "");
          }
        }
        retries--;
        _this.shiftClient();
      },
      shouldRetry: function shouldRetry() {
        return retries > 0;
      }
    });
  };
  return GraphqlModule2;
}();
var web3Map = /* @__PURE__ */ new Map();
var ipfsMap = /* @__PURE__ */ new Map();
var graphqlMap = /* @__PURE__ */ new Map();
var ClientCore = function() {
  function ClientCore2(context) {
    web3Map.set(this, new Web3Module(context));
    ipfsMap.set(this, new IPFSModule(context));
    graphqlMap.set(this, new GraphqlModule(context));
    Object.freeze(ClientCore2.prototype);
  }
  _createClass(ClientCore2, [{
    key: "web3",
    get: function get() {
      return web3Map.get(this);
    }
  }, {
    key: "ipfs",
    get: function get() {
      return ipfsMap.get(this);
    }
  }, {
    key: "graphql",
    get: function get() {
      return graphqlMap.get(this);
    }
  }]);
  return ClientCore2;
}();
var _process$env;
var DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;
var supportedProtocols = ["https:"];
if (typeof process !== "undefined" && (_process$env = process.env) != null && _process$env.TESTING) {
  supportedProtocols.push("http:");
}
var defaultState = {
  network: "mainnet",
  web3Providers: [],
  gasFeeEstimationFactor: DEFAULT_GAS_FEE_ESTIMATION_FACTOR
};
var Context = function() {
  function Context2(params) {
    this.state = Object.assign({}, defaultState);
    this.set(params);
  }
  var _proto = Context2.prototype;
  _proto.setFull = function setFull(contextParams) {
    var _contextParams$ipfsNo, _contextParams$graphq;
    if (!contextParams.network) {
      throw new Error("Missing network");
    } else if (!contextParams.daoFactoryAddress) {
      throw new Error("Missing DAO factory address");
    } else if (!contextParams.signer) {
      throw new Error("Please pass the required signer");
    } else if (!contextParams.web3Providers) {
      throw new Error("No web3 endpoints defined");
    } else if (!contextParams.gasFeeEstimationFactor) {
      throw new Error("No gas fee reducer defined");
    } else if (!((_contextParams$ipfsNo = contextParams.ipfsNodes) != null && _contextParams$ipfsNo.length)) {
      throw new Error("No IPFS nodes defined");
    } else if (!((_contextParams$graphq = contextParams.graphqlNodes) != null && _contextParams$graphq.length)) {
      throw new Error("No graphql URL defined");
    }
    this.state = {
      network: contextParams.network,
      signer: contextParams.signer,
      daoFactoryAddress: contextParams.daoFactoryAddress,
      daoRegistryAddress: contextParams.daoRegistryAddress,
      pluginRepoRegistryAddress: contextParams.pluginRepoRegistryAddress,
      web3Providers: Context2.resolveWeb3Providers(contextParams.web3Providers, contextParams.network),
      gasFeeEstimationFactor: Context2.resolveGasFeeEstimationFactor(contextParams.gasFeeEstimationFactor),
      ipfs: Context2.resolveIpfs(contextParams.ipfsNodes),
      graphql: Context2.resolveGraphql(contextParams.graphqlNodes)
    };
  };
  _proto.set = function set(contextParams) {
    var _contextParams$ipfsNo2, _contextParams$graphq2;
    if (contextParams.network) {
      this.state.network = contextParams.network;
    }
    if (contextParams.daoFactoryAddress) {
      this.state.daoFactoryAddress = contextParams.daoFactoryAddress;
    } else if (this.state.network.toString() in activeContractsList) {
      this.state.daoFactoryAddress = activeContractsList[this.state.network.toString()].DAOFactory;
    }
    if (contextParams.signer) {
      this.state.signer = contextParams.signer;
    }
    if (contextParams.web3Providers) {
      this.state.web3Providers = Context2.resolveWeb3Providers(contextParams.web3Providers, this.state.network);
    }
    if (contextParams.gasFeeEstimationFactor) {
      this.state.gasFeeEstimationFactor = Context2.resolveGasFeeEstimationFactor(contextParams.gasFeeEstimationFactor);
    }
    if ((_contextParams$ipfsNo2 = contextParams.ipfsNodes) != null && _contextParams$ipfsNo2.length) {
      this.state.ipfs = Context2.resolveIpfs(contextParams.ipfsNodes);
    }
    if ((_contextParams$graphq2 = contextParams.graphqlNodes) != null && _contextParams$graphq2.length) {
      this.state.graphql = Context2.resolveGraphql(contextParams.graphqlNodes);
    }
  };
  Context2.setDefault = function setDefault(params) {
    if (params.daoFactoryAddress) {
      defaultState.daoFactoryAddress = params.daoFactoryAddress;
    }
    if (params.signer) {
      defaultState.signer = params.signer;
    }
  };
  Context2.getDefault = function getDefault() {
    return defaultState;
  };
  Context2.resolveWeb3Providers = function resolveWeb3Providers(endpoints, network) {
    if (Array.isArray(endpoints)) {
      return endpoints.map(function(item) {
        if (typeof item === "string") {
          var url2 = new URL(item);
          if (!supportedProtocols.includes(url2.protocol)) {
            throw new UnsupportedProtocolError(url2.protocol);
          }
          return new JsonRpcProvider(url2.href, network);
        }
        return item;
      });
    } else if (typeof endpoints === "string") {
      var url = new URL(endpoints);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      return [new JsonRpcProvider(url.href, network)];
    } else {
      return [endpoints];
    }
  };
  Context2.resolveIpfs = function resolveIpfs(configs) {
    var clients = [];
    configs.forEach(function(config) {
      var url = new URL(config.url);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      clients.push(new Client(url, config.headers));
    });
    return clients;
  };
  Context2.resolveGraphql = function resolveGraphql(endpoints) {
    var clients = [];
    endpoints.forEach(function(endpoint) {
      var url = new URL(endpoint.url);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      clients.push(new import_graphql_request.GraphQLClient(url.href));
    });
    return clients;
  };
  Context2.resolveGasFeeEstimationFactor = function resolveGasFeeEstimationFactor(gasFeeEstimationFactor) {
    if (typeof gasFeeEstimationFactor === "undefined")
      return 1;
    else if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {
      throw new Error("Gas estimation factor value should be a number between 0 and 1");
    }
    return gasFeeEstimationFactor;
  };
  _createClass(Context2, [{
    key: "network",
    get: function get() {
      return this.state.network || defaultState.network;
    }
  }, {
    key: "signer",
    get: function get() {
      return this.state.signer || defaultState.signer;
    }
  }, {
    key: "web3Providers",
    get: function get() {
      return this.state.web3Providers || defaultState.web3Providers;
    }
  }, {
    key: "daoFactoryAddress",
    get: function get() {
      return this.state.daoFactoryAddress;
    }
  }, {
    key: "daoRegistryAddress",
    get: function get() {
      return this.state.daoRegistryAddress;
    }
  }, {
    key: "pluginRepoRegistryAddress",
    get: function get() {
      return this.state.pluginRepoRegistryAddress;
    }
  }, {
    key: "gasFeeEstimationFactor",
    get: function get() {
      return this.state.gasFeeEstimationFactor || defaultState.gasFeeEstimationFactor;
    }
  }, {
    key: "ipfs",
    get: function get() {
      return this.state.ipfs || defaultState.ipfs;
    }
  }, {
    key: "graphql",
    get: function get() {
      return this.state.graphql || defaultState.graphql;
    }
  }]);
  return Context2;
}();
var defaultState$1 = {};
var ContextPlugin = function(_Context) {
  _inheritsLoose(ContextPlugin2, _Context);
  function ContextPlugin2(params) {
    var _this;
    _this = _Context.call(this, params) || this;
    _this.state = Object.assign({}, Context.getDefault(), defaultState$1);
    _this.set(params);
    return _this;
  }
  ContextPlugin2.fromContext = function fromContext(ctx) {
    var ctxPlugin = new ContextPlugin2({});
    Object.assign(ctxPlugin, ctx);
    return ctxPlugin;
  };
  var _proto = ContextPlugin2.prototype;
  _proto.setFull = function setFull(contextParams) {
    _Context.prototype.setFull.call(this, contextParams);
  };
  _proto.set = function set(contextParams) {
    _Context.prototype.set.call(this, contextParams);
  };
  ContextPlugin2.setDefault = function setDefault(params) {
    _Context.setDefault.call(this, params);
  };
  ContextPlugin2.getDefault = function getDefault() {
    return Object.assign(_Context.getDefault.call(this), defaultState$1);
  };
  return ContextPlugin2;
}(Context);
function unwrapProposalParams(params) {
  var _params$actions, _params$executeOnPass, _params$creatorVote;
  return [
    params.metadataUri,
    (_params$actions = params.actions) != null ? _params$actions : [],
    params.startDate ? Math.floor(params.startDate.getTime() / 1e3) : 0,
    params.endDate ? Math.floor(params.endDate.getTime() / 1e3) : 0,
    (_params$executeOnPass = params.executeOnPass) != null ? _params$executeOnPass : false,
    (_params$creatorVote = params.creatorVote) != null ? _params$creatorVote : VoteValues.ABSTAIN
  ];
}
function computeProposalStatus(proposal) {
  var now = new Date();
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  if (startDate >= now) {
    return ProposalStatus.PENDING;
  } else if (proposal.executed) {
    return ProposalStatus.EXECUTED;
  } else if (endDate >= now) {
    return ProposalStatus.ACTIVE;
  } else if (proposal.executable) {
    return ProposalStatus.SUCCEEDED;
  } else {
    return ProposalStatus.DEFEATED;
  }
}
function computeProposalStatusFilter(status) {
  var where = {};
  var now = Math.round(new Date().getTime() / 1e3).toString();
  switch (status) {
    case ProposalStatus.PENDING:
      where = {
        startDate_gte: now
      };
      break;
    case ProposalStatus.ACTIVE:
      where = {
        startDate_lt: now,
        endDate_gte: now,
        executed: false
      };
      break;
    case ProposalStatus.EXECUTED:
      where = {
        executed: true
      };
      break;
    case ProposalStatus.SUCCEEDED:
      where = {
        executable: true,
        endDate_lt: now
      };
      break;
    case ProposalStatus.DEFEATED:
      where = {
        executable: false,
        endDate_lt: now,
        executed: false
      };
      break;
    default:
      throw new Error("invalid proposal status");
  }
  return where;
}
function findLog(receipt, iface, eventName) {
  return receipt.logs.find(function(log) {
    return log.topics[0] === id(iface.getEvent(eventName).format("sighash"));
  });
}
function votingModeToContracts(votingMode) {
  switch (votingMode) {
    case VotingMode.STANDARD:
      return 0;
    case VotingMode.EARLY_EXECUTION:
      return 1;
    case VotingMode.VOTE_REPLACEMENT:
      return 2;
    default:
      throw new InvalidVotingModeError();
  }
}
function votingModeFromContracts(votingMode) {
  switch (votingMode) {
    case 0:
      return VotingMode.STANDARD;
    case 1:
      return VotingMode.EARLY_EXECUTION;
    case 2:
      return VotingMode.VOTE_REPLACEMENT;
    default:
      throw new InvalidVotingModeError();
  }
}
function decodeUpdatePluginSettingsAction(data) {
  var votingInterface = MajorityVotingBase__factory.createInterface();
  var hexBytes = bytesToHex(data);
  var expectedfunction = votingInterface.getFunction("updateVotingSettings");
  var result = votingInterface.decodeFunctionData(expectedfunction, hexBytes);
  return pluginSettingsFromContract(result);
}
function encodeUpdateVotingSettingsAction(params) {
  var votingInterface = MajorityVotingBase__factory.createInterface();
  var args = votingSettingsToContract(params);
  var hexBytes = votingInterface.encodeFunctionData("updateVotingSettings", [args]);
  return hexToBytes(hexBytes);
}
function pluginSettingsFromContract(result) {
  return {
    votingMode: votingModeFromContracts(result[0][0]),
    supportThreshold: decodeRatio(result[0][1], 6),
    minParticipation: decodeRatio(result[0][2], 6),
    minDuration: result[0][3].toNumber(),
    minProposerVotingPower: BigInt(result[0][4])
  };
}
function votingSettingsToContract(params) {
  return {
    votingMode: BigNumber2.from(votingModeToContracts(params.votingMode || VotingMode.STANDARD)),
    supportThreshold: encodeRatio(params.supportThreshold, 6),
    minParticipation: encodeRatio(params.minParticipation, 6),
    minDuration: BigNumber2.from(params.minDuration),
    minProposerVotingPower: BigNumber2.from(params.minProposerVotingPower || 0)
  };
}
function getFunctionFragment(data, availableFunctions) {
  var hexBytes = bytesToHex(data);
  var iface = new Interface(availableFunctions);
  return iface.getFunction(hexBytes.substring(0, 10));
}
var UNSUPPORTED_PROPOSAL_METADATA_LINK = {
  title: "(unsupported metadata link)",
  summary: "(the link to the metadata is not supported)",
  description: "(the link to the metadata is not supported)",
  resources: []
};
var EMPTY_PROPOSAL_METADATA_LINK = {
  title: "(the proposal has no metadata)",
  summary: "(the current proposal does not have any content defined)",
  description: "(the current proposal does not have any content defined)",
  resources: []
};
var UNAVAILABLE_PROPOSAL_METADATA = {
  title: "(unavailable metadata)",
  summary: "(the proposal metadata is not available)",
  description: "(the proposal metadata is not available)",
  resources: []
};
var LIVE_CONTRACTS = {
  mainnet: {
    daoFactory: activeContractsList.mainnet.DAOFactory,
    pluginSetupProcessor: activeContractsList.mainnet.PluginRepoFactory,
    multisigRepo: activeContractsList.mainnet["multisig-repo"],
    adminRepo: activeContractsList.mainnet["admin-repo"],
    addresslistVotingRepo: activeContractsList.mainnet["address-list-voting-repo"],
    tokenVotingRepo: activeContractsList.mainnet["token-voting-repo"],
    multisigSetup: activeContractsList.mainnet.MultisigSetup,
    adminSetup: activeContractsList.mainnet.AdminSetup,
    addresslistVotingSetup: activeContractsList.mainnet.AddresslistVotingSetup,
    tokenVotingSetup: activeContractsList.mainnet.TokenVotingSetup
  },
  goerli: {
    daoFactory: activeContractsList.goerli.DAOFactory,
    pluginSetupProcessor: activeContractsList.goerli.PluginSetupProcessor,
    multisigRepo: activeContractsList.goerli["multisig-repo"],
    adminRepo: activeContractsList.goerli["admin-repo"],
    addresslistVotingRepo: activeContractsList.goerli["address-list-voting-repo"],
    tokenVotingRepo: activeContractsList.goerli["token-voting-repo"],
    multisigSetup: activeContractsList.goerli.MultisigSetup,
    adminSetup: activeContractsList.goerli.AdminSetup,
    addresslistVotingSetup: activeContractsList.goerli.AddresslistVotingSetup,
    tokenVotingSetup: activeContractsList.goerli.TokenVotingSetup
  },
  maticmum: {
    daoFactory: activeContractsList.mumbai.DAOFactory,
    pluginSetupProcessor: activeContractsList.mumbai.PluginSetupProcessor,
    multisigRepo: activeContractsList.mumbai["multisig-repo"],
    adminRepo: activeContractsList.mumbai["admin-repo"],
    addresslistVotingRepo: activeContractsList.mumbai["address-list-voting-repo"],
    tokenVotingRepo: activeContractsList.mumbai["token-voting-repo"],
    multisigSetup: activeContractsList.mumbai.MultisigSetup,
    adminSetup: activeContractsList.mumbai.AdminSetup,
    addresslistVotingSetup: activeContractsList.mumbai.AddresslistVotingSetup,
    tokenVotingSetup: activeContractsList.mumbai.TokenVotingSetup,
    ensRegistry: activeContractsList.mumbai.ENSRegistry
  },
  matic: {
    daoFactory: activeContractsList.polygon.DAOFactory,
    pluginSetupProcessor: activeContractsList.polygon.PluginSetupProcessor,
    multisigRepo: activeContractsList.polygon["multisig-repo"],
    adminRepo: activeContractsList.polygon["admin-repo"],
    addresslistVotingRepo: activeContractsList.polygon["address-list-voting-repo"],
    tokenVotingRepo: activeContractsList.polygon["token-voting-repo"],
    multisigSetup: activeContractsList.polygon.MultisigSetup,
    adminSetup: activeContractsList.polygon.AdminSetup,
    addresslistVotingSetup: activeContractsList.polygon.AddresslistVotingSetup,
    tokenVotingSetup: activeContractsList.polygon.TokenVotingSetup,
    ensRegistry: activeContractsList.polygon.ENSRegistry
  }
};
function unwrapDepositParams(params) {
  var _params$tokenAddress;
  return [params.daoAddressOrEns, params.amount, (_params$tokenAddress = params == null ? void 0 : params.tokenAddress) != null ? _params$tokenAddress : AddressZero, ""];
}
function toDaoDetails(dao, metadata) {
  return {
    address: dao.id,
    ensDomain: dao.subdomain + ".dao.eth",
    metadata: {
      name: metadata.name,
      description: metadata.description,
      avatar: metadata.avatar || void 0,
      links: metadata.links
    },
    creationDate: new Date(parseInt(dao.createdAt) * 1e3),
    plugins: dao.plugins.map(function(plugin) {
      return {
        instanceAddress: plugin.id,
        id: SubgraphPluginTypeMap.get(plugin.__typename),
        version: "0.0.1"
      };
    })
  };
}
function toDaoListItem(dao, metadata) {
  return {
    address: dao.id,
    ensDomain: dao.subdomain + ".dao.eth",
    metadata: {
      name: metadata.name,
      description: metadata.description,
      avatar: metadata.avatar || void 0
    },
    plugins: dao.plugins.map(function(plugin) {
      return {
        instanceAddress: plugin.id,
        id: SubgraphPluginTypeMap.get(plugin.__typename),
        version: "0.0.1"
      };
    })
  };
}
function toAssetBalance(balance) {
  var updateDate = new Date(parseInt(balance.lastUpdated) * 1e3);
  if (balance.__typename === "NativeBalance") {
    return {
      type: TokenType.NATIVE,
      balance: BigInt(balance.balance),
      updateDate
    };
  } else if (balance.__typename === "ERC721Balance") {
    return {
      type: TokenType.ERC721,
      name: balance.token.symbol,
      symbol: balance.token.symbol,
      updateDate,
      address: balance.token.id
    };
  } else {
    return {
      type: TokenType.ERC20,
      address: balance.token.id,
      name: balance.token.name,
      symbol: balance.token.symbol,
      decimals: balance.token.decimals,
      balance: BigInt(balance.balance),
      updateDate
    };
  }
}
function toTokenTransfer(transfer) {
  var creationDate = new Date(parseInt(transfer.createdAt) * 1e3);
  if (transfer.__typename === "NativeTransfer") {
    var _transfer$proposal;
    if (transfer.type === SubgraphTransferType.DEPOSIT) {
      return {
        type: TransferType.DEPOSIT,
        tokenType: TokenType.NATIVE,
        amount: BigInt(transfer.amount),
        creationDate,
        transactionId: transfer.txHash,
        from: transfer.from,
        to: transfer.to
      };
    }
    return {
      type: TransferType.WITHDRAW,
      tokenType: TokenType.NATIVE,
      amount: BigInt(transfer.amount),
      creationDate,
      transactionId: transfer.txHash,
      proposalId: ((_transfer$proposal = transfer.proposal) == null ? void 0 : _transfer$proposal.id) || "",
      to: transfer.to,
      from: transfer.from
    };
  } else if (transfer.__typename === "ERC721Transfer") {
    var _transfer$proposal2;
    if (transfer.type === SubgraphTransferType.DEPOSIT) {
      return {
        type: TransferType.DEPOSIT,
        tokenType: TokenType.ERC721,
        token: {
          address: transfer.token.id,
          name: transfer.token.name,
          symbol: transfer.token.symbol
        },
        creationDate,
        transactionId: transfer.txHash,
        from: transfer.from,
        to: transfer.to
      };
    }
    return {
      type: TransferType.WITHDRAW,
      tokenType: TokenType.ERC721,
      token: {
        address: transfer.token.id,
        name: transfer.token.name,
        symbol: transfer.token.symbol
      },
      creationDate,
      transactionId: transfer.txHash,
      to: transfer.to,
      from: transfer.from,
      proposalId: ((_transfer$proposal2 = transfer.proposal) == null ? void 0 : _transfer$proposal2.id) || ""
    };
  } else {
    var _transfer$proposal3;
    if (transfer.type === SubgraphTransferType.DEPOSIT) {
      return {
        type: TransferType.DEPOSIT,
        tokenType: TokenType.ERC20,
        token: {
          address: transfer.token.id,
          name: transfer.token.name,
          symbol: transfer.token.symbol,
          decimals: transfer.token.decimals
        },
        amount: BigInt(transfer.amount),
        creationDate,
        transactionId: transfer.txHash,
        from: transfer.from,
        to: transfer.to
      };
    }
    return {
      type: TransferType.WITHDRAW,
      tokenType: TokenType.ERC20,
      token: {
        address: transfer.token.id,
        name: transfer.token.name,
        symbol: transfer.token.symbol,
        decimals: transfer.token.decimals
      },
      amount: BigInt(transfer.amount),
      creationDate,
      transactionId: transfer.txHash,
      to: transfer.to,
      from: transfer.from,
      proposalId: ((_transfer$proposal3 = transfer.proposal) == null ? void 0 : _transfer$proposal3.id) || ""
    };
  }
}
function applyInstallatonParamsToContract(params) {
  return {
    plugin: params.pluginAddress,
    pluginSetupRef: {
      pluginSetupRepo: params.pluginRepo,
      versionTag: params.versionTag
    },
    helpersHash: keccak2563(defaultAbiCoder.encode(["address[]"], [params.helpers])),
    permissions: params.permissions
  };
}
function applyInstallatonParamsFromContract(result) {
  var params = result[1];
  return {
    helpersHash: params.helpersHash,
    permissions: params.permissions.map(function(permission) {
      return _extends2({}, permission, {
        permissionId: hexToBytes(permission.permissionId)
      });
    }),
    versionTag: params.pluginSetupRef.versionTag,
    pluginAddress: params.plugin,
    pluginRepo: params.pluginSetupRef.pluginSetupRepo
  };
}
function permissionParamsToContract(params) {
  return [params.where, params.who, keccak2563(toUtf8Bytes2(params.permission))];
}
function permissionWithConditionParamsToContract(params) {
  return [].concat(permissionParamsToContract({
    who: params.who,
    where: params.where,
    permission: params.permission
  }), [params.condition]);
}
function permissionParamsFromContract(result) {
  var _Object$keys$find;
  return {
    where: result[0],
    who: result[1],
    permissionId: result[2],
    permission: ((_Object$keys$find = Object.keys(PermissionIds).find(function(k) {
      return PermissionIds[k] === result[2];
    })) == null ? void 0 : _Object$keys$find.replace(/_ID$/, "")) || ""
  };
}
function permissionParamsWitConditionFromContract(result) {
  return _extends2({}, permissionParamsFromContract(result), {
    condition: result[3]
  });
}
function withdrawParamsFromContract(to, _value, result, tokenStandard) {
  if (tokenStandard === TokenType.ERC20) {
    return {
      type: TokenType.ERC20,
      tokenAddress: to,
      recipientAddressOrEns: result[0],
      amount: BigInt(result[1])
    };
  }
  throw new Error("not implemented");
}
var AVAILABLE_FUNCTION_SIGNATURES = [new Contract(AddressZero, erc20ContractAbi)["interface"].getFunction("transfer").format("minimal"), DAO__factory.createInterface().getFunction("grant").format("minimal"), DAO__factory.createInterface().getFunction("grantWithCondition").format("minimal"), DAO__factory.createInterface().getFunction("revoke").format("minimal"), DAO__factory.createInterface().getFunction("setMetadata").format("minimal"), DAO__factory.createInterface().getFunction("setDaoURI").format("minimal"), DAO__factory.createInterface().getFunction("registerStandardCallback").format("minimal"), DAO__factory.createInterface().getFunction("setSignatureValidator").format("minimal"), DAO__factory.createInterface().getFunction("upgradeTo").format("minimal"), DAO__factory.createInterface().getFunction("upgradeToAndCall").format("minimal")];
var UNSUPPORTED_DAO_METADATA_LINK = {
  name: "(unsupported metadata link)",
  description: "(the metadata link is not supported)",
  links: []
};
var EMPTY_DAO_METADATA_LINK = {
  name: "(the DAO has no metadata)",
  description: "(the DAO did not define any content)",
  links: []
};
var UNAVAILABLE_DAO_METADATA = {
  name: "(unavailable metadata)",
  description: "(the DAO metadata is not available)",
  links: []
};
var ClientMethods = function(_ClientCore) {
  _inheritsLoose(ClientMethods2, _ClientCore);
  function ClientMethods2(context) {
    var _this4;
    _this4 = _ClientCore.call(this, context) || this;
    Object.freeze(ClientMethods2.prototype);
    Object.freeze(_assertThisInitialized(_this4));
    return _this4;
  }
  var _proto = ClientMethods2.prototype;
  _proto.createDao = function createDao(params) {
    var _this = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var _receipt$logs, _receipt$logs2;
      var signer, daoFactoryInstance, pluginInstallationData, _iterator, _step, plugin, repo, currentRelease, latestVersion, pluginSetupProcessorAddr, pluginSetupProcessor, execPermissionFound, daoBaseAddr, _i, _pluginInstallationDa, installData, pluginSetupProcessorResponse, found, tx, receipt, daoFactoryInterface, log, pspInterface, installedLogs, parsedLog;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = _this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 9;
                break;
              }
              throw new NoProviderError();
            case 9:
              if (!(params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\-]+$/))) {
                _context.next = 11;
                break;
              }
              throw new Error("Invalid subdomain format: use a-z, 0-9 and -");
            case 11:
              daoFactoryInstance = DAOFactory__factory.connect(_this.web3.getDaoFactoryAddress(), signer);
              pluginInstallationData = [];
              _iterator = _createForOfIteratorHelperLoose(params.plugins);
            case 14:
              if ((_step = _iterator()).done) {
                _context.next = 26;
                break;
              }
              plugin = _step.value;
              repo = PluginRepo__factory.connect(plugin.id, signer);
              _context.next = 19;
              return _awaitAsyncGenerator2(repo.latestRelease());
            case 19:
              currentRelease = _context.sent;
              _context.next = 22;
              return _awaitAsyncGenerator2(repo["getLatestVersion(uint8)"](currentRelease));
            case 22:
              latestVersion = _context.sent;
              pluginInstallationData.push({
                pluginSetupRef: {
                  pluginSetupRepo: repo.address,
                  versionTag: latestVersion.tag
                },
                data: plugin.data
              });
            case 24:
              _context.next = 14;
              break;
            case 26:
              _context.next = 28;
              return _awaitAsyncGenerator2(daoFactoryInstance.pluginSetupProcessor());
            case 28:
              pluginSetupProcessorAddr = _context.sent;
              pluginSetupProcessor = PluginSetupProcessor__factory.connect(pluginSetupProcessorAddr, signer);
              execPermissionFound = false;
              _context.next = 33;
              return _awaitAsyncGenerator2(daoFactoryInstance.daoBase());
            case 33:
              daoBaseAddr = _context.sent;
              _i = 0, _pluginInstallationDa = pluginInstallationData;
            case 35:
              if (!(_i < _pluginInstallationDa.length)) {
                _context.next = 47;
                break;
              }
              installData = _pluginInstallationDa[_i];
              _context.next = 39;
              return _awaitAsyncGenerator2(pluginSetupProcessor.callStatic.prepareInstallation(daoBaseAddr, installData));
            case 39:
              pluginSetupProcessorResponse = _context.sent;
              found = pluginSetupProcessorResponse[1].permissions.find(function(permission) {
                return permission.permissionId === PermissionIds.EXECUTE_PERMISSION_ID;
              });
              if (!found) {
                _context.next = 44;
                break;
              }
              execPermissionFound = true;
              return _context.abrupt("break", 47);
            case 44:
              _i++;
              _context.next = 35;
              break;
            case 47:
              if (execPermissionFound) {
                _context.next = 49;
                break;
              }
              throw new MissingExecPermissionError();
            case 49:
              _context.next = 51;
              return _awaitAsyncGenerator2(daoFactoryInstance.connect(signer).createDao({
                subdomain: params.ensSubdomain,
                metadata: toUtf8Bytes2(params.metadataUri),
                daoURI: params.daoUri || "",
                trustedForwarder: params.trustedForwarder || AddressZero
              }, pluginInstallationData));
            case 51:
              tx = _context.sent;
              _context.next = 54;
              return {
                key: DaoCreationSteps.CREATING,
                txHash: tx.hash
              };
            case 54:
              _context.next = 56;
              return _awaitAsyncGenerator2(tx.wait());
            case 56:
              receipt = _context.sent;
              daoFactoryInterface = DAORegistry__factory.createInterface();
              log = (_receipt$logs = receipt.logs) == null ? void 0 : _receipt$logs.find(function(e) {
                return e.topics[0] === id(daoFactoryInterface.getEvent("DAORegistered").format("sighash"));
              });
              if (log) {
                _context.next = 61;
                break;
              }
              throw new Error("Failed to create DAO");
            case 61:
              pspInterface = PluginSetupProcessor__factory.createInterface();
              installedLogs = (_receipt$logs2 = receipt.logs) == null ? void 0 : _receipt$logs2.filter(function(e) {
                return e.topics[0] === id(pspInterface.getEvent("InstallationApplied").format("sighash"));
              });
              parsedLog = daoFactoryInterface.parseLog(log);
              if (parsedLog.args["dao"]) {
                _context.next = 66;
                break;
              }
              throw new Error("Failed to create DAO");
            case 66:
              _context.next = 68;
              return {
                key: DaoCreationSteps.DONE,
                address: parsedLog.args["dao"],
                pluginAddresses: installedLogs.map(function(log2) {
                  return pspInterface.parseLog(log2).args[1];
                })
              };
            case 68:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }))();
  };
  _proto.pinMetadata = function() {
    var _pinMetadata = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var cid;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.ipfs.add(JSON.stringify(params));
            case 3:
              cid = _context2.sent;
              _context2.next = 6;
              return this.ipfs.pin(cid);
            case 6:
              return _context2.abrupt("return", "ipfs://" + cid);
            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new IpfsPinError();
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this, [[0, 9]]);
    }));
    function pinMetadata(_x) {
      return _pinMetadata.apply(this, arguments);
    }
    return pinMetadata;
  }();
  _proto.deposit = function deposit(params) {
    var _this2 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee3() {
      var signer, _unwrapDepositParams, daoAddress, amount, tokenAddress, reference, daoInstance, override, tx, cr, log, daoInterface, parsedLog;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = _this2.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new Error("A signer is needed");
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new Error("A web3 provider is needed");
            case 7:
              if (!(params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20)) {
                _context3.next = 9;
                break;
              }
              throw new Error("Please, use the token's transfer function directly");
            case 9:
              _unwrapDepositParams = unwrapDepositParams(params), daoAddress = _unwrapDepositParams[0], amount = _unwrapDepositParams[1], tokenAddress = _unwrapDepositParams[2], reference = _unwrapDepositParams[3];
              if (!(tokenAddress && tokenAddress !== AddressZero)) {
                _context3.next = 12;
                break;
              }
              return _context3.delegateYield(_asyncGeneratorDelegate2(_asyncIterator2(_this2.updateAllowance({
                amount: params.amount,
                daoAddressOrEns: daoAddress,
                tokenAddress
              }))), "t0", 12);
            case 12:
              daoInstance = DAO__factory.connect(daoAddress, signer);
              override = {};
              if (tokenAddress === AddressZero) {
                override.value = amount;
              }
              _context3.next = 17;
              return _awaitAsyncGenerator2(daoInstance.deposit(tokenAddress, amount, reference, override));
            case 17:
              tx = _context3.sent;
              _context3.next = 20;
              return {
                key: DaoDepositSteps.DEPOSITING,
                txHash: tx.hash
              };
            case 20:
              _context3.next = 22;
              return _awaitAsyncGenerator2(tx.wait());
            case 22:
              cr = _context3.sent;
              log = findLog(cr, daoInstance["interface"], "Deposited");
              if (log) {
                _context3.next = 26;
                break;
              }
              throw new FailedDepositError();
            case 26:
              daoInterface = DAO__factory.createInterface();
              parsedLog = daoInterface.parseLog(log);
              if (!(!amount.toString() === parsedLog.args["amount"])) {
                _context3.next = 30;
                break;
              }
              throw new AmountMismatchError(amount, parsedLog.args["amount"].toBigInt());
            case 30:
              _context3.next = 32;
              return {
                key: DaoDepositSteps.DONE,
                amount
              };
            case 32:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }))();
  };
  _proto.updateAllowance = function updateAllowance(params) {
    var _this3 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee4() {
      var signer, tokenInstance, currentAllowance, tx, cr, log, value;
      return _regeneratorRuntime2().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = _this3.web3.getConnectedSigner();
              if (signer) {
                _context4.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context4.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              tokenInstance = new Contract(params.tokenAddress, erc20ContractAbi, signer);
              _context4.t0 = _awaitAsyncGenerator2;
              _context4.t1 = tokenInstance;
              _context4.next = 12;
              return _awaitAsyncGenerator2(signer.getAddress());
            case 12:
              _context4.t2 = _context4.sent;
              _context4.t3 = params.daoAddressOrEns;
              _context4.t4 = _context4.t1.allowance.call(_context4.t1, _context4.t2, _context4.t3);
              _context4.next = 17;
              return (0, _context4.t0)(_context4.t4);
            case 17:
              currentAllowance = _context4.sent;
              _context4.next = 20;
              return {
                key: DaoDepositSteps.CHECKED_ALLOWANCE,
                allowance: currentAllowance.toBigInt()
              };
            case 20:
              if (!currentAllowance.gte(params.amount)) {
                _context4.next = 22;
                break;
              }
              return _context4.abrupt("return");
            case 22:
              _context4.next = 24;
              return _awaitAsyncGenerator2(tokenInstance.approve(params.daoAddressOrEns, BigNumber2.from(params.amount)));
            case 24:
              tx = _context4.sent;
              _context4.next = 27;
              return {
                key: DaoDepositSteps.UPDATING_ALLOWANCE,
                txHash: tx.hash
              };
            case 27:
              _context4.next = 29;
              return _awaitAsyncGenerator2(tx.wait());
            case 29:
              cr = _context4.sent;
              log = findLog(cr, tokenInstance["interface"], "Approval");
              if (log) {
                _context4.next = 33;
                break;
              }
              throw new UpdateAllowanceError();
            case 33:
              value = log.data;
              if (!(!value || BigNumber2.from(params.amount).gt(BigNumber2.from(value)))) {
                _context4.next = 36;
                break;
              }
              throw new UpdateAllowanceError();
            case 36:
              _context4.next = 38;
              return {
                key: DaoDepositSteps.UPDATED_ALLOWANCE,
                allowance: params.amount
              };
            case 38:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }))();
  };
  _proto.hasPermission = function() {
    var _hasPermission = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee5(params) {
      var signer, daoInstance;
      return _regeneratorRuntime2().wrap(function _callee5$(_context5) {
        while (1)
          switch (_context5.prev = _context5.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context5.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context5.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);
              return _context5.abrupt("return", daoInstance.hasPermission(params.where, params.who, id(params.permission), params.data || new Uint8Array([])));
            case 9:
            case "end":
              return _context5.stop();
          }
      }, _callee5, this);
    }));
    function hasPermission(_x2) {
      return _hasPermission.apply(this, arguments);
    }
    return hasPermission;
  }();
  _proto.getDao = function() {
    var _getDao = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee6(daoAddressOrEns) {
      var address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r, dao, metadataCid, metadataString, metadata;
      return _regeneratorRuntime2().wrap(function _callee6$(_context6) {
        while (1)
          switch (_context6.prev = _context6.next) {
            case 0:
              address = daoAddressOrEns;
              if (isAddress2(address)) {
                _context6.next = 13;
                break;
              }
              _context6.next = 4;
              return this.web3.ensureOnline();
            case 4:
              provider = this.web3.getProvider();
              if (provider) {
                _context6.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _context6.next = 9;
              return provider.resolveName(address);
            case 9:
              resolvedAddress = _context6.sent;
              if (resolvedAddress) {
                _context6.next = 12;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 12:
              address = resolvedAddress.toLowerCase();
            case 13:
              query = QueryDao;
              params = {
                address
              };
              name = "DAO";
              _context6.next = 18;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 18:
              _yield$this$graphql$r = _context6.sent;
              dao = _yield$this$graphql$r.dao;
              if (dao) {
                _context6.next = 24;
                break;
              }
              return _context6.abrupt("return", null);
            case 24:
              if (dao.metadata) {
                _context6.next = 26;
                break;
              }
              return _context6.abrupt("return", toDaoDetails(dao, EMPTY_DAO_METADATA_LINK));
            case 26:
              _context6.next = 28;
              return this.ipfs.ensureOnline();
            case 28:
              _context6.prev = 28;
              metadataCid = resolveIpfsCid(dao.metadata);
              _context6.next = 32;
              return this.ipfs.fetchString(metadataCid);
            case 32:
              metadataString = _context6.sent;
              metadata = JSON.parse(metadataString);
              return _context6.abrupt("return", toDaoDetails(dao, metadata));
            case 37:
              _context6.prev = 37;
              _context6.t0 = _context6["catch"](28);
              if (!(_context6.t0 instanceof InvalidCidError)) {
                _context6.next = 41;
                break;
              }
              return _context6.abrupt("return", toDaoDetails(dao, UNSUPPORTED_DAO_METADATA_LINK));
            case 41:
              return _context6.abrupt("return", toDaoDetails(dao, UNAVAILABLE_DAO_METADATA));
            case 42:
            case "end":
              return _context6.stop();
          }
      }, _callee6, this, [[28, 37]]);
    }));
    function getDao(_x3) {
      return _getDao.apply(this, arguments);
    }
    return getDao;
  }();
  _proto.getDaos = function() {
    var _getDaos = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee8(_ref) {
      var _this5 = this;
      var _ref$limit, limit, _ref$skip, skip, _ref$direction, direction, _ref$sortBy, sortBy, query, params, name, _yield$this$graphql$r2, daos;
      return _regeneratorRuntime2().wrap(function _callee8$(_context8) {
        while (1)
          switch (_context8.prev = _context8.next) {
            case 0:
              _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, _ref$skip = _ref.skip, skip = _ref$skip === void 0 ? 0 : _ref$skip, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? SortDirection.ASC : _ref$direction, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? DaoSortBy.CREATED_AT : _ref$sortBy;
              query = QueryDaos;
              params = {
                limit,
                skip,
                direction,
                sortBy
              };
              name = "DAOs";
              _context8.next = 6;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 6:
              _yield$this$graphql$r2 = _context8.sent;
              daos = _yield$this$graphql$r2.daos;
              _context8.next = 10;
              return this.ipfs.ensureOnline();
            case 10:
              return _context8.abrupt("return", Promise.all(daos.map(function() {
                var _ref2 = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee7(dao) {
                  var metadataCid, stringMetadata, metadata;
                  return _regeneratorRuntime2().wrap(function _callee7$(_context7) {
                    while (1)
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          if (dao.metadata) {
                            _context7.next = 2;
                            break;
                          }
                          return _context7.abrupt("return", toDaoListItem(dao, EMPTY_DAO_METADATA_LINK));
                        case 2:
                          _context7.prev = 2;
                          metadataCid = resolveIpfsCid(dao.metadata);
                          _context7.next = 6;
                          return _this5.ipfs.fetchString(metadataCid);
                        case 6:
                          stringMetadata = _context7.sent;
                          metadata = JSON.parse(stringMetadata);
                          return _context7.abrupt("return", toDaoListItem(dao, metadata));
                        case 11:
                          _context7.prev = 11;
                          _context7.t0 = _context7["catch"](2);
                          if (!(_context7.t0 instanceof InvalidCidError)) {
                            _context7.next = 15;
                            break;
                          }
                          return _context7.abrupt("return", toDaoListItem(dao, UNSUPPORTED_DAO_METADATA_LINK));
                        case 15:
                          return _context7.abrupt("return", toDaoListItem(dao, UNAVAILABLE_DAO_METADATA));
                        case 16:
                        case "end":
                          return _context7.stop();
                      }
                  }, _callee7, null, [[2, 11]]);
                }));
                return function(_x5) {
                  return _ref2.apply(this, arguments);
                };
              }())));
            case 11:
            case "end":
              return _context8.stop();
          }
      }, _callee8, this);
    }));
    function getDaos(_x4) {
      return _getDaos.apply(this, arguments);
    }
    return getDaos;
  }();
  _proto.getDaoBalances = function() {
    var _getDaoBalances = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee9(_ref3) {
      var daoAddressOrEns, _ref3$limit, limit, _ref3$skip, skip, _ref3$direction, direction, _ref3$sortBy, sortBy, where, address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r3, tokenBalances;
      return _regeneratorRuntime2().wrap(function _callee9$(_context9) {
        while (1)
          switch (_context9.prev = _context9.next) {
            case 0:
              daoAddressOrEns = _ref3.daoAddressOrEns, _ref3$limit = _ref3.limit, limit = _ref3$limit === void 0 ? 10 : _ref3$limit, _ref3$skip = _ref3.skip, skip = _ref3$skip === void 0 ? 0 : _ref3$skip, _ref3$direction = _ref3.direction, direction = _ref3$direction === void 0 ? SortDirection.ASC : _ref3$direction, _ref3$sortBy = _ref3.sortBy, sortBy = _ref3$sortBy === void 0 ? AssetBalanceSortBy.LAST_UPDATED : _ref3$sortBy;
              where = {};
              address = daoAddressOrEns;
              if (!address) {
                _context9.next = 17;
                break;
              }
              if (isAddress2(address)) {
                _context9.next = 16;
                break;
              }
              _context9.next = 7;
              return this.web3.ensureOnline();
            case 7:
              provider = this.web3.getProvider();
              if (provider) {
                _context9.next = 10;
                break;
              }
              throw new NoProviderError();
            case 10:
              _context9.next = 12;
              return provider.resolveName(address);
            case 12:
              resolvedAddress = _context9.sent;
              if (resolvedAddress) {
                _context9.next = 15;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 15:
              address = resolvedAddress;
            case 16:
              where = {
                dao: address.toLowerCase()
              };
            case 17:
              query = QueryTokenBalances;
              params = {
                where,
                limit,
                skip,
                direction,
                sortBy
              };
              name = "dao balances";
              _context9.next = 22;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 22:
              _yield$this$graphql$r3 = _context9.sent;
              tokenBalances = _yield$this$graphql$r3.tokenBalances;
              if (!(tokenBalances.length === 0)) {
                _context9.next = 26;
                break;
              }
              return _context9.abrupt("return", []);
            case 26:
              return _context9.abrupt("return", Promise.all(tokenBalances.map(function(balance) {
                return toAssetBalance(balance);
              })));
            case 27:
            case "end":
              return _context9.stop();
          }
      }, _callee9, this);
    }));
    function getDaoBalances(_x6) {
      return _getDaoBalances.apply(this, arguments);
    }
    return getDaoBalances;
  }();
  _proto.getDaoTransfers = function() {
    var _getDaoTransfers = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee10(_ref4) {
      var daoAddressOrEns, type, _ref4$limit, limit, _ref4$skip, skip, _ref4$direction, direction, _ref4$sortBy, sortBy, where, address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r4, tokenTransfers;
      return _regeneratorRuntime2().wrap(function _callee10$(_context10) {
        while (1)
          switch (_context10.prev = _context10.next) {
            case 0:
              daoAddressOrEns = _ref4.daoAddressOrEns, type = _ref4.type, _ref4$limit = _ref4.limit, limit = _ref4$limit === void 0 ? 10 : _ref4$limit, _ref4$skip = _ref4.skip, skip = _ref4$skip === void 0 ? 0 : _ref4$skip, _ref4$direction = _ref4.direction, direction = _ref4$direction === void 0 ? SortDirection.ASC : _ref4$direction, _ref4$sortBy = _ref4.sortBy, sortBy = _ref4$sortBy === void 0 ? TransferSortBy.CREATED_AT : _ref4$sortBy;
              where = {};
              address = daoAddressOrEns;
              if (!address) {
                _context10.next = 17;
                break;
              }
              if (isAddress2(address)) {
                _context10.next = 16;
                break;
              }
              _context10.next = 7;
              return this.web3.ensureOnline();
            case 7:
              provider = this.web3.getProvider();
              if (provider) {
                _context10.next = 10;
                break;
              }
              throw new NoProviderError();
            case 10:
              _context10.next = 12;
              return provider.resolveName(address);
            case 12:
              resolvedAddress = _context10.sent;
              if (resolvedAddress) {
                _context10.next = 15;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 15:
              address = resolvedAddress;
            case 16:
              where = {
                dao: address.toLowerCase()
              };
            case 17:
              if (type) {
                where = _extends2({}, where, {
                  type: SubgraphTransferTypeMap.get(type)
                });
              }
              query = QueryTokenTransfers;
              params = {
                where,
                limit,
                skip,
                direction,
                sortBy
              };
              name = "dao transfers";
              _context10.next = 23;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 23:
              _yield$this$graphql$r4 = _context10.sent;
              tokenTransfers = _yield$this$graphql$r4.tokenTransfers;
              if (tokenTransfers) {
                _context10.next = 27;
                break;
              }
              return _context10.abrupt("return", null);
            case 27:
              return _context10.abrupt("return", Promise.all(tokenTransfers.map(function(transfer) {
                return toTokenTransfer(transfer);
              })));
            case 28:
            case "end":
              return _context10.stop();
          }
      }, _callee10, this);
    }));
    function getDaoTransfers(_x7) {
      return _getDaoTransfers.apply(this, arguments);
    }
    return getDaoTransfers;
  }();
  return ClientMethods2;
}(ClientCore);
var ClientEncoding = function(_ClientCore) {
  _inheritsLoose(ClientEncoding2, _ClientCore);
  function ClientEncoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(ClientEncoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = ClientEncoding2.prototype;
  _proto.applyInstallationAction = function applyInstallationAction(daoAddress, params) {
    if (!isAddress2(daoAddress)) {
      throw new InvalidAddressError();
    }
    var pspInterface = PluginSetupProcessor__factory.createInterface();
    var args = applyInstallatonParamsToContract(params);
    var hexBytes = pspInterface.encodeFunctionData("applyInstallation", [daoAddress, args]);
    return {
      to: daoAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.grantAction = function grantAction(daoAddress, params) {
    var signer = this.web3.getSigner();
    var where = params.where, who = params.who;
    if (!signer) {
      throw new Error("A signer is needed");
    } else if (!isAddress2(where) || !isAddress2(who) || !isAddress2(daoAddress)) {
      throw new Error("Invalid address");
    }
    var daoInterface = DAO__factory.createInterface();
    var args = permissionParamsToContract({
      who,
      where,
      permission: params.permission
    });
    var hexBytes = daoInterface.encodeFunctionData("grant", args);
    return {
      to: daoAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.grantWithConditionAction = function grantWithConditionAction(daoAddress, params) {
    var signer = this.web3.getSigner();
    var where = params.where, who = params.who;
    if (!signer) {
      throw new NoSignerError();
    } else if (!isAddress2(where) || !isAddress2(who) || !isAddress2(daoAddress)) {
      throw new InvalidAddressError();
    }
    var daoInterface = DAO__factory.createInterface();
    var args = permissionWithConditionParamsToContract({
      who,
      where,
      permission: params.permission,
      condition: params.condition
    });
    var hexBytes = daoInterface.encodeFunctionData("grantWithCondition", args);
    return {
      to: daoAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.revokeAction = function revokeAction(daoAddress, params) {
    var signer = this.web3.getSigner();
    var where = params.where, who = params.who;
    if (!signer) {
      throw new Error("A signer is needed");
    } else if (!isAddress2(where) || !isAddress2(who) || !isAddress2(daoAddress)) {
      throw new Error("Invalid address");
    }
    var daoInterface = DAO__factory.createInterface();
    var args = permissionParamsToContract({
      who,
      where,
      permission: params.permission
    });
    var hexBytes = daoInterface.encodeFunctionData("revoke", args);
    return {
      to: daoAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.withdrawAction = function() {
    var _withdrawAction = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(params) {
      var to, _this$web3$getSigner, resolvedAddress, iface, data;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              to = params.recipientAddressOrEns;
              if (isAddress2(params.recipientAddressOrEns)) {
                _context.next = 8;
                break;
              }
              _context.next = 4;
              return (_this$web3$getSigner = this.web3.getSigner()) == null ? void 0 : _this$web3$getSigner.resolveName(params.recipientAddressOrEns);
            case 4:
              resolvedAddress = _context.sent;
              if (resolvedAddress) {
                _context.next = 7;
                break;
              }
              throw new Error("invalid ens");
            case 7:
              to = resolvedAddress;
            case 8:
              _context.t0 = params.type;
              _context.next = _context.t0 === TokenType.NATIVE ? 11 : _context.t0 === TokenType.ERC20 ? 12 : 17;
              break;
            case 11:
              return _context.abrupt("return", {
                to,
                value: params.amount,
                data: new Uint8Array()
              });
            case 12:
              if (params.tokenAddress) {
                _context.next = 14;
                break;
              }
              throw new Error("Empty token contract address");
            case 14:
              iface = new Contract(params.tokenAddress, erc20ContractAbi)["interface"];
              data = iface.encodeFunctionData("transfer", [params.recipientAddressOrEns, params.amount]);
              return _context.abrupt("return", {
                to: params.tokenAddress,
                value: BigInt(0),
                data: hexToBytes(data)
              });
            case 17:
              throw new Error("Unsupported token type");
            case 18:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function withdrawAction(_x) {
      return _withdrawAction.apply(this, arguments);
    }
    return withdrawAction;
  }();
  _proto.updateDaoMetadataAction = function() {
    var _updateDaoMetadataAction = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(daoAddressOrEns, metadataUri) {
      var address, _this$web3$getSigner2, resolvedAddress, daoInterface, args, hexBytes;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              address = daoAddressOrEns;
              if (isAddress2(daoAddressOrEns)) {
                _context2.next = 8;
                break;
              }
              _context2.next = 4;
              return (_this$web3$getSigner2 = this.web3.getSigner()) == null ? void 0 : _this$web3$getSigner2.resolveName(daoAddressOrEns);
            case 4:
              resolvedAddress = _context2.sent;
              if (resolvedAddress) {
                _context2.next = 7;
                break;
              }
              throw new Error("Invalid ENS");
            case 7:
              address = resolvedAddress;
            case 8:
              daoInterface = DAO__factory.createInterface();
              args = toUtf8Bytes2(metadataUri);
              hexBytes = daoInterface.encodeFunctionData("setMetadata", [args]);
              return _context2.abrupt("return", {
                to: address,
                value: BigInt(0),
                data: hexToBytes(hexBytes)
              });
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function updateDaoMetadataAction(_x2, _x3) {
      return _updateDaoMetadataAction.apply(this, arguments);
    }
    return updateDaoMetadataAction;
  }();
  _proto.setDaoUriAction = function setDaoUriAction(daoAddressOrEns, daoUri) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = daoInterface.encodeFunctionData("setDaoURI", [daoUri]);
    return {
      to: daoAddressOrEns,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.registerStandardCallbackAction = function registerStandardCallbackAction(daoAddressOrEns, params) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = daoInterface.encodeFunctionData("registerStandardCallback", [params.interfaceId, params.callbackSelector, params.magicNumber]);
    return {
      to: daoAddressOrEns,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.setSignatureValidatorAction = function setSignatureValidatorAction(daoAddressOrEns, signatureValidator) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = daoInterface.encodeFunctionData("setSignatureValidator", [signatureValidator]);
    return {
      to: daoAddressOrEns,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.upgradeToAction = function upgradeToAction(daoAddressOrEns, implementationAddress) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = daoInterface.encodeFunctionData("upgradeTo", [implementationAddress]);
    return {
      to: daoAddressOrEns,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.upgradeToAndCallAction = function upgradeToAndCallAction(daoAddressOrEns, params) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = daoInterface.encodeFunctionData("upgradeToAndCall", [params.implementationAddress, params.data]);
    return {
      to: daoAddressOrEns,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  return ClientEncoding2;
}(ClientCore);
var ClientEstimation = function(_ClientCore) {
  _inheritsLoose(ClientEstimation2, _ClientCore);
  function ClientEstimation2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(ClientEstimation2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = ClientEstimation2.prototype;
  _proto.createDao = function() {
    var _createDao = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(params) {
      var signer, daoInstance, pluginInstallationData, _iterator, _step, plugin, repo, currentRelease, latestVersion, gasEstimation;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 9;
                break;
              }
              throw new NoProviderError();
            case 9:
              if (!(params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\-]+$/))) {
                _context.next = 11;
                break;
              }
              throw new Error("Invalid subdomain format: use a-z, 0-9 and -");
            case 11:
              daoInstance = DAOFactory__factory.connect(this.web3.getDaoFactoryAddress(), signer);
              pluginInstallationData = [];
              _iterator = _createForOfIteratorHelperLoose(params.plugins);
            case 14:
              if ((_step = _iterator()).done) {
                _context.next = 26;
                break;
              }
              plugin = _step.value;
              repo = PluginRepo__factory.connect(plugin.id, signer);
              _context.next = 19;
              return repo.latestRelease();
            case 19:
              currentRelease = _context.sent;
              _context.next = 22;
              return repo["getLatestVersion(uint8)"](currentRelease);
            case 22:
              latestVersion = _context.sent;
              pluginInstallationData.push({
                pluginSetupRef: {
                  pluginSetupRepo: repo.address,
                  versionTag: latestVersion.tag
                },
                data: plugin.data
              });
            case 24:
              _context.next = 14;
              break;
            case 26:
              _context.next = 28;
              return daoInstance.estimateGas.createDao({
                subdomain: params.ensSubdomain,
                metadata: toUtf8Bytes2(params.metadataUri),
                daoURI: params.daoUri || "",
                trustedForwarder: params.trustedForwarder || AddressZero
              }, pluginInstallationData);
            case 28:
              gasEstimation = _context.sent;
              return _context.abrupt("return", this.web3.getApproximateGasFee(gasEstimation.toBigInt()));
            case 30:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function createDao(_x) {
      return _createDao.apply(this, arguments);
    }
    return createDao;
  }();
  _proto.deposit = function deposit(params) {
    var _this2 = this;
    var signer = this.web3.getConnectedSigner();
    if (!signer) {
      throw new NoSignerError();
    } else if (!signer.provider) {
      throw new NoProviderError();
    }
    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {
      throw new Error("Please, use the token's transfer function directly");
    }
    var _unwrapDepositParams = unwrapDepositParams(params), daoAddress = _unwrapDepositParams[0], amount = _unwrapDepositParams[1], tokenAddress = _unwrapDepositParams[2], reference = _unwrapDepositParams[3];
    var daoInstance = DAO__factory.connect(daoAddress, signer);
    var override = {};
    if (tokenAddress === AddressZero) {
      override.value = amount;
    }
    return daoInstance.estimateGas.deposit(tokenAddress, amount, reference, override).then(function(gasLimit) {
      return _this2.web3.getApproximateGasFee(gasLimit.toBigInt());
    });
  };
  _proto.updateAllowance = function() {
    var _updateAllowance = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var _this3 = this;
      var signer, daoAddress, provider, resolvedAddress, contract;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context2.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context2.next = 9;
                break;
              }
              throw new NoProviderError();
            case 9:
              if (params.tokenAddress) {
                _context2.next = 11;
                break;
              }
              throw new NoTokenAddress();
            case 11:
              daoAddress = params.daoAddressOrEns;
              if (isAddress2(daoAddress)) {
                _context2.next = 24;
                break;
              }
              _context2.next = 15;
              return this.web3.ensureOnline();
            case 15:
              provider = this.web3.getProvider();
              if (provider) {
                _context2.next = 18;
                break;
              }
              throw new NoProviderError();
            case 18:
              _context2.next = 20;
              return provider.resolveName(daoAddress);
            case 20:
              resolvedAddress = _context2.sent;
              if (resolvedAddress) {
                _context2.next = 23;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 23:
              daoAddress = resolvedAddress;
            case 24:
              contract = new Contract(params.tokenAddress, erc20ContractAbi, signer);
              return _context2.abrupt("return", contract.estimateGas.approve(daoAddress, params.amount).then(function(gasLimit) {
                return _this3.web3.getApproximateGasFee(gasLimit.toBigInt());
              }));
            case 26:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function updateAllowance(_x2) {
      return _updateAllowance.apply(this, arguments);
    }
    return updateAllowance;
  }();
  return ClientEstimation2;
}(ClientCore);
var ClientDecoding = function(_ClientCore) {
  _inheritsLoose(ClientDecoding2, _ClientCore);
  function ClientDecoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(ClientDecoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = ClientDecoding2.prototype;
  _proto.applyInstallationAction = function applyInstallationAction(data) {
    var pspInterface = PluginSetupProcessor__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = pspInterface.getFunction("applyInstallation");
    var result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);
    return applyInstallatonParamsFromContract(result);
  };
  _proto.grantAction = function grantAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("grant");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return permissionParamsFromContract(result);
  };
  _proto.grantWithConditionAction = function grantWithConditionAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("grantWithCondition");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return permissionParamsWitConditionFromContract(result);
  };
  _proto.revokeAction = function revokeAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("revoke");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return permissionParamsFromContract(result);
  };
  _proto.withdrawAction = function withdrawAction(to, value, data) {
    if (!(data != null && data.length)) {
      return {
        type: TokenType.NATIVE,
        recipientAddressOrEns: to,
        amount: value
      };
    }
    var abiObjects = [{
      tokenStandard: TokenType.ERC20,
      abi: erc20ContractAbi
    }];
    for (var _i = 0, _abiObjects = abiObjects; _i < _abiObjects.length; _i++) {
      var abiObject = _abiObjects[_i];
      var hexBytes = bytesToHex(data);
      var iface = new Contract(AddressZero, abiObject.abi)["interface"];
      var expectedFunction = iface.getFunction("transfer");
      var result = iface.decodeFunctionData(expectedFunction, hexBytes);
      return withdrawParamsFromContract(to, value, result, abiObject.tokenStandard);
    }
    throw new Error("The received action is not recognized");
  };
  _proto.updateDaoMetadataRawAction = function updateDaoMetadataRawAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("setMetadata");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    var metadataUri = toUtf8String2(result[0]);
    resolveIpfsCid(metadataUri);
    return metadataUri;
  };
  _proto.updateDaoMetadataAction = function() {
    var _updateDaoMetadataAction = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(data) {
      var daoInterface, hexBytes, expectedFunction, result, metadataUri, ipfsCid, stringMetadata;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              daoInterface = DAO__factory.createInterface();
              hexBytes = bytesToHex(data);
              expectedFunction = daoInterface.getFunction("setMetadata");
              result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
              metadataUri = toUtf8String2(result[0]);
              ipfsCid = resolveIpfsCid(metadataUri);
              _context.prev = 6;
              _context.next = 9;
              return this.ipfs.fetchString(ipfsCid);
            case 9:
              stringMetadata = _context.sent;
              return _context.abrupt("return", JSON.parse(stringMetadata));
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](6);
              throw new Error("Error reading data from IPFS");
            case 16:
            case "end":
              return _context.stop();
          }
      }, _callee, this, [[6, 13]]);
    }));
    function updateDaoMetadataAction(_x) {
      return _updateDaoMetadataAction.apply(this, arguments);
    }
    return updateDaoMetadataAction;
  }();
  _proto.setDaoUriAction = function setDaoUriAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("setDaoURI");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return result[0];
  };
  _proto.registerStandardCallbackAction = function registerStandardCallbackAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("registerStandardCallback");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return {
      interfaceId: result[0],
      callbackSelector: result[1],
      magicNumber: result[2]
    };
  };
  _proto.setSignatureValidatorAction = function setSignatureValidatorAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("setSignatureValidator");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return result[0];
  };
  _proto.upgradeToAction = function upgradeToAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("upgradeTo");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return result[0];
  };
  _proto.upgradeToAndCallAction = function upgradeToAndCallAction(data) {
    var daoInterface = DAO__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedFunction = daoInterface.getFunction("upgradeToAndCall");
    var result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);
    return {
      implementationAddress: result[0],
      data: hexToBytes(result[1])
    };
  };
  _proto.findInterface = function findInterface(data) {
    try {
      var func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);
      return {
        id: func.format("minimal"),
        functionName: func.name,
        hash: bytesToHex(data).substring(0, 10)
      };
    } catch (_unused2) {
      return null;
    }
  };
  return ClientDecoding2;
}(ClientCore);
var Client2 = function(_ClientCore) {
  _inheritsLoose(Client3, _ClientCore);
  function Client3(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    _this.privateMethods = new ClientMethods(context);
    _this.privateEncoding = new ClientEncoding(context);
    _this.privateDecoding = new ClientDecoding(context);
    _this.privateEstimation = new ClientEstimation(context);
    Object.freeze(Client3.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Client3, [{
    key: "methods",
    get: function get() {
      return this.privateMethods;
    }
  }, {
    key: "encoding",
    get: function get() {
      return this.privateEncoding;
    }
  }, {
    key: "decoding",
    get: function get() {
      return this.privateDecoding;
    }
  }, {
    key: "estimation",
    get: function get() {
      return this.privateEstimation;
    }
  }]);
  return Client3;
}(ClientCore);
var _templateObject$4;
var QueryAddresslistVotingMembers = (0, import_graphql_request.gql)(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteralLoose(["\nquery AddresslistVotingMembers($address: ID!) {\n    addresslistVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n"])));
var _templateObject$5;
var _templateObject2$1;
var QueryAddresslistVotingProposal = (0, import_graphql_request.gql)(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteralLoose(["\nquery AddresslistVotingProposal($proposalId: ID!) {\n  addresslistVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes\n    no\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    executable\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n"])));
var QueryAddresslistVotingProposals = (0, import_graphql_request.gql)(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteralLoose(["\nquery AddresslistVotingProposals($where: AddresslistVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: AddresslistVotingProposal_orderBy!) {\n  addresslistVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes\n    no\n    abstain\n    startDate\n    endDate\n    executed\n    executable\n  }\n}\n"])));
var _templateObject$6;
var QueryAddresslistVotingSettings = (0, import_graphql_request.gql)(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteralLoose(["\nquery AddresslistVotingSettings($address: ID!) {\n  addresslistVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n"])));
function toAddresslistVotingProposal(proposal, metadata) {
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  var creationDate = new Date(parseInt(proposal.createdAt) * 1e3);
  var executionDate = proposal.executionDate ? new Date(parseInt(proposal.executionDate) * 1e3) : null;
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary,
      description: metadata.description,
      resources: metadata.resources,
      media: metadata.media
    },
    startDate,
    endDate,
    creationDate,
    executionTxHash: proposal.executionTxHash || null,
    creationBlockNumber: parseInt(proposal.creationBlockNumber),
    executionDate,
    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,
    actions: proposal.actions.map(function(action) {
      return {
        data: hexToBytes(action.data),
        to: action.to,
        value: BigInt(action.value)
      };
    }),
    status: computeProposalStatus(proposal),
    result: {
      yes: proposal.yes ? parseInt(proposal.yes) : 0,
      no: proposal.no ? parseInt(proposal.no) : 0,
      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0
    },
    settings: {
      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),
      minParticipation: decodeRatio(BigInt(proposal.minVotingPower) * BigInt(1e6) / BigInt(proposal.totalVotingPower), 6),
      duration: parseInt(proposal.endDate) - parseInt(proposal.startDate)
    },
    totalVotingWeight: parseInt(proposal.totalVotingPower),
    votes: proposal.voters.map(function(voter) {
      return {
        voteReplaced: voter.voteReplaced,
        address: voter.voter.address,
        vote: SubgraphVoteValuesMap.get(voter.voteOption)
      };
    })
  };
}
function toAddresslistVotingProposalListItem(proposal, metadata) {
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary
    },
    startDate,
    endDate,
    status: computeProposalStatus(proposal),
    result: {
      yes: proposal.yes ? parseInt(proposal.yes) : 0,
      no: proposal.no ? parseInt(proposal.no) : 0,
      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0
    }
  };
}
var AddresslistVotingClientEncoding = function(_ClientCore) {
  _inheritsLoose(AddresslistVotingClientEncoding2, _ClientCore);
  function AddresslistVotingClientEncoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(AddresslistVotingClientEncoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  AddresslistVotingClientEncoding2.getPluginInstallItem = function getPluginInstallItem4(params, network) {
    if (!SupportedNetworksArray.includes(network)) {
      throw new UnsupportedNetworkError(network);
    }
    var _votingSettingsToCont = votingSettingsToContract(params.votingSettings), votingMode = _votingSettingsToCont.votingMode, supportThreshold = _votingSettingsToCont.supportThreshold, minParticipation = _votingSettingsToCont.minParticipation, minDuration = _votingSettingsToCont.minDuration, minProposerVotingPower = _votingSettingsToCont.minProposerVotingPower;
    var hexBytes = defaultAbiCoder.encode(["tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings", "address[] members"], [[votingMode, supportThreshold, minParticipation, minDuration, minProposerVotingPower], params.addresses]);
    return {
      id: LIVE_CONTRACTS[network].addresslistVotingRepo,
      data: hexToBytes(hexBytes)
    };
  };
  var _proto = AddresslistVotingClientEncoding2.prototype;
  _proto.updatePluginSettingsAction = function updatePluginSettingsAction(pluginAddress, params) {
    if (!isAddress2(pluginAddress)) {
      throw new InvalidAddressError();
    }
    return {
      to: pluginAddress,
      value: BigInt(0),
      data: encodeUpdateVotingSettingsAction(params)
    };
  };
  _proto.addMembersAction = function addMembersAction(pluginAddress, members) {
    if (!isAddress2(pluginAddress)) {
      throw new InvalidAddressError();
    }
    for (var _iterator = _createForOfIteratorHelperLoose(members), _step; !(_step = _iterator()).done; ) {
      var member = _step.value;
      if (!isAddress2(member)) {
        throw new InvalidAddressError();
      }
    }
    var votingInterface = AddresslistVoting__factory.createInterface();
    var hexBytes = votingInterface.encodeFunctionData("addAddresses", [members]);
    return {
      to: pluginAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.removeMembersAction = function removeMembersAction(pluginAddress, members) {
    if (!isAddress2(pluginAddress)) {
      throw new InvalidAddressError();
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose(members), _step2; !(_step2 = _iterator2()).done; ) {
      var member = _step2.value;
      if (!isAddress2(member)) {
        throw new InvalidAddressError();
      }
    }
    var votingInterface = AddresslistVoting__factory.createInterface();
    var hexBytes = votingInterface.encodeFunctionData("removeAddresses", [members]);
    return {
      to: pluginAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  return AddresslistVotingClientEncoding2;
}(ClientCore);
var AddresslistVotingClientMethods = function(_ClientCore) {
  _inheritsLoose(AddresslistVotingClientMethods2, _ClientCore);
  function AddresslistVotingClientMethods2(context) {
    var _this5;
    _this5 = _ClientCore.call(this, context) || this;
    Object.freeze(AddresslistVotingClientMethods2.prototype);
    Object.freeze(_assertThisInitialized(_this5));
    return _this5;
  }
  var _proto = AddresslistVotingClientMethods2.prototype;
  _proto.createProposal = function createProposal(params) {
    var _this = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, addresslistContract, allowFailureMap, startTimestamp, endTimestamp, tx, receipt, addresslistContractInterface, log, parsedLog, proposalId;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = _this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              addresslistContract = AddresslistVoting__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return _awaitAsyncGenerator2(addresslistContract.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3), params.creatorVote || 0, params.executeOnPass || false));
            case 15:
              tx = _context.sent;
              _context.next = 18;
              return {
                key: ProposalCreationSteps.CREATING,
                txHash: tx.hash
              };
            case 18:
              _context.next = 20;
              return _awaitAsyncGenerator2(tx.wait());
            case 20:
              receipt = _context.sent;
              addresslistContractInterface = AddresslistVoting__factory.createInterface();
              log = findLog(receipt, addresslistContractInterface, "ProposalCreated");
              if (log) {
                _context.next = 25;
                break;
              }
              throw new ProposalCreationError();
            case 25:
              parsedLog = addresslistContractInterface.parseLog(log);
              proposalId = parsedLog.args["proposalId"];
              if (proposalId) {
                _context.next = 29;
                break;
              }
              throw new ProposalCreationError();
            case 29:
              _context.next = 31;
              return {
                key: ProposalCreationSteps.DONE,
                proposalId: encodeProposalId(params.pluginAddress, Number(proposalId))
              };
            case 31:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }))();
  };
  _proto.pinMetadata = function() {
    var _pinMetadata = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var cid;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.ipfs.add(JSON.stringify(params));
            case 3:
              cid = _context2.sent;
              _context2.next = 6;
              return this.ipfs.pin(cid);
            case 6:
              return _context2.abrupt("return", "ipfs://" + cid);
            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new IpfsPinError();
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this, [[0, 9]]);
    }));
    function pinMetadata(_x) {
      return _pinMetadata.apply(this, arguments);
    }
    return pinMetadata;
  }();
  _proto.voteProposal = function voteProposal(params) {
    var _this2 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee3() {
      var signer, _decodeProposalId, pluginAddress, id2, addresslistContract, tx;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = _this2.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return _awaitAsyncGenerator2(addresslistContract.vote(id2, params.vote, false));
            case 11:
              tx = _context3.sent;
              _context3.next = 14;
              return {
                key: VoteProposalStep.VOTING,
                txHash: tx.hash
              };
            case 14:
              _context3.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context3.next = 18;
              return {
                key: VoteProposalStep.DONE
              };
            case 18:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }))();
  };
  _proto.executeProposal = function executeProposal(proposalId) {
    var _this3 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee4() {
      var signer, _decodeProposalId2, pluginAddress, id2, addresslistContract, tx;
      return _regeneratorRuntime2().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = _this3.web3.getConnectedSigner();
              if (signer) {
                _context4.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context4.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              _context4.next = 11;
              return _awaitAsyncGenerator2(addresslistContract.execute(id2));
            case 11:
              tx = _context4.sent;
              _context4.next = 14;
              return {
                key: ExecuteProposalStep.EXECUTING,
                txHash: tx.hash
              };
            case 14:
              _context4.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context4.next = 18;
              return {
                key: ExecuteProposalStep.DONE
              };
            case 18:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }))();
  };
  _proto.prepareInstallation = function prepareInstallation(params) {
    var _this4 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee5() {
      var signer, network, networkName, pspContract, addresslistVotingRepoContract, versionTag, latestVersion, addresslistVotingPluginInstallItem, tx, receipt, pspContractInterface, log, parsedLog, pluginAddress, preparedSetupData;
      return _regeneratorRuntime2().wrap(function _callee5$(_context5) {
        while (1)
          switch (_context5.prev = _context5.next) {
            case 0:
              signer = _this4.web3.getConnectedSigner();
              if (signer) {
                _context5.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context5.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _context5.next = 9;
              return _awaitAsyncGenerator2(signer.provider.getNetwork());
            case 9:
              network = _context5.sent;
              networkName = network.name;
              if (SupportedNetworksArray.includes(networkName)) {
                _context5.next = 13;
                break;
              }
              throw new UnsupportedNetworkError(networkName);
            case 13:
              pspContract = PluginSetupProcessor__factory.connect(LIVE_CONTRACTS[networkName].pluginSetupProcessor, signer);
              addresslistVotingRepoContract = PluginRepo__factory.connect(LIVE_CONTRACTS[networkName].addresslistVotingRepo, signer);
              versionTag = params.versionTag;
              if (params.versionTag) {
                _context5.next = 21;
                break;
              }
              _context5.next = 19;
              return _awaitAsyncGenerator2(addresslistVotingRepoContract["getLatestVersion(address)"](LIVE_CONTRACTS[networkName].addresslistVotingSetup));
            case 19:
              latestVersion = _context5.sent;
              versionTag = {
                build: latestVersion.tag.build,
                release: latestVersion.tag.release
              };
            case 21:
              addresslistVotingPluginInstallItem = AddresslistVotingClientEncoding.getPluginInstallItem(params.settings, networkName);
              _context5.next = 24;
              return _awaitAsyncGenerator2(pspContract.prepareInstallation(params.daoAddressOrEns, {
                pluginSetupRef: {
                  pluginSetupRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,
                  versionTag
                },
                data: addresslistVotingPluginInstallItem.data
              }));
            case 24:
              tx = _context5.sent;
              _context5.next = 27;
              return {
                key: PrepareInstallationStep.PREPARING,
                txHash: tx.hash
              };
            case 27:
              _context5.next = 29;
              return _awaitAsyncGenerator2(tx.wait());
            case 29:
              receipt = _context5.sent;
              pspContractInterface = PluginSetupProcessor__factory.createInterface();
              log = findLog(receipt, pspContractInterface, "InstallationPrepared");
              if (log) {
                _context5.next = 34;
                break;
              }
              throw new ProposalCreationError();
            case 34:
              parsedLog = pspContractInterface.parseLog(log);
              pluginAddress = parsedLog.args["plugin"];
              preparedSetupData = parsedLog.args["preparedSetupData"];
              if (pluginAddress || preparedSetupData) {
                _context5.next = 39;
                break;
              }
              throw new PluginInstallationPreparationError();
            case 39:
              _context5.next = 41;
              return {
                key: PrepareInstallationStep.DONE,
                pluginAddress,
                pluginRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,
                versionTag,
                permissions: preparedSetupData.permissions,
                helpers: preparedSetupData.helpers
              };
            case 41:
            case "end":
              return _context5.stop();
          }
      }, _callee5);
    }))();
  };
  _proto.canVote = function() {
    var _canVote = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee6(params) {
      var signer, _decodeProposalId3, pluginAddress, id2, addresslistContract;
      return _regeneratorRuntime2().wrap(function _callee6$(_context6) {
        while (1)
          switch (_context6.prev = _context6.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer.provider) {
                _context6.next = 5;
                break;
              }
              throw new NoProviderError();
            case 5:
              if (isAddress2(params.voterAddressOrEns)) {
                _context6.next = 7;
                break;
              }
              throw new InvalidAddressError();
            case 7:
              _decodeProposalId3 = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId3.pluginAddress, id2 = _decodeProposalId3.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              return _context6.abrupt("return", addresslistContract.callStatic.canVote(id2, params.voterAddressOrEns, params.vote));
            case 10:
            case "end":
              return _context6.stop();
          }
      }, _callee6, this);
    }));
    function canVote(_x2) {
      return _canVote.apply(this, arguments);
    }
    return canVote;
  }();
  _proto.canExecute = function() {
    var _canExecute = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee7(proposalId) {
      var signer, _decodeProposalId4, pluginAddress, id2, addresslistContract;
      return _regeneratorRuntime2().wrap(function _callee7$(_context7) {
        while (1)
          switch (_context7.prev = _context7.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context7.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context7.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId4 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId4.pluginAddress, id2 = _decodeProposalId4.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              return _context7.abrupt("return", addresslistContract.canExecute(id2));
            case 10:
            case "end":
              return _context7.stop();
          }
      }, _callee7, this);
    }));
    function canExecute(_x3) {
      return _canExecute.apply(this, arguments);
    }
    return canExecute;
  }();
  _proto.getMembers = function() {
    var _getMembers = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee8(pluginAddress) {
      var query, params, name, _yield$this$graphql$r, addresslistVotingPlugin;
      return _regeneratorRuntime2().wrap(function _callee8$(_context8) {
        while (1)
          switch (_context8.prev = _context8.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context8.next = 2;
                break;
              }
              throw new InvalidAddressError();
            case 2:
              query = QueryAddresslistVotingMembers;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "AddresslistVotingVoting members";
              _context8.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r = _context8.sent;
              addresslistVotingPlugin = _yield$this$graphql$r.addresslistVotingPlugin;
              return _context8.abrupt("return", addresslistVotingPlugin.members.map(function(member) {
                return member.address;
              }));
            case 10:
            case "end":
              return _context8.stop();
          }
      }, _callee8, this);
    }));
    function getMembers(_x4) {
      return _getMembers.apply(this, arguments);
    }
    return getMembers;
  }();
  _proto.getProposal = function() {
    var _getProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee9(proposalId) {
      var extendedProposalId, query, params, name, _yield$this$graphql$r2, addresslistVotingProposal, metadataCid, metadataString, metadata;
      return _regeneratorRuntime2().wrap(function _callee9$(_context9) {
        while (1)
          switch (_context9.prev = _context9.next) {
            case 0:
              if (isProposalId(proposalId)) {
                _context9.next = 2;
                break;
              }
              throw new InvalidProposalIdError();
            case 2:
              extendedProposalId = getExtendedProposalId(proposalId);
              query = QueryAddresslistVotingProposal;
              params = {
                proposalId: extendedProposalId
              };
              name = "AddresslistVoting proposal";
              _context9.next = 8;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 8:
              _yield$this$graphql$r2 = _context9.sent;
              addresslistVotingProposal = _yield$this$graphql$r2.addresslistVotingProposal;
              if (addresslistVotingProposal) {
                _context9.next = 14;
                break;
              }
              return _context9.abrupt("return", null);
            case 14:
              if (addresslistVotingProposal.metadata) {
                _context9.next = 16;
                break;
              }
              return _context9.abrupt("return", toAddresslistVotingProposal(addresslistVotingProposal, EMPTY_PROPOSAL_METADATA_LINK));
            case 16:
              _context9.prev = 16;
              metadataCid = resolveIpfsCid(addresslistVotingProposal.metadata);
              _context9.next = 20;
              return this.ipfs.fetchString(metadataCid);
            case 20:
              metadataString = _context9.sent;
              metadata = JSON.parse(metadataString);
              return _context9.abrupt("return", toAddresslistVotingProposal(addresslistVotingProposal, metadata));
            case 25:
              _context9.prev = 25;
              _context9.t0 = _context9["catch"](16);
              if (!(_context9.t0 instanceof InvalidCidError)) {
                _context9.next = 29;
                break;
              }
              return _context9.abrupt("return", toAddresslistVotingProposal(addresslistVotingProposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
            case 29:
              return _context9.abrupt("return", toAddresslistVotingProposal(addresslistVotingProposal, UNAVAILABLE_PROPOSAL_METADATA));
            case 30:
            case "end":
              return _context9.stop();
          }
      }, _callee9, this, [[16, 25]]);
    }));
    function getProposal(_x5) {
      return _getProposal.apply(this, arguments);
    }
    return getProposal;
  }();
  _proto.getProposals = function() {
    var _getProposals = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee11(_ref) {
      var _this6 = this;
      var daoAddressOrEns, _ref$limit, limit, status, _ref$skip, skip, _ref$direction, direction, _ref$sortBy, sortBy, where, address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r3, addresslistVotingProposals;
      return _regeneratorRuntime2().wrap(function _callee11$(_context11) {
        while (1)
          switch (_context11.prev = _context11.next) {
            case 0:
              daoAddressOrEns = _ref.daoAddressOrEns, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, status = _ref.status, _ref$skip = _ref.skip, skip = _ref$skip === void 0 ? 0 : _ref$skip, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? SortDirection.ASC : _ref$direction, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? ProposalSortBy.CREATED_AT : _ref$sortBy;
              where = {};
              address = daoAddressOrEns;
              if (!address) {
                _context11.next = 17;
                break;
              }
              if (isAddress2(address)) {
                _context11.next = 16;
                break;
              }
              _context11.next = 7;
              return this.web3.ensureOnline();
            case 7:
              provider = this.web3.getProvider();
              if (provider) {
                _context11.next = 10;
                break;
              }
              throw new NoProviderError();
            case 10:
              _context11.next = 12;
              return provider.resolveName(address);
            case 12:
              resolvedAddress = _context11.sent;
              if (resolvedAddress) {
                _context11.next = 15;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 15:
              address = resolvedAddress;
            case 16:
              where = {
                dao: address.toLowerCase()
              };
            case 17:
              if (status) {
                where = _extends2({}, where, computeProposalStatusFilter(status));
              }
              query = QueryAddresslistVotingProposals;
              params = {
                where,
                limit,
                skip,
                direction,
                sortBy
              };
              name = "AddresslistVoting proposals";
              _context11.next = 23;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 23:
              _yield$this$graphql$r3 = _context11.sent;
              addresslistVotingProposals = _yield$this$graphql$r3.addresslistVotingProposals;
              _context11.next = 27;
              return this.ipfs.ensureOnline();
            case 27:
              return _context11.abrupt("return", Promise.all(addresslistVotingProposals.map(function() {
                var _ref2 = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee10(proposal) {
                  var metadataCid, stringMetadata, metadata;
                  return _regeneratorRuntime2().wrap(function _callee10$(_context10) {
                    while (1)
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          if (proposal.metadata) {
                            _context10.next = 2;
                            break;
                          }
                          return _context10.abrupt("return", toAddresslistVotingProposalListItem(proposal, EMPTY_PROPOSAL_METADATA_LINK));
                        case 2:
                          _context10.prev = 2;
                          metadataCid = resolveIpfsCid(proposal.metadata);
                          _context10.next = 6;
                          return _this6.ipfs.fetchString(metadataCid);
                        case 6:
                          stringMetadata = _context10.sent;
                          metadata = JSON.parse(stringMetadata);
                          return _context10.abrupt("return", toAddresslistVotingProposalListItem(proposal, metadata));
                        case 11:
                          _context10.prev = 11;
                          _context10.t0 = _context10["catch"](2);
                          if (!(_context10.t0 instanceof InvalidCidError)) {
                            _context10.next = 15;
                            break;
                          }
                          return _context10.abrupt("return", toAddresslistVotingProposalListItem(proposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
                        case 15:
                          return _context10.abrupt("return", toAddresslistVotingProposalListItem(proposal, UNAVAILABLE_PROPOSAL_METADATA));
                        case 16:
                        case "end":
                          return _context10.stop();
                      }
                  }, _callee10, null, [[2, 11]]);
                }));
                return function(_x7) {
                  return _ref2.apply(this, arguments);
                };
              }())));
            case 28:
            case "end":
              return _context11.stop();
          }
      }, _callee11, this);
    }));
    function getProposals(_x6) {
      return _getProposals.apply(this, arguments);
    }
    return getProposals;
  }();
  _proto.getVotingSettings = function() {
    var _getVotingSettings = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee12(pluginAddress) {
      var query, params, name, _yield$this$graphql$r4, addresslistVotingPlugin;
      return _regeneratorRuntime2().wrap(function _callee12$(_context12) {
        while (1)
          switch (_context12.prev = _context12.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context12.next = 2;
                break;
              }
              throw new InvalidAddressError();
            case 2:
              query = QueryAddresslistVotingSettings;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "AddresslistVoting settings";
              _context12.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r4 = _context12.sent;
              addresslistVotingPlugin = _yield$this$graphql$r4.addresslistVotingPlugin;
              if (addresslistVotingPlugin) {
                _context12.next = 11;
                break;
              }
              return _context12.abrupt("return", null);
            case 11:
              return _context12.abrupt("return", {
                minDuration: parseInt(addresslistVotingPlugin.minDuration),
                supportThreshold: decodeRatio(BigInt(addresslistVotingPlugin.supportThreshold), 6),
                minParticipation: decodeRatio(BigInt(addresslistVotingPlugin.minParticipation), 6),
                minProposerVotingPower: BigInt(addresslistVotingPlugin.minProposerVotingPower),
                votingMode: addresslistVotingPlugin.votingMode
              });
            case 12:
            case "end":
              return _context12.stop();
          }
      }, _callee12, this);
    }));
    function getVotingSettings(_x8) {
      return _getVotingSettings.apply(this, arguments);
    }
    return getVotingSettings;
  }();
  return AddresslistVotingClientMethods2;
}(ClientCore);
var AVAILABLE_FUNCTION_SIGNATURES$1 = [MajorityVotingBase__factory.createInterface().getFunction("updateVotingSettings").format("minimal"), AddresslistVoting__factory.createInterface().getFunction("addAddresses").format("minimal"), AddresslistVoting__factory.createInterface().getFunction("removeAddresses").format("minimal")];
var AddresslistVotingClientDecoding = function(_ClientCore) {
  _inheritsLoose(AddresslistVotingClientDecoding2, _ClientCore);
  function AddresslistVotingClientDecoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(AddresslistVotingClientDecoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = AddresslistVotingClientDecoding2.prototype;
  _proto.updatePluginSettingsAction = function updatePluginSettingsAction(data) {
    return decodeUpdatePluginSettingsAction(data);
  };
  _proto.addMembersAction = function addMembersAction(data) {
    var votingInterface = AddresslistVoting__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = votingInterface.getFunction("addAddresses");
    var result = votingInterface.decodeFunctionData(expectedfunction, hexBytes);
    return result[0];
  };
  _proto.removeMembersAction = function removeMembersAction(data) {
    var votingInterface = AddresslistVoting__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = votingInterface.getFunction("removeAddresses");
    var result = votingInterface.decodeFunctionData(expectedfunction, hexBytes);
    return result[0];
  };
  _proto.findInterface = function findInterface(data) {
    try {
      var func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES$1);
      return {
        id: func.format("minimal"),
        functionName: func.name,
        hash: bytesToHex(data).substring(0, 10)
      };
    } catch (_unused) {
      return null;
    }
  };
  return AddresslistVotingClientDecoding2;
}(ClientCore);
var AddresslistVotingClientEstimation = function(_ClientCore) {
  _inheritsLoose(AddresslistVotingClientEstimation2, _ClientCore);
  function AddresslistVotingClientEstimation2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(AddresslistVotingClientEstimation2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = AddresslistVotingClientEstimation2.prototype;
  _proto.createProposal = function() {
    var _createProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(params) {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, addresslistContract, allowFailureMap, startTimestamp, endTimestamp, estimatedGasFee;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              addresslistContract = AddresslistVoting__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return addresslistContract.estimateGas.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3), params.creatorVote || 0, params.executeOnPass || false);
            case 15:
              estimatedGasFee = _context.sent;
              return _context.abrupt("return", this.web3.getApproximateGasFee(estimatedGasFee.toBigInt()));
            case 17:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function createProposal(_x) {
      return _createProposal.apply(this, arguments);
    }
    return createProposal;
  }();
  _proto.voteProposal = function() {
    var _voteProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var signer, _decodeProposalId, pluginAddress, id2, addresslistContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context2.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context2.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              _context2.next = 11;
              return addresslistContract.estimateGas.vote(id2, params.vote, false);
            case 11:
              estimation = _context2.sent;
              return _context2.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function voteProposal(_x2) {
      return _voteProposal.apply(this, arguments);
    }
    return voteProposal;
  }();
  _proto.executeProposal = function() {
    var _executeProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee3(proposalId) {
      var signer, _decodeProposalId2, pluginAddress, id2, addresslistContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              addresslistContract = AddresslistVoting__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return addresslistContract.estimateGas.execute(id2);
            case 11:
              estimation = _context3.sent;
              return _context3.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context3.stop();
          }
      }, _callee3, this);
    }));
    function executeProposal(_x3) {
      return _executeProposal.apply(this, arguments);
    }
    return executeProposal;
  }();
  return AddresslistVotingClientEstimation2;
}(ClientCore);
var AddresslistVotingClient = function(_ClientCore) {
  _inheritsLoose(AddresslistVotingClient2, _ClientCore);
  function AddresslistVotingClient2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    _this.privateMethods = new AddresslistVotingClientMethods(context);
    _this.privateEncoding = new AddresslistVotingClientEncoding(context);
    _this.privateDecoding = new AddresslistVotingClientDecoding(context);
    _this.privateEstimation = new AddresslistVotingClientEstimation(context);
    Object.freeze(AddresslistVotingClient2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(AddresslistVotingClient2, [{
    key: "methods",
    get: function get() {
      return this.privateMethods;
    }
  }, {
    key: "encoding",
    get: function get() {
      return this.privateEncoding;
    }
  }, {
    key: "decoding",
    get: function get() {
      return this.privateDecoding;
    }
  }, {
    key: "estimation",
    get: function get() {
      return this.privateEstimation;
    }
  }]);
  return AddresslistVotingClient2;
}(ClientCore);
AddresslistVotingClient.encoding = {
  getPluginInstallItem: function getPluginInstallItem(params, network) {
    if (network === void 0) {
      network = "mainnet";
    }
    return AddresslistVotingClientEncoding.getPluginInstallItem(params, network);
  }
};
var SubgraphTokenType;
(function(SubgraphTokenType2) {
  SubgraphTokenType2["ERC20"] = "ERC20Token";
  SubgraphTokenType2["ERC721"] = "ERC721Token";
})(SubgraphTokenType || (SubgraphTokenType = {}));
var SubgraphContractType;
(function(SubgraphContractType2) {
  SubgraphContractType2["ERC20"] = "ERC20Contract";
  SubgraphContractType2["ERC721"] = "ERC721Contract";
})(SubgraphContractType || (SubgraphContractType = {}));
var _templateObject$7;
var _templateObject2$2;
var QueryTokenVotingProposal = (0, import_graphql_request.gql)(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteralLoose(["\nquery TokenVotingProposal($proposalId: ID!) {\n  tokenVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes,\n    no,\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    executable\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin {\n      token {\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n"])));
var QueryTokenVotingProposals = (0, import_graphql_request.gql)(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteralLoose(["\nquery TokenVotingProposals($where: TokenVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenVotingProposal_orderBy!) {\n  tokenVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes,\n    no,\n    abstain\n    startDate\n    endDate\n    executed\n    executable\n    votingMode\n    supportThreshold\n    minVotingPower\n    totalVotingPower\n    plugin{\n      token{\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n  }\n}\n"])));
var _templateObject$8;
var QueryTokenVotingSettings = (0, import_graphql_request.gql)(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteralLoose(["\nquery TokenVotingSettings($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n"])));
var _templateObject$9;
var QueryTokenVotingPlugin = (0, import_graphql_request.gql)(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteralLoose(["\nquery TokenVotingPlugin($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    token {\n      id\n      name\n      symbol\n      __typename\n      ...on ERC20Contract {\n        decimals\n      }\n    }\n  }\n}\n"])));
var _templateObject$a;
var QueryTokenVotingMembers = (0, import_graphql_request.gql)(_templateObject$a || (_templateObject$a = _taggedTemplateLiteralLoose(["\nquery TokenVotingMembers($address: ID!) {\n    tokenVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n"])));
function toTokenVotingProposal(proposal, metadata) {
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  var creationDate = new Date(parseInt(proposal.createdAt) * 1e3);
  var executionDate = proposal.executionDate ? new Date(parseInt(proposal.executionDate) * 1e3) : null;
  var usedVotingWeight = BigInt(0);
  for (var _iterator = _createForOfIteratorHelperLoose(proposal.voters), _step; !(_step = _iterator()).done; ) {
    var voter = _step.value;
    usedVotingWeight += BigInt(voter.votingPower);
  }
  var token = parseToken(proposal.plugin.token);
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary,
      description: metadata.description,
      resources: metadata.resources,
      media: metadata.media
    },
    startDate,
    endDate,
    creationDate,
    creationBlockNumber: parseInt(proposal.creationBlockNumber),
    executionDate,
    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,
    executionTxHash: proposal.executionTxHash || null,
    actions: proposal.actions.map(function(action) {
      return {
        data: hexToBytes(action.data),
        to: action.to,
        value: BigInt(action.value)
      };
    }),
    status: computeProposalStatus(proposal),
    result: {
      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),
      no: proposal.no ? BigInt(proposal.no) : BigInt(0),
      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0)
    },
    settings: {
      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),
      duration: parseInt(proposal.endDate) - parseInt(proposal.startDate),
      minParticipation: decodeRatio(BigInt(proposal.minVotingPower) * BigInt(1e6) / BigInt(proposal.totalVotingPower), 6)
    },
    token,
    usedVotingWeight,
    totalVotingWeight: BigInt(proposal.totalVotingPower),
    votes: proposal.voters.map(function(voter2) {
      return {
        voteReplaced: voter2.voteReplaced,
        address: voter2.voter.address,
        vote: SubgraphVoteValuesMap.get(voter2.voteOption),
        weight: BigInt(voter2.votingPower)
      };
    })
  };
}
function toTokenVotingProposalListItem(proposal, metadata) {
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  var token = parseToken(proposal.plugin.token);
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    settings: {
      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),
      duration: parseInt(proposal.endDate) - parseInt(proposal.startDate),
      minParticipation: decodeRatio(BigInt(proposal.minVotingPower) * BigInt(1e6) / BigInt(proposal.totalVotingPower), 6)
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary
    },
    totalVotingWeight: BigInt(proposal.totalVotingPower),
    startDate,
    endDate,
    status: computeProposalStatus(proposal),
    result: {
      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),
      no: proposal.no ? BigInt(proposal.no) : BigInt(0),
      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0)
    },
    token
  };
}
function mintTokenParamsToContract(params) {
  return [params.address, BigNumber2.from(params.amount)];
}
function mintTokenParamsFromContract(result) {
  return {
    address: result[0],
    amount: BigInt(result[1])
  };
}
function tokenVotingInitParamsToContract(params) {
  var token = ["", "", ""];
  var balances = [[], []];
  if (params.newToken) {
    token = [AddressZero, params.newToken.name, params.newToken.symbol];
    balances = [params.newToken.balances.map(function(balance) {
      return balance.address;
    }), params.newToken.balances.map(function(_ref) {
      var balance = _ref.balance;
      return BigNumber2.from(balance);
    })];
  } else if (params.useToken) {
    var _params$useToken;
    token = [(_params$useToken = params.useToken) == null ? void 0 : _params$useToken.address, "", ""];
  }
  return [Object.values(votingSettingsToContract(params.votingSettings)), token, balances];
}
function parseToken(subgraphToken) {
  var token = null;
  if (subgraphToken.__typename === SubgraphContractType.ERC20) {
    token = {
      address: subgraphToken.id,
      symbol: subgraphToken.symbol,
      name: subgraphToken.name,
      decimals: subgraphToken.decimals,
      type: TokenType.ERC20
    };
  } else if (subgraphToken.__typename === SubgraphContractType.ERC721) {
    token = {
      address: subgraphToken.id,
      symbol: subgraphToken.symbol,
      name: subgraphToken.name,
      type: TokenType.ERC721
    };
  }
  return token;
}
var TokenVotingClientEncoding = function(_ClientCore) {
  _inheritsLoose(TokenVotingClientEncoding2, _ClientCore);
  function TokenVotingClientEncoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(TokenVotingClientEncoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  TokenVotingClientEncoding2.getPluginInstallItem = function getPluginInstallItem4(params, network) {
    if (!SupportedNetworksArray.includes(network)) {
      throw new UnsupportedNetworkError(network);
    }
    var args = tokenVotingInitParamsToContract(params);
    var hexBytes = defaultAbiCoder.encode(
      ["tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings", "tuple(address addr, string name, string symbol) tokenSettings", "tuple(address[] receivers, uint256[] amounts) mintSettings"],
      args
    );
    return {
      id: LIVE_CONTRACTS[network].tokenVotingRepo,
      data: hexToBytes(hexBytes)
    };
  };
  var _proto = TokenVotingClientEncoding2.prototype;
  _proto.updatePluginSettingsAction = function updatePluginSettingsAction(pluginAddress, params) {
    if (!isAddress2(pluginAddress)) {
      throw new Error("Invalid plugin address");
    }
    return {
      to: pluginAddress,
      value: BigInt(0),
      data: encodeUpdateVotingSettingsAction(params)
    };
  };
  _proto.mintTokenAction = function mintTokenAction(minterAddress, params) {
    if (!isAddress2(minterAddress) || !isAddress2(params.address)) {
      throw new InvalidAddressError();
    }
    var votingInterface = IERC20MintableUpgradeable__factory.createInterface();
    var args = mintTokenParamsToContract(params);
    var hexBytes = votingInterface.encodeFunctionData("mint", args);
    return {
      to: minterAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  return TokenVotingClientEncoding2;
}(ClientCore);
var TokenVotingClientMethods = function(_ClientCore) {
  _inheritsLoose(TokenVotingClientMethods2, _ClientCore);
  function TokenVotingClientMethods2(context) {
    var _this5;
    _this5 = _ClientCore.call(this, context) || this;
    Object.freeze(TokenVotingClientMethods2.prototype);
    Object.freeze(_assertThisInitialized(_this5));
    return _this5;
  }
  var _proto = TokenVotingClientMethods2.prototype;
  _proto.createProposal = function createProposal(params) {
    var _this = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, tokenVotingContract, allowFailureMap, startTimestamp, endTimestamp, tx, receipt, tokenVotingContractInterface, log, parsedLog, proposalId;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = _this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              tokenVotingContract = TokenVoting__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return _awaitAsyncGenerator2(tokenVotingContract.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3), params.creatorVote || 0, params.executeOnPass || false));
            case 15:
              tx = _context.sent;
              _context.next = 18;
              return {
                key: ProposalCreationSteps.CREATING,
                txHash: tx.hash
              };
            case 18:
              _context.next = 20;
              return _awaitAsyncGenerator2(tx.wait());
            case 20:
              receipt = _context.sent;
              tokenVotingContractInterface = TokenVoting__factory.createInterface();
              log = findLog(receipt, tokenVotingContractInterface, "ProposalCreated");
              if (log) {
                _context.next = 25;
                break;
              }
              throw new ProposalCreationError();
            case 25:
              parsedLog = tokenVotingContractInterface.parseLog(log);
              proposalId = parsedLog.args["proposalId"];
              if (proposalId) {
                _context.next = 29;
                break;
              }
              throw new ProposalCreationError();
            case 29:
              _context.next = 31;
              return {
                key: ProposalCreationSteps.DONE,
                proposalId: encodeProposalId(params.pluginAddress, Number(proposalId))
              };
            case 31:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }))();
  };
  _proto.pinMetadata = function() {
    var _pinMetadata = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var cid;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.ipfs.add(JSON.stringify(params));
            case 3:
              cid = _context2.sent;
              _context2.next = 6;
              return this.ipfs.pin(cid);
            case 6:
              return _context2.abrupt("return", "ipfs://" + cid);
            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new IpfsPinError();
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this, [[0, 9]]);
    }));
    function pinMetadata(_x) {
      return _pinMetadata.apply(this, arguments);
    }
    return pinMetadata;
  }();
  _proto.voteProposal = function voteProposal(params) {
    var _this2 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee3() {
      var signer, _decodeProposalId, pluginAddress, id2, tokenVotingContract, tx;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = _this2.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return _awaitAsyncGenerator2(tokenVotingContract.vote(id2, params.vote, false));
            case 11:
              tx = _context3.sent;
              _context3.next = 14;
              return {
                key: VoteProposalStep.VOTING,
                txHash: tx.hash
              };
            case 14:
              _context3.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context3.next = 18;
              return {
                key: VoteProposalStep.DONE
              };
            case 18:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }))();
  };
  _proto.executeProposal = function executeProposal(proposalId) {
    var _this3 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee4() {
      var signer, _decodeProposalId2, pluginAddress, id2, tokenVotingContract, tx;
      return _regeneratorRuntime2().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = _this3.web3.getConnectedSigner();
              if (signer) {
                _context4.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context4.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              _context4.next = 11;
              return _awaitAsyncGenerator2(tokenVotingContract.execute(id2));
            case 11:
              tx = _context4.sent;
              _context4.next = 14;
              return {
                key: ExecuteProposalStep.EXECUTING,
                txHash: tx.hash
              };
            case 14:
              _context4.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context4.next = 18;
              return {
                key: ExecuteProposalStep.DONE
              };
            case 18:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }))();
  };
  _proto.prepareInstallation = function prepareInstallation(params) {
    var _this4 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee5() {
      var signer, network, networkName, pspContract, tokenVotingRepoContract, versionTag, latestVersion, tokenVotingPluginInstallItem, tx, receipt, pspContractInterface, log, parsedLog, pluginAddress, preparedSetupData;
      return _regeneratorRuntime2().wrap(function _callee5$(_context5) {
        while (1)
          switch (_context5.prev = _context5.next) {
            case 0:
              signer = _this4.web3.getConnectedSigner();
              if (signer) {
                _context5.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context5.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _context5.next = 9;
              return _awaitAsyncGenerator2(signer.provider.getNetwork());
            case 9:
              network = _context5.sent;
              networkName = network.name;
              if (SupportedNetworksArray.includes(networkName)) {
                _context5.next = 13;
                break;
              }
              throw new UnsupportedNetworkError(networkName);
            case 13:
              pspContract = PluginSetupProcessor__factory.connect(LIVE_CONTRACTS[networkName].pluginSetupProcessor, signer);
              tokenVotingRepoContract = PluginRepo__factory.connect(LIVE_CONTRACTS[networkName].tokenVotingRepo, signer);
              versionTag = params.versionTag;
              if (params.versionTag) {
                _context5.next = 21;
                break;
              }
              _context5.next = 19;
              return _awaitAsyncGenerator2(tokenVotingRepoContract["getLatestVersion(address)"](LIVE_CONTRACTS[networkName].tokenVotingSetup));
            case 19:
              latestVersion = _context5.sent;
              versionTag = {
                build: latestVersion.tag.build,
                release: latestVersion.tag.release
              };
            case 21:
              tokenVotingPluginInstallItem = TokenVotingClientEncoding.getPluginInstallItem(params.settings, networkName);
              _context5.next = 24;
              return _awaitAsyncGenerator2(pspContract.prepareInstallation(params.daoAddressOrEns, {
                pluginSetupRef: {
                  pluginSetupRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,
                  versionTag
                },
                data: tokenVotingPluginInstallItem.data
              }));
            case 24:
              tx = _context5.sent;
              _context5.next = 27;
              return {
                key: PrepareInstallationStep.PREPARING,
                txHash: tx.hash
              };
            case 27:
              _context5.next = 29;
              return _awaitAsyncGenerator2(tx.wait());
            case 29:
              receipt = _context5.sent;
              pspContractInterface = PluginSetupProcessor__factory.createInterface();
              log = findLog(receipt, pspContractInterface, "InstallationPrepared");
              if (log) {
                _context5.next = 34;
                break;
              }
              throw new PluginInstallationPreparationError();
            case 34:
              parsedLog = pspContractInterface.parseLog(log);
              pluginAddress = parsedLog.args["plugin"];
              preparedSetupData = parsedLog.args["preparedSetupData"];
              if (pluginAddress || preparedSetupData) {
                _context5.next = 39;
                break;
              }
              throw new PluginInstallationPreparationError();
            case 39:
              _context5.next = 41;
              return {
                key: PrepareInstallationStep.DONE,
                pluginAddress,
                pluginRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,
                versionTag,
                permissions: preparedSetupData.permissions,
                helpers: preparedSetupData.helpers
              };
            case 41:
            case "end":
              return _context5.stop();
          }
      }, _callee5);
    }))();
  };
  _proto.canVote = function() {
    var _canVote = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee6(params) {
      var signer, _decodeProposalId3, pluginAddress, id2, tokenVotingContract;
      return _regeneratorRuntime2().wrap(function _callee6$(_context6) {
        while (1)
          switch (_context6.prev = _context6.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer.provider) {
                _context6.next = 5;
                break;
              }
              throw new NoProviderError();
            case 5:
              if (isAddress2(params.voterAddressOrEns)) {
                _context6.next = 7;
                break;
              }
              throw new InvalidAddressError();
            case 7:
              _decodeProposalId3 = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId3.pluginAddress, id2 = _decodeProposalId3.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              return _context6.abrupt("return", tokenVotingContract.callStatic.canVote(id2, params.voterAddressOrEns, params.vote));
            case 10:
            case "end":
              return _context6.stop();
          }
      }, _callee6, this);
    }));
    function canVote(_x2) {
      return _canVote.apply(this, arguments);
    }
    return canVote;
  }();
  _proto.canExecute = function() {
    var _canExecute = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee7(proposalId) {
      var signer, _decodeProposalId4, pluginAddress, id2, tokenVotingContract;
      return _regeneratorRuntime2().wrap(function _callee7$(_context7) {
        while (1)
          switch (_context7.prev = _context7.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context7.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context7.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId4 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId4.pluginAddress, id2 = _decodeProposalId4.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              return _context7.abrupt("return", tokenVotingContract.canExecute(id2));
            case 10:
            case "end":
              return _context7.stop();
          }
      }, _callee7, this);
    }));
    function canExecute(_x3) {
      return _canExecute.apply(this, arguments);
    }
    return canExecute;
  }();
  _proto.getMembers = function() {
    var _getMembers = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee8(pluginAddress) {
      var query, params, name, _yield$this$graphql$r, tokenVotingPlugin;
      return _regeneratorRuntime2().wrap(function _callee8$(_context8) {
        while (1)
          switch (_context8.prev = _context8.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context8.next = 2;
                break;
              }
              throw new InvalidAddressError();
            case 2:
              query = QueryTokenVotingMembers;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "TokenVoting members";
              _context8.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r = _context8.sent;
              tokenVotingPlugin = _yield$this$graphql$r.tokenVotingPlugin;
              return _context8.abrupt("return", tokenVotingPlugin.members.map(function(member) {
                return member.address;
              }));
            case 10:
            case "end":
              return _context8.stop();
          }
      }, _callee8, this);
    }));
    function getMembers(_x4) {
      return _getMembers.apply(this, arguments);
    }
    return getMembers;
  }();
  _proto.getProposal = function() {
    var _getProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee9(proposalId) {
      var extendedProposalId, query, params, name, _yield$this$graphql$r2, tokenVotingProposal, metadataCid, metadataString, metadata;
      return _regeneratorRuntime2().wrap(function _callee9$(_context9) {
        while (1)
          switch (_context9.prev = _context9.next) {
            case 0:
              if (isProposalId(proposalId)) {
                _context9.next = 2;
                break;
              }
              throw new InvalidProposalIdError();
            case 2:
              extendedProposalId = getExtendedProposalId(proposalId);
              query = QueryTokenVotingProposal;
              params = {
                proposalId: extendedProposalId
              };
              name = "TokenVoting proposal";
              _context9.next = 8;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 8:
              _yield$this$graphql$r2 = _context9.sent;
              tokenVotingProposal = _yield$this$graphql$r2.tokenVotingProposal;
              if (tokenVotingProposal) {
                _context9.next = 14;
                break;
              }
              return _context9.abrupt("return", null);
            case 14:
              if (tokenVotingProposal.metadata) {
                _context9.next = 16;
                break;
              }
              return _context9.abrupt("return", toTokenVotingProposal(tokenVotingProposal, EMPTY_PROPOSAL_METADATA_LINK));
            case 16:
              _context9.prev = 16;
              metadataCid = resolveIpfsCid(tokenVotingProposal.metadata);
              _context9.next = 20;
              return this.ipfs.fetchString(metadataCid);
            case 20:
              metadataString = _context9.sent;
              metadata = JSON.parse(metadataString);
              return _context9.abrupt("return", toTokenVotingProposal(tokenVotingProposal, metadata));
            case 25:
              _context9.prev = 25;
              _context9.t0 = _context9["catch"](16);
              if (!(_context9.t0 instanceof InvalidCidError)) {
                _context9.next = 29;
                break;
              }
              return _context9.abrupt("return", toTokenVotingProposal(tokenVotingProposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
            case 29:
              return _context9.abrupt("return", toTokenVotingProposal(tokenVotingProposal, UNAVAILABLE_PROPOSAL_METADATA));
            case 30:
            case "end":
              return _context9.stop();
          }
      }, _callee9, this, [[16, 25]]);
    }));
    function getProposal(_x5) {
      return _getProposal.apply(this, arguments);
    }
    return getProposal;
  }();
  _proto.getProposals = function() {
    var _getProposals = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee11(_ref) {
      var _this6 = this;
      var daoAddressOrEns, _ref$limit, limit, status, _ref$skip, skip, _ref$direction, direction, _ref$sortBy, sortBy, where, address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r3, tokenVotingProposals;
      return _regeneratorRuntime2().wrap(function _callee11$(_context11) {
        while (1)
          switch (_context11.prev = _context11.next) {
            case 0:
              daoAddressOrEns = _ref.daoAddressOrEns, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, status = _ref.status, _ref$skip = _ref.skip, skip = _ref$skip === void 0 ? 0 : _ref$skip, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? SortDirection.ASC : _ref$direction, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? ProposalSortBy.CREATED_AT : _ref$sortBy;
              where = {};
              address = daoAddressOrEns;
              if (!address) {
                _context11.next = 17;
                break;
              }
              if (isAddress2(address)) {
                _context11.next = 16;
                break;
              }
              _context11.next = 7;
              return this.web3.ensureOnline();
            case 7:
              provider = this.web3.getProvider();
              if (provider) {
                _context11.next = 10;
                break;
              }
              throw new NoProviderError();
            case 10:
              _context11.next = 12;
              return provider.resolveName(address);
            case 12:
              resolvedAddress = _context11.sent;
              if (resolvedAddress) {
                _context11.next = 15;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 15:
              address = resolvedAddress;
            case 16:
              where = {
                dao: address.toLowerCase()
              };
            case 17:
              if (status) {
                where = _extends2({}, where, computeProposalStatusFilter(status));
              }
              query = QueryTokenVotingProposals;
              params = {
                where,
                limit,
                skip,
                direction,
                sortBy
              };
              name = "TokenVoting proposals";
              _context11.next = 23;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 23:
              _yield$this$graphql$r3 = _context11.sent;
              tokenVotingProposals = _yield$this$graphql$r3.tokenVotingProposals;
              _context11.next = 27;
              return this.ipfs.ensureOnline();
            case 27:
              return _context11.abrupt("return", Promise.all(tokenVotingProposals.map(function() {
                var _ref2 = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee10(proposal) {
                  var metadataCid, stringMetadata, metadata;
                  return _regeneratorRuntime2().wrap(function _callee10$(_context10) {
                    while (1)
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          if (proposal.metadata) {
                            _context10.next = 2;
                            break;
                          }
                          return _context10.abrupt("return", toTokenVotingProposalListItem(proposal, EMPTY_PROPOSAL_METADATA_LINK));
                        case 2:
                          _context10.prev = 2;
                          metadataCid = resolveIpfsCid(proposal.metadata);
                          _context10.next = 6;
                          return _this6.ipfs.fetchString(metadataCid);
                        case 6:
                          stringMetadata = _context10.sent;
                          metadata = JSON.parse(stringMetadata);
                          return _context10.abrupt("return", toTokenVotingProposalListItem(proposal, metadata));
                        case 11:
                          _context10.prev = 11;
                          _context10.t0 = _context10["catch"](2);
                          if (!(_context10.t0 instanceof InvalidCidError)) {
                            _context10.next = 15;
                            break;
                          }
                          return _context10.abrupt("return", toTokenVotingProposalListItem(proposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
                        case 15:
                          return _context10.abrupt("return", toTokenVotingProposalListItem(proposal, UNAVAILABLE_PROPOSAL_METADATA));
                        case 16:
                        case "end":
                          return _context10.stop();
                      }
                  }, _callee10, null, [[2, 11]]);
                }));
                return function(_x7) {
                  return _ref2.apply(this, arguments);
                };
              }())));
            case 28:
            case "end":
              return _context11.stop();
          }
      }, _callee11, this);
    }));
    function getProposals(_x6) {
      return _getProposals.apply(this, arguments);
    }
    return getProposals;
  }();
  _proto.getVotingSettings = function() {
    var _getVotingSettings = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee12(pluginAddress) {
      var query, params, name, _yield$this$graphql$r4, tokenVotingPlugin;
      return _regeneratorRuntime2().wrap(function _callee12$(_context12) {
        while (1)
          switch (_context12.prev = _context12.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context12.next = 2;
                break;
              }
              throw new InvalidAddressError();
            case 2:
              query = QueryTokenVotingSettings;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "TokenVoting settings";
              _context12.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r4 = _context12.sent;
              tokenVotingPlugin = _yield$this$graphql$r4.tokenVotingPlugin;
              if (tokenVotingPlugin) {
                _context12.next = 11;
                break;
              }
              return _context12.abrupt("return", null);
            case 11:
              return _context12.abrupt("return", {
                minDuration: parseInt(tokenVotingPlugin.minDuration),
                supportThreshold: decodeRatio(BigInt(tokenVotingPlugin.supportThreshold), 6),
                minParticipation: decodeRatio(BigInt(tokenVotingPlugin.minParticipation), 6),
                minProposerVotingPower: BigInt(tokenVotingPlugin.minProposerVotingPower),
                votingMode: tokenVotingPlugin.votingMode
              });
            case 12:
            case "end":
              return _context12.stop();
          }
      }, _callee12, this);
    }));
    function getVotingSettings(_x8) {
      return _getVotingSettings.apply(this, arguments);
    }
    return getVotingSettings;
  }();
  _proto.getToken = function() {
    var _getToken = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee13(pluginAddress) {
      var query, params, name, _yield$this$graphql$r5, tokenVotingPlugin, token;
      return _regeneratorRuntime2().wrap(function _callee13$(_context13) {
        while (1)
          switch (_context13.prev = _context13.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context13.next = 2;
                break;
              }
              throw new InvalidAddressError();
            case 2:
              query = QueryTokenVotingPlugin;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "TokenVoting token";
              _context13.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r5 = _context13.sent;
              tokenVotingPlugin = _yield$this$graphql$r5.tokenVotingPlugin;
              if (tokenVotingPlugin) {
                _context13.next = 11;
                break;
              }
              return _context13.abrupt("return", null);
            case 11:
              token = tokenVotingPlugin.token;
              if (!(token.__typename === SubgraphContractType.ERC20)) {
                _context13.next = 16;
                break;
              }
              return _context13.abrupt("return", {
                address: token.id,
                name: token.name,
                symbol: token.symbol,
                decimals: token.decimals,
                type: TokenType.ERC20
              });
            case 16:
              if (!(token.__typename === SubgraphContractType.ERC721)) {
                _context13.next = 18;
                break;
              }
              return _context13.abrupt("return", {
                address: token.id,
                name: token.name,
                symbol: token.symbol,
                type: TokenType.ERC721
              });
            case 18:
              return _context13.abrupt("return", null);
            case 19:
            case "end":
              return _context13.stop();
          }
      }, _callee13, this);
    }));
    function getToken(_x9) {
      return _getToken.apply(this, arguments);
    }
    return getToken;
  }();
  return TokenVotingClientMethods2;
}(ClientCore);
var AVAILABLE_FUNCTION_SIGNATURES$2 = [MajorityVotingBase__factory.createInterface().getFunction("updateVotingSettings").format("minimal"), IERC20MintableUpgradeable__factory.createInterface().getFunction("mint").format("minimal")];
var TokenVotingClientDecoding = function(_ClientCore) {
  _inheritsLoose(TokenVotingClientDecoding2, _ClientCore);
  function TokenVotingClientDecoding2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(TokenVotingClientDecoding2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = TokenVotingClientDecoding2.prototype;
  _proto.updatePluginSettingsAction = function updatePluginSettingsAction(data) {
    return decodeUpdatePluginSettingsAction(data);
  };
  _proto.mintTokenAction = function mintTokenAction(data) {
    var votingInterface = IERC20MintableUpgradeable__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = votingInterface.getFunction("mint");
    var result = votingInterface.decodeFunctionData(expectedfunction, hexBytes);
    return mintTokenParamsFromContract(result);
  };
  _proto.findInterface = function findInterface(data) {
    try {
      var func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES$2);
      return {
        id: func.format("minimal"),
        functionName: func.name,
        hash: bytesToHex(data).substring(0, 10)
      };
    } catch (_unused) {
      return null;
    }
  };
  return TokenVotingClientDecoding2;
}(ClientCore);
var TokenVotingClientEstimation = function(_ClientCore) {
  _inheritsLoose(TokenVotingClientEstimation2, _ClientCore);
  function TokenVotingClientEstimation2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    Object.freeze(TokenVotingClientEstimation2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = TokenVotingClientEstimation2.prototype;
  _proto.createProposal = function() {
    var _createProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(params) {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, tokenVotingContract, allowFailureMap, startTimestamp, endTimestamp, estimatedGasFee;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              tokenVotingContract = TokenVoting__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return tokenVotingContract.estimateGas.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3), params.creatorVote || 0, params.executeOnPass || false);
            case 15:
              estimatedGasFee = _context.sent;
              return _context.abrupt("return", this.web3.getApproximateGasFee(estimatedGasFee.toBigInt()));
            case 17:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function createProposal(_x) {
      return _createProposal.apply(this, arguments);
    }
    return createProposal;
  }();
  _proto.voteProposal = function() {
    var _voteProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var signer, _decodeProposalId, pluginAddress, id2, tokenVotingContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context2.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context2.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              _context2.next = 11;
              return tokenVotingContract.estimateGas.vote(id2, params.vote, false);
            case 11:
              estimation = _context2.sent;
              return _context2.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function voteProposal(_x2) {
      return _voteProposal.apply(this, arguments);
    }
    return voteProposal;
  }();
  _proto.executeProposal = function() {
    var _executeProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee3(proposalId) {
      var signer, _decodeProposalId2, pluginAddress, id2, tokenVotingContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              tokenVotingContract = TokenVoting__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return tokenVotingContract.estimateGas.execute(id2);
            case 11:
              estimation = _context3.sent;
              return _context3.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context3.stop();
          }
      }, _callee3, this);
    }));
    function executeProposal(_x3) {
      return _executeProposal.apply(this, arguments);
    }
    return executeProposal;
  }();
  return TokenVotingClientEstimation2;
}(ClientCore);
var TokenVotingClient = function(_ClientCore) {
  _inheritsLoose(TokenVotingClient2, _ClientCore);
  function TokenVotingClient2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    _this.privateMethods = new TokenVotingClientMethods(context);
    _this.privateEncoding = new TokenVotingClientEncoding(context);
    _this.privateDecoding = new TokenVotingClientDecoding(context);
    _this.privateEstimation = new TokenVotingClientEstimation(context);
    Object.freeze(TokenVotingClient2.prototype);
    Object.freeze(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(TokenVotingClient2, [{
    key: "methods",
    get: function get() {
      return this.privateMethods;
    }
  }, {
    key: "encoding",
    get: function get() {
      return this.privateEncoding;
    }
  }, {
    key: "decoding",
    get: function get() {
      return this.privateDecoding;
    }
  }, {
    key: "estimation",
    get: function get() {
      return this.privateEstimation;
    }
  }]);
  return TokenVotingClient2;
}(ClientCore);
TokenVotingClient.encoding = {
  getPluginInstallItem: function getPluginInstallItem2(params, network) {
    if (network === void 0) {
      network = "mainnet";
    }
    return TokenVotingClientEncoding.getPluginInstallItem(params, network);
  }
};
var ApproveProposalStep;
(function(ApproveProposalStep2) {
  ApproveProposalStep2["APPROVING"] = "approving";
  ApproveProposalStep2["DONE"] = "done";
})(ApproveProposalStep || (ApproveProposalStep = {}));
var _templateObject$b;
var _templateObject2$3;
var QueryMultisigProposal = (0, import_graphql_request.gql)(_templateObject$b || (_templateObject$b = _taggedTemplateLiteralLoose(["\nquery MultisigProposal($proposalId: ID!) {\n  multisigProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    startDate\n    endDate\n    actions {\n      to\n      value\n      data\n    }\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    plugin {\n      onlyListed\n    }\n    minApprovals\n    executionTxHash\n    executed\n    executable\n    approvers{\n      id\n    }\n  }\n}\n"])));
var QueryMultisigProposals = (0, import_graphql_request.gql)(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteralLoose(["\nquery MultisigProposals($where: MultisigProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: MultisigProposal_orderBy!) {\n  multisigProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    executed\n    executable\n    approvals\n    startDate\n    endDate\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    approvers {\n      id\n    }\n    minApprovals\n    plugin{\n      onlyListed\n    }\n  }\n}\n"])));
var _templateObject$c;
var QueryMultisigVotingSettings = (0, import_graphql_request.gql)(_templateObject$c || (_templateObject$c = _taggedTemplateLiteralLoose(["\nquery MultisigVotingSettings($address: ID!) {\n    multisigPlugin(id: $address){\n        minApprovals\n        onlyListed\n    }\n}\n"])));
function toMultisigProposal(proposal, metadata) {
  var creationDate = new Date(parseInt(proposal.createdAt) * 1e3);
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  var executionDate = proposal.executionDate ? new Date(parseInt(proposal.executionDate) * 1e3) : null;
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary,
      description: metadata.description,
      resources: metadata.resources,
      media: metadata.media
    },
    settings: {
      onlyListed: proposal.plugin.onlyListed,
      minApprovals: proposal.minApprovals
    },
    creationBlockNumber: parseInt(proposal.creationBlockNumber) || 0,
    creationDate,
    startDate,
    endDate,
    executionDate,
    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,
    executionTxHash: proposal.executionTxHash || null,
    actions: proposal.actions.map(function(action) {
      return {
        data: hexToBytes(action.data),
        to: action.to,
        value: BigInt(action.value)
      };
    }),
    status: computeProposalStatus(proposal),
    approvals: proposal.approvers.map(function(approver) {
      return approver.id.slice(0, 42);
    })
  };
}
function toMultisigProposalListItem(proposal, metadata) {
  var startDate = new Date(parseInt(proposal.startDate) * 1e3);
  var endDate = new Date(parseInt(proposal.endDate) * 1e3);
  return {
    id: getCompactProposalId(proposal.id),
    dao: {
      address: proposal.dao.id,
      name: proposal.dao.subdomain
    },
    creatorAddress: proposal.creator,
    metadata: {
      title: metadata.title,
      summary: metadata.summary
    },
    approvals: proposal.approvers.map(function(approver) {
      return approver.id.slice(0, 42);
    }),
    settings: {
      onlyListed: proposal.plugin.onlyListed,
      minApprovals: proposal.minApprovals
    },
    startDate,
    endDate,
    status: computeProposalStatus(proposal)
  };
}
var _templateObject$d;
var QueryMultisigMembers = (0, import_graphql_request.gql)(_templateObject$d || (_templateObject$d = _taggedTemplateLiteralLoose(["\nquery MultisigMembers($address: ID!) {\n    multisigPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n"])));
var MultisigClientEncoding = function(_ClientCore) {
  _inheritsLoose(MultisigClientEncoding2, _ClientCore);
  function MultisigClientEncoding2(context) {
    return _ClientCore.call(this, context) || this;
  }
  MultisigClientEncoding2.getPluginInstallItem = function getPluginInstallItem4(params, network) {
    if (!SupportedNetworksArray.includes(network)) {
      throw new UnsupportedNetworkError(network);
    }
    var hexBytes = defaultAbiCoder.encode(
      ["address[]", "tuple(bool, uint16)"],
      [params.members, [params.votingSettings.onlyListed, params.votingSettings.minApprovals]]
    );
    return {
      id: LIVE_CONTRACTS[network].multisigRepo,
      data: hexToBytes(hexBytes)
    };
  };
  var _proto = MultisigClientEncoding2.prototype;
  _proto.addAddressesAction = function addAddressesAction(params) {
    if (!isAddress2(params.pluginAddress)) {
      throw new InvalidAddressError();
    }
    for (var _iterator = _createForOfIteratorHelperLoose(params.members), _step; !(_step = _iterator()).done; ) {
      var member = _step.value;
      if (!isAddress2(member)) {
        throw new InvalidAddressError();
      }
    }
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = multisigInterface.encodeFunctionData("addAddresses", [params.members]);
    return {
      to: params.pluginAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.removeAddressesAction = function removeAddressesAction(params) {
    if (!isAddress2(params.pluginAddress)) {
      throw new InvalidAddressError();
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose(params.members), _step2; !(_step2 = _iterator2()).done; ) {
      var member = _step2.value;
      if (!isAddress2(member)) {
        throw new InvalidAddressError();
      }
    }
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = multisigInterface.encodeFunctionData("removeAddresses", [params.members]);
    return {
      to: params.pluginAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  _proto.updateMultisigVotingSettings = function updateMultisigVotingSettings(params) {
    if (!isAddress2(params.pluginAddress)) {
      throw new InvalidAddressError();
    }
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = multisigInterface.encodeFunctionData("updateMultisigSettings", [params.votingSettings]);
    return {
      to: params.pluginAddress,
      value: BigInt(0),
      data: hexToBytes(hexBytes)
    };
  };
  return MultisigClientEncoding2;
}(ClientCore);
var MultisigClientMethods = function(_ClientCore) {
  _inheritsLoose(MultisigClientMethods2, _ClientCore);
  function MultisigClientMethods2(context) {
    return _ClientCore.call(this, context) || this;
  }
  var _proto = MultisigClientMethods2.prototype;
  _proto.createProposal = function createProposal(params) {
    var _this = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee() {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, multisigContract, allowFailureMap, startTimestamp, endTimestamp, tx, receipt, multisigContractInterface, log, parsedLog, proposalId;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = _this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              multisigContract = Multisig__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return _awaitAsyncGenerator2(multisigContract.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, params.approve || false, params.tryExecution || false, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3)));
            case 15:
              tx = _context.sent;
              _context.next = 18;
              return {
                key: ProposalCreationSteps.CREATING,
                txHash: tx.hash
              };
            case 18:
              _context.next = 20;
              return _awaitAsyncGenerator2(tx.wait());
            case 20:
              receipt = _context.sent;
              multisigContractInterface = Multisig__factory.createInterface();
              log = findLog(receipt, multisigContractInterface, "ProposalCreated");
              if (log) {
                _context.next = 25;
                break;
              }
              throw new ProposalCreationError();
            case 25:
              parsedLog = multisigContractInterface.parseLog(log);
              proposalId = parsedLog.args["proposalId"];
              if (proposalId) {
                _context.next = 29;
                break;
              }
              throw new ProposalCreationError();
            case 29:
              _context.next = 31;
              return {
                key: ProposalCreationSteps.DONE,
                proposalId: encodeProposalId(params.pluginAddress, Number(proposalId))
              };
            case 31:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }))();
  };
  _proto.pinMetadata = function() {
    var _pinMetadata = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var cid;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.ipfs.add(JSON.stringify(params));
            case 3:
              cid = _context2.sent;
              _context2.next = 6;
              return this.ipfs.pin(cid);
            case 6:
              return _context2.abrupt("return", "ipfs://" + cid);
            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new IpfsPinError();
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this, [[0, 9]]);
    }));
    function pinMetadata(_x) {
      return _pinMetadata.apply(this, arguments);
    }
    return pinMetadata;
  }();
  _proto.approveProposal = function approveProposal(params) {
    var _this2 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee3() {
      var signer, _decodeProposalId, pluginAddress, id2, multisigContract, tx;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = _this2.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return _awaitAsyncGenerator2(multisigContract.approve(id2, params.tryExecution));
            case 11:
              tx = _context3.sent;
              _context3.next = 14;
              return {
                key: ApproveProposalStep.APPROVING,
                txHash: tx.hash
              };
            case 14:
              _context3.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context3.next = 18;
              return {
                key: ApproveProposalStep.DONE
              };
            case 18:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }))();
  };
  _proto.executeProposal = function executeProposal(proposalId) {
    var _this3 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee4() {
      var signer, _decodeProposalId2, pluginAddress, id2, multisigContract, tx;
      return _regeneratorRuntime2().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = _this3.web3.getConnectedSigner();
              if (signer) {
                _context4.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context4.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              _context4.next = 11;
              return _awaitAsyncGenerator2(multisigContract.execute(id2));
            case 11:
              tx = _context4.sent;
              _context4.next = 14;
              return {
                key: ExecuteProposalStep.EXECUTING,
                txHash: tx.hash
              };
            case 14:
              _context4.next = 16;
              return _awaitAsyncGenerator2(tx.wait());
            case 16:
              _context4.next = 18;
              return {
                key: ExecuteProposalStep.DONE
              };
            case 18:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }))();
  };
  _proto.prepareInstallation = function prepareInstallation(params) {
    var _this4 = this;
    return _wrapAsyncGenerator2(_regeneratorRuntime2().mark(function _callee5() {
      var signer, network, networkName, pspContract, multisigRepoContract, versionTag, latestVersion, multisigPluginInstallItem, tx, receipt, pspContractInterface, log, parsedLog, pluginAddress, preparedSetupData;
      return _regeneratorRuntime2().wrap(function _callee5$(_context5) {
        while (1)
          switch (_context5.prev = _context5.next) {
            case 0:
              signer = _this4.web3.getConnectedSigner();
              if (signer) {
                _context5.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context5.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _context5.next = 9;
              return _awaitAsyncGenerator2(signer.provider.getNetwork());
            case 9:
              network = _context5.sent;
              networkName = network.name;
              if (SupportedNetworksArray.includes(networkName)) {
                _context5.next = 13;
                break;
              }
              throw new UnsupportedNetworkError(networkName);
            case 13:
              pspContract = PluginSetupProcessor__factory.connect(LIVE_CONTRACTS[networkName].pluginSetupProcessor, signer);
              multisigRepoContract = PluginRepo__factory.connect(LIVE_CONTRACTS[networkName].multisigRepo, signer);
              versionTag = params.versionTag;
              if (params.versionTag) {
                _context5.next = 21;
                break;
              }
              _context5.next = 19;
              return _awaitAsyncGenerator2(multisigRepoContract["getLatestVersion(address)"](LIVE_CONTRACTS[networkName].multisigSetup));
            case 19:
              latestVersion = _context5.sent;
              versionTag = {
                build: latestVersion.tag.build,
                release: latestVersion.tag.release
              };
            case 21:
              multisigPluginInstallItem = MultisigClientEncoding.getPluginInstallItem(params.settings, networkName);
              _context5.next = 24;
              return _awaitAsyncGenerator2(pspContract.prepareInstallation(params.daoAddressOrEns, {
                pluginSetupRef: {
                  pluginSetupRepo: LIVE_CONTRACTS[networkName].multisigRepo,
                  versionTag
                },
                data: multisigPluginInstallItem.data
              }));
            case 24:
              tx = _context5.sent;
              _context5.next = 27;
              return {
                key: PrepareInstallationStep.PREPARING,
                txHash: tx.hash
              };
            case 27:
              _context5.next = 29;
              return _awaitAsyncGenerator2(tx.wait());
            case 29:
              receipt = _context5.sent;
              pspContractInterface = PluginSetupProcessor__factory.createInterface();
              log = findLog(receipt, pspContractInterface, "InstallationPrepared");
              if (log) {
                _context5.next = 34;
                break;
              }
              throw new ProposalCreationError();
            case 34:
              parsedLog = pspContractInterface.parseLog(log);
              pluginAddress = parsedLog.args["plugin"];
              preparedSetupData = parsedLog.args["preparedSetupData"];
              if (pluginAddress || preparedSetupData) {
                _context5.next = 39;
                break;
              }
              throw new PluginInstallationPreparationError();
            case 39:
              _context5.next = 41;
              return {
                key: PrepareInstallationStep.DONE,
                pluginAddress,
                pluginRepo: LIVE_CONTRACTS[networkName].multisigRepo,
                versionTag,
                permissions: preparedSetupData.permissions,
                helpers: preparedSetupData.helpers
              };
            case 41:
            case "end":
              return _context5.stop();
          }
      }, _callee5);
    }))();
  };
  _proto.canApprove = function() {
    var _canApprove = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee6(params) {
      var signer, _decodeProposalId3, pluginAddress, id2, multisigContract;
      return _regeneratorRuntime2().wrap(function _callee6$(_context6) {
        while (1)
          switch (_context6.prev = _context6.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context6.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context6.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              if (isAddress2(params.approverAddressOrEns)) {
                _context6.next = 9;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 9:
              _decodeProposalId3 = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId3.pluginAddress, id2 = _decodeProposalId3.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              return _context6.abrupt("return", multisigContract.canApprove(id2, params.approverAddressOrEns));
            case 12:
            case "end":
              return _context6.stop();
          }
      }, _callee6, this);
    }));
    function canApprove(_x2) {
      return _canApprove.apply(this, arguments);
    }
    return canApprove;
  }();
  _proto.canExecute = function() {
    var _canExecute = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee7(proposalId) {
      var signer, _decodeProposalId4, pluginAddress, id2, multisigContract;
      return _regeneratorRuntime2().wrap(function _callee7$(_context7) {
        while (1)
          switch (_context7.prev = _context7.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context7.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context7.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId4 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId4.pluginAddress, id2 = _decodeProposalId4.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              return _context7.abrupt("return", multisigContract.canExecute(id2));
            case 10:
            case "end":
              return _context7.stop();
          }
      }, _callee7, this);
    }));
    function canExecute(_x3) {
      return _canExecute.apply(this, arguments);
    }
    return canExecute;
  }();
  _proto.getVotingSettings = function() {
    var _getVotingSettings = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee8(pluginAddress) {
      var query, params, name, _yield$this$graphql$r, multisigPlugin;
      return _regeneratorRuntime2().wrap(function _callee8$(_context8) {
        while (1)
          switch (_context8.prev = _context8.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context8.next = 2;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 2:
              query = QueryMultisigVotingSettings;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "Multisig settings";
              _context8.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r = _context8.sent;
              multisigPlugin = _yield$this$graphql$r.multisigPlugin;
              return _context8.abrupt("return", {
                onlyListed: multisigPlugin.onlyListed,
                minApprovals: parseInt(multisigPlugin.minApprovals)
              });
            case 10:
            case "end":
              return _context8.stop();
          }
      }, _callee8, this);
    }));
    function getVotingSettings(_x4) {
      return _getVotingSettings.apply(this, arguments);
    }
    return getVotingSettings;
  }();
  _proto.getMembers = function() {
    var _getMembers = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee9(pluginAddress) {
      var query, params, name, _yield$this$graphql$r2, multisigPlugin;
      return _regeneratorRuntime2().wrap(function _callee9$(_context9) {
        while (1)
          switch (_context9.prev = _context9.next) {
            case 0:
              if (isAddress2(pluginAddress)) {
                _context9.next = 2;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 2:
              query = QueryMultisigMembers;
              params = {
                address: pluginAddress.toLowerCase()
              };
              name = "Multisig members";
              _context9.next = 7;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 7:
              _yield$this$graphql$r2 = _context9.sent;
              multisigPlugin = _yield$this$graphql$r2.multisigPlugin;
              return _context9.abrupt("return", multisigPlugin.members.map(function(member) {
                return member.address;
              }));
            case 10:
            case "end":
              return _context9.stop();
          }
      }, _callee9, this);
    }));
    function getMembers(_x5) {
      return _getMembers.apply(this, arguments);
    }
    return getMembers;
  }();
  _proto.getProposal = function() {
    var _getProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee10(proposalId) {
      var extendedProposalId, query, params, name, _yield$this$graphql$r3, multisigProposal, metadataCid, metadataString, metadata;
      return _regeneratorRuntime2().wrap(function _callee10$(_context10) {
        while (1)
          switch (_context10.prev = _context10.next) {
            case 0:
              if (isProposalId(proposalId)) {
                _context10.next = 2;
                break;
              }
              throw new InvalidProposalIdError();
            case 2:
              extendedProposalId = getExtendedProposalId(proposalId);
              query = QueryMultisigProposal;
              params = {
                proposalId: extendedProposalId
              };
              name = "Multisig proposal";
              _context10.next = 8;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 8:
              _yield$this$graphql$r3 = _context10.sent;
              multisigProposal = _yield$this$graphql$r3.multisigProposal;
              if (multisigProposal) {
                _context10.next = 14;
                break;
              }
              return _context10.abrupt("return", null);
            case 14:
              if (multisigProposal.metadata) {
                _context10.next = 16;
                break;
              }
              return _context10.abrupt("return", toMultisigProposal(multisigProposal, EMPTY_PROPOSAL_METADATA_LINK));
            case 16:
              _context10.prev = 16;
              metadataCid = resolveIpfsCid(multisigProposal.metadata);
              _context10.next = 20;
              return this.ipfs.fetchString(metadataCid);
            case 20:
              metadataString = _context10.sent;
              metadata = JSON.parse(metadataString);
              return _context10.abrupt("return", toMultisigProposal(multisigProposal, metadata));
            case 25:
              _context10.prev = 25;
              _context10.t0 = _context10["catch"](16);
              if (!(_context10.t0 instanceof InvalidCidError)) {
                _context10.next = 29;
                break;
              }
              return _context10.abrupt("return", toMultisigProposal(multisigProposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
            case 29:
              return _context10.abrupt("return", toMultisigProposal(multisigProposal, UNAVAILABLE_PROPOSAL_METADATA));
            case 30:
            case "end":
              return _context10.stop();
          }
      }, _callee10, this, [[16, 25]]);
    }));
    function getProposal(_x6) {
      return _getProposal.apply(this, arguments);
    }
    return getProposal;
  }();
  _proto.getProposals = function() {
    var _getProposals = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee12(_ref) {
      var _this5 = this;
      var daoAddressOrEns, _ref$limit, limit, status, _ref$skip, skip, _ref$direction, direction, _ref$sortBy, sortBy, where, address, provider, resolvedAddress, query, params, name, _yield$this$graphql$r4, multisigProposals;
      return _regeneratorRuntime2().wrap(function _callee12$(_context12) {
        while (1)
          switch (_context12.prev = _context12.next) {
            case 0:
              daoAddressOrEns = _ref.daoAddressOrEns, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, status = _ref.status, _ref$skip = _ref.skip, skip = _ref$skip === void 0 ? 0 : _ref$skip, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? SortDirection.ASC : _ref$direction, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? ProposalSortBy.CREATED_AT : _ref$sortBy;
              where = {};
              address = daoAddressOrEns;
              if (!address) {
                _context12.next = 17;
                break;
              }
              if (isAddress2(address)) {
                _context12.next = 16;
                break;
              }
              _context12.next = 7;
              return this.web3.ensureOnline();
            case 7:
              provider = this.web3.getProvider();
              if (provider) {
                _context12.next = 10;
                break;
              }
              throw new NoProviderError();
            case 10:
              _context12.next = 12;
              return provider.resolveName(address);
            case 12:
              resolvedAddress = _context12.sent;
              if (resolvedAddress) {
                _context12.next = 15;
                break;
              }
              throw new InvalidAddressOrEnsError();
            case 15:
              address = resolvedAddress;
            case 16:
              where = {
                dao: address.toLowerCase()
              };
            case 17:
              if (status) {
                where = _extends2({}, where, computeProposalStatusFilter(status));
              }
              query = QueryMultisigProposals;
              params = {
                where,
                limit,
                skip,
                direction,
                sortBy
              };
              name = "Multisig proposals";
              _context12.next = 23;
              return this.graphql.request({
                query,
                params,
                name
              });
            case 23:
              _yield$this$graphql$r4 = _context12.sent;
              multisigProposals = _yield$this$graphql$r4.multisigProposals;
              _context12.next = 27;
              return this.ipfs.ensureOnline();
            case 27:
              return _context12.abrupt("return", Promise.all(multisigProposals.map(function() {
                var _ref2 = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee11(proposal) {
                  var metadataCid, stringMetadata, metadata;
                  return _regeneratorRuntime2().wrap(function _callee11$(_context11) {
                    while (1)
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          if (proposal.metadata) {
                            _context11.next = 2;
                            break;
                          }
                          return _context11.abrupt("return", toMultisigProposalListItem(proposal, EMPTY_PROPOSAL_METADATA_LINK));
                        case 2:
                          _context11.prev = 2;
                          metadataCid = resolveIpfsCid(proposal.metadata);
                          _context11.next = 6;
                          return _this5.ipfs.fetchString(metadataCid);
                        case 6:
                          stringMetadata = _context11.sent;
                          metadata = JSON.parse(stringMetadata);
                          return _context11.abrupt("return", toMultisigProposalListItem(proposal, metadata));
                        case 11:
                          _context11.prev = 11;
                          _context11.t0 = _context11["catch"](2);
                          if (!(_context11.t0 instanceof InvalidCidError)) {
                            _context11.next = 15;
                            break;
                          }
                          return _context11.abrupt("return", toMultisigProposalListItem(proposal, UNSUPPORTED_PROPOSAL_METADATA_LINK));
                        case 15:
                          return _context11.abrupt("return", toMultisigProposalListItem(proposal, UNAVAILABLE_PROPOSAL_METADATA));
                        case 16:
                        case "end":
                          return _context11.stop();
                      }
                  }, _callee11, null, [[2, 11]]);
                }));
                return function(_x8) {
                  return _ref2.apply(this, arguments);
                };
              }())));
            case 28:
            case "end":
              return _context12.stop();
          }
      }, _callee12, this);
    }));
    function getProposals(_x7) {
      return _getProposals.apply(this, arguments);
    }
    return getProposals;
  }();
  return MultisigClientMethods2;
}(ClientCore);
var AVAILABLE_FUNCTION_SIGNATURES$3 = [Multisig__factory.createInterface().getFunction("addAddresses").format("minimal"), Multisig__factory.createInterface().getFunction("removeAddresses").format("minimal"), Multisig__factory.createInterface().getFunction("updateMultisigSettings").format("minimal")];
var MultisigClientDecoding = function(_ClientCore) {
  _inheritsLoose(MultisigClientDecoding2, _ClientCore);
  function MultisigClientDecoding2(context) {
    return _ClientCore.call(this, context) || this;
  }
  var _proto = MultisigClientDecoding2.prototype;
  _proto.addAddressesAction = function addAddressesAction(data) {
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = multisigInterface.getFunction("addAddresses");
    var result = multisigInterface.decodeFunctionData(expectedfunction, hexBytes);
    return result[0];
  };
  _proto.removeAddressesAction = function removeAddressesAction(data) {
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = multisigInterface.getFunction("removeAddresses");
    var result = multisigInterface.decodeFunctionData(expectedfunction, hexBytes);
    return result[0];
  };
  _proto.updateMultisigVotingSettings = function updateMultisigVotingSettings(data) {
    var multisigInterface = Multisig__factory.createInterface();
    var hexBytes = bytesToHex(data);
    var expectedfunction = multisigInterface.getFunction("updateMultisigSettings");
    var result = multisigInterface.decodeFunctionData(expectedfunction, hexBytes);
    return {
      minApprovals: result[0].minApprovals,
      onlyListed: result[0].onlyListed
    };
  };
  _proto.findInterface = function findInterface(data) {
    try {
      var func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES$3);
      return {
        id: func.format("minimal"),
        functionName: func.name,
        hash: bytesToHex(data).substring(0, 10)
      };
    } catch (_unused) {
      return null;
    }
  };
  return MultisigClientDecoding2;
}(ClientCore);
var MultisigClientEstimation = function(_ClientCore) {
  _inheritsLoose(MultisigClientEstimation2, _ClientCore);
  function MultisigClientEstimation2(context) {
    return _ClientCore.call(this, context) || this;
  }
  var _proto = MultisigClientEstimation2.prototype;
  _proto.createProposal = function() {
    var _createProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee(params) {
      var _params$failSafeActio, _params$actions, _params$startDate, _params$endDate;
      var signer, multisigContract, allowFailureMap, startTimestamp, endTimestamp, estimation;
      return _regeneratorRuntime2().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              multisigContract = Multisig__factory.connect(params.pluginAddress, signer);
              if (!((_params$failSafeActio = params.failSafeActions) != null && _params$failSafeActio.length && params.failSafeActions.length !== ((_params$actions = params.actions) == null ? void 0 : _params$actions.length))) {
                _context.next = 10;
                break;
              }
              throw new Error("Size mismatch: actions and failSafeActions should match");
            case 10:
              allowFailureMap = boolArrayToBitmap(params.failSafeActions);
              startTimestamp = ((_params$startDate = params.startDate) == null ? void 0 : _params$startDate.getTime()) || 0;
              endTimestamp = ((_params$endDate = params.endDate) == null ? void 0 : _params$endDate.getTime()) || 0;
              _context.next = 15;
              return multisigContract.estimateGas.createProposal(toUtf8Bytes2(params.metadataUri), params.actions || [], allowFailureMap, params.approve || false, params.tryExecution || true, Math.round(startTimestamp / 1e3), Math.round(endTimestamp / 1e3));
            case 15:
              estimation = _context.sent;
              return _context.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 17:
            case "end":
              return _context.stop();
          }
      }, _callee, this);
    }));
    function createProposal(_x) {
      return _createProposal.apply(this, arguments);
    }
    return createProposal;
  }();
  _proto.approveProposal = function() {
    var _approveProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee2(params) {
      var signer, _decodeProposalId, pluginAddress, id2, multisigContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context2.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context2.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId = decodeProposalId(params.proposalId), pluginAddress = _decodeProposalId.pluginAddress, id2 = _decodeProposalId.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              _context2.next = 11;
              return multisigContract.estimateGas.approve(id2, params.tryExecution);
            case 11:
              estimation = _context2.sent;
              return _context2.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context2.stop();
          }
      }, _callee2, this);
    }));
    function approveProposal(_x2) {
      return _approveProposal.apply(this, arguments);
    }
    return approveProposal;
  }();
  _proto.executeProposal = function() {
    var _executeProposal = _asyncToGenerator2(_regeneratorRuntime2().mark(function _callee3(proposalId) {
      var signer, _decodeProposalId2, pluginAddress, id2, multisigContract, estimation;
      return _regeneratorRuntime2().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              signer = this.web3.getConnectedSigner();
              if (signer) {
                _context3.next = 5;
                break;
              }
              throw new NoSignerError();
            case 5:
              if (signer.provider) {
                _context3.next = 7;
                break;
              }
              throw new NoProviderError();
            case 7:
              _decodeProposalId2 = decodeProposalId(proposalId), pluginAddress = _decodeProposalId2.pluginAddress, id2 = _decodeProposalId2.id;
              multisigContract = Multisig__factory.connect(pluginAddress, signer);
              _context3.next = 11;
              return multisigContract.estimateGas.execute(id2);
            case 11:
              estimation = _context3.sent;
              return _context3.abrupt("return", this.web3.getApproximateGasFee(estimation.toBigInt()));
            case 13:
            case "end":
              return _context3.stop();
          }
      }, _callee3, this);
    }));
    function executeProposal(_x3) {
      return _executeProposal.apply(this, arguments);
    }
    return executeProposal;
  }();
  return MultisigClientEstimation2;
}(ClientCore);
var MultisigClient = function(_ClientCore) {
  _inheritsLoose(MultisigClient2, _ClientCore);
  function MultisigClient2(context) {
    var _this;
    _this = _ClientCore.call(this, context) || this;
    _this.methods = new MultisigClientMethods(context);
    _this.encoding = new MultisigClientEncoding(context);
    _this.decoding = new MultisigClientDecoding(context);
    _this.estimation = new MultisigClientEstimation(context);
    return _this;
  }
  return MultisigClient2;
}(ClientCore);
MultisigClient.encoding = {
  getPluginInstallItem: function getPluginInstallItem3(params, network) {
    if (network === void 0) {
      network = "mainnet";
    }
    return MultisigClientEncoding.getPluginInstallItem(params, network);
  }
};
export {
  AddresslistVotingClient,
  ApproveProposalStep,
  Client2 as Client,
  ClientCore,
  Context,
  ContextPlugin,
  DaoCreationSteps,
  DaoDepositSteps,
  DaoRole,
  DaoSortBy,
  EMPTY_PROPOSAL_METADATA_LINK,
  ExecuteProposalStep,
  LIVE_CONTRACTS,
  MultisigClient,
  PermissionOperationType,
  Permissions,
  PrepareInstallationStep,
  ProposalCreationSteps,
  ProposalSortBy,
  ProposalStatus,
  SortDirection,
  SubgraphVoteValues,
  SubgraphVoteValuesMap,
  SupportedNetworksArray,
  TokenType,
  TokenVotingClient,
  TransferSortBy,
  TransferType,
  UNAVAILABLE_PROPOSAL_METADATA,
  UNSUPPORTED_PROPOSAL_METADATA_LINK,
  VoteProposalStep,
  VoteValues,
  VotingMode,
  computeProposalStatus,
  computeProposalStatusFilter,
  decodeUpdatePluginSettingsAction,
  encodeUpdateVotingSettingsAction,
  findLog,
  getFunctionFragment,
  unwrapProposalParams,
  votingModeFromContracts,
  votingModeToContracts,
  votingSettingsToContract
};
//# sourceMappingURL=@aragon_sdk-client.js.map
