{
  "version": 3,
  "sources": ["../../../../../node_modules/@aragon/sdk-client/node_modules/cross-fetch/dist/browser-ponyfill.js", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/isObjectLike.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/invariant.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/location.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printLocation.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/error/GraphQLError.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/error/syntaxError.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/ast.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/directiveLocation.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/kinds.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/characterClasses.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/blockString.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/tokenKind.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/lexer.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/devAssert.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/inspect.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/jsutils/instanceOf.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/source.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/parser.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printString.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/visitor.mjs", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql/language/printer.mjs", "../../../../../node_modules/extract-files/public/ReactNativeFile.js", "../../../../../node_modules/extract-files/public/isExtractableFile.js", "../../../../../node_modules/extract-files/public/extractFiles.js", "../../../../../node_modules/extract-files/public/index.js", "../../../../../node_modules/form-data/lib/browser.js", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/defaultJsonSerializer.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/createRequestBody.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/parseArgs.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/types.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/graphql-ws.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/graphql-request/src/index.ts", "../../../../../node_modules/unfetch/src/index.mjs", "../../../../../node_modules/isomorphic-unfetch/browser.js", "../../../../../node_modules/@aragon/osx-ethers/node_modules/ethers/src.ts/ethers.ts", "../../../../../node_modules/@aragon/osx-ethers/node_modules/ethers/src.ts/utils.ts", "../../../../../node_modules/@aragon/osx-ethers/node_modules/ethers/src.ts/_version.ts", "../../../../../node_modules/@aragon/osx-ethers/node_modules/ethers/src.ts/index.ts", "../../../../../node_modules/@aragon/osx-ethers/dist/bundle-esm.js", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/constants/src.ts/addresses.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/constants/src.ts/bignumbers.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/keccak256/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/logger/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/logger/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bytes/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/bytes/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/node_modules/@ethersproject/constants/src.ts/bignumbers.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/src.ts/utf8.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/strings/src.ts/idna.ts", "../../../../../node_modules/@aragon/sdk-ipfs/src/internal/network.ts", "../../../../../node_modules/@aragon/sdk-ipfs/src/internal/helpers.ts", "../../../../../node_modules/@aragon/sdk-ipfs/src/internal/api.ts", "../../../../../node_modules/@aragon/sdk-ipfs/src/client.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/rlp/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/rlp/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/src.ts/_version.ts", "../../../../../node_modules/@aragon/sdk-client/node_modules/@ethersproject/address/src.ts/index.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/abi/erc20.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/graphql-queries/dao.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/graphql-queries/balances.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/graphql-queries/transfer.ts", "../../../../../node_modules/@aragon/sdk-client/src/interfaces.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/interfaces/plugin.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/interfaces/common.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/modules/web3.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/modules/ipfs.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/graphql-queries/status.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/modules/graphql.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/core.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/context.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/context-plugin.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/utils.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/encoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/client-common/constants.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/utils.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/constants.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/client/methods.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/client/encoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/client/estimation.ts", "../../../../../node_modules/@aragon/sdk-client/src/internal/client/decoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/client.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/graphql-queries/members.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/graphql-queries/proposal.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/graphql-queries/settings.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/utils.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/client/encoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/client/methods.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/constants.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/client/decoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/internal/client/estimation.ts", "../../../../../node_modules/@aragon/sdk-client/src/addresslistVoting/client.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/interfaces.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/graphql-queries/proposal.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/graphql-queries/settings.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/graphql-queries/token.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/graphql-queries/members.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/utils.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/client/encoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/client/methods.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/constants.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/client/decoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/internal/client/estimation.ts", "../../../../../node_modules/@aragon/sdk-client/src/tokenVoting/client.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/interfaces.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/graphql-queries/proposal.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/graphql-queries/settings.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/utils.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/graphql-queries/members.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/client/encoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/client/methods.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/constants.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/client/decoding.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/internal/client/estimation.ts", "../../../../../node_modules/@aragon/sdk-client/src/multisig/client.ts"],
  "sourcesContent": ["var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "'use strict';\n\nmodule.exports = function ReactNativeFile(_ref) {\n  var uri = _ref.uri,\n    name = _ref.name,\n    type = _ref.type;\n  this.uri = uri;\n  this.name = name;\n  this.type = type;\n};\n", "'use strict';\n\nvar ReactNativeFile = require('./ReactNativeFile');\n\nmodule.exports = function isExtractableFile(value) {\n  return (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  );\n};\n", "'use strict';\n\nvar defaultIsExtractableFile = require('./isExtractableFile');\n\nmodule.exports = function extractFiles(value, path, isExtractableFile) {\n  if (path === void 0) {\n    path = '';\n  }\n\n  if (isExtractableFile === void 0) {\n    isExtractableFile = defaultIsExtractableFile;\n  }\n\n  var clone;\n  var files = new Map();\n\n  function addFile(paths, file) {\n    var storedPaths = files.get(file);\n    if (storedPaths) storedPaths.push.apply(storedPaths, paths);\n    else files.set(file, paths);\n  }\n\n  if (isExtractableFile(value)) {\n    clone = null;\n    addFile([path], value);\n  } else {\n    var prefix = path ? path + '.' : '';\n    if (typeof FileList !== 'undefined' && value instanceof FileList)\n      clone = Array.prototype.map.call(value, function (file, i) {\n        addFile(['' + prefix + i], file);\n        return null;\n      });\n    else if (Array.isArray(value))\n      clone = value.map(function (child, i) {\n        var result = extractFiles(child, '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        return result.clone;\n      });\n    else if (value && value.constructor === Object) {\n      clone = {};\n\n      for (var i in value) {\n        var result = extractFiles(value[i], '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        clone[i] = result.clone;\n      }\n    } else clone = value;\n  }\n\n  return {\n    clone: clone,\n    files: files,\n  };\n};\n", "'use strict';\n\nexports.ReactNativeFile = require('./ReactNativeFile');\nexports.extractFiles = require('./extractFiles');\nexports.isExtractableFile = require('./isExtractableFile');\n", "/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n", null, null, null, null, null, null, "export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n", "module.exports = self.fetch || (self.fetch = require('unfetch').default || require('unfetch'));\n", null, null, null, null, "import { ContractFactory, utils, Contract } from 'ethers';\n\nvar goerli = {\n\tmanagingDAOImplemenation: \"0x99C83C89C59166f7f766A221D5D0Ee00D37170c3\",\n\tmanagingDAO: \"0xB76F8d3512497040a96E77141c951a5374F24Eb9\",\n\tDAO_ENSSubdomainRegistrar_Implementation: \"0x394B49Cc32Dc81B8EaCdeb62A6Fa66F31D1D022c\",\n\tDAO_ENSSubdomainRegistrar: \"0xC62820f3E74cC82F89100032Ad7F04682F9EdaE0\",\n\tPlugin_ENSSubdomainRegistrar_Implementation: \"0xbcE9b6fE957464aF2B739337bd1a936EbFCB5B48\",\n\tPlugin_ENSSubdomainRegistrar: \"0xd5656b6d1bc0354073f62AAbc1430530C331979c\",\n\tDAORegistry_Implementation: \"0xa796AC80af77a52AdA92778d8fb6133792480B77\",\n\tDAORegistry: \"0xd51ac19130A73455F8B3b1c26aFea21D6bA88E54\",\n\tPluginRepoRegistry_Implementation: \"0x3861Ef32c1bFcdd53E9AaE4af1C9f47390c17fBf\",\n\tPluginRepoRegistry: \"0x970Eb7Dd57c9F0dc4c5a10c06653d1103946b508\",\n\tPluginRepoFactory: \"0x301868712b77744A3C0E5511609238399f0A2d4d\",\n\tPluginSetupProcessor: \"0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e\",\n\tDAOFactory: \"0x16B6c6674fEf5d29C9a49EA68A19944f5a8471D3\",\n\tAddresslistVotingSetup: \"0x4980e5B4394B326c069A54C9ED0Dee2659227352\",\n\tTokenVotingSetup: \"0x64B336524ea859ed2133c93e4B18be17f44692eE\",\n\tAdminSetup: \"0x633845bB511DE83EA31b8717614d88fa7b569694\",\n\tMultisigSetup: \"0xBFd84852C8007Bf148721d2c20F69456F193b201\",\n\t\"address-list-voting-repo\": \"0xbD293e27226EF2b85E84FADCF2d5135AbC52e50A\",\n\t\"token-voting-repo\": \"0xFCc843C48BD44e5dA5976a2f2d85772D59C5959E\",\n\t\"admin-repo\": \"0xF66348E9865bb0f29B889E7c0FE1BCf4acAb5f54\",\n\t\"multisig-repo\": \"0x92C090cffC592B1bC321aCfAF735057B876375F8\"\n};\nvar mainnet = {\n\tmanagingDAOImplemenation: \"0x005098056a837c2c4F99C7eCeE976F8D90bdFFF8\",\n\tmanagingDAO: \"0xf2d594F3C93C19D7B1a6F15B5489FFcE4B01f7dA\",\n\tDAO_ENSSubdomainRegistrar_Implementation: \"0xCe0B4124dea6105bfB85fB4461c4D39f360E9ef3\",\n\tDAO_ENSSubdomainRegistrar: \"0xE640Da5AD169630555A86D9b6b9C145B4961b1EB\",\n\tPlugin_ENSSubdomainRegistrar_Implementation: \"0x08633901DdF9cD8e2DC3a073594d0A7DaD6f3f57\",\n\tPlugin_ENSSubdomainRegistrar: \"0x35B62715459cB60bf6dC17fF8cfe138EA305E7Ee\",\n\tDAORegistry_Implementation: \"0xC24188a73dc09aA7C721f96Ad8857B469C01dC9f\",\n\tDAORegistry: \"0x7a62da7B56fB3bfCdF70E900787010Bc4c9Ca42e\",\n\tPluginRepoRegistry_Implementation: \"0xddCc39a2a0047Eb47EdF94180452cbaB14d426EF\",\n\tPluginRepoRegistry: \"0x5B3B36BdC9470963A2734D6a0d2F6a64C21C159f\",\n\tPluginRepoFactory: \"0x96E54098317631641703404C06A5afAD89da7373\",\n\tPluginSetupProcessor: \"0xE978942c691e43f65c1B7c7F8f1dc8cDF061B13f\",\n\tDAOFactory: \"0xA03C2182af8eC460D498108C92E8638a580b94d4\",\n\tAddresslistVotingSetup: \"0x360586dB62DA31327B2462BA27bEb3e48ebbf396\",\n\tTokenVotingSetup: \"0xB2A2b32b9d885C85d5b229C0509341c37CaE7483\",\n\tAdminSetup: \"0xBFD541bc4fcE14adf1Fb9258574D3cBF5f55a894\",\n\tMultisigSetup: \"0x8d6726Fe85Caa585d88FD8342ebEEE88d703E754\",\n\t\"address-list-voting-repo\": \"0xC207767d8A7a28019AFFAEAe6698F84B5526EbD7\",\n\t\"token-voting-repo\": \"0xb7401cD221ceAFC54093168B814Cc3d42579287f\",\n\t\"admin-repo\": \"0xA4371a239D08bfBA6E8894eccf8466C6323A52C3\",\n\t\"multisig-repo\": \"0x8c278e37D0817210E18A7958524b7D0a1fAA6F7b\"\n};\nvar mumbai = {\n\tmanagingDAOImplemenation: \"0x5E993db91Fd2c713Df1110358396EAc60d54fE66\",\n\tmanagingDAO: \"0xE1De373E219a0d19a0500e599adb903477bCA0f9\",\n\tENSRegistry: \"0xD24A78824dF3C29CA03661368e6437b767A5422D\",\n\tPublicResolver: \"0xdbFf6be618180E0FF0d74dd3B6BdC1b5de074273\",\n\tDAO_ENSSubdomainRegistrar_Implementation: \"0xD5baCA29C944A28f1f568F7e69B119030914c15D\",\n\tDAO_ENSSubdomainRegistrar: \"0xC528B8AA6a4D0f21455a06b6D7A41fd795619C31\",\n\tPlugin_ENSSubdomainRegistrar_Implementation: \"0x99965D7cFFE21C4AC94526AAFEd33E9EaA27f004\",\n\tPlugin_ENSSubdomainRegistrar: \"0x2EfcED958034c3BC455273153C3e604D34C78e46\",\n\tDAORegistry_Implementation: \"0xE5058D785C934279Af1EF7E90BB5D58048829256\",\n\tDAORegistry: \"0x6dD0C8b7F9406206ceAA01B5576D9d46e9298f0E\",\n\tPluginRepoRegistry_Implementation: \"0xab27e29F579C870F66F48F4825A4D294AE540818\",\n\tPluginRepoRegistry: \"0xc796bB1AfEBc56daDF6CAcD2aDa78055e5381971\",\n\tPluginRepoFactory: \"0xDcC5933bc3567E7798Ff00Ab3413cF5f5801BD41\",\n\tPluginSetupProcessor: \"0x9227b311C5cecB416707F1C8B7Ca1b52649AabEc\",\n\tDAOFactory: \"0x5bDBaAfd90B908058567080513635f560F896918\",\n\tAddresslistVotingSetup: \"0xD1CE76c26bc20255157C8ef478276eb115eC02a7\",\n\tTokenVotingSetup: \"0x76D3795Df5acF2e2141557BA1Cf094fd54d4e10C\",\n\tAdminSetup: \"0x40a3EF0f0780e044EbDDEdAa9AB225158f315afd\",\n\tMultisigSetup: \"0x8b2361C65E898F40372a0DD5E1BfEE9895A676B3\",\n\t\"address-list-voting-repo\": \"0x71570268A86A80B5cCa3F5e430c2BAa3F4b26278\",\n\t\"token-voting-repo\": \"0xaCa70D8c462940B839DE386BcDD4CACf745632cA\",\n\t\"admin-repo\": \"0x0DF9b15550fF39149e491dDD154b28f587e0cD16\",\n\t\"multisig-repo\": \"0x2c4690b8be39adAd4F15A69340d5035aC6E53eEF\"\n};\nvar polygon = {\n\tAddresslistVotingSetup: \"0x622DB36633643E4A4075ecc3A309a4f0B942922a\",\n\tAdminSetup: \"0x82aBAfBf46759358c705c7E323543A7Be47AbAf0\",\n\tmanagingDAO: \"0x6d4FB6Ff01A172774f42789fcfcdd84E68c28494\",\n\tDAOFactory: \"0x51Ead12DEcD31ea75e1046EdFAda14dd639789b8\",\n\tDAORegistry: \"0x96E54098317631641703404C06A5afAD89da7373\",\n\tDAORegistry_Implementation: \"0x5B3B36BdC9470963A2734D6a0d2F6a64C21C159f\",\n\tDAO_ENSSubdomainRegistrar: \"0x07f49c49Ce2A99CF7C28F66673d406386BDD8Ff4\",\n\tDAO_ENSSubdomainRegistrar_Implementation: \"0x35B62715459cB60bf6dC17fF8cfe138EA305E7Ee\",\n\tmanagingDAOImplemenation: \"0xCa834B3F404c97273f34e108029eEd776144d324\",\n\tENSRegistry: \"0x57bf333951967a0cC0afcD58FC7959Ca0Eae6905\",\n\tPluginRepoFactory: \"0x6E924eA5864044D8642385683fFA5AD42FB687f2\",\n\tPluginRepoRegistry: \"0xA03C2182af8eC460D498108C92E8638a580b94d4\",\n\tPluginRepoRegistry_Implementation: \"0xE978942c691e43f65c1B7c7F8f1dc8cDF061B13f\",\n\tPluginSetupProcessor: \"0x879D9dfe3F36d7684BeC1a2bB4Aa8E8871A7245B\",\n\tPlugin_ENSSubdomainRegistrar: \"0x7a62da7B56fB3bfCdF70E900787010Bc4c9Ca42e\",\n\tPlugin_ENSSubdomainRegistrar_Implementation: \"0xC24188a73dc09aA7C721f96Ad8857B469C01dC9f\",\n\tPublicResolver: \"0x74b3B3504B5d6D1c6247009c9b1e3D8cFF7bd445\",\n\tTokenVotingSetup: \"0x03445b197271CB3BE5E453745eD98a05793a4538\",\n\tMultisigSetup: \"0xD63A8Cfb0eec960C3e70F96a9e3F3091f3FD70b6\",\n\t\"address-list-voting-repo\": \"0x641DdEdc2139d9948e8dcC936C1Ab2314D9181E6\",\n\t\"token-voting-repo\": \"0xae67aea0B830ed4504B36670B5Fa70c5C386Bb58\",\n\t\"admin-repo\": \"0x7fF570473d0876db16A59e8F04EE7F17Ab117309\",\n\t\"multisig-repo\": \"0x5A5035E7E8aeff220540F383a9cf8c35929bcF31\"\n};\nvar activeContracts = {\n\tgoerli: goerli,\n\tmainnet: mainnet,\n\tmumbai: mumbai,\n\tpolygon: polygon\n};\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1p = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ActionFailed\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AnyAddressDisallowedForWhoAndWhere\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConditionNotPresentForAnyAddress\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientGas\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"expected\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NativeTokenDepositAmountMismatch\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"currentCondition\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"newCondition\",\n                type: \"address\",\n            },\n        ],\n        name: \"PermissionAlreadyGrantedForDifferentCondition\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PermissionsForAnyAddressDisallowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"TooManyActions\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Unauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"UnkownCallback\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ZeroAmount\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"sig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CallbackReceived\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"_reference\",\n                type: \"string\",\n            },\n        ],\n        name: \"Deposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"actor\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"failureMap\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"execResults\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"Executed\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IPermissionCondition\",\n                name: \"condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"Granted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"MetadataSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NativeTokenDeposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"daoURI\",\n                type: \"string\",\n            },\n        ],\n        name: \"NewURI\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"signatureValidator\",\n                type: \"address\",\n            },\n        ],\n        name: \"SignatureValidatorSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"StandardCallbackRegistered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"forwarder\",\n                type: \"address\",\n            },\n        ],\n        name: \"TrustedForwarderSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        stateMutability: \"nonpayable\",\n        type: \"fallback\",\n    },\n    {\n        inputs: [],\n        name: \"EXECUTE_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REGISTER_STANDARD_CALLBACK_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ROOT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SET_METADATA_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SET_SIGNATURE_VALIDATOR_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SET_TRUSTED_FORWARDER_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_DAO_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"_items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applyMultiTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.SingleTargetPermission[]\",\n                name: \"items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applySingleTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"daoURI\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_reference\",\n                type: \"string\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [\n            {\n                internalType: \"bytes[]\",\n                name: \"execResults\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"failureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTrustedForwarder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"grant\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"contract IPermissionCondition\",\n                name: \"_condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"grantWithCondition\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"hasPermission\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_initialOwner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_trustedForwarder\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"daoURI_\",\n                type: \"string\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_hash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isValidSignature\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"registerStandardCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"newDaoURI\",\n                type: \"string\",\n            },\n        ],\n        name: \"setDaoURI\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"setMetadata\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_signatureValidator\",\n                type: \"address\",\n            },\n        ],\n        name: \"setSignatureValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_newTrustedForwarder\",\n                type: \"address\",\n            },\n        ],\n        name: \"setTrustedForwarder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"signatureValidator\",\n        outputs: [\n            {\n                internalType: \"contract IERC1271\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode$_ = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516135ad6200012060003960008181610a6c01528181610b0201528181610c9701528181610d2d0152610e2801526135ad6000f3fe6080604052600436106101d15760003560e01c8063829331a1116100f7578063d96054c411610095578063e978afe511610064578063e978afe5146106b2578063eafb8b06146106d2578063ee57e36f146106f2578063fdef91061461071257610210565b8063d96054c41461060a578063da7422281461062a578063e2e355631461064a578063e306bee71461067e57610210565b8063c71bf324116100d1578063c71bf3241461057d578063c9dbc2a4146105ab578063ce1b815f146105cb578063d68bad2c146105ea57610210565b8063829331a114610516578063bfe07da61461054a578063c4a501451461055d57610210565b80632675fdd01161016f5780633e2ab0d91161013e5780633e2ab0d9146104ac5780634f1ef286146104cc57806352d1902d146104df5780637034731b146104f457610210565b80632675fdd0146103ff57806326875b1f1461041f5780633659cfe614610453578063388da9341461047357610210565b80631080f99b116101ab5780631080f99b146103505780631626ba7e1461037257806322844d04146103ab57806324b4d73f146103cb57610210565b806301ffc9a7146102a55780630729d054146102da57806309e56b141461031c57610210565b3661021057604080513381523460208201527f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f3910160405180910390a1005b34801561021c57600080fd5b50600036606060006102706000356001600160e01b03191685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061073292505050565b604080516001600160e01b03198316602082015291925001604051602081830303815290604052915050915050805190602001f35b3480156102b157600080fd5b506102c56102c036600461293e565b610809565b60405190151581526020015b60405180910390f35b3480156102e657600080fd5b5061030e7fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b6040519081526020016102d1565b34801561032857600080fd5b5061030e7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b34801561035c57600080fd5b5061037061036b3660046129a4565b61085e565b005b34801561037e57600080fd5b5061039261038d366004612a89565b610897565b6040516001600160e01b031990911681526020016102d1565b3480156103b757600080fd5b506103706103c6366004612ae5565b610947565b3480156103d757600080fd5b5061030e7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b34801561040b57600080fd5b506102c561041a366004612b6d565b610a17565b34801561042b57600080fd5b5061030e7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b34801561045f57600080fd5b5061037061046e366004612bd9565b610a62565b34801561047f57600080fd5b5061012d54610494906001600160a01b031681565b6040516001600160a01b0390911681526020016102d1565b3480156104b857600080fd5b506103706104c7366004612bd9565b610bff565b6103706104da366004612bf6565b610c8d565b3480156104eb57600080fd5b5061030e610e1b565b34801561050057600080fd5b50610509610ee0565b6040516102d19190612c80565b34801561052257600080fd5b5061030e7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b610370610558366004612c93565b610f73565b34801561056957600080fd5b50610370610578366004612cef565b6110ad565b34801561058957600080fd5b5061059d610598366004612d3a565b611160565b6040516102d1929190612e14565b3480156105b757600080fd5b506103706105c6366004612e36565b611439565b3480156105d757600080fd5b5061012e546001600160a01b0316610494565b3480156105f657600080fd5b50610370610605366004612e89565b61146f565b34801561061657600080fd5b50610370610625366004612e89565b6114aa565b34801561063657600080fd5b50610370610645366004612bd9565b6114df565b34801561065657600080fd5b5061030e7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837281565b34801561068a57600080fd5b5061030e7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b3480156106be57600080fd5b506103706106cd366004612eca565b611512565b3480156106de57600080fd5b506103706106ed366004612f3f565b611619565b3480156106fe57600080fd5b5061037061070d3660046129a4565b6117e0565b34801561071e57600080fd5b506102c561072d366004612b6d565b611814565b6001600160e01b0319808316600090815260fb6020526040812054909160e09190911b9081166107a7576040517f54bdcc3e0000000000000000000000000000000000000000000000000000000081526001600160e01b03198086166004830152821660248201526044015b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516107f8929190612fd8565b60405180910390a290505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108035750506001600160e01b03191660009081526033602052604090205460ff1690565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61088881611822565b61089283836118aa565b505050565b61012d546000906001600160a01b03166108b357506000610803565b61012d546040517f1626ba7e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631626ba7e906108ff9086908690600401612ffa565b602060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190613013565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361097181611822565b60005b82811015610a1057600084848381811061099057610990613030565b9050606002018036038101906109a6919061305a565b90506000815160028111156109bd576109bd6130c3565b036109da576109d586826020015183604001516118ea565b610a07565b6001815160028111156109ef576109ef6130c3565b03610a0757610a0786826020015183604001516118f7565b50600101610974565b5050505050565b6000610a25858585856119fe565b80610a3e5750610a3e856001600160a01b0385856119fe565b80610a575750610a576001600160a01b038585856119fe565b90505b949350505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b005760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610bd75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610be081611b72565b60408051600080825260208201909252610bfc91839190611b9c565b50565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e778088372610c2981611822565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e906020015b60405180910390a15050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d2b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e025760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079e565b610e0b82611b72565b610e1782826001611b9c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ebb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606061012f8054610ef0906130d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1c906130d9565b8015610f695780601f10610f3e57610100808354040283529160200191610f69565b820191906000526020600020905b815481529060010190602001808311610f4c57829003601f168201915b5050505050905090565b82600003610fad576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841661100257823414610ffd576040517f1abd56100000000000000000000000000000000000000000000000000000000081526004810184905234602482015260440161079e565b611058565b3415611043576040517f1abd56100000000000000000000000000000000000000000000000000000000081526000600482015234602482015260440161079e565b6110586001600160a01b038516333086611d3c565b836001600160a01b0316336001600160a01b03167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f7685858560405161109f9392919061313e565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc6110d781611822565b6110e084611dc4565b6001600160e01b03198316600090815260fb60205260409020805463ffffffff191660e084901c179055604080516001600160e01b0319808716825280861660208301528416918101919091527ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b99060600160405180910390a150505050565b606060007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61118e81611822565b6101008511156111ca576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8467ffffffffffffffff8111156111e3576111e36129e6565b60405190808252806020026020018201604052801561121657816020015b60608152602001906001900390816112015790505b50925060008060005b878110156113e3575a92506000808a8a8481811061123f5761123f613030565b90506020028101906112519190613158565b61125f906020810190612bd9565b6001600160a01b03168b8b8581811061127a5761127a613030565b905060200281019061128c9190613158565b602001358c8c868181106112a2576112a2613030565b90506020028101906112b49190613158565b6112c2906040810190613178565b6040516112d09291906131bf565b60006040518083038185875af1925050503d806000811461130d576040519150601f19603f3d011682016040523d82523d6000602084013e611312565b606091505b50915091505a9350600160ff84161b89166113665781611361576040517fa6a7dbbd0000000000000000000000000000000000000000000000000000000081526004810184905260240161079e565b6113bb565b816113bb576113766040866131cf565b8410156113af576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160ff84161b871896505b808884815181106113ce576113ce613030565b6020908102919091010152505060010161121f565b50336001600160a01b03167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed78a8a8a888a6040516114259594939291906131f1565b60405180910390a250505094509492505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361146381611822565b610a1085858585611e43565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361149981611822565b6114a48484846118ea565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336114d481611822565b6114a48484846118f7565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c61150981611822565b610e1782612101565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361153c81611822565b60005b828110156114a457600084848381811061155b5761155b613030565b905060a002018036038101906115719190613316565b9050600081516002811115611588576115886130c3565b036115a9576115a48160200151826040015183608001516118ea565b611610565b6001815160028111156115be576115be6130c3565b036115da576115a48160200151826040015183608001516118f7565b6002815160028111156115ef576115ef6130c3565b03611610576116108160200151826040015183608001518460600151611e43565b5060010161153f565b600054610100900460ff16158080156116395750600054600160ff909116105b806116535750303b158015611653575060005460ff166001145b6116c55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079e565b6000805460ff1916600117905580156116e8576000805461ff0019166101001790555b6117117f9385547e00000000000000000000000000000000000000000000000000000000611dc4565b61173a7f1626ba7e00000000000000000000000000000000000000000000000000000000611dc4565b6117637f7034731b00000000000000000000000000000000000000000000000000000000611dc4565b61176b612163565b6117758787612270565b61177e84612101565b61178883836118aa565b611791856122a1565b80156117d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b61180a81611822565b6108928383612270565b6000610a5785858585610a17565b6118653033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1792505050565b610bfc576040517f1e09743f0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810182905260640161079e565b61012f6118b88284836133f3565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051610c819291906134b3565b6108928383836002611e43565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e83015260528083018590528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316156114a457600081815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b60008060c96000611a838888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316905080611aae576000915050610a5a565b6001196001600160a01b03821601611aca576001915050610a5a565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd090611b159089908990899089906004016134c7565b602060405180830381865afa925050508015611b4e575060408051601f3d908101601f19168201909252611b4b91810190613503565b60015b15611b66578015611b6457600192505050610a5a565b505b50600095945050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc610e1781611822565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bcf5761089283612327565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c29575060408051601f3d908101601f19168201909252611c2691810190613525565b60015b611c9b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611d305760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161079e565b506108928383836123f2565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114a4908590612417565b6001600160e01b03198082169003611e1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161079e565b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b03848116148015611e6357506001600160a01b03838116145b15611e9a576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611eb957506001600160a01b03838116145b15611f73576000611ec9836124fc565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611ef65750805b15611f2d576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611f71576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e83015260528083018690528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b0316828161208c57600083815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46117d7565b806001600160a01b0316826001600160a01b0316146117d7576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a40161079e565b61012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea29060200160405180910390a150565b61218c7f150b7a0200000000000000000000000000000000000000000000000000000000611dc4565b6121b57f4e2312e000000000000000000000000000000000000000000000000000000000611dc4565b60fb6020527f5a08f87af82de422c581ce019b2e54a9c17372e9cba575ae0470ba2482d63686805463ffffffff1990811663150b7a02179091557fe1cfe341950d56d8854f782066100d5ae1d5930cdb4949b973e554a343efc6c38054821663f23a6e611790557fbc197c81000000000000000000000000000000000000000000000000000000006000527f08ba3617671847c1c169da222a5bc01cfdefcc3c4f1e5525214a474479c89123805490911663bc197c81179055565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed8282604051610c819291906134b3565b600054610100900460ff1661231e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079e565b610bfc816125f5565b6001600160a01b0381163b6123a45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161079e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6123fb83612620565b6000825111806124085750805b15610892576114a48383612660565b600061246c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661276b9092919063ffffffff16565b805190915015610892578080602001905181019061248a9190613503565b6108925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161079e565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d82148061254b57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b8061257557507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b8061259f57507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b806125c957507f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837282145b806108035750507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc1490565b610bfc30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336118ea565b61262981612327565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161079e565b600080846001600160a01b0316846040516126fa919061353e565b600060405180830381855af49150503d8060008114612735576040519150601f19603f3d011682016040523d82523d6000602084013e61273a565b606091505b509150915061276282826040518060600160405280602781526020016135516027913961277a565b95945050505050565b6060610a5a8484600085612793565b60608315612789575081610940565b6109408383612885565b60608247101561280b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161079e565b600080866001600160a01b03168587604051612827919061353e565b60006040518083038185875af1925050503d8060008114612864576040519150601f19603f3d011682016040523d82523d6000602084013e612869565b606091505b509150915061287a878383876128af565b979650505050505050565b8151156128955781518083602001fd5b8060405162461bcd60e51b815260040161079e9190612c80565b6060831561291e578251600003612917576001600160a01b0385163b6129175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079e565b5081610a5a565b610a5a8383612885565b6001600160e01b031981168114610bfc57600080fd5b60006020828403121561295057600080fd5b813561094081612928565b60008083601f84011261296d57600080fd5b50813567ffffffffffffffff81111561298557600080fd5b60208301915083602082850101111561299d57600080fd5b9250929050565b600080602083850312156129b757600080fd5b823567ffffffffffffffff8111156129ce57600080fd5b6129da8582860161295b565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612a0d57600080fd5b813567ffffffffffffffff80821115612a2857612a286129e6565b604051601f8301601f19908116603f01168101908282118183101715612a5057612a506129e6565b81604052838152866020858801011115612a6957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612a9c57600080fd5b82359150602083013567ffffffffffffffff811115612aba57600080fd5b612ac6858286016129fc565b9150509250929050565b6001600160a01b0381168114610bfc57600080fd5b600080600060408486031215612afa57600080fd5b8335612b0581612ad0565b9250602084013567ffffffffffffffff80821115612b2257600080fd5b818601915086601f830112612b3657600080fd5b813581811115612b4557600080fd5b876020606083028501011115612b5a57600080fd5b6020830194508093505050509250925092565b60008060008060808587031215612b8357600080fd5b8435612b8e81612ad0565b93506020850135612b9e81612ad0565b925060408501359150606085013567ffffffffffffffff811115612bc157600080fd5b612bcd878288016129fc565b91505092959194509250565b600060208284031215612beb57600080fd5b813561094081612ad0565b60008060408385031215612c0957600080fd5b8235612c1481612ad0565b9150602083013567ffffffffffffffff811115612aba57600080fd5b60005b83811015612c4b578181015183820152602001612c33565b50506000910152565b60008151808452612c6c816020860160208601612c30565b601f01601f19169290920160200192915050565b6020815260006109406020830184612c54565b60008060008060608587031215612ca957600080fd5b8435612cb481612ad0565b935060208501359250604085013567ffffffffffffffff811115612cd757600080fd5b612ce38782880161295b565b95989497509550505050565b600080600060608486031215612d0457600080fd5b8335612d0f81612928565b92506020840135612d1f81612928565b91506040840135612d2f81612928565b809150509250925092565b60008060008060608587031215612d5057600080fd5b84359350602085013567ffffffffffffffff80821115612d6f57600080fd5b818701915087601f830112612d8357600080fd5b813581811115612d9257600080fd5b8860208260051b8501011115612da757600080fd5b95986020929092019750949560400135945092505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612e07578284038952612df5848351612c54565b98850198935090840190600101612ddd565b5091979650505050505050565b604081526000612e276040830185612dbf565b90508260208301529392505050565b60008060008060808587031215612e4c57600080fd5b8435612e5781612ad0565b93506020850135612e6781612ad0565b9250604085013591506060850135612e7e81612ad0565b939692955090935050565b600080600060608486031215612e9e57600080fd5b8335612ea981612ad0565b92506020840135612eb981612ad0565b929592945050506040919091013590565b60008060208385031215612edd57600080fd5b823567ffffffffffffffff80821115612ef557600080fd5b818501915085601f830112612f0957600080fd5b813581811115612f1857600080fd5b86602060a083028501011115612f2d57600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215612f5857600080fd5b863567ffffffffffffffff80821115612f7057600080fd5b612f7c8a838b0161295b565b909850965060208901359150612f9182612ad0565b909450604088013590612fa382612ad0565b90935060608801359080821115612fb957600080fd5b50612fc689828a0161295b565b979a9699509497509295939492505050565b6001600160a01b0383168152604060208201526000610a5a6040830184612c54565b828152604060208201526000610a5a6040830184612c54565b60006020828403121561302557600080fd5b815161094081612928565b634e487b7160e01b600052603260045260246000fd5b80356003811061305557600080fd5b919050565b60006060828403121561306c57600080fd5b6040516060810181811067ffffffffffffffff8211171561308f5761308f6129e6565b60405261309b83613046565b815260208301356130ab81612ad0565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600181811c908216806130ed57607f821691505b60208210810361310d57634e487b7160e01b600052602260045260246000fd5b50919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b838152604060208201526000610a57604083018486613113565b60008235605e1983360301811261316e57600080fd5b9190910192915050565b6000808335601e1984360301811261318f57600080fd5b83018035915067ffffffffffffffff8211156131aa57600080fd5b60200191503681900382131561299d57600080fd5b8183823760009101908152919050565b6000826131ec57634e487b7160e01b600052601260045260246000fd5b500490565b60006080820187835260206080818501528187835260a08501905060a08860051b86010192508860005b898110156132ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608786030183528135605e198c360301811261325e57600080fd5b8b016060813561326d81612ad0565b6001600160a01b03168752818601358688015260408083013536849003601e1901811261329957600080fd5b90920186810192903567ffffffffffffffff8111156132b757600080fd5b8036038413156132c657600080fd5b82828a01526132d8838a018286613113565b985050509385019350509083019060010161321b565b50505050846040840152828103606084015261330a8185612dbf565b98975050505050505050565b600060a0828403121561332857600080fd5b60405160a0810181811067ffffffffffffffff8211171561334b5761334b6129e6565b60405261335783613046565b8152602083013561336781612ad0565b6020820152604083013561337a81612ad0565b6040820152606083013561338d81612ad0565b60608201526080928301359281019290925250919050565b601f82111561089257600081815260208120601f850160051c810160208610156133cc5750805b601f850160051c820191505b818110156133eb578281556001016133d8565b505050505050565b67ffffffffffffffff83111561340b5761340b6129e6565b61341f8361341983546130d9565b836133a5565b6000601f841160018114613453576000851561343b5750838201355b600019600387901b1c1916600186901b178355610a10565b600083815260209020601f19861690835b828110156134845786850135825560209485019460019092019101613464565b50868210156134a15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602081526000610a5a602083018486613113565b60006001600160a01b038087168352808616602084015250836040830152608060608301526134f96080830184612c54565b9695505050505050565b60006020828403121561351557600080fd5b8151801515811461094057600080fd5b60006020828403121561353757600080fd5b5051919050565b6000825161316e818460208701612c3056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200c168e950345d0d51e5072f0d6741c8fffb903a88e5f4d9ae41a3c116b51090b64736f6c63430008110033\";\nconst isSuperArgs$_ = (xs) => xs.length > 1;\nclass DAO__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$_(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$1p, _bytecode$_, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$1p);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1p, signerOrProvider);\n    }\n}\nDAO__factory.bytecode = _bytecode$_;\nDAO__factory.abi = _abi$1p;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1o = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"_reference\",\n                type: \"string\",\n            },\n        ],\n        name: \"Deposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"actor\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"failureMap\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"execResults\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"Executed\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"MetadataSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NativeTokenDeposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"signatureValidator\",\n                type: \"address\",\n            },\n        ],\n        name: \"SignatureValidatorSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"StandardCallbackRegistered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"forwarder\",\n                type: \"address\",\n            },\n        ],\n        name: \"TrustedForwarderSet\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_reference\",\n                type: \"string\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [\n            {\n                internalType: \"bytes[]\",\n                name: \"\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTrustedForwarder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"hasPermission\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_hash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isValidSignature\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"registerStandardCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"setMetadata\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_signatureValidator\",\n                type: \"address\",\n            },\n        ],\n        name: \"setSignatureValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_trustedForwarder\",\n                type: \"address\",\n            },\n        ],\n        name: \"setTrustedForwarder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IDAO__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1o);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1o, signerOrProvider);\n    }\n}\nIDAO__factory.abi = _abi$1o;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1n = [\n    {\n        inputs: [],\n        name: \"daoURI\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"_daoURI\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IEIP4824__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1n);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1n, signerOrProvider);\n    }\n}\nIEIP4824__factory.abi = _abi$1n;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$N = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DAO__factory: DAO__factory,\n  IDAO__factory: IDAO__factory,\n  IEIP4824__factory: IEIP4824__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1m = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"allowed\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IPermissionCondition__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1m);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1m, signerOrProvider);\n    }\n}\nIPermissionCondition__factory.abi = _abi$1m;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1l = [\n    {\n        inputs: [],\n        name: \"NO_CONDITION\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$Z = \"0x609e610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636dd02a5b146038575b600080fd5b603f600081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220ae892c49277bf7689660de1c33eb7fb1da0e2719e6ba9dcccebed43705e1bbf564736f6c63430008110033\";\nconst isSuperArgs$Z = (xs) => xs.length > 1;\nclass PermissionLib__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$Z(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$1l, _bytecode$Z, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$1l);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1l, signerOrProvider);\n    }\n}\nPermissionLib__factory.bytecode = _bytecode$Z;\nPermissionLib__factory.abi = _abi$1l;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1k = [\n    {\n        inputs: [],\n        name: \"AnyAddressDisallowedForWhoAndWhere\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConditionNotPresentForAnyAddress\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"currentCondition\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"newCondition\",\n                type: \"address\",\n            },\n        ],\n        name: \"PermissionAlreadyGrantedForDifferentCondition\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PermissionsForAnyAddressDisallowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Unauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IPermissionCondition\",\n                name: \"condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"Granted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ROOT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"_items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applyMultiTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.SingleTargetPermission[]\",\n                name: \"items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applySingleTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"grant\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"contract IPermissionCondition\",\n                name: \"_condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"grantWithCondition\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass PermissionManager__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1k);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1k, signerOrProvider);\n    }\n}\nPermissionManager__factory.abi = _abi$1k;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$M = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IPermissionCondition__factory: IPermissionCondition__factory,\n  PermissionLib__factory: PermissionLib__factory,\n  PermissionManager__factory: PermissionManager__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1j = [\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass DaoAuthorizable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1j);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1j, signerOrProvider);\n    }\n}\nDaoAuthorizable__factory.abi = _abi$1j;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1i = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass DaoAuthorizableUpgradeable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1i);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1i, signerOrProvider);\n    }\n}\nDaoAuthorizableUpgradeable__factory.abi = _abi$1i;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$L = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DaoAuthorizable__factory: DaoAuthorizable__factory,\n  DaoAuthorizableUpgradeable__factory: DaoAuthorizableUpgradeable__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1h = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersAdded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersRemoved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"definingContract\",\n                type: \"address\",\n            },\n        ],\n        name: \"MembershipContractAnnounced\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isMember\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IMembership__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1h);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1h, signerOrProvider);\n    }\n}\nIMembership__factory.abi = _abi$1h;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$K = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IMembership__factory: IMembership__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1g = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IProposal__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1g);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1g, signerOrProvider);\n    }\n}\nIProposal__factory.abi = _abi$1g;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1f = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass Proposal__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1f);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1f, signerOrProvider);\n    }\n}\nProposal__factory.abi = _abi$1f;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1e = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ProposalUpgradeable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1e);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1e, signerOrProvider);\n    }\n}\nProposalUpgradeable__factory.abi = _abi$1e;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$J = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IProposal__factory: IProposal__factory,\n  Proposal__factory: Proposal__factory,\n  ProposalUpgradeable__factory: ProposalUpgradeable__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1d = [\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IPlugin__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1d);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1d, signerOrProvider);\n    }\n}\nIPlugin__factory.abi = _abi$1d;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1c = [\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass Plugin__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1c);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1c, signerOrProvider);\n    }\n}\nPlugin__factory.abi = _abi$1c;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1b = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass PluginCloneable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1b);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1b, signerOrProvider);\n    }\n}\nPluginCloneable__factory.abi = _abi$1b;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1a = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nclass PluginUUPSUpgradeable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1a);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1a, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeable__factory.abi = _abi$1a;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$I = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  daoAuthorizable: index$L,\n  membership: index$K,\n  proposal: index$J,\n  IPlugin__factory: IPlugin__factory,\n  Plugin__factory: Plugin__factory,\n  PluginCloneable__factory: PluginCloneable__factory,\n  PluginUUPSUpgradeable__factory: PluginUUPSUpgradeable__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$19 = [\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"UnkownCallback\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"sig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CallbackReceived\",\n        type: \"event\",\n    },\n];\nclass CallbackHandler__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$19);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$19, signerOrProvider);\n    }\n}\nCallbackHandler__factory.abi = _abi$19;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$H = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CallbackHandler__factory: CallbackHandler__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$G = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  dao: index$N,\n  permission: index$M,\n  plugin: index$I,\n  utils: index$H\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$18 = [\n    {\n        inputs: [\n            {\n                internalType: \"contract DAORegistry\",\n                name: \"_registry\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract PluginSetupProcessor\",\n                name: \"_pluginSetupProcessor\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"NoPluginProvided\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"trustedForwarder\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"daoURI\",\n                        type: \"string\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"subdomain\",\n                        type: \"string\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"metadata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct DAOFactory.DAOSettings\",\n                name: \"_daoSettings\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct DAOFactory.PluginSettings[]\",\n                name: \"_pluginSettings\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"createDao\",\n        outputs: [\n            {\n                internalType: \"contract DAO\",\n                name: \"createdDao\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"daoBase\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"daoRegistry\",\n        outputs: [\n            {\n                internalType: \"contract DAORegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginSetupProcessor\",\n        outputs: [\n            {\n                internalType: \"contract PluginSetupProcessor\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$Y = \"\";\nconst isSuperArgs$Y = (xs) => xs.length > 1;\nclass DAOFactory__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$Y(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$18, _bytecode$Y, args[0]);\n        }\n    }\n    deploy(_registry, _pluginSetupProcessor, overrides) {\n        return super.deploy(_registry, _pluginSetupProcessor, overrides || {});\n    }\n    getDeployTransaction(_registry, _pluginSetupProcessor, overrides) {\n        return super.getDeployTransaction(_registry, _pluginSetupProcessor, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$18);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$18, signerOrProvider);\n    }\n}\nDAOFactory__factory.bytecode = _bytecode$Y;\nDAOFactory__factory.abi = _abi$18;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$17 = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractAlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractERC165SupportInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractInterfaceInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n        ],\n        name: \"InvalidDaoSubdomain\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n        ],\n        name: \"DAORegistered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"REGISTER_DAO_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REGISTRY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"entries\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_managingDao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract ENSSubdomainRegistrar\",\n                name: \"_subdomainRegistrar\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n        ],\n        name: \"register\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"subdomainRegistrar\",\n        outputs: [\n            {\n                internalType: \"contract ENSSubdomainRegistrar\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"targetInterfaceId\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$X = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516116dd610119600039600081816102b00152818161034b015281816105be01528181610654015261074f01526116dd6000f3fe6080604052600436106100bb5760003560e01c80634f1ef28611610074578063a2298b4b1161004e578063a2298b4b14610212578063ede4973914610246578063f29ee1251461026657600080fd5b80634f1ef286146101a857806352d1902d146101bb57806374574eb7146101de57600080fd5b80634162169f116100a55780634162169f1461011f57806344162ef81461013d578063485cc9551461018857600080fd5b8062077393146100c05780633659cfe6146100fd575b600080fd5b3480156100cc57600080fd5b5060fb546100e0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010957600080fd5b5061011d61011836600461132a565b6102a6565b005b34801561012b57600080fd5b506097546001600160a01b03166100e0565b34801561014957600080fd5b5060c9546101579060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b34801561019457600080fd5b5061011d6101a3366004611347565b610448565b61011d6101b6366004611396565b6105b4565b3480156101c757600080fd5b506101d0610742565b6040519081526020016100f4565b3480156101ea57600080fd5b506101d07f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561021e57600080fd5b506101d07fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc5485621581565b34801561025257600080fd5b5061011d61026136600461145a565b610807565b34801561027257600080fd5b5061029661028136600461132a565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100f4565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103495760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103a47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b61042981610988565b60408051600080825260208201909252610445918391906109c1565b50565b600054610100900460ff16158080156104685750600054600160ff909116105b806104825750303b158015610482575060005460ff166001145b6104f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610340565b6000805460ff191660011790558015610517576000805461ff0019166101001790555b610541837f9385547e00000000000000000000000000000000000000000000000000000000610b61565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156105af576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106525760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610340565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106ad7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107295760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b61073282610988565b61073e828260016109c1565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e25760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610340565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc5485621590610845906001600160a01b031630335b84600036610c1c565b8461084f81610d0a565b82156109335761085f8484610de7565b6108995783836040517f3a5bf49b000000000000000000000000000000000000000000000000000000008152600401610340929190611517565b600084846040516108ab929190611533565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03858116602485015291935016906389bb414590604401600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b50505050505b846001600160a01b0316816001600160a01b03167fbc0b11fe649bb4d67c7fb40936163e5423f45c3ae83fbd8f8f8c75e1a3fa97af8686604051610978929190611517565b60405180910390a3505050505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa729329061073e906001600160a01b0316303361083c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109f4576105af83610e94565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a4e575060408051601f3d908101601f19168201909252610a4b91810190611543565b60015b610ac05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b555760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610340565b506105af838383610f5f565b600054610100900460ff16610bde5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b610be782610f8a565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c69908890889088908890889060040161155c565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa919061158f565b610d02576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610340565b505050505050565b6001600160a01b038116600090815260ca602052604090205460ff1615610d68576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b60c954610d82906001600160a01b0383169060e01b611036565b610dc3576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6000828280835b81811015610e85576000848483818110610e0a57610e0a6115b1565b919091013560f81c915050606081118015610e285750607b8160ff16105b15610e335750610e73565b602f8160ff16118015610e495750603a8160ff16105b15610e545750610e73565b8060ff16602d03610e655750610e73565b600095505050505050610e8e565b80610e7d816115c7565b915050610dee565b50600193505050505b92915050565b6001600160a01b0381163b610f115760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f6883611059565b600082511180610f755750805b156105af57610f848383611099565b50505050565b600054610100900460ff166110075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000611041836111a4565b801561105257506110528383611208565b9392505050565b61106281610e94565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610340565b600080846001600160a01b0316846040516111339190611631565b600060405180830381855af49150503d806000811461116e576040519150601f19603f3d011682016040523d82523d6000602084013e611173565b606091505b509150915061119b8282604051806060016040528060278152602001611681602791396112d7565b95945050505050565b60006111d0827f01ffc9a700000000000000000000000000000000000000000000000000000000611208565b8015610e8e5750611201827fffffffff00000000000000000000000000000000000000000000000000000000611208565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156112c0575060208210155b80156112cc5750600081115b979650505050505050565b606083156112e6575081611052565b61105283838151156112fb5781518083602001fd5b8060405162461bcd60e51b8152600401610340919061164d565b6001600160a01b038116811461044557600080fd5b60006020828403121561133c57600080fd5b813561105281611315565b6000806040838503121561135a57600080fd5b823561136581611315565b9150602083013561137581611315565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156113a957600080fd5b82356113b481611315565b9150602083013567ffffffffffffffff808211156113d157600080fd5b818501915085601f8301126113e557600080fd5b8135818111156113f7576113f7611380565b604051601f8201601f19908116603f0116810190838211818310171561141f5761141f611380565b8160405282815288602084870101111561143857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561147057600080fd5b843561147b81611315565b9350602085013561148b81611315565b9250604085013567ffffffffffffffff808211156114a857600080fd5b818701915087601f8301126114bc57600080fd5b8135818111156114cb57600080fd5b8860208285010111156114dd57600080fd5b95989497505060200194505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60208152600061152b6020830184866114ec565b949350505050565b8183823760009101908152919050565b60006020828403121561155557600080fd5b5051919050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526112cc6080830184866114ec565b6000602082840312156115a157600080fd5b8151801515811461105257600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361160657634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015611628578181015183820152602001611610565b50506000910152565b6000825161164381846020870161160d565b9190910192915050565b602081526000825180602084015261166c81604085016020870161160d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f8f1fcdb9376fb68b143dcf16590588d570be0cc533ab59ab9dee674acf1e6c964736f6c63430008110033\";\nconst isSuperArgs$X = (xs) => xs.length > 1;\nclass DAORegistry__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$X(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$17, _bytecode$X, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$17);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$17, signerOrProvider);\n    }\n}\nDAORegistry__factory.bytecode = _bytecode$X;\nDAORegistry__factory.abi = _abi$17;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$F = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DAOFactory__factory: DAOFactory__factory,\n  DAORegistry__factory: DAORegistry__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$16 = [\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_pluginSetupAddress\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_buildMetadata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_releaseMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"createVersion\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_releaseMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"updateReleaseMetadata\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IPluginRepo__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$16);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$16, signerOrProvider);\n    }\n}\nIPluginRepo__factory.abi = _abi$16;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$15 = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AnyAddressDisallowedForWhoAndWhere\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConditionNotPresentForAnyAddress\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"EmptyReleaseMetadata\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidPluginSetupInterface\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"latestRelease\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"newRelease\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"InvalidReleaseIncrement\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"currentCondition\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"newCondition\",\n                type: \"address\",\n            },\n        ],\n        name: \"PermissionAlreadyGrantedForDifferentCondition\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PermissionsForAnyAddressDisallowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"release\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"build\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"address\",\n                name: \"pluginSetup\",\n                type: \"address\",\n            },\n        ],\n        name: \"PluginSetupAlreadyInPreviousRelease\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ReleaseDoesNotExist\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ReleaseZeroNotAllowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Unauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"versionHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"VersionHashDoesNotExist\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IPermissionCondition\",\n                name: \"condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"Granted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"release\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"releaseMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ReleaseMetadataUpdated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"release\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"build\",\n                type: \"uint16\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"pluginSetup\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"buildMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"VersionCreated\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MAINTAINER_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ROOT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REPO_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"_items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applyMultiTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.SingleTargetPermission[]\",\n                name: \"items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applySingleTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"buildCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_pluginSetup\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_buildMetadata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_releaseMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"createVersion\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_pluginSetup\",\n                type: \"address\",\n            },\n        ],\n        name: \"getLatestVersion\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"tag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"pluginSetup\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"buildMetadata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Version\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"getLatestVersion\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"tag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"pluginSetup\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"buildMetadata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Version\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_tagHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getVersion\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"tag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"pluginSetup\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"buildMetadata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Version\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"_tag\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getVersion\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"tag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"pluginSetup\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"buildMetadata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Version\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"grant\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"contract IPermissionCondition\",\n                name: \"_condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"grantWithCondition\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"initialOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"latestRelease\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_release\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_releaseMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"updateReleaseMetadata\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$W = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612bef62000120600039600081816107c70152818161086201528181610969015281816109ff0152610b440152612bef6000f3fe6080604052600436106101755760003560e01c80639af3e909116100cb578063d68bad2c1161007f578063e0589bd311610059578063e0589bd314610450578063e978afe514610470578063fc0544271461049057600080fd5b8063d68bad2c146103dc578063d96054c4146103fc578063df1d6c441461041c57600080fd5b8063c4d66de8116100b0578063c4d66de814610368578063c9dbc2a414610388578063cc98b8f5146103a857600080fd5b80639af3e90914610314578063afe5eb781461033457600080fd5b80633659cfe61161012d57806352d1902d1161010757806352d1902d146102b35780637be0ca5e146102c85780639aaf9f08146102f457600080fd5b80633659cfe6146102535780634f1ef2861461027357806350abe9101461028657600080fd5b806322844d041161015e57806322844d04146101f15780632675fdd01461021357806328375f671461023357600080fd5b806301ffc9a71461017a57806309e56b14146101af575b600080fd5b34801561018657600080fd5b5061019a6101953660046121c3565b6104b0565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506101e37f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020016101a6565b3480156101fd57600080fd5b5061021161020c36600461221a565b61057c565b005b34801561021f57600080fd5b5061019a61022e366004612345565b61064c565b34801561023f57600080fd5b5061021161024e366004612410565b610697565b34801561025f57600080fd5b5061021161026e366004612463565b6107bd565b610211610281366004612480565b61095f565b34801561029257600080fd5b506102a66102a1366004612463565b610aed565b6040516101a69190612520565b3480156102bf57600080fd5b506101e3610b37565b3480156102d457600080fd5b5060cc546102e29060ff1681565b60405160ff90911681526020016101a6565b34801561030057600080fd5b506102a661030f36600461256c565b610bfc565b34801561032057600080fd5b506102a661032f366004612585565b610d53565b34801561034057600080fd5b506101e37fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b34801561037457600080fd5b50610211610383366004612463565b610d99565b34801561039457600080fd5b506102116103a336600461259d565b610f10565b3480156103b457600080fd5b506101e37f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b3480156103e857600080fd5b506102116103f73660046125f0565b610f46565b34801561040857600080fd5b506102116104173660046125f0565b610f81565b34801561042857600080fd5b506101e3610437366004612631565b60ff16600090815260c9602052604090205461ffff1690565b34801561045c57600080fd5b506102a661046b366004612631565b610fb6565b34801561047c57600080fd5b5061021161048b36600461264c565b61101f565b34801561049c57600080fd5b506102116104ab3660046126c1565b611126565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd4321b4000000000000000000000000000000000000000000000000000000000148061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2b96ad4d00000000000000000000000000000000000000000000000000000000145b8061057657506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105a681611552565b60005b828110156106455760008484838181106105c5576105c5612754565b9050606002018036038101906105db9190612779565b90506000815160028111156105f2576105f26127e2565b0361060f5761060a86826020015183604001516115da565b61063c565b600181516002811115610624576106246127e2565b0361063c5761063c86826020015183604001516115ec565b506001016105a9565b5050505050565b600061065a858585856116f3565b806106735750610673856001600160a01b0385856116f3565b8061068c575061068c6001600160a01b038585856116f3565b90505b949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6106c181611552565b8360ff166000036106fe576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc5460ff9081169085161115610741576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082900361077c576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78484846040516107af93929190612823565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b61094081611867565b6040805160008082526020820190925261095c91839190611891565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109fd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610857565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ad45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b610add82611867565b610ae982826001611891565b5050565b6040805160a081018252600060608083018281526080840183905283526020808401839052838501919091526001600160a01b038516825260cb9052919091205461057690610bfc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd75760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610857565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915284825260ca905291822080549192909160ff169003610c76576040517f8d0aeeb100000000000000000000000000000000000000000000000000000000815260048101849052602401610857565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b03166020820152600283018054919284929084019190610cc990612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612840565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081525050915050919050565b6040805160a0810182526000606080830182815260808401839052835260208301919091529181019190915261057661030f610d9436859003850185612874565b611a31565b600054610100900460ff1615808015610db95750600054600160ff909116105b80610dd35750303b158015610dd3575060005460ff166001145b610e455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610857565b6000805460ff191660011790558015610e68576000805461ff0019166101001790555b610e7182611ac0565b610e9c30837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6115da565b610ec730837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b6115da565b8015610ae9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f3a81611552565b61064585858585611b46565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f7081611552565b610f7b8484846115da565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610fab81611552565b610f7b8484846115ec565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915260ff851680835260c982529184902054845180860190955291845261ffff90911690830181905290916110189061030f90611a31565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361104981611552565b60005b82811015610f7b57600084848381811061106857611068612754565b905060a0020180360381019061107e91906128d8565b9050600081516002811115611095576110956127e2565b036110b6576110b18160200151826040015183608001516115da565b61111d565b6001815160028111156110cb576110cb6127e2565b036110e7576110b18160200151826040015183608001516115ec565b6002815160028111156110fc576110fc6127e2565b0361111d5761111d8160200151826040015183608001518460600151611b46565b5060010161104c565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea61115081611552565b6111836001600160a01b0387167f99718b5000000000000000000000000000000000000000000000000000000000611e02565b6111b9576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660ff166000036111f6576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc546001906112099060ff168961297d565b60ff1611156112555760cc546040517f53db7b7b00000000000000000000000000000000000000000000000000000000815260ff91821660048201529088166024820152604401610857565b60cc5460ff90811690881611156112b05760cc805460ff191660ff891617905560008290036112b0576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff16158015906112ef5750805460ff898116911614155b1561134b5780546040517fff9f367400000000000000000000000000000000000000000000000000000000815260ff8216600482015261010090910461ffff1660248201526001600160a01b0388166044820152606401610857565b60ff8816600090815260c9602052604081208054829061136e9061ffff16612996565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff16815250905060006113b482611a31565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff16610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090921660ff90911617178155908401516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff199092169190911790559083015190915060028201906114a79082612a05565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e6669906114fb908e9087908e908e90612ac5565b60405180910390a28515611545577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b888860405161153c93929190612823565b60405180910390a15b5050505050505050505050565b6115953033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064c92505050565b61095c576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610857565b6115e78383836002611b46565b505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b031615610f7b57600081815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006117788888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806117a357600091505061068f565b6001196001600160a01b038216016117bf57600191505061068f565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd09061180a908990899089908990600401612af6565b602060405180830381865afa925050508015611843575060408051601f3d908101601f1916820190925261184091810190612b28565b60015b1561185b5780156118595760019250505061068f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610ae981611552565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118c4576115e783611e1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561191e575060408051601f3d908101601f1916820190925261191b91810190612b4a565b60015b6119905760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a255760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610857565b506115e7838383611ee9565b600081600001518260200151604051602001611aa392919060f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff16611b3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610857565b61095c81611f0e565b6001600160a01b03848116148015611b6657506001600160a01b03838116145b15611b9d576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611bbc57506001600160a01b03838116145b15611c6b5760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611bee5750805b15611c25576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611c69576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b03168281611d8457600083815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4611df9565b806001600160a01b0316826001600160a01b031614611df9576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610857565b50505050505050565b6000611e0d83611f39565b801561101857506110188383611f84565b6001600160a01b0381163b611e9b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611ef28361203a565b600082511180611eff5750805b156115e757610f7b838361207a565b61095c30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336115da565b6000611f4c826301ffc9a760e01b611f84565b80156105765750611f7d827fffffffff00000000000000000000000000000000000000000000000000000000611f84565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612023575060208210155b801561202f5750600081115b979650505050505050565b61204381611e1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610857565b600080846001600160a01b0316846040516121149190612b63565b600060405180830381855af49150503d806000811461214f576040519150601f19603f3d011682016040523d82523d6000602084013e612154565b606091505b509150915061217c8282604051806060016040528060278152602001612b9360279139612185565b95945050505050565b60608315612194575081611018565b61101883838151156121a95781518083602001fd5b8060405162461bcd60e51b81526004016108579190612b7f565b6000602082840312156121d557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101857600080fd5b6001600160a01b038116811461095c57600080fd5b60008060006040848603121561222f57600080fd5b833561223a81612205565b9250602084013567ffffffffffffffff8082111561225757600080fd5b818601915086601f83011261226b57600080fd5b81358181111561227a57600080fd5b87602060608302850101111561228f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122c957600080fd5b813567ffffffffffffffff808211156122e4576122e46122a2565b604051601f8301601f19908116603f0116810190828211818310171561230c5761230c6122a2565b8160405283815286602085880101111561232557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561235b57600080fd5b843561236681612205565b9350602085013561237681612205565b925060408501359150606085013567ffffffffffffffff81111561239957600080fd5b6123a5878288016122b8565b91505092959194509250565b803560ff811681146123c257600080fd5b919050565b60008083601f8401126123d957600080fd5b50813567ffffffffffffffff8111156123f157600080fd5b60208301915083602082850101111561240957600080fd5b9250929050565b60008060006040848603121561242557600080fd5b61242e846123b1565b9250602084013567ffffffffffffffff81111561244a57600080fd5b612456868287016123c7565b9497909650939450505050565b60006020828403121561247557600080fd5b813561101881612205565b6000806040838503121561249357600080fd5b823561249e81612205565b9150602083013567ffffffffffffffff8111156124ba57600080fd5b6124c6858286016122b8565b9150509250929050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b602081526000825160ff815116602084015261ffff6020820151166040840152506001600160a01b036020840151166060830152604083015160808084015261068f60a08401826124f4565b60006020828403121561257e57600080fd5b5035919050565b60006040828403121561259757600080fd5b50919050565b600080600080608085870312156125b357600080fd5b84356125be81612205565b935060208501356125ce81612205565b92506040850135915060608501356125e581612205565b939692955090935050565b60008060006060848603121561260557600080fd5b833561261081612205565b9250602084013561262081612205565b929592945050506040919091013590565b60006020828403121561264357600080fd5b611018826123b1565b6000806020838503121561265f57600080fd5b823567ffffffffffffffff8082111561267757600080fd5b818501915085601f83011261268b57600080fd5b81358181111561269a57600080fd5b86602060a0830285010111156126af57600080fd5b60209290920196919550909350505050565b600080600080600080608087890312156126da57600080fd5b6126e3876123b1565b955060208701356126f381612205565b9450604087013567ffffffffffffffff8082111561271057600080fd5b61271c8a838b016123c7565b9096509450606089013591508082111561273557600080fd5b5061274289828a016123c7565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b8035600381106123c257600080fd5b60006060828403121561278b57600080fd5b6040516060810181811067ffffffffffffffff821117156127ae576127ae6122a2565b6040526127ba8361276a565b815260208301356127ca81612205565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60ff8416815260406020820152600061068c6040830184866127f8565b600181811c9082168061285457607f821691505b60208210810361259757634e487b7160e01b600052602260045260246000fd5b60006040828403121561288657600080fd5b6040516040810181811067ffffffffffffffff821117156128a9576128a96122a2565b6040526128b5836123b1565b8152602083013561ffff811681146128cc57600080fd5b60208201529392505050565b600060a082840312156128ea57600080fd5b60405160a0810181811067ffffffffffffffff8211171561290d5761290d6122a2565b6040526129198361276a565b8152602083013561292981612205565b6020820152604083013561293c81612205565b6040820152606083013561294f81612205565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561057657610576612967565b600061ffff8083168181036129ad576129ad612967565b6001019392505050565b601f8211156115e757600081815260208120601f850160051c810160208610156129de5750805b601f850160051c820191505b818110156129fd578281556001016129ea565b505050505050565b815167ffffffffffffffff811115612a1f57612a1f6122a2565b612a3381612a2d8454612840565b846129b7565b602080601f831160018114612a685760008415612a505750858301515b600019600386901b1c1916600185901b1785556129fd565b600085815260208120601f198616915b82811015612a9757888601518255948401946001909101908401612a78565b5085821015612ab55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff84166020820152606060408201526000612aec6060830184866127f8565b9695505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612aec60808301846124f4565b600060208284031215612b3a57600080fd5b8151801515811461101857600080fd5b600060208284031215612b5c57600080fd5b5051919050565b60008251612b758184602087016124d0565b9190910192915050565b60208152600061101860208301846124f456fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dcf8e2b22c0d4e08a6897f55929da1267d37c3462d9605f72a4c2a1dc2a4ee8e64736f6c63430008110033\";\nconst isSuperArgs$W = (xs) => xs.length > 1;\nclass PluginRepo__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$W(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$15, _bytecode$W, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$15);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$15, signerOrProvider);\n    }\n}\nPluginRepo__factory.bytecode = _bytecode$W;\nPluginRepo__factory.abi = _abi$15;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$14 = [\n    {\n        inputs: [\n            {\n                internalType: \"contract PluginRepoRegistry\",\n                name: \"_pluginRepoRegistry\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"_subdomain\",\n                type: \"string\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_initialOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"createPluginRepo\",\n        outputs: [\n            {\n                internalType: \"contract PluginRepo\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"_subdomain\",\n                type: \"string\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_pluginSetup\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_maintainer\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_releaseMetadata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_buildMetadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"createPluginRepoWithFirstVersion\",\n        outputs: [\n            {\n                internalType: \"contract PluginRepo\",\n                name: \"pluginRepo\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginRepoBase\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginRepoRegistry\",\n        outputs: [\n            {\n                internalType: \"contract PluginRepoRegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$V = \"0x608060405234801561001057600080fd5b5060405161406338038061406383398101604081905261002f916100a6565b600080546001600160a01b0319166001600160a01b03831617905560405161005690610099565b604051809103906000f080158015610072573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506100d6565b612d0f8061135483390190565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b61126f806100e56000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630b36f03c146200005757806349b19d0814620000875780637bd3e8ac146200009e578063d222cb1e14620000b5575b600080fd5b6000546200006b906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6200006b620000983660046200070e565b620000c9565b6200006b620000af36600462000813565b620000e0565b6001546200006b906001600160a01b031681565b6000620000d88484846200018a565b949350505050565b6000620000ef8787306200018a565b6040517ffc0544270000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063fc0544279062000140906001908990879089906004016200091a565b600060405180830381600087803b1580156200015b57600080fd5b505af115801562000170573d6000803e3d6000fd5b505050506200018081856200029a565b9695505050505050565b600154604080516001600160a01b038481166024808401919091528351808403909101815260449092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de8000000000000000000000000000000000000000000000000000000001790526000926200020f92169062000653565b6000546040517ffdb9df550000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063fdb9df55906200025f9087908790869060040162000966565b600060405180830381600087803b1580156200027a57600080fd5b505af11580156200028f573d6000803e3d6000fd5b505050509392505050565b60408051600680825260e08201909252600091816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002b25790505090506000836001600160a01b03166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003679190620009a8565b90506000846001600160a01b031663afe5eb786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d09190620009a8565b90506000856001600160a01b031663cc98b8f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000413573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004399190620009a8565b60408051606081019091529091508060008152602001866001600160a01b031681526020018381525084600081518110620004785762000478620009c2565b602090810291909101015260408051606081019091528060008152602001866001600160a01b031681526020018281525084600181518110620004bf57620004bf620009c2565b602090810291909101015260408051606081019091528060008152602001866001600160a01b031681526020018481525084600281518110620005065762000506620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001849052845185906003908110620005455762000545620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001839052845185906004908110620005845762000584620009c2565b602090810291909101015260408051606081019091528060018152306020820152604001829052845185906005908110620005c357620005c3620009c2565b60209081029190910101526040517f22844d040000000000000000000000000000000000000000000000000000000081526001600160a01b038716906322844d0490620006179089908890600401620009d8565b600060405180830381600087803b1580156200063257600080fd5b505af115801562000647573d6000803e3d6000fd5b50505050505050505050565b60008282604051620006659062000697565b6200067292919062000a68565b604051809103906000f0801580156200068f573d6000803e3d6000fd5b509392505050565b6107ad8062000a8d83390190565b60008083601f840112620006b857600080fd5b50813567ffffffffffffffff811115620006d157600080fd5b602083019150836020828501011115620006ea57600080fd5b9250929050565b80356001600160a01b03811681146200070957600080fd5b919050565b6000806000604084860312156200072457600080fd5b833567ffffffffffffffff8111156200073c57600080fd5b6200074a86828701620006a5565b90945092506200075f905060208501620006f1565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200079057600080fd5b813567ffffffffffffffff80821115620007ae57620007ae62000768565b604051601f8301601f19908116603f01168101908282118183101715620007d957620007d962000768565b81604052838152866020858801011115620007f357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060a087890312156200082d57600080fd5b863567ffffffffffffffff808211156200084657600080fd5b620008548a838b01620006a5565b90985096508691506200086a60208a01620006f1565b95506200087a60408a01620006f1565b945060608901359150808211156200089157600080fd5b6200089f8a838b016200077e565b93506080890135915080821115620008b657600080fd5b50620008c589828a016200077e565b9150509295509295509295565b6000815180845260005b81811015620008fa57602081850181015186830182015201620008dc565b506000602082860101526020601f19601f83011685010191505092915050565b60ff851681526001600160a01b0384166020820152608060408201526000620009476080830185620008d2565b82810360608401526200095b8185620008d2565b979650505050505050565b604081528260408201528284606083013760006060848301015260006060601f19601f86011683010190506001600160a01b0383166020830152949350505050565b600060208284031215620009bb57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060408083016001600160a01b038087168552602083818701528287518085526060945084880191508289016000805b8381101562000a5757825180516003811062000a3357634e487b7160e01b84526021600452602484fd5b86528087015188168787015289015189860152938701939185019160010162000a09565b50929b9a5050505050505050505050565b6001600160a01b0383168152604060208201526000620000d86040830184620008d256fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122014841925b3ba51b4ee1c8d570075792a0ad38deef0d042bd9d5d5226639456b764736f6c6343000811003360a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612bef62000120600039600081816107c70152818161086201528181610969015281816109ff0152610b440152612bef6000f3fe6080604052600436106101755760003560e01c80639af3e909116100cb578063d68bad2c1161007f578063e0589bd311610059578063e0589bd314610450578063e978afe514610470578063fc0544271461049057600080fd5b8063d68bad2c146103dc578063d96054c4146103fc578063df1d6c441461041c57600080fd5b8063c4d66de8116100b0578063c4d66de814610368578063c9dbc2a414610388578063cc98b8f5146103a857600080fd5b80639af3e90914610314578063afe5eb781461033457600080fd5b80633659cfe61161012d57806352d1902d1161010757806352d1902d146102b35780637be0ca5e146102c85780639aaf9f08146102f457600080fd5b80633659cfe6146102535780634f1ef2861461027357806350abe9101461028657600080fd5b806322844d041161015e57806322844d04146101f15780632675fdd01461021357806328375f671461023357600080fd5b806301ffc9a71461017a57806309e56b14146101af575b600080fd5b34801561018657600080fd5b5061019a6101953660046121c3565b6104b0565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506101e37f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020016101a6565b3480156101fd57600080fd5b5061021161020c36600461221a565b61057c565b005b34801561021f57600080fd5b5061019a61022e366004612345565b61064c565b34801561023f57600080fd5b5061021161024e366004612410565b610697565b34801561025f57600080fd5b5061021161026e366004612463565b6107bd565b610211610281366004612480565b61095f565b34801561029257600080fd5b506102a66102a1366004612463565b610aed565b6040516101a69190612520565b3480156102bf57600080fd5b506101e3610b37565b3480156102d457600080fd5b5060cc546102e29060ff1681565b60405160ff90911681526020016101a6565b34801561030057600080fd5b506102a661030f36600461256c565b610bfc565b34801561032057600080fd5b506102a661032f366004612585565b610d53565b34801561034057600080fd5b506101e37fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b34801561037457600080fd5b50610211610383366004612463565b610d99565b34801561039457600080fd5b506102116103a336600461259d565b610f10565b3480156103b457600080fd5b506101e37f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b3480156103e857600080fd5b506102116103f73660046125f0565b610f46565b34801561040857600080fd5b506102116104173660046125f0565b610f81565b34801561042857600080fd5b506101e3610437366004612631565b60ff16600090815260c9602052604090205461ffff1690565b34801561045c57600080fd5b506102a661046b366004612631565b610fb6565b34801561047c57600080fd5b5061021161048b36600461264c565b61101f565b34801561049c57600080fd5b506102116104ab3660046126c1565b611126565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd4321b4000000000000000000000000000000000000000000000000000000000148061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2b96ad4d00000000000000000000000000000000000000000000000000000000145b8061057657506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105a681611552565b60005b828110156106455760008484838181106105c5576105c5612754565b9050606002018036038101906105db9190612779565b90506000815160028111156105f2576105f26127e2565b0361060f5761060a86826020015183604001516115da565b61063c565b600181516002811115610624576106246127e2565b0361063c5761063c86826020015183604001516115ec565b506001016105a9565b5050505050565b600061065a858585856116f3565b806106735750610673856001600160a01b0385856116f3565b8061068c575061068c6001600160a01b038585856116f3565b90505b949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6106c181611552565b8360ff166000036106fe576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc5460ff9081169085161115610741576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082900361077c576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78484846040516107af93929190612823565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b61094081611867565b6040805160008082526020820190925261095c91839190611891565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109fd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610857565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ad45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610857565b610add82611867565b610ae982826001611891565b5050565b6040805160a081018252600060608083018281526080840183905283526020808401839052838501919091526001600160a01b038516825260cb9052919091205461057690610bfc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd75760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610857565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915284825260ca905291822080549192909160ff169003610c76576040517f8d0aeeb100000000000000000000000000000000000000000000000000000000815260048101849052602401610857565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b03166020820152600283018054919284929084019190610cc990612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612840565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081525050915050919050565b6040805160a0810182526000606080830182815260808401839052835260208301919091529181019190915261057661030f610d9436859003850185612874565b611a31565b600054610100900460ff1615808015610db95750600054600160ff909116105b80610dd35750303b158015610dd3575060005460ff166001145b610e455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610857565b6000805460ff191660011790558015610e68576000805461ff0019166101001790555b610e7182611ac0565b610e9c30837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6115da565b610ec730837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b6115da565b8015610ae9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f3a81611552565b61064585858585611b46565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610f7081611552565b610f7b8484846115da565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610fab81611552565b610f7b8484846115ec565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915260ff851680835260c982529184902054845180860190955291845261ffff90911690830181905290916110189061030f90611a31565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361104981611552565b60005b82811015610f7b57600084848381811061106857611068612754565b905060a0020180360381019061107e91906128d8565b9050600081516002811115611095576110956127e2565b036110b6576110b18160200151826040015183608001516115da565b61111d565b6001815160028111156110cb576110cb6127e2565b036110e7576110b18160200151826040015183608001516115ec565b6002815160028111156110fc576110fc6127e2565b0361111d5761111d8160200151826040015183608001518460600151611b46565b5060010161104c565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea61115081611552565b6111836001600160a01b0387167f99718b5000000000000000000000000000000000000000000000000000000000611e02565b6111b9576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660ff166000036111f6576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc546001906112099060ff168961297d565b60ff1611156112555760cc546040517f53db7b7b00000000000000000000000000000000000000000000000000000000815260ff91821660048201529088166024820152604401610857565b60cc5460ff90811690881611156112b05760cc805460ff191660ff891617905560008290036112b0576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff16158015906112ef5750805460ff898116911614155b1561134b5780546040517fff9f367400000000000000000000000000000000000000000000000000000000815260ff8216600482015261010090910461ffff1660248201526001600160a01b0388166044820152606401610857565b60ff8816600090815260c9602052604081208054829061136e9061ffff16612996565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff16815250905060006113b482611a31565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff16610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090921660ff90911617178155908401516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff199092169190911790559083015190915060028201906114a79082612a05565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e6669906114fb908e9087908e908e90612ac5565b60405180910390a28515611545577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b888860405161153c93929190612823565b60405180910390a15b5050505050505050505050565b6115953033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064c92505050565b61095c576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610857565b6115e78383836002611b46565b505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b031615610f7b57600081815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006117788888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806117a357600091505061068f565b6001196001600160a01b038216016117bf57600191505061068f565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd09061180a908990899089908990600401612af6565b602060405180830381865afa925050508015611843575060408051601f3d908101601f1916820190925261184091810190612b28565b60015b1561185b5780156118595760019250505061068f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610ae981611552565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118c4576115e783611e1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561191e575060408051601f3d908101601f1916820190925261191b91810190612b4a565b60015b6119905760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a255760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610857565b506115e7838383611ee9565b600081600001518260200151604051602001611aa392919060f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff16611b3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610857565b61095c81611f0e565b6001600160a01b03848116148015611b6657506001600160a01b03838116145b15611b9d576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480611bbc57506001600160a01b03838116145b15611c6b5760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611bee5750805b15611c25576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601611c69576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b03168281611d8457600083815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4611df9565b806001600160a01b0316826001600160a01b031614611df9576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610857565b50505050505050565b6000611e0d83611f39565b801561101857506110188383611f84565b6001600160a01b0381163b611e9b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610857565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611ef28361203a565b600082511180611eff5750805b156115e757610f7b838361207a565b61095c30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336115da565b6000611f4c826301ffc9a760e01b611f84565b80156105765750611f7d827fffffffff00000000000000000000000000000000000000000000000000000000611f84565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612023575060208210155b801561202f5750600081115b979650505050505050565b61204381611e1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610857565b600080846001600160a01b0316846040516121149190612b63565b600060405180830381855af49150503d806000811461214f576040519150601f19603f3d011682016040523d82523d6000602084013e612154565b606091505b509150915061217c8282604051806060016040528060278152602001612b9360279139612185565b95945050505050565b60608315612194575081611018565b61101883838151156121a95781518083602001fd5b8060405162461bcd60e51b81526004016108579190612b7f565b6000602082840312156121d557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101857600080fd5b6001600160a01b038116811461095c57600080fd5b60008060006040848603121561222f57600080fd5b833561223a81612205565b9250602084013567ffffffffffffffff8082111561225757600080fd5b818601915086601f83011261226b57600080fd5b81358181111561227a57600080fd5b87602060608302850101111561228f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122c957600080fd5b813567ffffffffffffffff808211156122e4576122e46122a2565b604051601f8301601f19908116603f0116810190828211818310171561230c5761230c6122a2565b8160405283815286602085880101111561232557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561235b57600080fd5b843561236681612205565b9350602085013561237681612205565b925060408501359150606085013567ffffffffffffffff81111561239957600080fd5b6123a5878288016122b8565b91505092959194509250565b803560ff811681146123c257600080fd5b919050565b60008083601f8401126123d957600080fd5b50813567ffffffffffffffff8111156123f157600080fd5b60208301915083602082850101111561240957600080fd5b9250929050565b60008060006040848603121561242557600080fd5b61242e846123b1565b9250602084013567ffffffffffffffff81111561244a57600080fd5b612456868287016123c7565b9497909650939450505050565b60006020828403121561247557600080fd5b813561101881612205565b6000806040838503121561249357600080fd5b823561249e81612205565b9150602083013567ffffffffffffffff8111156124ba57600080fd5b6124c6858286016122b8565b9150509250929050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b602081526000825160ff815116602084015261ffff6020820151166040840152506001600160a01b036020840151166060830152604083015160808084015261068f60a08401826124f4565b60006020828403121561257e57600080fd5b5035919050565b60006040828403121561259757600080fd5b50919050565b600080600080608085870312156125b357600080fd5b84356125be81612205565b935060208501356125ce81612205565b92506040850135915060608501356125e581612205565b939692955090935050565b60008060006060848603121561260557600080fd5b833561261081612205565b9250602084013561262081612205565b929592945050506040919091013590565b60006020828403121561264357600080fd5b611018826123b1565b6000806020838503121561265f57600080fd5b823567ffffffffffffffff8082111561267757600080fd5b818501915085601f83011261268b57600080fd5b81358181111561269a57600080fd5b86602060a0830285010111156126af57600080fd5b60209290920196919550909350505050565b600080600080600080608087890312156126da57600080fd5b6126e3876123b1565b955060208701356126f381612205565b9450604087013567ffffffffffffffff8082111561271057600080fd5b61271c8a838b016123c7565b9096509450606089013591508082111561273557600080fd5b5061274289828a016123c7565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b8035600381106123c257600080fd5b60006060828403121561278b57600080fd5b6040516060810181811067ffffffffffffffff821117156127ae576127ae6122a2565b6040526127ba8361276a565b815260208301356127ca81612205565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60ff8416815260406020820152600061068c6040830184866127f8565b600181811c9082168061285457607f821691505b60208210810361259757634e487b7160e01b600052602260045260246000fd5b60006040828403121561288657600080fd5b6040516040810181811067ffffffffffffffff821117156128a9576128a96122a2565b6040526128b5836123b1565b8152602083013561ffff811681146128cc57600080fd5b60208201529392505050565b600060a082840312156128ea57600080fd5b60405160a0810181811067ffffffffffffffff8211171561290d5761290d6122a2565b6040526129198361276a565b8152602083013561292981612205565b6020820152604083013561293c81612205565b6040820152606083013561294f81612205565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561057657610576612967565b600061ffff8083168181036129ad576129ad612967565b6001019392505050565b601f8211156115e757600081815260208120601f850160051c810160208610156129de5750805b601f850160051c820191505b818110156129fd578281556001016129ea565b505050505050565b815167ffffffffffffffff811115612a1f57612a1f6122a2565b612a3381612a2d8454612840565b846129b7565b602080601f831160018114612a685760008415612a505750858301515b600019600386901b1c1916600185901b1785556129fd565b600085815260208120601f198616915b82811015612a9757888601518255948401946001909101908401612a78565b5085821015612ab55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff84166020820152606060408201526000612aec6060830184866127f8565b9695505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612aec60808301846124f4565b600060208284031215612b3a57600080fd5b8151801515811461101857600080fd5b600060208284031215612b5c57600080fd5b5051919050565b60008251612b758184602087016124d0565b9190910192915050565b60208152600061101860208301846124f456fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dcf8e2b22c0d4e08a6897f55929da1267d37c3462d9605f72a4c2a1dc2a4ee8e64736f6c63430008110033\";\nconst isSuperArgs$V = (xs) => xs.length > 1;\nclass PluginRepoFactory__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$V(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$14, _bytecode$V, args[0]);\n        }\n    }\n    deploy(_pluginRepoRegistry, overrides) {\n        return super.deploy(_pluginRepoRegistry, overrides || {});\n    }\n    getDeployTransaction(_pluginRepoRegistry, overrides) {\n        return super.getDeployTransaction(_pluginRepoRegistry, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$14);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$14, signerOrProvider);\n    }\n}\nPluginRepoFactory__factory.bytecode = _bytecode$V;\nPluginRepoFactory__factory.abi = _abi$14;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$13 = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractAlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractERC165SupportInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractInterfaceInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"EmptyPluginRepoSubdomain\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n        ],\n        name: \"InvalidPluginSubdomain\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"pluginRepo\",\n                type: \"address\",\n            },\n        ],\n        name: \"PluginRepoRegistered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"REGISTER_PLUGIN_REPO_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REGISTRY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"entries\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract ENSSubdomainRegistrar\",\n                name: \"_subdomainRegistrar\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n            {\n                internalType: \"address\",\n                name: \"pluginRepo\",\n                type: \"address\",\n            },\n        ],\n        name: \"registerPluginRepo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"subdomainRegistrar\",\n        outputs: [\n            {\n                internalType: \"contract ENSSubdomainRegistrar\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"targetInterfaceId\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$U = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611718610119600039600081816102b00152818161034b015281816105c001528181610656015261075101526117186000f3fe6080604052600436106100bb5760003560e01c80634f1ef28611610074578063ce091c861161004e578063ce091c8614610212578063f29ee12514610246578063fdb9df551461028657600080fd5b80634f1ef286146101a857806352d1902d146101bb57806374574eb7146101de57600080fd5b80634162169f116100a55780634162169f1461011f57806344162ef81461013d578063485cc9551461018857600080fd5b8062077393146100c05780633659cfe6146100fd575b600080fd5b3480156100cc57600080fd5b5060fb546100e0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010957600080fd5b5061011d610118366004611347565b6102a6565b005b34801561012b57600080fd5b506097546001600160a01b03166100e0565b34801561014957600080fd5b5060c9546101579060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100f4565b34801561019457600080fd5b5061011d6101a3366004611364565b610448565b61011d6101b63660046113b3565b6105b6565b3480156101c757600080fd5b506101d0610744565b6040519081526020016100f4565b3480156101ea57600080fd5b506101d07f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561021e57600080fd5b506101d07f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0981565b34801561025257600080fd5b50610276610261366004611347565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100f4565b34801561029257600080fd5b5061011d6102a1366004611477565b610809565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103495760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103a47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b610429816109a5565b60408051600080825260208201909252610445918391906109de565b50565b600054610100900460ff16158080156104685750600054600160ff909116105b806104825750303b158015610482575060005460ff166001145b6104f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610340565b6000805460ff191660011790558015610517576000805461ff0019166101001790555b7fd4321b40000000000000000000000000000000000000000000000000000000006105428482610b7e565b5060fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156105b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610340565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461072b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610340565b610734826109a5565b610740828260016109de565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610340565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0990610847906001600160a01b031630335b84600036610c39565b8261087e576040517feb59207700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108888484610d27565b6108c25783836040517f5b7dee83000000000000000000000000000000000000000000000000000000008152600401610340929190611525565b600084846040516108d4929190611541565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03868116602485015291935016906389bb414590604401600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b5050505061096383610dd4565b7f8cc06643d6cbee78b006d2df2db4d2487b69dd64bb2c96088280fb29dd93a0b285858560405161099693929190611551565b60405180910390a15050505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610740906001600160a01b0316303361083e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a11576105b183610eb1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a6b575060408051601f3d908101601f19168201909252610a689181019061157e565b60015b610add5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b725760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610340565b506105b1838383610f7c565b600054610100900460ff16610bfb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b610c0482610fa7565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c869088908890889088908890600401611597565b602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906115ca565b610d1f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610340565b505050505050565b6000828280835b81811015610dc5576000848483818110610d4a57610d4a6115ec565b919091013560f81c915050606081118015610d685750607b8160ff16105b15610d735750610db3565b602f8160ff16118015610d895750603a8160ff16105b15610d945750610db3565b8060ff16602d03610da55750610db3565b600095505050505050610dce565b80610dbd81611602565b915050610d2e565b50600193505050505b92915050565b6001600160a01b038116600090815260ca602052604090205460ff1615610e32576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b60c954610e4c906001600160a01b0383169060e01b611053565b610e8d576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610340565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6001600160a01b0381163b610f2e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610340565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f8583611076565b600082511180610f925750805b156105b157610fa183836110b6565b50505050565b600054610100900460ff166110245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610340565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061105e836111c1565b801561106f575061106f8383611225565b9392505050565b61107f81610eb1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610340565b600080846001600160a01b031684604051611150919061166c565b600060405180830381855af49150503d806000811461118b576040519150601f19603f3d011682016040523d82523d6000602084013e611190565b606091505b50915091506111b882826040518060600160405280602781526020016116bc602791396112f4565b95945050505050565b60006111ed827f01ffc9a700000000000000000000000000000000000000000000000000000000611225565b8015610dce575061121e827fffffffff00000000000000000000000000000000000000000000000000000000611225565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156112dd575060208210155b80156112e95750600081115b979650505050505050565b6060831561130357508161106f565b61106f83838151156113185781518083602001fd5b8060405162461bcd60e51b81526004016103409190611688565b6001600160a01b038116811461044557600080fd5b60006020828403121561135957600080fd5b813561106f81611332565b6000806040838503121561137757600080fd5b823561138281611332565b9150602083013561139281611332565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156113c657600080fd5b82356113d181611332565b9150602083013567ffffffffffffffff808211156113ee57600080fd5b818501915085601f83011261140257600080fd5b8135818111156114145761141461139d565b604051601f8201601f19908116603f0116810190838211818310171561143c5761143c61139d565b8160405282815288602084870101111561145557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006040848603121561148c57600080fd5b833567ffffffffffffffff808211156114a457600080fd5b818601915086601f8301126114b857600080fd5b8135818111156114c757600080fd5b8760208285010111156114d957600080fd5b602092830195509350508401356114ef81611332565b809150509250925092565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006115396020830184866114fa565b949350505050565b8183823760009101908152919050565b6040815260006115656040830185876114fa565b90506001600160a01b0383166020830152949350505050565b60006020828403121561159057600080fd5b5051919050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526112e96080830184866114fa565b6000602082840312156115dc57600080fd5b8151801515811461106f57600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164157634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561166357818101518382015260200161164b565b50506000910152565b6000825161167e818460208701611648565b9190910192915050565b60208152600082518060208401526116a7816040850160208701611648565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220370425f5435c24e6923f36cfce27e5ad7504f6329a9dcc948ae81761cd69c7e164736f6c63430008110033\";\nconst isSuperArgs$U = (xs) => xs.length > 1;\nclass PluginRepoRegistry__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$U(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$13, _bytecode$U, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$13);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$13, signerOrProvider);\n    }\n}\nPluginRepoRegistry__factory.bytecode = _bytecode$U;\nPluginRepoRegistry__factory.abi = _abi$13;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$E = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IPluginRepo__factory: IPluginRepo__factory,\n  PluginRepo__factory: PluginRepo__factory,\n  PluginRepoFactory__factory: PluginRepoFactory__factory,\n  PluginRepoRegistry__factory: PluginRepoRegistry__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$12 = [\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IPluginSetup__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$12);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$12, signerOrProvider);\n    }\n}\nIPluginSetup__factory.abi = _abi$12;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$11 = [\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass PluginSetup__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$11);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$11, signerOrProvider);\n    }\n}\nPluginSetup__factory.abi = _abi$11;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$10 = [\n    {\n        inputs: [\n            {\n                internalType: \"contract PluginRepoRegistry\",\n                name: \"_repoRegistry\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n        ],\n        name: \"IPluginNotSupported\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"currentAppliedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"appliedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"InvalidAppliedSetupId\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"currentVersionTag\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"newVersionTag\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"InvalidUpdateVersion\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PluginAlreadyInstalled\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n        ],\n        name: \"PluginNonupgradeable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"proxy\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"PluginProxyUpgradeFailed\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PluginRepoNonexistent\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"SetupAlreadyPrepared\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"SetupApplicationUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"SetupNotApplicable\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"appliedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"InstallationApplied\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"contract PluginRepo\",\n                name: \"pluginSetupRepo\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"versionTag\",\n                type: \"tuple\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"InstallationPrepared\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"UninstallationApplied\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"contract PluginRepo\",\n                name: \"pluginSetupRepo\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"versionTag\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"setupPayload\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"UninstallationPrepared\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"appliedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"UpdateApplied\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"contract PluginRepo\",\n                name: \"pluginSetupRepo\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"release\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"build\",\n                        type: \"uint16\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct PluginRepo.Tag\",\n                name: \"versionTag\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"setupPayload\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UpdatePrepared\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"APPLY_INSTALLATION_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"APPLY_UNINSTALLATION_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"APPLY_UPDATE_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"helpersHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.ApplyInstallationParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"applyInstallation\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.ApplyUninstallationParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"applyUninstallation\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initData\",\n                        type: \"bytes\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"helpersHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.ApplyUpdateParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"applyUpdate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.PrepareInstallationParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: \"uint8\",\n                                        name: \"release\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"uint16\",\n                                        name: \"build\",\n                                        type: \"uint16\",\n                                    },\n                                ],\n                                internalType: \"struct PluginRepo.Tag\",\n                                name: \"versionTag\",\n                                type: \"tuple\",\n                            },\n                            {\n                                internalType: \"contract PluginRepo\",\n                                name: \"pluginSetupRepo\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct PluginSetupRef\",\n                        name: \"pluginSetupRef\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"plugin\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address[]\",\n                                name: \"currentHelpers\",\n                                type: \"address[]\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                        ],\n                        internalType: \"struct IPluginSetup.SetupPayload\",\n                        name: \"setupPayload\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.PrepareUninstallationParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"currentVersionTag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"release\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint16\",\n                                name: \"build\",\n                                type: \"uint16\",\n                            },\n                        ],\n                        internalType: \"struct PluginRepo.Tag\",\n                        name: \"newVersionTag\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"contract PluginRepo\",\n                        name: \"pluginSetupRepo\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"plugin\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address[]\",\n                                name: \"currentHelpers\",\n                                type: \"address[]\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                        ],\n                        internalType: \"struct IPluginSetup.SetupPayload\",\n                        name: \"setupPayload\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct PluginSetupProcessor.PrepareUpdateParams\",\n                name: \"_params\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"repoRegistry\",\n        outputs: [\n            {\n                internalType: \"contract PluginRepoRegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"states\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"currentAppliedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"pluginInstallationId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"preparedSetupId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"validatePreparedSetupId\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$T = \"0x60806040523480156200001157600080fd5b5060405162002f6038038062002f6083398101604081905262000034916200005a565b600180546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612ec4806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80639665861a11610081578063fafc79da1161005b578063fafc79da1461021a578063fbdc1ef11461022d578063fe6c34741461026957600080fd5b80639665861a146101ab578063ca211f7f146101d2578063d7598122146101f957600080fd5b8063483d209e116100b2578063483d209e14610138578063747e5ec114610163578063851d11f81461019857600080fd5b806322e12c63146100d95780632fb04336146100ee5780633c8c01d114610117575b600080fd5b6100ec6100e7366004611d5d565b61027c565b005b6101016100fc366004611dcc565b61069e565b60405161010e9190611eeb565b60405180910390f35b61012a610125366004611dcc565b6109b5565b60405161010e929190611f91565b60015461014b906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018a7ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad8354881565b60405190815260200161010e565b6100ec6101a6366004611fbb565b610cf6565b61018a7fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f781565b61018a7fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa81565b61020c610207366004612019565b610eb3565b60405161010e9291906120af565b6100ec6102283660046120dd565b61153d565b61025461023b3660046120ff565b6000602081905290815260409020805460019091015482565b6040805192835260208301919091520161010e565b6100ec610277366004612019565b61159b565b817fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f76102a882826117dd565b60006102c0856102bb6020870187612118565b6118dd565b600081815260208181526040822092935061039c906102e79036899003890190890161225f565b61034d6102f760a08a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b828210156103435761033460a083028601368190038101906122f9565b81526020019060010190610317565b5050505050611920565b60c089013561035f60808b018b61238a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060029250611950915050565b90506103a8838261153d565b60006103c96103bf36899003890160208a0161225f565b8860c00135611998565b43845560018401819055905060006103e76080890160608a01612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906104189060208c01906004016123fe565b600060405180830381865afa158015610435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045d9190810190612484565b9050600061046e60208a018a612118565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf919061254e565b9050600082602001516001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610539919061254e565b9050806001600160a01b0316826001600160a01b0316146105ac576105ac61056460208c018c612118565b8261057260808e018e61238a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119df92505050565b60006105bb60a08c018c6122a3565b9050111561062f576001600160a01b038b1663e978afe56105df60a08d018d6122a3565b6040518363ffffffff1660e01b81526004016105fc92919061256b565b600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b505050505b61063c60208b018b612118565b6001600160a01b03168b6001600160a01b03167f24565610ddf61ee73e8501d7f0454657c71f5944882f5c586d7246bf43e13cda8787604051610689929190918252602082015260400190565b60405180910390a35050505050505050505050565b606060006106c0846106b28585018661260e565b6102bb906020810190612118565b600081815260208190526040812091925061073d6106e33687900387018761225f565b6107386106f3606089018961260e565b61070190602081019061264c565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b6892505050565b611998565b9050808260010154146107915760018201546040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044015b60405180910390fd5b60006107a36060870160408801612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906107d19089906004016123fe565b600060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108169190810190612484565b60208101519091506001600160a01b0316639cb0a1248861083a60608a018a61260e565b6040518363ffffffff1660e01b81526004016108579291906127da565b6000604051808303816000875af1158015610876573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089e91908101906128f9565b945060006108f56108b43689900389018961225f565b6108bd88611920565b6040805160208101909152600081527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563906003611950565b60008181526002860160205260409020548554919250111561092d57604051630559b4b760e31b815260048101829052602401610788565b6000818152600285016020526040908190204390556109529060608901908901612118565b6001600160a01b03908116908916337f5fdcd271ff15db84cbc94365956df5504f6d756e111654144648433c11a44530848b610991606082018261260e565b8c6040516109a2949392919061292e565b60405180910390a4505050505092915050565b60006109d4604051806040016040528060608152602001606081525090565b60006109e66060850160408601612118565b6001546040517ff29ee1250000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015292935091169063f29ee12590602401602060405180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612966565b610aa5576040517f0d4feab400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051639af3e90960e01b81526000906001600160a01b03831690639af3e90990610ad49088906004016123fe565b600060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b199190810190612484565b60208101519091506001600160a01b031663f10832f187610b3d606089018961238a565b6040518463ffffffff1660e01b8152600401610b5b93929190612988565b6000604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ba29190810190612a8a565b90945092506000610bb387866118dd565b90506000610bf8610bc93689900389018961225f565b610bd68760200151611920565b8751610be190611b68565b604051806020016040528060008152506001611950565b600083815260208190526040902060018101549192509015610c46576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260028201602052604090205481541015610c7b57604051630559b4b760e31b815260048101839052602401610788565b600082815260028201602052604090204390556001600160a01b03808616908a16337f8ea69cee01fd9fc24e6b9614ea0896c5a1eac8fd8aba383285248cd0e1d8503a858c610ccd606082018261238a565b8e8e604051610ce196959493929190612ad1565b60405180910390a450505050505b9250929050565b817fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa610d2282826117dd565b6000610d35856102bb6020870187612118565b6000818152602081815260408220929350610db890610d5c9036899003890190890161225f565b6108bd610d6c60808a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b8282101561034357610da960a083028601368190038101906122f9565b81526020019060010190610d8c565b9050610dc4838261153d565b438255600060018301819055610ddd60808801886122a3565b90501115610e51576001600160a01b03871663e978afe5610e0160808901896122a3565b6040518363ffffffff1660e01b8152600401610e1e92919061256b565b600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b505050505b610e5e6020870187612118565b6001600160a01b0316876001600160a01b03167fa0e5d4ce6420a0e7a5f0ac10c47b3a672fb661c11f5609bb21b68644d81e17aa83604051610ea291815260200190565b60405180910390a350505050505050565b6060610ed2604051806040016040528060608152602001606081525090565b610ee26060840160408501612b19565b60ff16610ef26020850185612b19565b60ff16141580610f285750610f0d6080840160608501612b36565b61ffff16610f216040850160208601612b36565b61ffff1610155b15610f6657604080517f80d4e90700000000000000000000000000000000000000000000000000000000815261078891859190820190600401612b53565b6000610f79856106b260a087018761260e565b6000818152602081905260408120919250610f9a6106f360a088018861260e565b90506000610fe6604051806040016040528089600001803603810190610fc09190612b6e565b8152602001610fd560a08b0160808c01612118565b6001600160a01b0316905283611998565b9050808360010154146110355760018301546040517f73a4eaa0000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610788565b600061104760a0890160808a01612118565b604051639af3e90960e01b81526001600160a01b039190911690639af3e90990611075908b906004016123fe565b600060405180830381865afa158015611092573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ba9190810190612484565b905060006110ce60a08a0160808b01612118565b6001600160a01b0316639af3e9098a6040016040518263ffffffff1660e01b81526004016110fc91906123fe565b600060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111419190810190612484565b9050600081602001516001600160a01b031683602001516001600160a01b031603611238576111e260405180604001604052808c6040018036038101906111889190612b6e565b815260200161119d60a08e0160808f01612118565b6001600160a01b031690526040805160208101909152600081527f569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd9088906002611950565b90506111f160a08b018b61260e565b6111ff90602081019061264c565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908952506114da565b6112867f41de68300000000000000000000000000000000000000000000000000000000061126960a08d018d61260e565b611277906020810190612118565b6001600160a01b031690611b7b565b6112e35761129760a08b018b61260e565b6112a5906020810190612118565b6040517f8174ff550000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610788565b60006112f260a08c018c61260e565b611300906020810190612118565b6001600160a01b03166341de68306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113619190612b8a565b600281111561137257611372611e1c565b146113d05761138460a08b018b61260e565b611392906020810190612118565b6040517fe4356c940000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610788565b81602001516001600160a01b031663a8a9c29e8c8c60000160200160208101906113fa9190612b36565b61140760a08f018f61260e565b6040518463ffffffff1660e01b815260040161142593929190612ba7565b6000604051808303816000875af1158015611444573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261146c9190810190612bd3565b809950819a5050506114d760405180604001604052808c6040018036038101906114969190612b6e565b81526020016114ab60a08e0160808f01612118565b6001600160a01b03168152506114c48a60200151611920565b8a516114cf90611b68565b8c6002611950565b90505b60008181526002870160205260409020548654101561150f57604051630559b4b760e31b815260048101829052602401610788565b6000818152600287016020526040902043905561152f8b828c8b8d611b9e565b505050505050509250929050565b6000828152602081815260408083208484526002810190925290912054815410611596576040517f59730ce600000000000000000000000000000000000000000000000000000000815260048101839052602401610788565b505050565b817ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad835486115c782826117dd565b60006115dd856102bb6080870160608801612118565b60008181526020819052604081209192506116786116003688900388018861225f565b61165c61161060808a018a6122a3565b808060200260200160405190810160405280939291908181526020016000905b828210156103435761164d60a083028601368190038101906122f9565b81526020019060010190611630565b8860a00135604051806020016040528060008152506001611950565b6001830154909150156116b7576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116c1838261153d565b60006116df6116d53689900389018961225f565b8860a00135611998565b60018401819055438455905060006116fa60808901896122a3565b9050111561176e576001600160a01b03881663e978afe561171e60808a018a6122a3565b6040518363ffffffff1660e01b815260040161173b92919061256b565b600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b505050505b61177e6080880160608901612118565b6001600160a01b0316886001600160a01b03167f74e616c7264536b98a5ec234d051ae6ce1305bf05c85f9ddc112364440ccf12984846040516117cb929190918252602082015260400190565b60405180910390a35050505050505050565b336001600160a01b0383161480159061188a5750604080516020810182526000815290517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0384169163fdef91069161184791309133918791600401612c2d565b602060405180830381865afa158015611864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118889190612966565b155b156118d9576040517f15d68ee00000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015233602482015260448101829052606401610788565b5050565b604080516001600160a01b0380851660208301528316918101919091526000906060015b6040516020818303038152906040528051906020012090505b92915050565b6000816040516020016119339190611eeb565b604051602081830303815290604052805190602001209050919050565b8451602080870151845185830120604051600094611977949093928a928a92899101612c69565b60405160208183030381529060405280519060200120905095945050505050565b815160208084015160408051845160ff1681850152929093015161ffff16928201929092526001600160a01b0390911660608201526080810182905260009060a001611901565b805115611b21576040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690611a2d9085908590600401612cc4565b600060405180830381600087803b158015611a4757600080fd5b505af1925050508015611a58575060015b61159657611a64612ce6565b806308c379a003611ab75750611a78612d02565b80611a835750611ab9565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107889190612daa565b505b3d808015611ae3576040519150601f19603f3d011682016040523d82523d6000602084013e611ae8565b606091505b508383836040517f96e9e31b00000000000000000000000000000000000000000000000000000000815260040161078893929190612dbd565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690633659cfe690602401611a2d565b6000816040516020016119339190612de9565b6000611b8683611c12565b8015611b975750611b978383611c76565b9392505050565b611bae60a0840160808501612118565b6001600160a01b03908116908616337f3686138d92841c8549b2fe39fda23881fef6aa9b347352114c0869bf5af3e3f28760408801611bf060a08a018a61260e565b8888604051611c03959493929190612e36565b60405180910390a45050505050565b6000611c3e827f01ffc9a700000000000000000000000000000000000000000000000000000000611c76565b801561191a5750611c6f827fffffffff00000000000000000000000000000000000000000000000000000000611c76565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611d2e575060208210155b8015611d3a5750600081115b979650505050505050565b6001600160a01b0381168114611d5a57600080fd5b50565b60008060408385031215611d7057600080fd5b8235611d7b81611d45565b9150602083013567ffffffffffffffff811115611d9757600080fd5b830160e08186031215611da957600080fd5b809150509250929050565b600060808284031215611dc657600080fd5b50919050565b60008060408385031215611ddf57600080fd5b8235611dea81611d45565b9150602083013567ffffffffffffffff811115611e0657600080fd5b611e1285828601611db4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611e5b57611e5b611e1c565b9052565b611e6a828251611e4b565b6020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b600081518084526020808501945080840160005b83811015611ee057611ed2878351611e5f565b965090820190600101611ebf565b509495945050505050565b602081526000611b976020830184611eab565b805160408084528151908401819052600091602091908201906060860190845b81811015611f435783516001600160a01b031683529284019291840191600101611f1e565b50508483015186820387850152805180835290840192506000918401905b80831015611f8657611f74828551611e5f565b91508484019350600183019250611f61565b509695505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184611efe565b949350505050565b60008060408385031215611fce57600080fd5b8235611fd981611d45565b9150602083013567ffffffffffffffff811115611ff557600080fd5b830160a08186031215611da957600080fd5b600060c08284031215611dc657600080fd5b6000806040838503121561202c57600080fd5b823561203781611d45565b9150602083013567ffffffffffffffff81111561205357600080fd5b611e1285828601612007565b60005b8381101561207a578181015183820152602001612062565b50506000910152565b6000815180845261209b81602086016020860161205f565b601f01601f19169290920160200192915050565b6040815260006120c26040830185612083565b82810360208401526120d48185611efe565b95945050505050565b600080604083850312156120f057600080fd5b50508035926020909101359150565b60006020828403121561211157600080fd5b5035919050565b60006020828403121561212a57600080fd5b8135611b9781611d45565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810181811067ffffffffffffffff8211171561218457612184612135565b60405250565b6060810181811067ffffffffffffffff8211171561218457612184612135565b60a0810181811067ffffffffffffffff8211171561218457612184612135565b601f19601f830116810181811067ffffffffffffffff821117156121f0576121f0612135565b6040525050565b60ff81168114611d5a57600080fd5b61ffff81168114611d5a57600080fd5b60006040828403121561222857600080fd5b60405161223481612164565b8091508235612242816121f7565b8152602083013561225281612206565b6020919091015292915050565b60006060828403121561227157600080fd5b60405161227d81612164565b6122878484612216565b8152604083013561229781611d45565b60208201529392505050565b6000808335601e198436030181126122ba57600080fd5b83018035915067ffffffffffffffff8211156122d557600080fd5b602001915060a081023603821315610cef57600080fd5b60038110611d5a57600080fd5b600060a0828403121561230b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561232e5761232e612135565b604052823561233c816122ec565b8152602083013561234c81611d45565b6020820152604083013561235f81611d45565b6040820152606083013561237281611d45565b60608201526080928301359281019290925250919050565b6000808335601e198436030181126123a157600080fd5b83018035915067ffffffffffffffff8211156123bc57600080fd5b602001915036819003821315610cef57600080fd5b80356123dc816121f7565b60ff16825260208101356123ef81612206565b61ffff81166020840152505050565b6040810161191a82846123d1565b805161241781611d45565b919050565b600082601f83011261242d57600080fd5b815167ffffffffffffffff81111561244757612447612135565b60405161245e6020601f19601f85011601826121ca565b81815284602083860101111561247357600080fd5b611fb382602083016020870161205f565b60006020828403121561249657600080fd5b815167ffffffffffffffff808211156124ae57600080fd5b9083019081850360808112156124c357600080fd5b6040516124cf8161218a565b60408212156124dd57600080fd5b60405191506124eb82612164565b83516124f6816121f7565b8252602084015161250681612206565b602083015281815261251a6040850161240c565b6020820152606084015191508282111561253357600080fd5b61253f8783860161241c565b60408201529695505050505050565b60006020828403121561256057600080fd5b8151611b9781611d45565b6020808252818101839052600090604080840186845b87811015612601578135612594816122ec565b61259e8482611e4b565b50848201356125ac81611d45565b6001600160a01b039081168487015282850135906125c982611d45565b90811684860152606090838201356125e081611d45565b16908401526080828101359084015260a09283019290910190600101612581565b5090979650505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261264257600080fd5b9190910192915050565b6000808335601e1984360301811261266357600080fd5b83018035915067ffffffffffffffff82111561267e57600080fd5b6020019150600581901b3603821315610cef57600080fd5b6000808335601e198436030181126126ad57600080fd5b830160208101925035905067ffffffffffffffff8111156126cd57600080fd5b803603821315610cef57600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b600060608301823561271881611d45565b6001600160a01b0380821686526020915081850135601e1986360301811261273f57600080fd5b8501828101903567ffffffffffffffff81111561275b57600080fd5b8060051b360382131561276d57600080fd5b6060888501529384905292600090608088015b818310156127a957853561279381611d45565b8416815294840194600192909201918401612780565b6127b66040890189612696565b9650945088810360408a01526127cd8187876126dc565b9998505050505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184612707565b600067ffffffffffffffff82111561281657612816612135565b5060051b60200190565b600082601f83011261283157600080fd5b8151602061283e826127fc565b6040805161284c83826121ca565b84815260a0948502870184019484820193508886111561286b57600080fd5b8488015b868110156128eb5781818b0312156128875760008081fd5b8351612892816121aa565b815161289d816122ec565b8152818701516128ac81611d45565b81880152818501516128bd81611d45565b818601526060828101516128d081611d45565b9082015260808281015190820152855293850193810161286f565b509098975050505050505050565b60006020828403121561290b57600080fd5b815167ffffffffffffffff81111561292257600080fd5b611fb384828501612820565b84815261293e60208201856123d1565b60a06060820152600061295460a0830185612707565b8281036080840152611d3a8185611eab565b60006020828403121561297857600080fd5b81518015158114611b9757600080fd5b6001600160a01b03841681526040602082015260006120d46040830184866126dc565b6000604082840312156129bd57600080fd5b6040516129c981612164565b809150825167ffffffffffffffff808211156129e457600080fd5b818501915085601f8301126129f857600080fd5b81516020612a05826127fc565b604051612a1282826121ca565b83815260059390931b8501820192828101915089841115612a3257600080fd5b948201945b83861015612a59578551612a4a81611d45565b82529482019490820190612a37565b86525086810151935082841115612a6f57600080fd5b612a7b88858901612820565b81860152505050505092915050565b60008060408385031215612a9d57600080fd5b8251612aa881611d45565b602084015190925067ffffffffffffffff811115612ac557600080fd5b611e12858286016129ab565b868152612ae160208201876123d1565b60c060608201526000612af860c0830186886126dc565b6001600160a01b038516608084015282810360a08401526127cd8185611efe565b600060208284031215612b2b57600080fd5b8135611b97816121f7565b600060208284031215612b4857600080fd5b8135611b9781612206565b60808101612b6182856123d1565b611b9760408301846123d1565b600060408284031215612b8057600080fd5b611b978383612216565b600060208284031215612b9c57600080fd5b8151611b97816122ec565b6001600160a01b038416815261ffff831660208201526060604082015260006120d46060830184612707565b60008060408385031215612be657600080fd5b825167ffffffffffffffff80821115612bfe57600080fd5b612c0a8683870161241c565b93506020850151915080821115612c2057600080fd5b50611e12858286016129ab565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c5f6080830184612083565b9695505050505050565b865160ff16815260208088015161ffff169082015260e081016001600160a01b03871660408301528560608301528460808301528360a083015260048310612cb357612cb3611e1c565b8260c0830152979650505050505050565b6001600160a01b0383168152604060208201526000611fb36040830184612083565b600060033d1115612cff5760046000803e5060005160e01c5b90565b600060443d1015612d105790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715612d5e57505050505090565b8285019150815181811115612d765750505050505090565b843d8701016020828501011115612d905750505050505090565b612d9f602082860101876121ca565b509095945050505050565b602081526000611b976020830184612083565b60006001600160a01b038086168352808516602084015250606060408301526120d46060830184612083565b6020808252825182820181905260009190848201906040850190845b81811015612e2a5783516001600160a01b031683529284019291840191600101612e05565b50909695505050505050565b858152612e4660208201866123d1565b60c060608201526000612e5c60c0830186612707565b8281036080840152612e6e8186611efe565b905082810360a0840152612e828185612083565b9897505050505050505056fea2646970667358221220f123ca3e179dd0541764092bfbb9d8987f8cea6a7052a8952f313efa9c78714164736f6c63430008110033\";\nconst isSuperArgs$T = (xs) => xs.length > 1;\nclass PluginSetupProcessor__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$T(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$10, _bytecode$T, args[0]);\n        }\n    }\n    deploy(_repoRegistry, overrides) {\n        return super.deploy(_repoRegistry, overrides || {});\n    }\n    getDeployTransaction(_repoRegistry, overrides) {\n        return super.getDeployTransaction(_repoRegistry, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$10);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$10, signerOrProvider);\n    }\n}\nPluginSetupProcessor__factory.bytecode = _bytecode$T;\nPluginSetupProcessor__factory.abi = _abi$10;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$D = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IPluginSetup__factory: IPluginSetup__factory,\n  PluginSetup__factory: PluginSetup__factory,\n  PluginSetupProcessor__factory: PluginSetupProcessor__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$C = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  repo: index$E,\n  setup: index$D\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$$ = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"subnode\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"nodeOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"AlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"node\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"resolver\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidResolver\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"REGISTER_ENS_SUBDOMAIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REGISTRAR_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ens\",\n        outputs: [\n            {\n                internalType: \"contract ENS\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_managingDao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract ENS\",\n                name: \"_ens\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_node\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"node\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_label\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_targetAddress\",\n                type: \"address\",\n            },\n        ],\n        name: \"registerSubnode\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"resolver\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_resolver\",\n                type: \"address\",\n            },\n        ],\n        name: \"setDefaultResolver\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$S = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516115a4610119600039600081816102870152818161032201528181610429015281816104bf01526105ba01526115a46000f3fe6080604052600436106100c75760003560e01c80636133f98511610074578063af7b2fed1161004e578063af7b2fed14610213578063c66485b214610247578063d70754ec1461026757600080fd5b80636133f9851461019f57806389bb4145146101bf5780639848ba51146101df57600080fd5b80634162169f116100a55780634162169f1461014b5780634f1ef2861461016957806352d1902d1461017c57600080fd5b806304f3bcec146100cc5780633659cfe6146101095780633f15457f1461012b575b600080fd5b3480156100d857600080fd5b5060cb546100ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046112a7565b61027d565b005b34801561013757600080fd5b5060c9546100ec906001600160a01b031681565b34801561015757600080fd5b506097546001600160a01b03166100ec565b6101296101773660046112f3565b61041f565b34801561018857600080fd5b506101916105ad565b604051908152602001610100565b3480156101ab57600080fd5b506101296101ba3660046113b7565b610672565b3480156101cb57600080fd5b506101296101da3660046113f8565b6108e0565b3480156101eb57600080fd5b506101917fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1481565b34801561021f57600080fd5b506101917fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff81565b34801561025357600080fd5b506101296102623660046112a7565b610bd6565b34801561027357600080fd5b5061019160ca5481565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103205760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661037b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146103f75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610317565b61040081610c95565b6040805160008082526020820190925261041c91839190610cce565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104bd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610317565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105187f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105945760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610317565b61059d82610c95565b6105a982826001610cce565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461064d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610317565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054610100900460ff16158080156106925750600054600160ff909116105b806106ac5750303b1580156106ac575060005460ff166001145b61071e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610317565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561075f576000805461ff0019166101001790555b61076884610e73565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851690811790915560ca8390556040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810184905260009190630178b8bf90602401602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190611428565b90506001600160a01b038116610867576040517f1ae12f8a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382166024820152604401610317565b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580156108da576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c149061091e906001600160a01b031630335b84600036610f1f565b600060ca548460405160200161093e929190918252602082015260400190565b60408051808303601f1901815290829052805160209091012060c9547f02571be3000000000000000000000000000000000000000000000000000000008352600483018290529092506000916001600160a01b03909116906302571be390602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611428565b90506001600160a01b03811615610a35576040517f01f95aba000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382166024820152604401610317565b60c95460ca546040517f06ab59230000000000000000000000000000000000000000000000000000000081526004810191909152602481018790523060448201526001600160a01b03909116906306ab5923906064016020604051808303816000875af1158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190611445565b5060c95460cb546040517f1896f70a000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039182166024820152911690631896f70a90604401600060405180830381600087803b158015610b3857600080fd5b505af1158015610b4c573d6000803e3d6000fd5b505060cb546040517fd5fa2b00000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038881166024830152909116925063d5fa2b009150604401600060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b505050505050505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1490610c0f906001600160a01b03163033610915565b6001600160a01b038216610c655760ca546040517f1ae12f8a00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b0383166024820152604401610317565b5060cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6097547fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff906105a9906001600160a01b03163033610915565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d0657610d018361100d565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d60575060408051601f3d908101601f19168201909252610d5d91810190611445565b60015b610dd25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610317565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610e675760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610317565b50610d018383836110d8565b600054610100900460ff16610ef05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610317565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610f6c908890889088908890889060040161145e565b602060405180830381865afa158015610f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fad91906114b2565b611005576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610317565b505050505050565b6001600160a01b0381163b61108a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610317565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6110e1836110fd565b6000825111806110ee5750805b15610d01576108da838361113d565b6111068161100d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610317565b600080846001600160a01b0316846040516111d791906114f8565b600060405180830381855af49150503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b509150915061123f828260405180606001604052806027815260200161154860279139611248565b95945050505050565b60608315611257575081611261565b6112618383611268565b9392505050565b8151156112785781518083602001fd5b8060405162461bcd60e51b81526004016103179190611514565b6001600160a01b038116811461041c57600080fd5b6000602082840312156112b957600080fd5b813561126181611292565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561130657600080fd5b823561131181611292565b9150602083013567ffffffffffffffff8082111561132e57600080fd5b818501915085601f83011261134257600080fd5b813581811115611354576113546112c4565b604051601f8201601f19908116603f0116810190838211818310171561137c5761137c6112c4565b8160405282815288602084870101111561139557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000606084860312156113cc57600080fd5b83356113d781611292565b925060208401356113e781611292565b929592945050506040919091013590565b6000806040838503121561140b57600080fd5b82359150602083013561141d81611292565b809150509250929050565b60006020828403121561143a57600080fd5b815161126181611292565b60006020828403121561145757600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156114c457600080fd5b8151801515811461126157600080fd5b60005b838110156114ef5781810151838201526020016114d7565b50506000910152565b6000825161150a8184602087016114d4565b9190910192915050565b60208152600082518060208401526115338160408501602087016114d4565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220199e950f495958c9fe43b19951f2b7b2d5ff703f6b3cff0f30265fc0f6adc9f564736f6c63430008110033\";\nconst isSuperArgs$S = (xs) => xs.length > 1;\nclass ENSSubdomainRegistrar__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$S(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$$, _bytecode$S, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$$);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$$, signerOrProvider);\n    }\n}\nENSSubdomainRegistrar__factory.bytecode = _bytecode$S;\nENSSubdomainRegistrar__factory.abi = _abi$$;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$B = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ENSSubdomainRegistrar__factory: ENSSubdomainRegistrar__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$_ = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractAlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractERC165SupportInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractInterfaceInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REGISTRY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"entries\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"targetInterfaceId\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nclass InterfaceBasedRegistry__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$_);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$_, signerOrProvider);\n    }\n}\nInterfaceBasedRegistry__factory.abi = _abi$_;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$Z = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"TokenNotERC20\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract MerkleMinter\",\n                name: \"minter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IMerkleDistributor\",\n                name: \"distributor\",\n                type: \"address\",\n            },\n        ],\n        name: \"TokenCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"contract GovernanceWrappedERC20\",\n                name: \"token\",\n                type: \"address\",\n            },\n        ],\n        name: \"WrappedToken\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract DAO\",\n                name: \"_managingDao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"addr\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"name\",\n                        type: \"string\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"symbol\",\n                        type: \"string\",\n                    },\n                ],\n                internalType: \"struct TokenFactory.TokenConfig\",\n                name: \"_tokenConfig\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"receivers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"amounts\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct GovernanceERC20.MintSettings\",\n                name: \"_mintSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"createToken\",\n        outputs: [\n            {\n                internalType: \"contract ERC20VotesUpgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract MerkleMinter\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"distributorBase\",\n        outputs: [\n            {\n                internalType: \"contract MerkleDistributor\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"governanceERC20Base\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"governanceWrappedERC20Base\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"merkleMinterBase\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$R = \"\";\nconst isSuperArgs$R = (xs) => xs.length > 1;\nclass TokenFactory__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$R(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$Z, _bytecode$R, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$Z);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$Z, signerOrProvider);\n    }\n}\nTokenFactory__factory.bytecode = _bytecode$R;\nTokenFactory__factory.abi = _abi$Z;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$A = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ens: index$B,\n  InterfaceBasedRegistry__factory: InterfaceBasedRegistry__factory,\n  TokenFactory__factory: TokenFactory__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$z = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  dao: index$F,\n  plugin: index$C,\n  utils: index$A\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$Y = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MULTIPLY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"count\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"_multiplyHelper\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_count\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_a\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"multiply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"multiplyHelper\",\n        outputs: [\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$Q = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516113f961011960003960008181610523015281816105b9015281816106c001528181610756015261085101526113f96000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780639b97d03a116100595780639b97d03a14610215578063b73fa1e714610236578063c6888fa11461026a578063c9c4bfca1461028a57600080fd5b806352d1902d146101df5780635c60da1b146101f4578063614619541461020957600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e257806306661abd146101175780631794bb3c1461013c575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611098565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012e61012d5481565b60405190815260200161010e565b34801561014857600080fd5b5061015c6101573660046110ef565b6103a3565b005b34801561016a57600080fd5b5061015c610179366004611130565b610519565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061114d565b61015c6101da3660046111bd565b6106b6565b3480156101eb57600080fd5b5061012e610844565b34801561020057600080fd5b50610198610909565b34801561015c57600080fd5b34801561022157600080fd5b5061012e54610198906001600160a01b031681565b34801561024257600080fd5b5061012e7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561027657600080fd5b5061012e610285366004611281565b610941565b34801561029657600080fd5b5061012e7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061039d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156103c35750600054600160ff909116105b806103dd5750303b1580156103dd575060005460ff166001145b6104545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610495576000805461ff0019166101001790555b61049e84610a21565b61012d82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015610513576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106127f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461068e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61069781610aa7565b604080516000808252602082019092526106b391839190610ae0565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461082b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61083482610aa7565b61084082826001610ae0565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161044b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061093c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610982906001600160a01b031630335b84600036610c85565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109d9918790600401918252602082015260400190565b602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061129a565b9392505050565b600054610100900460ff16610a9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b6106b381610d73565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610840906001600160a01b03163033610979565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b1857610b1383610e1f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b72575060408051601f3d908101601f19168201909252610b6f9181019061129a565b60015b610be45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c795760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161044b565b50610b13838383610eea565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cd290889088908890889088906004016112b3565b602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190611307565b610d6b576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161044b565b505050505050565b600054610100900460ff16610df05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163b610e9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ef383610f0f565b600082511180610f005750805b15610b13576105138383610f4f565b610f1881610e1f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610fce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161044b565b600080846001600160a01b031684604051610fe9919061134d565b600060405180830381855af49150503d8060008114611024576040519150601f19603f3d011682016040523d82523d6000602084013e611029565b606091505b5091509150611051828260405180606001604052806027815260200161139d6027913961105a565b95945050505050565b60608315611069575081610a1a565b610a1a838381511561107e5781518083602001fd5b8060405162461bcd60e51b815260040161044b9190611369565b6000602082840312156110aa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1a57600080fd5b6001600160a01b03811681146106b357600080fd5b60008060006060848603121561110457600080fd5b833561110f816110da565b9250602084013561111f816110da565b929592945050506040919091013590565b60006020828403121561114257600080fd5b8135610a1a816110da565b6020810160038310611188577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d057600080fd5b82356111db816110da565b9150602083013567ffffffffffffffff808211156111f857600080fd5b818501915085601f83011261120c57600080fd5b81358181111561121e5761121e61118e565b604051601f8201601f19908116603f011681019083821181831017156112465761124661118e565b8160405282815288602084870101111561125f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129357600080fd5b5035919050565b6000602082840312156112ac57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561131957600080fd5b81518015158114610a1a57600080fd5b60005b8381101561134457818101518382015260200161132c565b50506000910152565b6000825161135f818460208701611329565b9190910192915050565b6020815260008251806020840152611388816040850160208701611329565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122069f36c03cad214bd792f193935796c8899e6d1415ca13750675b1456e60023ff64736f6c63430008110033\";\nconst isSuperArgs$Q = (xs) => xs.length > 1;\nclass CounterV1__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$Q(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$Y, _bytecode$Q, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$Y);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$Y, signerOrProvider);\n    }\n}\nCounterV1__factory.bytecode = _bytecode$Q;\nCounterV1__factory.abi = _abi$Y;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$X = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"counterBase\",\n        outputs: [\n            {\n                internalType: \"contract CounterV1\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"multiplyHelperBase\",\n        outputs: [\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$P = \"0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c2565b61112d8061182883390190565b6115128061295583390190565b611757806100d16000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639cb0a12411620000625780639cb0a12414620000f7578063a8a9c29e146200011d578063eee774ca1462000144578063f10832f1146200015857600080fd5b806301ffc9a7146200008c5780630af30a7f14620000b85780635c60da1b14620000e5575b600080fd5b620000a36200009d36600462000a70565b6200017f565b60405190151581526020015b60405180910390f35b600154620000cc906001600160a01b031681565b6040516001600160a01b039091168152602001620000af565b6001546001600160a01b0316620000cc565b6200010e6200010836600462000ae6565b62000219565b604051620000af919062000ba3565b620001346200012e36600462000bf0565b6200058c565b604051620000af92919062000d5f565b600054620000cc906001600160a01b031681565b6200016f6200016936600462000d91565b620005b4565b604051620000af92919062000e1d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200021357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606200022a602083018362000e49565b90506000036200023c5760026200023f565b60035b60ff1667ffffffffffffffff8111156200025d576200025d62000ebb565b604051908082528060200260200182016040528015620002b857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200027c5790505b506040805160a081019091529091508060018152602001846001600160a01b03168152602001836000016020810190620002f3919062000ed1565b6001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d815250816000815181106200034b576200034b62000ef1565b60209081029190910101526040805160a0810190915280600181526020908101906200037a9085018562000ed1565b6001600160a01b03168152602001846001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062000f07565b815250816001815181106200043a576200043a62000ef1565b602002602001018190525081806020019062000457919062000e49565b15905062000213576040805160a0810190915260018152602080820190620004829085018562000e49565b600081811062000496576200049662000ef1565b9050602002016020810190620004ad919062000ed1565b6001600160a01b03168152602090810190620004cc9085018562000ed1565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200053c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000562919062000f07565b815250816002815181106200057b576200057b62000ef1565b602002602001018190525092915050565b6060620005ac604051806040016040528060608152602001606081525090565b935093915050565b6000620005d4604051806040016040528060608152602001606081525090565b600080620005e58587018762000f21565b9092509050816001600160a01b038116620006265760008054604080516020810190915291825262000623916001600160a01b039091169062000a09565b90505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c0000000000000000000000000000000000000000000000000000000017905290600090851615620006b8576002620006bb565b60035b60ff1667ffffffffffffffff811115620006d957620006d962000ebb565b6040519080825280602002602001820160405280156200073457816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620006f85790505b5060408051600180825281830190925291925060009190602080830190803683370190505060015490915062000774906001600160a01b03168462000a09565b6040805160a0810190915290985080600081526020018c6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81525082600081518110620007f257620007f262000ef1565b60209081029190910101526040805160a081019091528060008152602001896001600160a01b031681526020018c6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000892573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008b8919062000f07565b81525082600181518110620008d157620008d162000ef1565b60209081029190910101526001600160a01b038616620009c9576040805160a081019091528060008152602001856001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200097e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a4919062000f07565b81525082600281518110620009bd57620009bd62000ef1565b60200260200101819052505b8381600081518110620009e057620009e062000ef1565b6001600160a01b0390921660209283029190910182015290875286015250505050935093915050565b600062000a17838362000a1e565b9392505050565b6000828260405162000a309062000a62565b62000a3d92919062000f50565b604051809103906000f08015801562000a5a573d6000803e3d6000fd5b509392505050565b6107ad8062000f7583390190565b60006020828403121562000a8357600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000a1757600080fd5b6001600160a01b038116811462000aca57600080fd5b50565b60006060828403121562000ae057600080fd5b50919050565b6000806040838503121562000afa57600080fd5b823562000b078162000ab4565b9150602083013567ffffffffffffffff81111562000b2457600080fd5b62000b328582860162000acd565b9150509250929050565b600081516003811062000b5f57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000be45762000bd583855162000b3c565b93850193925060010162000bbf565b50909695505050505050565b60008060006060848603121562000c0657600080fd5b833562000c138162000ab4565b9250602084013561ffff8116811462000c2b57600080fd5b9150604084013567ffffffffffffffff81111562000c4857600080fd5b62000c568682870162000acd565b9150509250925092565b6000815180845260005b8181101562000c885760208185018101518683018201520162000c6a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b8181101562000d0d5783516001600160a01b03168352928401929184019160010162000ce6565b50508483015186820387850152805180835290840192506000918401905b8083101562000d545762000d4182855162000b3c565b9150848401935060018301925062000d2b565b509695505050505050565b60408152600062000d74604083018562000c60565b828103602084015262000d88818562000cc6565b95945050505050565b60008060006040848603121562000da757600080fd5b833562000db48162000ab4565b9250602084013567ffffffffffffffff8082111562000dd257600080fd5b818601915086601f83011262000de757600080fd5b81358181111562000df757600080fd5b87602082850101111562000e0a57600080fd5b6020830194508093505050509250925092565b6001600160a01b038316815260406020820152600062000e41604083018462000cc6565b949350505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811262000e7f57600080fd5b83018035915067ffffffffffffffff82111562000e9b57600080fd5b6020019150600581901b360382131562000eb457600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000ee457600080fd5b813562000a178162000ab4565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000f1a57600080fd5b5051919050565b6000806040838503121562000f3557600080fd5b823562000f428162000ab4565b946020939093013593505050565b6001600160a01b038316815260406020820152600062000e41604083018462000c6056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd77406bebf06645ca57a881e1e6a3d7e060ac0c5a95cfae9f91974391de218d64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611014610119600039600081816103700152818161040b01528181610512015281816105a801526106a301526110146000f3fe6080604052600436106100b15760003560e01c80634f1ef286116100695780635c60da1b1161004e5780635c60da1b146101b1578063b73fa1e7146101c6578063c9c4bfca146101fa57600080fd5b80634f1ef2861461018957806352d1902d1461019c57600080fd5b80633659cfe61161009a5780633659cfe6146101195780634162169f1461013b57806341de68301461016d57600080fd5b806301ffc9a7146100b6578063165c4a16146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610cf5565b61022e565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610d37565b610313565b6040519081526020016100e2565b34801561012557600080fd5b50610139610134366004610d75565b610366565b005b34801561014757600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561017957600080fd5b5060006040516100e29190610d90565b610139610197366004610dce565b610508565b3480156101a857600080fd5b5061010b610696565b3480156101bd57600080fd5b5061015561075b565b3480156101d257600080fd5b5061010b7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561020657600080fd5b5061010b7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102c157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061030d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610354906001600160a01b031630335b84600036610793565b61035e8385610e90565b949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104095760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104647f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104e05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610400565b6104e981610881565b60408051600080825260208201909252610505918391906108ba565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105a65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610400565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461067d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610400565b61068682610881565b610692828260016108ba565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107365760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610400565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061078e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906107e09088908890889088908890600401610eb5565b602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190610f09565b610879576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610400565b505050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610692906001600160a01b0316303361034b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108f2576108ed83610a5f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561094c575060408051601f3d908101601f1916820190925261094991810190610f2b565b60015b6109be5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610400565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a535760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610400565b506108ed838383610b35565b6001600160a01b0381163b610adc5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610400565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610b3e83610b60565b600082511180610b4b5750805b156108ed57610b5a8383610ba0565b50505050565b610b6981610a5f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610c1f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610400565b600080846001600160a01b031684604051610c3a9190610f68565b600060405180830381855af49150503d8060008114610c75576040519150601f19603f3d011682016040523d82523d6000602084013e610c7a565b606091505b5091509150610ca28282604051806060016040528060278152602001610fb860279139610cab565b95945050505050565b60608315610cba575081610cc4565b610cc48383610ccb565b9392505050565b815115610cdb5781518083602001fd5b8060405162461bcd60e51b81526004016104009190610f84565b600060208284031215610d0757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cc457600080fd5b60008060408385031215610d4a57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610d7057600080fd5b919050565b600060208284031215610d8757600080fd5b610cc482610d59565b6020810160038310610db257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610de157600080fd5b610dea83610d59565b9150602083013567ffffffffffffffff80821115610e0757600080fd5b818501915085601f830112610e1b57600080fd5b813581811115610e2d57610e2d610db8565b604051601f8201601f19908116603f01168101908382118183101715610e5557610e55610db8565b81604052828152886020848701011115610e6e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b808202811582820484141761030d57634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215610f1b57600080fd5b81518015158114610cc457600080fd5b600060208284031215610f3d57600080fd5b5051919050565b60005b83811015610f5f578181015183820152602001610f47565b50506000910152565b60008251610f7a818460208701610f44565b9190910192915050565b6020815260008251806020840152610fa3816040850160208701610f44565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d927081e3b37080d1152e74075f3a8896d53cc3d4cec7dbd62a4c7cdb0c634f364736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516113f961011960003960008181610523015281816105b9015281816106c001528181610756015261085101526113f96000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780639b97d03a116100595780639b97d03a14610215578063b73fa1e714610236578063c6888fa11461026a578063c9c4bfca1461028a57600080fd5b806352d1902d146101df5780635c60da1b146101f4578063614619541461020957600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e257806306661abd146101175780631794bb3c1461013c575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611098565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012e61012d5481565b60405190815260200161010e565b34801561014857600080fd5b5061015c6101573660046110ef565b6103a3565b005b34801561016a57600080fd5b5061015c610179366004611130565b610519565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061114d565b61015c6101da3660046111bd565b6106b6565b3480156101eb57600080fd5b5061012e610844565b34801561020057600080fd5b50610198610909565b34801561015c57600080fd5b34801561022157600080fd5b5061012e54610198906001600160a01b031681565b34801561024257600080fd5b5061012e7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561027657600080fd5b5061012e610285366004611281565b610941565b34801561029657600080fd5b5061012e7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035157507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061039d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156103c35750600054600160ff909116105b806103dd5750303b1580156103dd575060005460ff166001145b6104545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610495576000805461ff0019166101001790555b61049e84610a21565b61012d82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015610513576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106127f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461068e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61069781610aa7565b604080516000808252602082019092526106b391839190610ae0565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107545760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161044b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461082b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161044b565b61083482610aa7565b61084082826001610ae0565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161044b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061093c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610982906001600160a01b031630335b84600036610c85565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109d9918790600401918252602082015260400190565b602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061129a565b9392505050565b600054610100900460ff16610a9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b6106b381610d73565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610840906001600160a01b03163033610979565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b1857610b1383610e1f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b72575060408051601f3d908101601f19168201909252610b6f9181019061129a565b60015b610be45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c795760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161044b565b50610b13838383610eea565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cd290889088908890889088906004016112b3565b602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190611307565b610d6b576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161044b565b505050505050565b600054610100900460ff16610df05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161044b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163b610e9c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161044b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ef383610f0f565b600082511180610f005750805b15610b13576105138383610f4f565b610f1881610e1f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610fce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161044b565b600080846001600160a01b031684604051610fe9919061134d565b600060405180830381855af49150503d8060008114611024576040519150601f19603f3d011682016040523d82523d6000602084013e611029565b606091505b5091509150611051828260405180606001604052806027815260200161139d6027913961105a565b95945050505050565b60608315611069575081610a1a565b610a1a838381511561107e5781518083602001fd5b8060405162461bcd60e51b815260040161044b9190611369565b6000602082840312156110aa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1a57600080fd5b6001600160a01b03811681146106b357600080fd5b60008060006060848603121561110457600080fd5b833561110f816110da565b9250602084013561111f816110da565b929592945050506040919091013590565b60006020828403121561114257600080fd5b8135610a1a816110da565b6020810160038310611188577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d057600080fd5b82356111db816110da565b9150602083013567ffffffffffffffff808211156111f857600080fd5b818501915085601f83011261120c57600080fd5b81358181111561121e5761121e61118e565b604051601f8201601f19908116603f011681019083821181831017156112465761124661118e565b8160405282815288602084870101111561125f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129357600080fd5b5035919050565b6000602082840312156112ac57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561131957600080fd5b81518015158114610a1a57600080fd5b60005b8381101561134457818101518382015260200161132c565b50506000910152565b6000825161135f818460208701611329565b9190910192915050565b6020815260008251806020840152611388816040850160208701611329565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122069f36c03cad214bd792f193935796c8899e6d1415ca13750675b1456e60023ff64736f6c63430008110033\";\nconst isSuperArgs$P = (xs) => xs.length > 1;\nclass CounterV1PluginSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$P(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$X, _bytecode$P, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$X);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$X, signerOrProvider);\n    }\n}\nCounterV1PluginSetup__factory.bytecode = _bytecode$P;\nCounterV1PluginSetup__factory.abi = _abi$X;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$y = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CounterV1__factory: CounterV1__factory,\n  CounterV1PluginSetup__factory: CounterV1PluginSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$W = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MULTIPLY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"count\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"_multiplyHelper\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_count\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_newVariable\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_a\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"multiply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"multiplyHelper\",\n        outputs: [\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"newVariable\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newVariable\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setNewVariable\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$O = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516114fb610119600039600081816104ec01528181610582015281816106890152818161071f015261081a01526114fb6000f3fe6080604052600436106100f35760003560e01c80635c60da1b1161008a578063b73fa1e711610059578063b73fa1e714610263578063c6888fa114610297578063c9c4bfca146102b7578063eb990c59146102eb57600080fd5b80635c60da1b1461020a578063614619541461021f5780638d7a72f31461022b5780639b97d03a1461024257600080fd5b80634162169f116100c65780634162169f1461019457806341de6830146101c65780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f857806306661abd1461012d5780631c02ea0e146101525780633659cfe614610174575b600080fd5b34801561010457600080fd5b50610118610113366004611195565b61030b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014461012d5481565b604051908152602001610124565b34801561015e57600080fd5b5061017261016d3660046111d7565b6103f0565b005b34801561018057600080fd5b5061017261018f366004611205565b6104e2565b3480156101a057600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610124565b3480156101d257600080fd5b5060006040516101249190611222565b6101726101f0366004611292565b61067f565b34801561020157600080fd5b5061014461080d565b34801561021657600080fd5b506101ae6108d2565b34801561017257600080fd5b34801561023757600080fd5b5061014461012f5481565b34801561024e57600080fd5b5061012e546101ae906001600160a01b031681565b34801561026f57600080fd5b506101447f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b3480156102a357600080fd5b506101446102b23660046111d7565b61090a565b3480156102c357600080fd5b506101447f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102f757600080fd5b50610172610306366004611356565b6109ea565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061039e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600290610100900460ff16158015610412575060005460ff8083169116105b6104895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461012f84905561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105805760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106575760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b61066081610b18565b6040805160008082526020820190925261067c91839190610b51565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361071d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107787f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b6107fd82610b18565b61080982826001610b51565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ad5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610480565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006109057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d9061094b906001600160a01b031630335b84600036610cf6565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109a2918790600401918252602082015260400190565b602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e3919061139c565b9392505050565b600054600290610100900460ff16158015610a0c575060005460ff8083169116105b610a7e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610480565b6000805461ffff191660ff831617610100179055610a9b85610de4565b61012d83905561012f82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610809906001600160a01b03163033610942565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b8957610b8483610e6a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610be3575060408051601f3d908101601f19168201909252610be09181019061139c565b60015b610c555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610cea5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610480565b50610b84838383610f35565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d4390889088908890889088906004016113b5565b602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190611409565b610ddc576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610480565b505050505050565b600054610100900460ff16610e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b61067c81610f60565b6001600160a01b0381163b610ee75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f3e8361100c565b600082511180610f4b5750805b15610b8457610f5a838361104c565b50505050565b600054610100900460ff16610fdd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61101581610e6a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610480565b600080846001600160a01b0316846040516110e6919061144f565b600060405180830381855af49150503d8060008114611121576040519150601f19603f3d011682016040523d82523d6000602084013e611126565b606091505b509150915061114e828260405180606001604052806027815260200161149f60279139611157565b95945050505050565b606083156111665750816109e3565b6109e3838381511561117b5781518083602001fd5b8060405162461bcd60e51b8152600401610480919061146b565b6000602082840312156111a757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109e357600080fd5b6000602082840312156111e957600080fd5b5035919050565b6001600160a01b038116811461067c57600080fd5b60006020828403121561121757600080fd5b81356109e3816111f0565b602081016003831061125d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156112a557600080fd5b82356112b0816111f0565b9150602083013567ffffffffffffffff808211156112cd57600080fd5b818501915085601f8301126112e157600080fd5b8135818111156112f3576112f3611263565b604051601f8201601f19908116603f0116810190838211818310171561131b5761131b611263565b8160405282815288602084870101111561133457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561136c57600080fd5b8435611377816111f0565b93506020850135611387816111f0565b93969395505050506040820135916060013590565b6000602082840312156113ae57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561141b57600080fd5b815180151581146109e357600080fd5b60005b8381101561144657818101518382015260200161142e565b50506000910152565b6000825161146181846020870161142b565b9190910192915050565b602081526000825180602084015261148a81604085016020870161142b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de332d90a46d4d882afe3ad45381af77a445506a866a9c4310b6a56c2346c3c764736f6c63430008110033\";\nconst isSuperArgs$O = (xs) => xs.length > 1;\nclass CounterV2__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$O(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$W, _bytecode$O, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$W);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$W, signerOrProvider);\n    }\n}\nCounterV2__factory.bytecode = _bytecode$O;\nCounterV2__factory.abi = _abi$W;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$V = [\n    {\n        inputs: [\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"_helper\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"counterBase\",\n        outputs: [\n            {\n                internalType: \"contract CounterV2\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"multiplyHelperBase\",\n        outputs: [\n            {\n                internalType: \"contract MultiplyHelper\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$N = \"0x608060405234801561001057600080fd5b5060405161311538038061311583398101604081905261002f916100a6565b600080546001600160a01b0319166001600160a01b03831617905560405161005690610099565b604051809103906000f080158015610072573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506100d6565b61161480611b0183390190565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b611a1c806100e56000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639cb0a12411620000625780639cb0a12414620000f7578063a8a9c29e146200011d578063eee774ca1462000144578063f10832f1146200015857600080fd5b806301ffc9a7146200008c5780630af30a7f14620000b85780635c60da1b14620000e5575b600080fd5b620000a36200009d36600462000d0d565b6200017f565b60405190151581526020015b60405180910390f35b600154620000cc906001600160a01b031681565b6040516001600160a01b039091168152602001620000af565b6001546001600160a01b0316620000cc565b6200010e6200010836600462000d83565b62000219565b604051620000af919062000e40565b620001346200012e36600462000e8d565b6200058c565b604051620000af92919062000fde565b600054620000cc906001600160a01b031681565b6200016f6200016936600462001010565b62000851565b604051620000af9291906200109c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200021357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606200022a6020830183620010c8565b90506000036200023c5760026200023f565b60035b60ff1667ffffffffffffffff8111156200025d576200025d6200111c565b604051908082528060200260200182016040528015620002b857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200027c5790505b506040805160a081019091529091508060018152602001846001600160a01b03168152602001836000016020810190620002f3919062001132565b6001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d815250816000815181106200034b576200034b62001152565b60209081029190910101526040805160a0810190915280600181526020908101906200037a9085018562001132565b6001600160a01b03168152602001846001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062001168565b815250816001815181106200043a576200043a62001152565b6020026020010181905250818060200190620004579190620010c8565b15905062000213576040805160a08101909152600181526020808201906200048290850185620010c8565b600081811062000496576200049662001152565b9050602002016020810190620004ad919062001132565b6001600160a01b03168152602090810190620004cc9085018562001132565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200053c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000562919062001168565b815250816002815181106200057b576200057b62001152565b602002602001018190525092915050565b6060620005ac604051806040016040528060608152602001606081525090565b60008461ffff166001036200067257620005ca604085018562001182565b810190620005d99190620011cc565b90507f1c02ea0eb591e374e2400f8b45bd05ee00999bdf38dee00039e67b24f4be2d43816040516024016200061091815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915292505b604080516001808252818301909252600091816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620006895750506040805160a081018252600181526001600160a01b038a166020808301919091529293509190820190620006fb9088018862001132565b6001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000791919062001168565b81525081600081518110620007aa57620007aa62001152565b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050620007e86020870187620010c8565b6000818110620007fc57620007fc62001152565b905060200201602081019062000813919062001132565b8160008151811062000829576200082962001152565b6001600160a01b03909216602092830291909101820152908452830152509094909350915050565b600062000871604051806040016040528060608152602001606081525090565b6000806200088285870187620011e6565b9092509050816001600160a01b038116620008c357600080546040805160208101909152918252620008c0916001600160a01b039091169062000ca6565b90505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c00000000000000000000000000000000000000000000000000000000179052906000908516156200095557600262000958565b60035b60ff1667ffffffffffffffff8111156200097657620009766200111c565b604051908082528060200260200182016040528015620009d157816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620009955790505b5060408051600180825281830190925291925060009190602080830190803683370190505060015490915062000a11906001600160a01b03168462000ca6565b6040805160a0810190915290985080600081526020018c6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d8152508260008151811062000a8f5762000a8f62001152565b60209081029190910101526040805160a081019091528060008152602001896001600160a01b031681526020018c6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b55919062001168565b8152508260018151811062000b6e5762000b6e62001152565b60209081029190910101526001600160a01b03861662000c66576040805160a081019091528060008152602001856001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c41919062001168565b8152508260028151811062000c5a5762000c5a62001152565b60200260200101819052505b838160008151811062000c7d5762000c7d62001152565b6001600160a01b0390921660209283029190910182015290875286015250505050935093915050565b600062000cb4838362000cbb565b9392505050565b6000828260405162000ccd9062000cff565b62000cda92919062001215565b604051809103906000f08015801562000cf7573d6000803e3d6000fd5b509392505050565b6107ad806200123a83390190565b60006020828403121562000d2057600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000cb457600080fd5b6001600160a01b038116811462000d6757600080fd5b50565b60006060828403121562000d7d57600080fd5b50919050565b6000806040838503121562000d9757600080fd5b823562000da48162000d51565b9150602083013567ffffffffffffffff81111562000dc157600080fd5b62000dcf8582860162000d6a565b9150509250929050565b600081516003811062000dfc57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000e815762000e7283855162000dd9565b93850193925060010162000e5c565b50909695505050505050565b60008060006060848603121562000ea357600080fd5b833562000eb08162000d51565b9250602084013561ffff8116811462000ec857600080fd5b9150604084013567ffffffffffffffff81111562000ee557600080fd5b62000ef38682870162000d6a565b9150509250925092565b6000815180845260005b8181101562000f255760208185018101518683018201520162000f07565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b8181101562000f8c5783516001600160a01b03168352928401929184019160010162000f65565b50508483015186820387850152805180835290840192506000918401905b8083101562000fd35762000fc082855162000dd9565b9150848401935060018301925062000faa565b509695505050505050565b60408152600062000ff3604083018562000efd565b828103602084015262001007818562000f45565b95945050505050565b6000806000604084860312156200102657600080fd5b8335620010338162000d51565b9250602084013567ffffffffffffffff808211156200105157600080fd5b818601915086601f8301126200106657600080fd5b8135818111156200107657600080fd5b8760208285010111156200108957600080fd5b6020830194508093505050509250925092565b6001600160a01b0383168152604060208201526000620010c0604083018462000f45565b949350505050565b6000808335601e19843603018112620010e057600080fd5b83018035915067ffffffffffffffff821115620010fc57600080fd5b6020019150600581901b36038213156200111557600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156200114557600080fd5b813562000cb48162000d51565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200117b57600080fd5b5051919050565b6000808335601e198436030181126200119a57600080fd5b83018035915067ffffffffffffffff821115620011b657600080fd5b6020019150368190038213156200111557600080fd5b600060208284031215620011df57600080fd5b5035919050565b60008060408385031215620011fa57600080fd5b8235620012078162000d51565b946020939093013593505050565b6001600160a01b0383168152604060208201526000620010c0604083018462000efd56fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e3f617a0c62d2336ebe35df2a46c89b0220a067fcf3e6ce1d232bf300dd172d664736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516114fb610119600039600081816104ec01528181610582015281816106890152818161071f015261081a01526114fb6000f3fe6080604052600436106100f35760003560e01c80635c60da1b1161008a578063b73fa1e711610059578063b73fa1e714610263578063c6888fa114610297578063c9c4bfca146102b7578063eb990c59146102eb57600080fd5b80635c60da1b1461020a578063614619541461021f5780638d7a72f31461022b5780639b97d03a1461024257600080fd5b80634162169f116100c65780634162169f1461019457806341de6830146101c65780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f857806306661abd1461012d5780631c02ea0e146101525780633659cfe614610174575b600080fd5b34801561010457600080fd5b50610118610113366004611195565b61030b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014461012d5481565b604051908152602001610124565b34801561015e57600080fd5b5061017261016d3660046111d7565b6103f0565b005b34801561018057600080fd5b5061017261018f366004611205565b6104e2565b3480156101a057600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610124565b3480156101d257600080fd5b5060006040516101249190611222565b6101726101f0366004611292565b61067f565b34801561020157600080fd5b5061014461080d565b34801561021657600080fd5b506101ae6108d2565b34801561017257600080fd5b34801561023757600080fd5b5061014461012f5481565b34801561024e57600080fd5b5061012e546101ae906001600160a01b031681565b34801561026f57600080fd5b506101447f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b3480156102a357600080fd5b506101446102b23660046111d7565b61090a565b3480156102c357600080fd5b506101447f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102f757600080fd5b50610172610306366004611356565b6109ea565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061039e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600290610100900460ff16158015610412575060005460ff8083169116105b6104895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461012f84905561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105805760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106575760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b61066081610b18565b6040805160008082526020820190925261067c91839190610b51565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361071d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107787f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610480565b6107fd82610b18565b61080982826001610b51565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ad5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610480565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006109057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d9061094b906001600160a01b031630335b84600036610cf6565b61012e5461012d546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109a2918790600401918252602082015260400190565b602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e3919061139c565b9392505050565b600054600290610100900460ff16158015610a0c575060005460ff8083169116105b610a7e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610480565b6000805461ffff191660ff831617610100179055610a9b85610de4565b61012d83905561012f82905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610809906001600160a01b03163033610942565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b8957610b8483610e6a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610be3575060408051601f3d908101601f19168201909252610be09181019061139c565b60015b610c555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610cea5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610480565b50610b84838383610f35565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d4390889088908890889088906004016113b5565b602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190611409565b610ddc576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610480565b505050505050565b600054610100900460ff16610e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b61067c81610f60565b6001600160a01b0381163b610ee75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610480565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f3e8361100c565b600082511180610f4b5750805b15610b8457610f5a838361104c565b50505050565b600054610100900460ff16610fdd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610480565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61101581610e6a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610480565b600080846001600160a01b0316846040516110e6919061144f565b600060405180830381855af49150503d8060008114611121576040519150601f19603f3d011682016040523d82523d6000602084013e611126565b606091505b509150915061114e828260405180606001604052806027815260200161149f60279139611157565b95945050505050565b606083156111665750816109e3565b6109e3838381511561117b5781518083602001fd5b8060405162461bcd60e51b8152600401610480919061146b565b6000602082840312156111a757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109e357600080fd5b6000602082840312156111e957600080fd5b5035919050565b6001600160a01b038116811461067c57600080fd5b60006020828403121561121757600080fd5b81356109e3816111f0565b602081016003831061125d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156112a557600080fd5b82356112b0816111f0565b9150602083013567ffffffffffffffff808211156112cd57600080fd5b818501915085601f8301126112e157600080fd5b8135818111156112f3576112f3611263565b604051601f8201601f19908116603f0116810190838211818310171561131b5761131b611263565b8160405282815288602084870101111561133457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561136c57600080fd5b8435611377816111f0565b93506020850135611387816111f0565b93969395505050506040820135916060013590565b6000602082840312156113ae57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561141b57600080fd5b815180151581146109e357600080fd5b60005b8381101561144657818101518382015260200161142e565b50506000910152565b6000825161146181846020870161142b565b9190910192915050565b602081526000825180602084015261148a81604085016020870161142b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de332d90a46d4d882afe3ad45381af77a445506a866a9c4310b6a56c2346c3c764736f6c63430008110033\";\nconst isSuperArgs$N = (xs) => xs.length > 1;\nclass CounterV2PluginSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$N(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$V, _bytecode$N, args[0]);\n        }\n    }\n    deploy(_helper, overrides) {\n        return super.deploy(_helper, overrides || {});\n    }\n    getDeployTransaction(_helper, overrides) {\n        return super.getDeployTransaction(_helper, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$V);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$V, signerOrProvider);\n    }\n}\nCounterV2PluginSetup__factory.bytecode = _bytecode$N;\nCounterV2PluginSetup__factory.abi = _abi$V;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$x = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CounterV2__factory: CounterV2__factory,\n  CounterV2PluginSetup__factory: CounterV2PluginSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$U = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MULTIPLY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_a\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_b\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"multiply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$M = \"\";\nconst isSuperArgs$M = (xs) => xs.length > 1;\nclass MultiplyHelper__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$M(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$U, _bytecode$M, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$U);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$U, signerOrProvider);\n    }\n}\nMultiplyHelper__factory.bytecode = _bytecode$M;\nMultiplyHelper__factory.abi = _abi$U;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$w = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  v1: index$y,\n  v2: index$x,\n  MultiplyHelper__factory: MultiplyHelper__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$T = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersAdded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersRemoved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"definingContract\",\n                type: \"address\",\n            },\n        ],\n        name: \"MembershipContractAnnounced\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"EXECUTE_PROPOSAL_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"executeProposal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isMember\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$L = \"0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033\";\nconst isSuperArgs$L = (xs) => xs.length > 1;\nclass Admin__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$L(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$T, _bytecode$L, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$T);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$T, signerOrProvider);\n    }\n}\nAdmin__factory.bytecode = _bytecode$L;\nAdmin__factory.abi = _abi$T;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$S = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"admin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminAddressInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$K = \"0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b61125580610bd583390190565b608051610b5c6100796000396000818160a1015261039e0152610b5c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100cb578063a8a9c29e146100eb578063f10832f11461010c57600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a366004610702565b61012d565b60405190151581526020015b60405180910390f35b6040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260200161008b565b6100de6100d936600461077b565b6101c6565b60405161008b919061084a565b6100fe6100f9366004610893565b6102f3565b60405161008b92919061098f565b61011f61011a366004610a12565b61031a565b60405161008b929190610a97565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806101c057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b604080516001808252818301909252606091816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816101dd5750506040805160a081018252600181526001600160a01b038616602080830191909152929350919082019061024c90850185610ac1565b6001600160a01b0316815260200160006001600160a01b03168152602001846001600160a01b0316630729d0546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc9190610ade565b815250816000815181106102e2576102e2610af7565b602002602001018190525092915050565b6060610312604051806040016040528060608152602001606081525090565b935093915050565b6000610339604051806040016040528060608152602001606081525090565b600061034784860186610ac1565b90506001600160a01b038116610399576040517f0849afa70000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b6103cb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610647565b6040517fc4d66de80000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529194509084169063c4d66de890602401600060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b50600092506002915061044f9050565b6040519080825280602002602001820160405280156104a857816020015b6040805160a08101825260008082526020808301829052928201819052606082018190526080820152825260001990920191018161046d5790505b506040805160a081019091529091508060008152602001856001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b031663cfceb5886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190610ade565b8152508160008151811061056557610565610af7565b60209081029190910101526040805160a081019091528060008152602001886001600160a01b03168152602001856001600160a01b0316815260200160006001600160a01b03168152602001886001600160a01b0316630729d0546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106139190610ade565b8152508160018151811061062957610629610af7565b60200260200101819052508083602001819052505050935093915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610390565b919050565b60006020828403121561071457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461074457600080fd5b9392505050565b6001600160a01b038116811461076057600080fd5b50565b60006060828403121561077557600080fd5b50919050565b6000806040838503121561078e57600080fd5b82356107998161074b565b9150602083013567ffffffffffffffff8111156107b557600080fd5b6107c185828601610763565b9150509250929050565b6000815160038110610806577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015610887576108798385516107cb565b938501939250600101610866565b50909695505050505050565b6000806000606084860312156108a857600080fd5b83356108b38161074b565b9250602084013561ffff811681146108ca57600080fd5b9150604084013567ffffffffffffffff8111156108e657600080fd5b6108f286828701610763565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156109415783516001600160a01b03168352928401929184019160010161091c565b50508483015186820387850152805180835290840192506000918401905b80831015610984576109728285516107cb565b9150848401935060018301925061095f565b509695505050505050565b604081526000835180604084015260005b818110156109bd57602081870181015160608684010152016109a0565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610a0960608201856108fc565b95945050505050565b600080600060408486031215610a2757600080fd5b8335610a328161074b565b9250602084013567ffffffffffffffff80821115610a4f57600080fd5b818601915086601f830112610a6357600080fd5b813581811115610a7257600080fd5b876020828501011115610a8457600080fd5b6020830194508093505050509250925092565b6001600160a01b0383168152604060208201526000610ab960408301846108fc565b949350505050565b600060208284031215610ad357600080fd5b81356107448161074b565b600060208284031215610af057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209bce921878c12d2ae97c6b4ac4ca06cd4d659b7b7b9ec9e85c38094cf2e83a5464736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033\";\nconst isSuperArgs$K = (xs) => xs.length > 1;\nclass AdminSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$K(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$S, _bytecode$K, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$S);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$S, signerOrProvider);\n    }\n}\nAdminSetup__factory.bytecode = _bytecode$K;\nAdminSetup__factory.abi = _abi$S;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$v = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Admin__factory: Admin__factory,\n  AdminSetup__factory: AdminSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$R = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"DateOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"member\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidAddresslistUpdate\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"MinDurationOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposalCreationForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecutionForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"limit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RatioOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"VoteCastForbidden\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersAdded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersRemoved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"definingContract\",\n                type: \"address\",\n            },\n        ],\n        name: \"MembershipContractAnnounced\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"voter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"votingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VoteCast\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"votingMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"supportThreshold\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"minParticipation\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"minDuration\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"minProposerVotingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VotingSettingsUpdated\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_ADDRESSES_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_VOTING_SETTINGS_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"addAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"addresslistLength\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"addresslistLengthAtBlock\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"canVote\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_startDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_endDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"createProposal\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getProposal\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"open\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"executed\",\n                type: \"bool\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"startDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"endDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"snapshotBlock\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.ProposalParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"abstain\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"yes\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"no\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.Tally\",\n                name: \"tally\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVoteOption\",\n        outputs: [\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isListed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isListedAtBlock\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isMember\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isMinParticipationReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReachedEarly\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minDuration\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minParticipation\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minProposerVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"removeAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"supportThreshold\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"totalVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"updateVotingSettings\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"vote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"votingMode\",\n        outputs: [\n            {\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$J = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b603254610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60325460ff9081161015620000e6576032805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613ee562000120600039600081816109d201528181610a6d01528181610b7401528181610c0a0152610d010152613ee56000f3fe60806040526004361061024f5760003560e01c80637c36e8e811610138578063c7f758a8116100b0578063cf1311491161007f578063f60046b211610064578063f60046b214610726578063f794062e1461073c578063fe0d94c11461075c57600080fd5b8063cf131149146106f1578063da35c6641461071157600080fd5b8063c7f758a81461064b578063c9c4bfca1461067d578063cc63604a146106b1578063ce6366c4146106d157600080fd5b80639cba302111610107578063a84eb999116100ec578063a84eb999146105eb578063b1bb8d261461060b578063c147210e1461062b57600080fd5b80639cba3021146105ab578063a230c524146105cb57600080fd5b80637c36e8e8146104de5780638377c460146104ff5780638a4b00f814610533578063970601d81461055357600080fd5b80633659cfe6116101cb57806352d1902d1161019a578063567157611161017f57806356715761146104685780635c60da1b146104a95780636a6b2d86146104be57600080fd5b806352d1902d14610433578063536f9f421461044857600080fd5b80633659cfe6146103ba5780634162169f146103da57806341de68301461040c5780634f1ef2861461042057600080fd5b806317d1b4041161022257806323d071881161020757806323d071881461036357806327f1608d146103855780633628731c1461039a57600080fd5b806317d1b404146103015780631befc4051461032157600080fd5b806301ffc9a714610254578063054fd2c2146102895780630de21856146102bf5780630dfb278e146102df575b600080fd5b34801561026057600080fd5b5061027461026f366004612ff4565b61077c565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b506101925465010000000000900463ffffffff165b60405163ffffffff9091168152602001610280565b3480156102cb57600080fd5b506102746102da36600461301e565b610828565b3480156102eb57600080fd5b506102ff6102fa36600461304f565b6108cb565b005b34801561030d57600080fd5b5061027461031c366004613094565b610916565b34801561032d57600080fd5b506103557fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b604051908152602001610280565b34801561036f57600080fd5b506101925460ff165b60405161028091906130f8565b34801561039157600080fd5b5061035561092d565b3480156103a657600080fd5b506102ff6103b5366004613150565b610947565b3480156103c657600080fd5b506102ff6103d5366004613192565b6109c8565b3480156103e657600080fd5b5060fb546001600160a01b03165b6040516001600160a01b039091168152602001610280565b34801561041857600080fd5b506000610378565b6102ff61042e36600461321e565b610b6a565b34801561043f57600080fd5b50610355610cf4565b34801561045457600080fd5b5061035561046336600461301e565b610dba565b34801561047457600080fd5b50610192546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff9091168152602001610280565b3480156104b557600080fd5b506103f4610dc5565b3480156104ca57600080fd5b506103556104d936600461301e565b610dfd565b3480156104ea57600080fd5b5061019254610100900463ffffffff166102aa565b34801561050b57600080fd5b506103557f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a3895381565b34801561053f57600080fd5b5061027461054e36600461301e565b610e0a565b34801561055f57600080fd5b5061059e61056e3660046132b1565b6000828152610191602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b60405161028091906132f5565b3480156105b757600080fd5b506103556105c636600461333d565b610e4a565b3480156105d757600080fd5b506102746105e6366004613192565b6110d7565b3480156105f757600080fd5b506102ff610606366004613150565b6110e2565b34801561061757600080fd5b50610274610626366004613422565b611156565b34801561063757600080fd5b506102ff61064636600461344e565b611182565b34801561065757600080fd5b5061066b61066636600461301e565b6112eb565b60405161028096959493929190613583565b34801561068957600080fd5b506103557f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156106bd57600080fd5b506102746106cc36600461301e565b611553565b3480156106dd57600080fd5b506102ff6106ec36600461363b565b61155e565b3480156106fd57600080fd5b5061027461070c36600461301e565b6115b8565b34801561071d57600080fd5b5061035561161a565b34801561073257600080fd5b5061019354610355565b34801561074857600080fd5b50610274610757366004613192565b611626565b34801561076857600080fd5b506102ff61077736600461301e565b61165a565b60006001600160e01b031982167f5f21eb8b0000000000000000000000000000000000000000000000000000000014806107df57506001600160e01b031982167f0bb5c60300000000000000000000000000000000000000000000000000000000145b8061081357506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806108225750610822826116a5565b92915050565b6000818152610191602052604081206003810154600482015460018301548492919061086490600160a81b900467ffffffffffffffff16610dba565b61086e9190613691565b6108789190613691565b6001830154909150610896908290610100900463ffffffff166136a4565b600483015460018401546108b890610100900463ffffffff16620f4240613691565b6108c291906136a4565b11949350505050565b60fb547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe590610909906001600160a01b031630335b84600036611717565b61091282611805565b5050565b6000610923848484611a08565b90505b9392505050565b60006109396001611af0565b6001600160e01b0316905090565b60fb547f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a3895390610980906001600160a01b03163033610900565b61098a8383611b38565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d883836040516109bb9291906136bb565b60405180910390a1505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a6b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610b425760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a62565b610b4b81611c3e565b60408051600080825260208201909252610b6791839190611c77565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c085760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610a62565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c637f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610cdf5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a62565b610ce882611c3e565b61091282826001611c77565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d945760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a62565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b600061082282610dfd565b6000610df87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b6000610822600183611e1c565b6000818152610191602052604081206002810154600382015460058301546004840154610e379190613709565b610e419190613709565b10159392505050565b6000806001610e5843611ecf565b039050610e656101935490565b15801590610e845750610e82338267ffffffffffffffff16611156565b155b15610ebd576040517feab99344000000000000000000000000000000000000000000000000000000008152336004820152602401610a62565b610ecd338c8c89898e8e8e611f53565b600081815261019160205260409020909250610ee98787611fb9565b6001830180547fffffffffffffffffffffff00000000000000000000000000000000ffffffffff166d010000000000000000000000000067ffffffffffffffff938416027fffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffff16176501000000000093831693909302929092177fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff16600160a81b918516919091021790556101925460ff1660018083018054909160ff1990911690836002811115610fbc57610fbc6130d2565b0217905550610192546001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1663ffffffff610100938490041690920291909117905561103161101967ffffffffffffffff8416610dba565b6101925465010000000000900463ffffffff166120fa565b6002820155871561104457600881018890555b60005b898110156110a357816007018b8b838181106110655761106561371c565b90506020028101906110779190613732565b81546001810183556000928352602090922090916003020161109982826137cc565b5050600101611047565b5060008560038111156110b8576110b86130d2565b146110c8576110c883868661155e565b50509998505050505050505050565b600061082282611626565b60fb547f37c20ba3fe5e4e1eb04b4bdb30d528f9d2d37a43a745d3976dffa671d4a389539061111b906001600160a01b03163033610900565b611125838361218a565b7f0ba413f7646035cae0a4ee999d676078fc8a763d1a36a8ef25e4c10f67d8615d83836040516109bb9291906136bb565b6001600160a01b03821660009081526020819052604081206111789083611e1c565b6001149392505050565b603254610100900460ff16158080156111a25750603254600160ff909116105b806111bc5750303b1580156111bc575060325460ff166001145b61122e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a62565b6032805460ff191660011790558015611251576032805461ff0019166101001790555b61125b85856121f3565b6112658383611b38565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d883836040516112969291906136bb565b60405180910390a180156112e4576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052819061134260405180606001604052806000815260200160008152602001600081525090565b6000858152610191602052604081206060919061135e81612282565b81546040805160c08101909152600184018054939a5060ff9283169950909290918391166002811115611393576113936130d2565b60028111156113a4576113a46130d2565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d010000000000000000000000000084048216606080870191909152600160a81b909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b8282101561153c576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916114ab90613752565b80601f01602080910402602001604051908101604052809291908181526020018280546114d790613752565b80156115245780601f106114f957610100808354040283529160200191611524565b820191906000526020600020905b81548152906001019060200180831161150757829003601f168201915b50505050508152505081526020019060010190611458565b505050509250806008015491505091939550919395565b6000610822826122f0565b3361156a848285611a08565b6115a6578381846040517f70b4b254000000000000000000000000000000000000000000000000000000008152600401610a62939291906138fd565b6115b284848385612398565b50505050565b600081815261019160205260408120600581015460018201546115e69190610100900463ffffffff166136a4565b6004820154600183015461160890610100900463ffffffff16620f4240613691565b61161291906136a4565b119392505050565b6000610df861015f5490565b6001600160a01b038116600090815260208190526040812061164790611af0565b6001600160e01b03166001149050919050565b611663816122f0565b61169c576040517f9fefd0f100000000000000000000000000000000000000000000000000000000815260048101829052602401610a62565b610b678161258d565b60006001600160e01b031982167f8678b01e00000000000000000000000000000000000000000000000000000000148061170857506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b806108225750610822826126f5565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690611764908890889088908890889060040161394b565b602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190613989565b6117fd576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610a62565b505050505050565b6118136001620f4240613691565b61182360408301602084016139b8565b63ffffffff16111561188e5761183d6001620f4240613691565b61184d60408301602084016139b8565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff166024820152604401610a62565b620f42406118a260608301604084016139b8565b63ffffffff1611156118c257620f424061184d60608301604084016139b8565b610e106118d560808301606084016139d5565b67ffffffffffffffff16101561193e57610e106118f860808301606084016139d5565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610a62565b6301e1338061195360808301606084016139d5565b67ffffffffffffffff161115611978576301e133806118f860808301606084016139d5565b806101926119868282613a0c565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e90506119b76020830183613b1f565b6119c760408401602085016139b8565b6119d760608501604086016139b8565b6119e760808601606087016139d5565b85608001356040516119fd959493929190613b3c565b60405180910390a150565b600083815261019160205260408120611a2081612282565b611a2e576000915050610926565b6000836003811115611a4257611a426130d2565b03611a51576000915050610926565b6001810154611a72908590600160a81b900467ffffffffffffffff16611156565b611a80576000915050610926565b6001600160a01b038416600090815260068201602052604081205460ff166003811115611aaf57611aaf6130d2565b14158015611ad657506002600182015460ff166002811115611ad357611ad36130d2565b14155b15611ae5576000915050610926565b506001949350505050565b80546000908015611b2f57611b1883611b0a600184613691565b600091825260209091200190565b5464010000000090046001600160e01b0316610926565b60009392505050565b60005b81811015611c2f57611b6d838383818110611b5857611b5861371c565b90506020020160208101906107579190613192565b15611bd757828282818110611b8457611b8461371c565b9050602002016020810190611b999190613192565b6040517fc0b7477d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610a62565b611c256001600080868686818110611bf157611bf161371c565b9050602002016020810190611c069190613192565b6001600160a01b03168152602081019190915260400160002090612733565b5050600101611b3b565b506115b260016127698361276d565b60fb547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610912906001600160a01b03163033610900565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611caf57611caa836127a5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d09575060408051601f3d908101601f19168201909252611d0691810190613b78565b60015b611d7b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a62565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611e105760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a62565b50611caa838383612870565b6000438210611e6d5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610a62565b6000611e7883612895565b84549091506000611e8b86848385612911565b90508015611eb957611ea286611b0a600184613691565b5464010000000090046001600160e01b0316611ebc565b60005b6001600160e01b03169695505050505050565b600067ffffffffffffffff821115611f4f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610a62565b5090565b6000611f5d612972565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a604051611fa59796959493929190613b91565b60405180910390a398975050505050505050565b6000806000611fc742611ecf565b90508467ffffffffffffffff16600003611fe357809250612048565b8492508067ffffffffffffffff168367ffffffffffffffff161015612048576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610a62565b61019254600090612070906901000000000000000000900467ffffffffffffffff1685613ca0565b90508467ffffffffffffffff1660000361208c578092506120f1565b8492508067ffffffffffffffff168367ffffffffffffffff1610156120f1576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610a62565b50509250929050565b6000620f4240821115612145576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f4240600482015260248101839052604401610a62565b61214f82846136a4565b92506000612160620f424085613cd7565b905061216f620f424085613ceb565b915080156121835761218082613cff565b91505b5092915050565b60005b818110156121e4576121aa838383818110611b5857611b5861371c565b6121c057828282818110611b8457611b8461371c565b6121da6000806000868686818110611bf157611bf161371c565b505060010161218d565b506115b2600161298d8361276d565b603254610100900460ff166122705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b61227982612992565b61091281611805565b60008061228e42611ecf565b600184015490915067ffffffffffffffff8083166501000000000090920416118015906122dd5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b8015610926575050905460ff1615919050565b600081815261019160205260408120805460ff16156123125750600092915050565b61231b81612282565b156123635760018082015460ff16600281111561233a5761233a6130d2565b146123485750600092915050565b61235183610828565b61235e5750600092915050565b612379565b61236c836115b8565b6123795750600092915050565b61238283610e0a565b61238f5750600092915050565b50600192915050565b6000848152610191602090815260408083206001600160a01b0386168452600681019092529091205460ff1660028160038111156123d8576123d86130d2565b036123f85760048201546123ee90600190613691565b600483015561245c565b600381600381111561240c5761240c6130d2565b0361242c57600582015461242290600190613691565b600583015561245c565b6001816003811115612440576124406130d2565b0361245c57600382015461245690600190613691565b60038301555b6002856003811115612470576124706130d2565b0361248f576004820154612485906001613709565b60048301556124f1565b60038560038111156124a3576124a36130d2565b036124c25760058201546124b8906001613709565b60058301556124f1565b60018560038111156124d6576124d66130d2565b036124f15760038201546124eb906001613709565b60038301555b6001600160a01b03841660009081526006830160205260409020805486919060ff19166001836003811115612528576125286130d2565b0217905550836001600160a01b0316867fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679287600160405161256a929190613d19565b60405180910390a38280156125835750612583866122f0565b156117fd576117fd865b600081815261019160205260409020805460ff19166001179055611caa6125bc60fb546001600160a01b031690565b826101916000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156126d8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161264790613752565b80601f016020809104026020016040519081016040528092919081815260200182805461267390613752565b80156126c05780601f10612695576101008083540402835291602001916126c0565b820191906000526020600020905b8154815290600101906020018083116126a357829003601f168201915b505050505081525050815260200190600101906125f4565b505050600086815261019160205260409020600801549050612a18565b60006001600160e01b031982167fda35c664000000000000000000000000000000000000000000000000000000001480610822575061082282612ae7565b6000806127518461274343612895565b61274c86612b82565b612c01565b6001600160e01b0391821693501690505b9250929050565b0190565b6000806127988561279361278088611af0565b6001600160e01b0316868863ffffffff16565b612733565b915091505b935093915050565b6001600160a01b0381163b6128225760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a62565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61287983612da4565b6000825111806128865750805b15611caa576115b28383612de4565b600063ffffffff821115611f4f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610a62565b60005b818310156129675760006129288484612eef565b60008781526020902090915063ffffffff86169082015463ffffffff16111561295357809250612961565b61295e816001613709565b93505b50612914565b50805b949350505050565b600061297c61161a565b9050610db761015f80546001019055565b900390565b603254610100900460ff16612a0f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b610b6781612f0a565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf32490612a6790889088908890600401613d34565b6000604051808303816000875af1158015612a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aae9190810190613d5d565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b60006001600160e01b031982167f41de6830000000000000000000000000000000000000000000000000000000001480612b4a57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061082257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610822565b60006001600160e01b03821115611f4f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610a62565b825460009081908015612d4a576000612c1f87611b0a600185613691565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015612ca15760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401610a62565b805163ffffffff808816911603612cea5784612cc288611b0a600186613691565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055612d3a565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b60200151925083915061279d9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a81529182209551925190931664010000000002919093161792019190915590508161279d565b612dad816127a5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612e635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610a62565b600080846001600160a01b031684604051612e7e9190613e63565b600060405180830381855af49150503d8060008114612eb9576040519150601f19603f3d011682016040523d82523d6000602084013e612ebe565b606091505b5091509150612ee68282604051806060016040528060278152602001613e8960279139612fb6565b95945050505050565b6000612efe6002848418613ceb565b61092690848416613709565b603254610100900460ff16612f875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a62565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608315612fc5575081610926565b6109268383815115612fda5781518083602001fd5b8060405162461bcd60e51b8152600401610a629190613e75565b60006020828403121561300657600080fd5b81356001600160e01b03198116811461092657600080fd5b60006020828403121561303057600080fd5b5035919050565b600060a0828403121561304957600080fd5b50919050565b600060a0828403121561306157600080fd5b6109268383613037565b6001600160a01b0381168114610b6757600080fd5b80356004811061308f57600080fd5b919050565b6000806000606084860312156130a957600080fd5b8335925060208401356130bb8161306b565b91506130c960408501613080565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60038110610b6757610b676130d2565b60208101613105836130e8565b91905290565b60008083601f84011261311d57600080fd5b50813567ffffffffffffffff81111561313557600080fd5b6020830191508360208260051b850101111561276257600080fd5b6000806020838503121561316357600080fd5b823567ffffffffffffffff81111561317a57600080fd5b6131868582860161310b565b90969095509350505050565b6000602082840312156131a457600080fd5b81356109268161306b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131ee576131ee6131af565b604052919050565b600067ffffffffffffffff821115613210576132106131af565b50601f01601f191660200190565b6000806040838503121561323157600080fd5b823561323c8161306b565b9150602083013567ffffffffffffffff81111561325857600080fd5b8301601f8101851361326957600080fd5b803561327c613277826131f6565b6131c5565b81815286602083850101111561329157600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156132c457600080fd5b8235915060208301356132d68161306b565b809150509250929050565b600481106132f1576132f16130d2565b9052565b6020810161082282846132e1565b67ffffffffffffffff81168114610b6757600080fd5b803561308f81613303565b8015158114610b6757600080fd5b803561308f81613324565b600080600080600080600080600060e08a8c03121561335b57600080fd5b893567ffffffffffffffff8082111561337357600080fd5b818c0191508c601f83011261338757600080fd5b81358181111561339657600080fd5b8d60208285010111156133a857600080fd5b60209283019b509950908b013590808211156133c357600080fd5b506133d08c828d0161310b565b90985096505060408a013594506133e960608b01613319565b93506133f760808b01613319565b925061340560a08b01613080565b915061341360c08b01613332565b90509295985092959850929598565b6000806040838503121561343557600080fd5b82356134408161306b565b946020939093013593505050565b60008060008060e0858703121561346457600080fd5b843561346f8161306b565b935061347e8660208701613037565b925060c085013567ffffffffffffffff81111561349a57600080fd5b6134a68782880161310b565b95989497509550505050565b60005b838110156134cd5781810151838201526020016134b5565b50506000910152565b600081518084526134ee8160208601602086016134b2565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561357657858303601f19018952815180516001600160a01b031684528481015185850152604090810151606091850182905290613562818601836134d6565b9a86019a945050509083019060010161351f565b5090979650505050505050565b60006101a08815158352871515602084015286516135a0816130e8565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e08401526136136101008401878051825260208082015190830152604090810151910152565b8061016084015261362681840186613502565b91505082610180830152979650505050505050565b60008060006060848603121561365057600080fd5b8335925061366060208501613080565b9150604084013561367081613324565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b818103818111156108225761082261367b565b80820281158282048414176108225761082261367b565b60208082528181018390526000908460408401835b868110156136fe5782356136e38161306b565b6001600160a01b0316825291830191908301906001016136d0565b509695505050505050565b808201808211156108225761082261367b565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261374857600080fd5b9190910192915050565b600181811c9082168061376657607f821691505b60208210810361304957634e487b7160e01b600052602260045260246000fd5b601f821115611caa57600081815260208120601f850160051c810160208610156137ad5750805b601f850160051c820191505b818110156117fd578281556001016137b9565b81356137d78161306b565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261382557600080fd5b8501803567ffffffffffffffff81111561383e57600080fd5b803603848301131561384f57600080fd5b6138638161385d8554613752565b85613786565b6000601f821160018114613899576000831561388157508382018601355b600019600385901b1c1916600184901b1785556138f2565b600085815260209020601f19841690835b828110156138c9578685018901358255938801939089019088016138aa565b50848210156138e85760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b8381526001600160a01b03831660208201526060810161296a60408301846132e1565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261397e608083018486613920565b979650505050505050565b60006020828403121561399b57600080fd5b815161092681613324565b63ffffffff81168114610b6757600080fd5b6000602082840312156139ca57600080fd5b8135610926816139a6565b6000602082840312156139e757600080fd5b813561092681613303565b60038110610b6757600080fd5b6000813561082281613303565b8135613a17816139f2565b613a20816130e8565b815460ff821691508160ff1982161783556020840135613a3f816139a6565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008416171784556040850135613a83816139a6565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000851617831717855550505050613b11613acf606084016139ff565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b600060208284031215613b3157600080fd5b8135610926816139f2565b60a08101613b49876130e8565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b600060208284031215613b8a57600080fd5b5051919050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152613bc060a086018a8c613920565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015613c8257601f198684030184528135605e198f3603018112613c0357600080fd5b8e018035613c108161306b565b6001600160a01b0316845280890135898501528781013536829003601e19018112613c3a57600080fd5b0188810190358a811115613c4d57600080fd5b803603821315613c5c57600080fd5b8689860152613c6e8786018284613920565b958a01959450505090870190600101613bde565b50508097505050505050505082608083015298975050505050505050565b67ffffffffffffffff8181168382160190808211156121835761218361367b565b634e487b7160e01b600052601260045260246000fd5b600082613ce657613ce6613cc1565b500690565b600082613cfa57613cfa613cc1565b500490565b60006000198203613d1257613d1261367b565b5060010190565b60408101613d2782856132e1565b8260208301529392505050565b838152606060208201526000613d4d6060830185613502565b9050826040830152949350505050565b6000806040808486031215613d7157600080fd5b835167ffffffffffffffff80821115613d8957600080fd5b818601915086601f830112613d9d57600080fd5b8151602082821115613db157613db16131af565b8160051b613dc08282016131c5565b928352848101820192828101908b851115613dda57600080fd5b83870192505b84831015613e4f57825186811115613df85760008081fd5b8701603f81018d13613e0a5760008081fd5b84810151613e1a613277826131f6565b8181528e8b838501011115613e2f5760008081fd5b613e3e828883018d86016134b2565b845250509183019190830190613de0565b9990920151989a9899505050505050505050565b600082516137488184602087016134b2565b60208152600061092660208301846134d656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df6d825f7bed509d522af2586e0fa2a84e3343868f9c1c00bcdcf0d4575a50bb64736f6c63430008110033\";\nconst isSuperArgs$J = (xs) => xs.length > 1;\nclass AddresslistVoting__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$J(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$R, _bytecode$J, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$R);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$R, signerOrProvider);\n    }\n}\nAddresslistVoting__factory.bytecode = _bytecode$J;\nAddresslistVoting__factory.abi = _abi$R;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$Q = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$I = \"\";\nconst isSuperArgs$I = (xs) => xs.length > 1;\nclass AddresslistVotingSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$I(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$Q, _bytecode$I, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$Q);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$Q, signerOrProvider);\n    }\n}\nAddresslistVotingSetup__factory.bytecode = _bytecode$I;\nAddresslistVotingSetup__factory.abi = _abi$Q;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$u = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AddresslistVoting__factory: AddresslistVoting__factory,\n  AddresslistVotingSetup__factory: AddresslistVotingSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$P = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"DateOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"MinDurationOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NoVotingPower\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposalCreationForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecutionForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"limit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RatioOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"VoteCastForbidden\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersAdded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersRemoved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"definingContract\",\n                type: \"address\",\n            },\n        ],\n        name: \"MembershipContractAnnounced\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"voter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"votingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VoteCast\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"votingMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"supportThreshold\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"minParticipation\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"minDuration\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"minProposerVotingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VotingSettingsUpdated\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_VOTING_SETTINGS_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"canVote\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_startDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_endDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"createProposal\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getProposal\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"open\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"executed\",\n                type: \"bool\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"startDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"endDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"snapshotBlock\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.ProposalParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"abstain\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"yes\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"no\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.Tally\",\n                name: \"tally\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVoteOption\",\n        outputs: [\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVotingToken\",\n        outputs: [\n            {\n                internalType: \"contract IVotesUpgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"contract IVotesUpgradeable\",\n                name: \"_token\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isMember\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isMinParticipationReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReachedEarly\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minDuration\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minParticipation\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minProposerVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"supportThreshold\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"totalVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"updateVotingSettings\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"vote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"votingMode\",\n        outputs: [\n            {\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$H = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161381162000120600039600081816107b70152818161085201528181610959015281816109ef0152610ae601526138116000f3fe6080604052600436106101cd5760003560e01c80637c36e8e8116100f7578063c9c4bfca11610095578063da35c66411610064578063da35c664146105c6578063e28c3b19146105db578063f60046b2146105fa578063fe0d94c11461061057600080fd5b8063c9c4bfca14610532578063cc63604a14610566578063ce6366c414610586578063cf131149146105a657600080fd5b80639cba3021116100d15780639cba3021146104a0578063a230c524146104c0578063b2673b07146104e0578063c7f758a81461050057600080fd5b80637c36e8e8146104075780638a4b00f814610428578063970601d81461044857600080fd5b80633659cfe61161016f57806352d1902d1161013e57806352d1902d1461037c578063536f9f421461039157806356715761146103b15780635c60da1b146103f257600080fd5b80633659cfe6146103035780634162169f1461032357806341de6830146103555780634f1ef2861461036957600080fd5b80630dfb278e116101ab5780630dfb278e1461025d57806317d1b4041461027f5780631befc4051461029f57806323d07188146102e157600080fd5b806301ffc9a7146101d2578063054fd2c2146102075780630de218561461023d575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046129f5565b610630565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b506101605465010000000000900463ffffffff165b60405163ffffffff90911681526020016101fe565b34801561024957600080fd5b506101f2610258366004612a1f565b6106a8565b34801561026957600080fd5b5061027d610278366004612a50565b61074b565b005b34801561028b57600080fd5b506101f261029a366004612a95565b610796565b3480156102ab57600080fd5b506102d37fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b6040519081526020016101fe565b3480156102ed57600080fd5b506101605460ff165b6040516101fe9190612af9565b34801561030f57600080fd5b5061027d61031e366004612b0c565b6107ad565b34801561032f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101fe565b34801561036157600080fd5b5060006102f6565b61027d610377366004612b98565b61094f565b34801561038857600080fd5b506102d3610ad9565b34801561039d57600080fd5b506102d36103ac366004612a1f565b610b9f565b3480156103bd57600080fd5b50610160546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff90911681526020016101fe565b3480156103fe57600080fd5b5061033d610c27565b34801561041357600080fd5b5061016054610100900463ffffffff16610228565b34801561043457600080fd5b506101f2610443366004612a1f565b610c5f565b34801561045457600080fd5b50610493610463366004612c2b565b600082815261015f602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b6040516101fe9190612c6f565b3480156104ac57600080fd5b506102d36104bb366004612d03565b610c9f565b3480156104cc57600080fd5b506101f26104db366004612b0c565b610fdd565b3480156104ec57600080fd5b5061027d6104fb366004612de8565b611070565b34801561050c57600080fd5b5061052061051b366004612a1f565b6111ea565b6040516101fe96959493929190612f00565b34801561053e57600080fd5b506102d37f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561057257600080fd5b506101f2610581366004612a1f565b611452565b34801561059257600080fd5b5061027d6105a1366004612fb8565b61145d565b3480156105b257600080fd5b506101f26105c1366004612a1f565b6114b1565b3480156105d257600080fd5b506102d3611513565b3480156105e757600080fd5b50610191546001600160a01b031661033d565b34801561060657600080fd5b50610161546102d3565b34801561061c57600080fd5b5061027d61062b366004612a1f565b61151f565b60006001600160e01b031982167f50eb001e00000000000000000000000000000000000000000000000000000000148061069357506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806106a257506106a28261156a565b92915050565b600081815261015f60205260408120600381015460048201546001830154849291906106e490600160a81b900467ffffffffffffffff16610b9f565b6106ee9190613003565b6106f89190613003565b6001830154909150610716908290610100900463ffffffff16613016565b6004830154600184015461073890610100900463ffffffff16620f4240613003565b6107429190613016565b11949350505050565b60c9547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe590610789906001600160a01b031630335b846000366115dc565b610792826116ca565b5050565b60006107a38484846118cd565b90505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108505760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108ab7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109275760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610847565b61093081611a3a565b6040805160008082526020820190925261094c91839190611a73565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109ed5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610847565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ac45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610847565b610acd82611a3a565b61079282826001611a73565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b795760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610847565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b610191546040517f8e539e8c000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690638e539e8c90602401602060405180830381865afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a2919061302d565b6000610c5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600081815261015f602052604081206002810154600382015460058301546004840154610c8c9190613046565b610c969190613046565b10159392505050565b6000600019430181610cb082610b9f565b905080600003610cec576040517f7c176b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016154610191546001600160a01b0316633a46b1a8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061302d565b1015610dac576040517feab99344000000000000000000000000000000000000000000000000000000008152336004820152602401610847565b610dbc338d8d8a8a8f8f8f611c18565b600081815261015f60205260409020909350610dd88888611c7e565b6001830180547fffffffffffffffffffffff00000000000000000000000000000000ffffffffff166d010000000000000000000000000067ffffffffffffffff938416027fffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffff1617650100000000009390921692909202179055610e5a83611dbf565b60018201805467ffffffffffffffff92909216600160a81b027fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff909216919091179055610eaa6101605460ff1690565b60018083018054909160ff1990911690836002811115610ecc57610ecc612ad3565b021790555061016054610100900463ffffffff166001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff9384160217905561016054610f369184916501000000000090041663ffffffff16611e43565b60028201558815610f4957600881018990555b60005b8a811015610fa857816007018c8c83818110610f6a57610f6a613059565b9050602002810190610f7c919061306f565b815460018101835560009283526020909220909160030201610f9e8282613109565b5050600101610f4c565b506000866003811115610fbd57610fbd612ad3565b14610fcd57610fcd84878761145d565b5050509998505050505050505050565b610191546040517f9ab24eb00000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690639ab24eb090602401602060405180830381865afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611069919061302d565b1192915050565b600054610100900460ff16158080156110905750600054600160ff909116105b806110aa5750303b1580156110aa575060005460ff166001145b61111c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610847565b6000805460ff19166001179055801561113f576000805461ff0019166101001790555b6111498484611ed3565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156111e4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052819061124160405180606001604052806000815260200160008152602001600081525090565b600085815261015f602052604081206060919061125d81611f62565b81546040805160c08101909152600184018054939a5060ff928316995090929091839116600281111561129257611292612ad3565b60028111156112a3576112a3612ad3565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d010000000000000000000000000084048216606080870191909152600160a81b909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b8282101561143b576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916113aa9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546113d69061308f565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b50505050508152505081526020019060010190611357565b505050509250806008015491505091939550919395565b60006106a282611fd0565b336114698482856118cd565b6114a5578381846040517f70b4b2540000000000000000000000000000000000000000000000000000000081526004016108479392919061323a565b6111e484848385612078565b600081815261015f60205260408120600581015460018201546114df9190610100900463ffffffff16613016565b6004820154600183015461150190610100900463ffffffff16620f4240613003565b61150b9190613016565b119392505050565b6000610c5a61012d5490565b61152881611fd0565b611561576040517f9fefd0f100000000000000000000000000000000000000000000000000000000815260048101829052602401610847565b61094c8161231f565b60006001600160e01b031982167f8678b01e0000000000000000000000000000000000000000000000000000000014806115cd57506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b806106a257506106a282612487565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116299088908890889088908890600401613290565b602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a91906132ce565b6116c2576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610847565b505050505050565b6116d86001620f4240613003565b6116e860408301602084016132fd565b63ffffffff161115611753576117026001620f4240613003565b61171260408301602084016132fd565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff166024820152604401610847565b620f424061176760608301604084016132fd565b63ffffffff16111561178757620f424061171260608301604084016132fd565b610e1061179a608083016060840161331a565b67ffffffffffffffff16101561180357610e106117bd608083016060840161331a565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff928316600482015291166024820152604401610847565b6301e13380611818608083016060840161331a565b67ffffffffffffffff16111561183d576301e133806117bd608083016060840161331a565b8061016061184b8282613351565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e905061187c6020830183613464565b61188c60408401602085016132fd565b61189c60608501604086016132fd565b6118ac608086016060870161331a565b85608001356040516118c2959493929190613481565b60405180910390a150565b600083815261015f602052604081206118e581611f62565b6118f35760009150506107a6565b600083600381111561190757611907612ad3565b036119165760009150506107a6565b6101915460018201546040517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152600160a81b90920467ffffffffffffffff166024820152911690633a46b1a890604401602060405180830381865afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b9919061302d565b6000036119ca5760009150506107a6565b6001600160a01b038416600090815260068201602052604081205460ff1660038111156119f9576119f9612ad3565b14158015611a2057506002600182015460ff166002811115611a1d57611a1d612ad3565b14155b15611a2f5760009150506107a6565b506001949350505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610792906001600160a01b03163033610780565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611aab57611aa6836124c5565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b05575060408051601f3d908101601f19168201909252611b029181019061302d565b60015b611b775760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611c0c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610847565b50611aa6838383612590565b6000611c226125b5565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a604051611c6a97969594939291906134bd565b60405180910390a398975050505050505050565b6000806000611c8c42611dbf565b90508467ffffffffffffffff16600003611ca857809250611d0d565b8492508067ffffffffffffffff168367ffffffffffffffff161015611d0d576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610847565b61016054600090611d35906901000000000000000000900467ffffffffffffffff16856135cc565b90508467ffffffffffffffff16600003611d5157809250611db6565b8492508067ffffffffffffffff168367ffffffffffffffff161015611db6576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015284166024820152604401610847565b50509250929050565b600067ffffffffffffffff821115611e3f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610847565b5090565b6000620f4240821115611e8e576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f4240600482015260248101839052604401610847565b611e988284613016565b92506000611ea9620f424085613603565b9050611eb8620f424085613617565b91508015611ecc57611ec98261362b565b91505b5092915050565b600054610100900460ff16611f505760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b611f59826125d0565b610792816116ca565b600080611f6e42611dbf565b600184015490915067ffffffffffffffff808316650100000000009092041611801590611fbd5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b80156107a6575050905460ff1615919050565b600081815261015f60205260408120805460ff1615611ff25750600092915050565b611ffb81611f62565b156120435760018082015460ff16600281111561201a5761201a612ad3565b146120285750600092915050565b612031836106a8565b61203e5750600092915050565b612059565b61204c836114b1565b6120595750600092915050565b61206283610c5f565b61206f5750600092915050565b50600192915050565b600084815261015f602052604080822061019154600182015492517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152600160a81b90940467ffffffffffffffff1660248201529193921690633a46b1a890604401602060405180830381865afa158015612108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212c919061302d565b6001600160a01b038516600090815260068401602052604090205490915060ff16600281600381111561216157612161612ad3565b03612180576004830154612176908390613003565b60048401556121e2565b600381600381111561219457612194612ad3565b036121b35760058301546121a9908390613003565b60058401556121e2565b60018160038111156121c7576121c7612ad3565b036121e25760038301546121dc908390613003565b60038401555b60028660038111156121f6576121f6612ad3565b0361221557600483015461220b908390613046565b6004840155612277565b600386600381111561222957612229612ad3565b0361224857600583015461223e908390613046565b6005840155612277565b600186600381111561225c5761225c612ad3565b03612277576003830154612271908390613046565b60038401555b6001600160a01b03851660009081526006840160205260409020805487919060ff191660018360038111156122ae576122ae612ad3565b0217905550846001600160a01b0316877fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679288856040516122ef929190613645565b60405180910390a3838015612308575061230887611fd0565b15612316576123168761231f565b50505050505050565b600081815261015f60205260409020805460ff19166001179055611aa661234e60c9546001600160a01b031690565b8261015f6000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b8282101561246a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916123d99061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546124059061308f565b80156124525780601f1061242757610100808354040283529160200191612452565b820191906000526020600020905b81548152906001019060200180831161243557829003601f168201915b50505050508152505081526020019060010190612386565b505050600086815261015f60205260409020600801549050612656565b60006001600160e01b031982167fda35c6640000000000000000000000000000000000000000000000000000000014806106a257506106a282612725565b6001600160a01b0381163b6125425760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612599836127c0565b6000825111806125a65750805b15611aa6576111e48383612800565b60006125bf611513565b9050610b9c61012d80546001019055565b600054610100900460ff1661264d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b61094c8161290b565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf324906126a590889088908890600401613660565b6000604051808303816000875af11580156126c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126ec9190810190613689565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061278857506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b806106a257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106a2565b6127c9816124c5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61287f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610847565b600080846001600160a01b03168460405161289a919061378f565b600060405180830381855af49150503d80600081146128d5576040519150601f19603f3d011682016040523d82523d6000602084013e6128da565b606091505b509150915061290282826040518060600160405280602781526020016137b5602791396129b7565b95945050505050565b600054610100900460ff166129885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610847565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606083156129c65750816107a6565b6107a683838151156129db5781518083602001fd5b8060405162461bcd60e51b815260040161084791906137a1565b600060208284031215612a0757600080fd5b81356001600160e01b0319811681146107a657600080fd5b600060208284031215612a3157600080fd5b5035919050565b600060a08284031215612a4a57600080fd5b50919050565b600060a08284031215612a6257600080fd5b6107a68383612a38565b6001600160a01b038116811461094c57600080fd5b803560048110612a9057600080fd5b919050565b600080600060608486031215612aaa57600080fd5b833592506020840135612abc81612a6c565b9150612aca60408501612a81565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b6003811061094c5761094c612ad3565b60208101612b0683612ae9565b91905290565b600060208284031215612b1e57600080fd5b81356107a681612a6c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b6857612b68612b29565b604052919050565b600067ffffffffffffffff821115612b8a57612b8a612b29565b50601f01601f191660200190565b60008060408385031215612bab57600080fd5b8235612bb681612a6c565b9150602083013567ffffffffffffffff811115612bd257600080fd5b8301601f81018513612be357600080fd5b8035612bf6612bf182612b70565b612b3f565b818152866020838501011115612c0b57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060408385031215612c3e57600080fd5b823591506020830135612c5081612a6c565b809150509250929050565b60048110612c6b57612c6b612ad3565b9052565b602081016106a28284612c5b565b60008083601f840112612c8f57600080fd5b50813567ffffffffffffffff811115612ca757600080fd5b6020830191508360208260051b8501011115612cc257600080fd5b9250929050565b67ffffffffffffffff8116811461094c57600080fd5b8035612a9081612cc9565b801515811461094c57600080fd5b8035612a9081612cea565b600080600080600080600080600060e08a8c031215612d2157600080fd5b893567ffffffffffffffff80821115612d3957600080fd5b818c0191508c601f830112612d4d57600080fd5b813581811115612d5c57600080fd5b8d6020828501011115612d6e57600080fd5b60209283019b509950908b01359080821115612d8957600080fd5b50612d968c828d01612c7d565b90985096505060408a01359450612daf60608b01612cdf565b9350612dbd60808b01612cdf565b9250612dcb60a08b01612a81565b9150612dd960c08b01612cf8565b90509295985092959850929598565b600080600060e08486031215612dfd57600080fd5b8335612e0881612a6c565b9250612e178560208601612a38565b915060c0840135612e2781612a6c565b809150509250925092565b60005b83811015612e4d578181015183820152602001612e35565b50506000910152565b60008151808452612e6e816020860160208601612e32565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612ef3578284038952815180516001600160a01b031685528581015186860152604090810151606091860182905290612edf81870183612e56565b9a87019a9550505090840190600101612ea0565b5091979650505050505050565b60006101a0881515835287151560208401528651612f1d81612ae9565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e0840152612f906101008401878051825260208082015190830152604090810151910152565b80610160840152612fa381840186612e82565b91505082610180830152979650505050505050565b600080600060608486031215612fcd57600080fd5b83359250612fdd60208501612a81565b91506040840135612e2781612cea565b634e487b7160e01b600052601160045260246000fd5b818103818111156106a2576106a2612fed565b80820281158282048414176106a2576106a2612fed565b60006020828403121561303f57600080fd5b5051919050565b808201808211156106a2576106a2612fed565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261308557600080fd5b9190910192915050565b600181811c908216806130a357607f821691505b602082108103612a4a57634e487b7160e01b600052602260045260246000fd5b601f821115611aa657600081815260208120601f850160051c810160208610156130ea5750805b601f850160051c820191505b818110156116c2578281556001016130f6565b813561311481612a6c565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261316257600080fd5b8501803567ffffffffffffffff81111561317b57600080fd5b803603848301131561318c57600080fd5b6131a08161319a855461308f565b856130c3565b6000601f8211600181146131d657600083156131be57508382018601355b600019600385901b1c1916600184901b17855561322f565b600085815260209020601f19841690835b82811015613206578685018901358255938801939089019088016131e7565b50848210156132255760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b8381526001600160a01b03831660208201526060810161325d6040830184612c5b565b949350505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526132c3608083018486613265565b979650505050505050565b6000602082840312156132e057600080fd5b81516107a681612cea565b63ffffffff8116811461094c57600080fd5b60006020828403121561330f57600080fd5b81356107a6816132eb565b60006020828403121561332c57600080fd5b81356107a681612cc9565b6003811061094c57600080fd5b600081356106a281612cc9565b813561335c81613337565b61336581612ae9565b815460ff821691508160ff1982161783556020840135613384816132eb565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000084161717845560408501356133c8816132eb565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000085161783171785555050505061345661341460608401613344565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b60006020828403121561347657600080fd5b81356107a681613337565b60a0810161348e87612ae9565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b600067ffffffffffffffff808a1683526020818a1681850152604060a0818601526134ec60a086018a8c613265565b606086820381880152818983528483019050848a60051b8401018b60005b8c8110156135ae57601f198684030184528135605e198f360301811261352f57600080fd5b8e01803561353c81612a6c565b6001600160a01b0316845280890135898501528781013536829003601e1901811261356657600080fd5b0188810190358a81111561357957600080fd5b80360382131561358857600080fd5b868986015261359a8786018284613265565b958a0195945050509087019060010161350a565b50508097505050505050505082608083015298975050505050505050565b67ffffffffffffffff818116838216019080821115611ecc57611ecc612fed565b634e487b7160e01b600052601260045260246000fd5b600082613612576136126135ed565b500690565b600082613626576136266135ed565b500490565b6000600019820361363e5761363e612fed565b5060010190565b604081016136538285612c5b565b8260208301529392505050565b8381526060602082015260006136796060830185612e82565b9050826040830152949350505050565b600080604080848603121561369d57600080fd5b835167ffffffffffffffff808211156136b557600080fd5b818601915086601f8301126136c957600080fd5b81516020828211156136dd576136dd612b29565b8160051b6136ec828201612b3f565b928352848101820192828101908b85111561370657600080fd5b83870192505b8483101561377b578251868111156137245760008081fd5b8701603f81018d136137365760008081fd5b84810151613746612bf182612b70565b8181528e8b83850101111561375b5760008081fd5b61376a828883018d8601612e32565b84525050918301919083019061370c565b9990920151989a9899505050505050505050565b60008251613085818460208701612e32565b6020815260006107a66020830184612e5656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f8873d6f74502f88659a0e37abcd7a3b81ee6a9676ff1a6ba770e81280f92ef764736f6c63430008110033\";\nconst isSuperArgs$H = (xs) => xs.length > 1;\nclass TokenVoting__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$H(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$P, _bytecode$H, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$P);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$P, signerOrProvider);\n    }\n}\nTokenVoting__factory.bytecode = _bytecode$H;\nTokenVoting__factory.abi = _abi$P;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$O = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n        ],\n        name: \"TokenNotContract\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n        ],\n        name: \"TokenNotERC20\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"length\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"WrongHelpersArrayLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"governanceERC20Base\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"governanceWrappedERC20Base\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$G = \"\";\nconst isSuperArgs$G = (xs) => xs.length > 1;\nclass TokenVotingSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$G(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$O, _bytecode$G, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$O);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$O, signerOrProvider);\n    }\n}\nTokenVotingSetup__factory.bytecode = _bytecode$G;\nTokenVotingSetup__factory.abi = _abi$O;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$t = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TokenVoting__factory: TokenVoting__factory,\n  TokenVotingSetup__factory: TokenVotingSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$N = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"voter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"votingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VoteCast\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"canVote\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVoteOption\",\n        outputs: [\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isMinParticipationReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReachedEarly\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minParticipation\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"supportThreshold\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"vote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IMajorityVoting__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$N);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$N, signerOrProvider);\n    }\n}\nIMajorityVoting__factory.abi = _abi$N;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$M = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"DateOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"MinDurationOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposalCreationForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecutionForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"limit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RatioOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"VoteCastForbidden\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"voter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"votingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VoteCast\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"votingMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"supportThreshold\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"minParticipation\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"minDuration\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"minProposerVotingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VotingSettingsUpdated\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_VOTING_SETTINGS_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"canVote\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_startDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_endDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"createProposal\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getProposal\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"open\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"executed\",\n                type: \"bool\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"startDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"endDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"snapshotBlock\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.ProposalParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"abstain\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"yes\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"no\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.Tally\",\n                name: \"tally\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVoteOption\",\n        outputs: [\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isMinParticipationReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReachedEarly\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minDuration\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minParticipation\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minProposerVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"supportThreshold\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"totalVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"updateVotingSettings\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"vote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"votingMode\",\n        outputs: [\n            {\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass MajorityVotingBase__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$M);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$M, signerOrProvider);\n    }\n}\nMajorityVotingBase__factory.abi = _abi$M;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$s = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addresslist: index$u,\n  token: index$t,\n  IMajorityVoting__factory: IMajorityVoting__factory,\n  MajorityVotingBase__factory: MajorityVotingBase__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$L = [\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"addAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"canApprove\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"hasApproved\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"removeAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IMultisig__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$L);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$L, signerOrProvider);\n    }\n}\nIMultisig__factory.abi = _abi$L;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$K = [\n    {\n        inputs: [\n            {\n                internalType: \"uint16\",\n                name: \"limit\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"AddresslistLengthOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ApprovalCastForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"DateOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"member\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidAddresslistUpdate\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint16\",\n                name: \"limit\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"actual\",\n                type: \"uint16\",\n            },\n        ],\n        name: \"MinApprovalsOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposalCreationForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecutionForbidden\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"approver\",\n                type: \"address\",\n            },\n        ],\n        name: \"Approved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersAdded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address[]\",\n                name: \"members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"MembersRemoved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"definingContract\",\n                type: \"address\",\n            },\n        ],\n        name: \"MembershipContractAnnounced\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"onlyListed\",\n                type: \"bool\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint16\",\n                name: \"minApprovals\",\n                type: \"uint16\",\n            },\n        ],\n        name: \"MultisigSettingsUpdated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_MULTISIG_SETTINGS_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"addAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"addresslistLength\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"addresslistLengthAtBlock\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"canApprove\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_allowFailureMap\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_approveProposal\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryExecution\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_startDate\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"_endDate\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"createProposal\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getProposal\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"executed\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"approvals\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint16\",\n                        name: \"minApprovals\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"snapshotBlock\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"startDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"endDate\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct Multisig.ProposalParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"hasApproved\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"onlyListed\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"minApprovals\",\n                        type: \"uint16\",\n                    },\n                ],\n                internalType: \"struct Multisig.MultisigSettings\",\n                name: \"_multisigSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isListed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isListedAtBlock\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isMember\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"lastMultisigSettingsChange\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"multisigSettings\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"onlyListed\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"minApprovals\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_members\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"removeAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"onlyListed\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"minApprovals\",\n                        type: \"uint16\",\n                    },\n                ],\n                internalType: \"struct Multisig.MultisigSettings\",\n                name: \"_multisigSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"updateMultisigSettings\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$F = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161356a620001206000396000818161081d015281816108b3015281816109ba01528181610a500152610b47015261356a6000f3fe6080604052600436106101b75760003560e01c8063747442d3116100ec578063c9c4bfca1161008a578063e097b3ff11610064578063e097b3ff14610535578063f794062e14610575578063fbd56e4114610595578063fe0d94c1146105b557600080fd5b8063c9c4bfca146104cc578063cc63604a14610500578063da35c6641461052057600080fd5b8063a84eb999116100c6578063a84eb99914610420578063b1bb8d2614610440578063bc20830214610460578063c7f758a81461049b57600080fd5b8063747442d3146103c057806383985259146103e0578063a230c5241461040057600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461036357806352d1902d146103765780635c60da1b1461038b5780636a6b2d86146103a057600080fd5b80633659cfe6146102f55780634162169f1461031557806341de68301461034757600080fd5b806329245f561161019557806329245f561461025f5780632caf024b1461027f578063303f4336146102b35780633628731c146102d557600080fd5b806301ffc9a7146101bc5780632358d5a8146101f157806327f1608d1461023c575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612909565b6105d5565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101dc61020c366004612948565b6000828152610191602090815260408083206001600160a01b038516845260020190915290205460ff1692915050565b34801561024857600080fd5b506102516106b5565b6040519081526020016101e8565b34801561026b57600080fd5b506101dc61027a366004612948565b6106d0565b34801561028b57600080fd5b506102517fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad81565b3480156102bf57600080fd5b506102d36102ce366004612990565b6106e3565b005b3480156102e157600080fd5b506102d36102f03660046129f1565b61072e565b34801561030157600080fd5b506102d3610310366004612a33565b610813565b34801561032157600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561035357600080fd5b5060006040516101e89190612a50565b6102d3610371366004612ae7565b6109b0565b34801561038257600080fd5b50610251610b3a565b34801561039757600080fd5b5061032f610c00565b3480156103ac57600080fd5b506102516103bb366004612b7a565b610c38565b3480156103cc57600080fd5b506102d36103db366004612bb1565b610c46565b3480156103ec57600080fd5b506102d36103fb366004612bd6565b610d59565b34801561040c57600080fd5b506101dc61041b366004612a33565b610f11565b34801561042c57600080fd5b506102d361043b3660046129f1565b610f1c565b34801561044c57600080fd5b506101dc61045b366004612c3e565b61100b565b34801561046c57600080fd5b50610193546104829067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e8565b3480156104a757600080fd5b506104bb6104b6366004612b7a565b611038565b6040516101e8959493929190612d38565b3480156104d857600080fd5b506102517f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561050c57600080fd5b506101dc61051b366004612b7a565b6111ef565b34801561052c57600080fd5b506102516111fa565b34801561054157600080fd5b506101925461055b9060ff811690610100900461ffff1682565b60408051921515835261ffff9091166020830152016101e8565b34801561058157600080fd5b506101dc610590366004612a33565b611206565b3480156105a157600080fd5b506102516105b0366004612dc4565b61123b565b3480156105c157600080fd5b506102d36105d0366004612b7a565b611596565b60006001600160e01b031982167f8f85278600000000000000000000000000000000000000000000000000000000148061063857506001600160e01b031982167fd200f62300000000000000000000000000000000000000000000000000000000145b8061066c57506001600160e01b031982167f0bb5c60300000000000000000000000000000000000000000000000000000000145b806106a057506001600160e01b031982167fa230c52400000000000000000000000000000000000000000000000000000000145b806106af57506106af826115e1565b92915050565b60006106c261016061161f565b6001600160e01b0316905090565b60006106dc8383611667565b9392505050565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610721906001600160a01b031630335b846000366116f2565b61072a826117e0565b5050565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610767906001600160a01b03163033610718565b6000826107726106b5565b61077c9190612ebf565b905061ffff8111156107ca576040517f125ae34000000000000000000000000000000000000000000000000000000000815261ffff6004820152602481018290526044015b60405180910390fd5b6107d48484611937565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d88484604051610805929190612ed2565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108b15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661090c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109885760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107c1565b61099181611a40565b604080516000808252602082019092526109ad91839190611a79565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a4e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aa97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610b255760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107c1565b610b2e82611a40565b61072a82826001611a79565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bda5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107c1565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b6000610c337f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60006106af61016083611c1e565b33610c518382611667565b610c99576040517f37eda872000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821660248201526044016107c1565b60008381526101916020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff811660016101009283900461ffff9081168201169092021782556001600160a01b03861680865260028301909452828520805460ff191690911790559051909286917f7b39c92a7e1a86e846edaeff6eba715a046352c596794c2a374269c126a997689190a3828015610d455750610d4584611cd1565b15610d5357610d5384611d14565b50505050565b600054610100900460ff1615808015610d795750600054600160ff909116105b80610d935750303b158015610d93575060005460ff166001145b610e055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c1565b6000805460ff191660011790558015610e28576000805461ff0019166101001790555b610e3185611e7c565b61ffff831115610e78576040517f125ae34000000000000000000000000000000000000000000000000000000000815261ffff6004820152602481018490526044016107c1565b610e828484611937565b7f11ba20e083ffba533caf1d501ce171aa2acdc05a5601e4e473e449460b0718d88484604051610eb3929190612ed2565b60405180910390a1610ec4826117e0565b8015610f0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006106af82611206565b60c9547fb1750e46d35a0069c8465b8643e7838d2149a842a2db8ee233d9835590040cad90610f55906001600160a01b03163033610718565b600082610f606106b5565b610f6a9190612f20565b6101925490915061ffff61010090910481169082161015610fd057610192546040517f2f621d5a00000000000000000000000000000000000000000000000000000000815261ffff808416600483015261010090920490911660248201526044016107c1565b610fda8484611f02565b7f0ba413f7646035cae0a4ee999d676078fc8a763d1a36a8ef25e4c10f67d8615d8484604051610805929190612ed2565b6001600160a01b038216600090815261015f6020526040812061102e9083611c1e565b6001149392505050565b60408051608080820183526000808352602080840182905283850182905260609384018290528582526101918152848220805486519485018752600182015461ffff808216875267ffffffffffffffff6201000083048116888701526a010000000000000000000083048116888b0152720100000000000000000000000000000000000090920490911686880152600383018054895181870281018701909a52808a5260ff841699610100909404909216979594909190859084015b828210156111d8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161114790612f33565b80601f016020809104026020016040519081016040528092919081815260200182805461117390612f33565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081525050815260200190600101906110f4565b505050509250806004015491505091939590929450565b60006106af82611cd1565b6000610c3361012d5490565b6001600160a01b038116600090815261015f602052604081206112289061161f565b6001600160e01b03166001149050919050565b600080600161124943611f6e565b6112539190612f67565b6101935490915067ffffffffffffffff808316911611156112ae57335b6040517feab993440000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107c1565b6101925460ff1680156112d257506112d0338267ffffffffffffffff1661100b565b155b156112dd5733611270565b8367ffffffffffffffff166000036112ff576112f842611f6e565b9350611373565b61130842611f6e565b67ffffffffffffffff168467ffffffffffffffff1610156113735761132c42611f6e565b6040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff918216600482015290851660248201526044016107c1565b8367ffffffffffffffff168367ffffffffffffffff1610156113d5576040517f4cc9c0f400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8086166004830152841660248201526044016107c1565b6113e5338c8c87878e8e8e611ff2565b6000818152610191602052604090206001810180547fffffffffffffffffffffffffffff00000000000000000000000000000000ffff166201000067ffffffffffffffff868116919091027fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff16919091176a010000000000000000000089831602177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff8116720100000000000000000000000000000000000092891692909202918217835561019254610100900461ffff167fffffffffffff0000000000000000ffffffffffffffffffffffffffffffff00009091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090921691909117179055909250871561151757600481018890555b60005b8981101561157657816003018b8b8381811061153857611538612f8f565b905060200281019061154a9190612fa5565b81546001810183556000928352602090922090916003020161156c828261300b565b505060010161151a565b508615611587576115878387610c46565b50509998505050505050505050565b61159f81611cd1565b6115d8576040517f9fefd0f1000000000000000000000000000000000000000000000000000000008152600481018290526024016107c1565b6109ad81611d14565b60006001600160e01b031982167fda35c6640000000000000000000000000000000000000000000000000000000014806106af57506106af82612058565b8054600090801561165e5761164783611639600184612f20565b600091825260209091200190565b5464010000000090046001600160e01b03166106dc565b60009392505050565b60008281526101916020526040812061167f816120f3565b61168d5760009150506106af565b60018101546116ad90849062010000900467ffffffffffffffff1661100b565b6116bb5760009150506106af565b6001600160a01b038316600090815260028201602052604090205460ff16156116e85760009150506106af565b5060019392505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069061173f9088908890889088908890600401613167565b602060405180830381865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178091906131a5565b6117d8576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016107c1565b505050505050565b60006117ea6106b5565b905061ffff811661180160408401602085016131d2565b61ffff16111561185c578061181c60408401602085016131d2565b6040517f2f621d5a00000000000000000000000000000000000000000000000000000000815261ffff9283166004820152911660248201526044016107c1565b600161186e60408401602085016131d2565b61ffff16101561188a57600161181c60408401602085016131d2565b8161019261189882826131ef565b9050506118a443611f6e565b61019380547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556118ee60408301602084016131d2565b61ffff167f7d8a9a57630acbcfb28eb55b1ce0ff7b3d0dc9edea594075a8a6af35278a4cf96119206020850185613252565b604051901515815260200160405180910390a25050565b60005b81811015611a305761196c83838381811061195757611957612f8f565b90506020020160208101906105909190612a33565b156119d65782828281811061198357611983612f8f565b90506020020160208101906119989190612a33565b6040517fc0b7477d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107c1565b611a26600161015f60008686868181106119f2576119f2612f8f565b9050602002016020810190611a079190612a33565b6001600160a01b0316815260208101919091526040016000209061216c565b505060010161193a565b50610d536101606121a2836121a6565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59061072a906001600160a01b03163033610718565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ab157611aac836121de565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b0b575060408051601f3d908101601f19168201909252611b089181019061326f565b60015b611b7d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016107c1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611c125760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016107c1565b50611aac8383836122a9565b6000438210611c6f5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016107c1565b6000611c7a836122ce565b84549091506000611c8d8684838561234a565b90508015611cbb57611ca486611639600184612f20565b5464010000000090046001600160e01b0316611cbe565b60005b6001600160e01b03169695505050505050565b600081815261019160205260408120611ce9816120f3565b611cf65750600092915050565b6001810154905461ffff918216610100909104909116101592915050565b600081815261019160205260409020805460ff19166001178155610d53611d4360c9546001600160a01b031690565b836101916000868152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b82821015611e5f576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191611dce90612f33565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa90612f33565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b50505050508152505081526020019060010190611d7b565b5050506000878152610191602052604090206004015490506123a8565b600054610100900460ff16611ef95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b6109ad81612477565b60005b81811015611f5e57611f2283838381811061195757611957612f8f565b611f385782828281811061198357611983612f8f565b611f54600061015f60008686868181106119f2576119f2612f8f565b5050600101611f05565b50610d53610160612523836121a6565b600067ffffffffffffffff821115611fee5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016107c1565b5090565b6000611ffc612528565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516120449796959493929190613288565b60405180910390a398975050505050505050565b60006001600160e01b031982167f41de68300000000000000000000000000000000000000000000000000000000014806120bb57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b806106af57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106af565b6000806120ff42611f6e565b835490915060ff161580156121335750600183015467ffffffffffffffff8083166a01000000000000000000009092041611155b80156106dc5750600183015467ffffffffffffffff80831672010000000000000000000000000000000000009092041610159392505050565b60008061218a8461217c436122ce565b61218586612543565b6125c2565b6001600160e01b0391821693501690505b9250929050565b0190565b6000806121d1856121cc6121b98861161f565b6001600160e01b0316868863ffffffff16565b61216c565b915091505b935093915050565b6001600160a01b0381163b61225b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107c1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6122b283612765565b6000825111806122bf5750805b15611aac57610d5383836127a5565b600063ffffffff821115611fee5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016107c1565b60005b818310156123a057600061236184846128b0565b60008781526020902090915063ffffffff86169082015463ffffffff16111561238c5780925061239a565b612397816001612ebf565b93505b5061234d565b509392505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf324906123f790889088908890600401613397565b6000604051808303816000875af1158015612416573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261243e91908101906133c0565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166124f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b900390565b60006125326111fa565b9050610bfd61012d80546001019055565b60006001600160e01b03821115611fee5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016107c1565b82546000908190801561270b5760006125e087611639600185612f20565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b0316602084015291925090871610156126625760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016107c1565b805163ffffffff8088169116036126ab578461268388611639600186612f20565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556126fb565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506121d69050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816121d6565b61276e816121de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107c1565b600080846001600160a01b03168460405161283f91906134c6565b600060405180830381855af49150503d806000811461287a576040519150601f19603f3d011682016040523d82523d6000602084013e61287f565b606091505b50915091506128a7828260405180606001604052806027815260200161350e602791396128cb565b95945050505050565b60006128bf60028484186134d8565b6106dc90848416612ebf565b606083156128da5750816106dc565b6106dc83838151156128ef5781518083602001fd5b8060405162461bcd60e51b81526004016107c191906134fa565b60006020828403121561291b57600080fd5b81356001600160e01b0319811681146106dc57600080fd5b6001600160a01b03811681146109ad57600080fd5b6000806040838503121561295b57600080fd5b82359150602083013561296d81612933565b809150509250929050565b60006040828403121561298a57600080fd5b50919050565b6000604082840312156129a257600080fd5b6106dc8383612978565b60008083601f8401126129be57600080fd5b50813567ffffffffffffffff8111156129d657600080fd5b6020830191508360208260051b850101111561219b57600080fd5b60008060208385031215612a0457600080fd5b823567ffffffffffffffff811115612a1b57600080fd5b612a27858286016129ac565b90969095509350505050565b600060208284031215612a4557600080fd5b81356106dc81612933565b6020810160038310612a7257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ab757612ab7612a78565b604052919050565b600067ffffffffffffffff821115612ad957612ad9612a78565b50601f01601f191660200190565b60008060408385031215612afa57600080fd5b8235612b0581612933565b9150602083013567ffffffffffffffff811115612b2157600080fd5b8301601f81018513612b3257600080fd5b8035612b45612b4082612abf565b612a8e565b818152866020838501011115612b5a57600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060208284031215612b8c57600080fd5b5035919050565b80151581146109ad57600080fd5b8035612bac81612b93565b919050565b60008060408385031215612bc457600080fd5b82359150602083013561296d81612b93565b60008060008060808587031215612bec57600080fd5b8435612bf781612933565b9350602085013567ffffffffffffffff811115612c1357600080fd5b612c1f878288016129ac565b9094509250612c3390508660408701612978565b905092959194509250565b60008060408385031215612c5157600080fd5b8235612c5c81612933565b946020939093013593505050565b60005b83811015612c85578181015183820152602001612c6d565b50506000910152565b60008151808452612ca6816020860160208601612c6a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612d2b578284038952815180516001600160a01b031685528581015186860152604090810151606091860182905290612d1781870183612c8e565b9a87019a9550505090840190600101612cd8565b5091979650505050505050565b6000610100871515835261ffff808816602085015280875116604085015250602086015167ffffffffffffffff80821660608601528060408901511660808601528060608901511660a086015250508060c0840152612d9981840186612cba565b9150508260e08301529695505050505050565b803567ffffffffffffffff81168114612bac57600080fd5b600080600080600080600080600060e08a8c031215612de257600080fd5b893567ffffffffffffffff80821115612dfa57600080fd5b818c0191508c601f830112612e0e57600080fd5b813581811115612e1d57600080fd5b8d6020828501011115612e2f57600080fd5b60209283019b509950908b01359080821115612e4a57600080fd5b50612e578c828d016129ac565b90985096505060408a01359450612e7060608b01612ba1565b9350612e7e60808b01612ba1565b9250612e8c60a08b01612dac565b9150612e9a60c08b01612dac565b90509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b808201808211156106af576106af612ea9565b60208082528181018390526000908460408401835b86811015612f15578235612efa81612933565b6001600160a01b031682529183019190830190600101612ee7565b509695505050505050565b818103818111156106af576106af612ea9565b600181811c90821680612f4757607f821691505b60208210810361298a57634e487b7160e01b600052602260045260246000fd5b67ffffffffffffffff828116828216039080821115612f8857612f88612ea9565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112612fbb57600080fd5b9190910192915050565b601f821115611aac57600081815260208120601f850160051c81016020861015612fec5750805b601f850160051c820191505b818110156117d857828155600101612ff8565b813561301681612933565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600160208084013582840155600283016040850135601e1986360301811261306457600080fd5b8501803567ffffffffffffffff81111561307d57600080fd5b803603848301131561308e57600080fd5b6130a28161309c8554612f33565b85612fc5565b6000601f8211600181146130d857600083156130c057508382018601355b600019600385901b1c1916600184901b178555613131565b600085815260209020601f19841690835b82811015613108578685018901358255938801939089019088016130e9565b50848210156131275760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261319a60808301848661313c565b979650505050505050565b6000602082840312156131b757600080fd5b81516106dc81612b93565b61ffff811681146109ad57600080fd5b6000602082840312156131e457600080fd5b81356106dc816131c2565b81356131fa81612b93565b815460ff19811691151560ff169182178355602084013561321a816131c2565b62ffff008160081b16837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008416171784555050505050565b60006020828403121561326457600080fd5b81356106dc81612b93565b60006020828403121561328157600080fd5b5051919050565b600067ffffffffffffffff808a1683526020818a1681850152604060a0818601526132b760a086018a8c61313c565b606086820381880152818983528483019050848a60051b8401018b60005b8c81101561337957601f198684030184528135605e198f36030181126132fa57600080fd5b8e01803561330781612933565b6001600160a01b0316845280890135898501528781013536829003601e1901811261333157600080fd5b0188810190358a81111561334457600080fd5b80360382131561335357600080fd5b8689860152613365878601828461313c565b958a019594505050908701906001016132d5565b50508097505050505050505082608083015298975050505050505050565b8381526060602082015260006133b06060830185612cba565b9050826040830152949350505050565b60008060408084860312156133d457600080fd5b835167ffffffffffffffff808211156133ec57600080fd5b818601915086601f83011261340057600080fd5b815160208282111561341457613414612a78565b8160051b613423828201612a8e565b928352848101820192828101908b85111561343d57600080fd5b83870192505b848310156134b25782518681111561345b5760008081fd5b8701603f81018d1361346d5760008081fd5b8481015161347d612b4082612abf565b8181528e8b8385010111156134925760008081fd5b6134a1828883018d8601612c6a565b845250509183019190830190613443565b9990920151989a9899505050505050505050565b60008251612fbb818460208701612c6a565b6000826134f557634e487b7160e01b600052601260045260246000fd5b500490565b6020815260006106dc6020830184612c8e56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa224dc426ff8ba829bf55fe9cee44047fb2db64dbd39957239d52693c9d982964736f6c63430008110033\";\nconst isSuperArgs$F = (xs) => xs.length > 1;\nclass Multisig__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$F(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$K, _bytecode$F, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$K);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$K, signerOrProvider);\n    }\n}\nMultisig__factory.bytecode = _bytecode$F;\nMultisig__factory.abi = _abi$K;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$J = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$E = \"\";\nconst isSuperArgs$E = (xs) => xs.length > 1;\nclass MultisigSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$E(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$J, _bytecode$E, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$J);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$J, signerOrProvider);\n    }\n}\nMultisigSetup__factory.bytecode = _bytecode$E;\nMultisigSetup__factory.abi = _abi$J;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$r = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IMultisig__factory: IMultisig__factory,\n  Multisig__factory: Multisig__factory,\n  MultisigSetup__factory: MultisigSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$q = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  admin: index$v,\n  majorityVoting: index$s,\n  multisig: index$r\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$I = [\n    {\n        inputs: [],\n        name: \"PlaceholderSetupCannotBeUsed\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$D = \"0x608060405234801561001057600080fd5b50610671806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100a3578063a8a9c29e146100c3578063f10832f1146100e457600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a36600461024a565b610105565b60405190151581526020015b60405180910390f35b6040516000815260200161008b565b6100b66100b13660046102d4565b61019e565b60405161008b91906103ae565b6100d66100d13660046103f7565b6101d2565b60405161008b9291906104fe565b6100f76100f2366004610581565b6101f9565b60405161008b929190610604565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b5000000000000000000000000000000000000000000000000000000000148061019857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606101f1604051806040016040528060608152602001606081525090565b935093915050565b6000610218604051806040016040528060608152602001606081525090565b6040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561025c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461028c57600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b757600080fd5b919050565b6000606082840312156102ce57600080fd5b50919050565b600080604083850312156102e757600080fd5b6102f083610293565b9150602083013567ffffffffffffffff81111561030c57600080fd5b610318858286016102bc565b9150509250929050565b600081516003811061035d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83525060208181015173ffffffffffffffffffffffffffffffffffffffff90811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156103eb576103dd838551610322565b9385019392506001016103ca565b50909695505050505050565b60008060006060848603121561040c57600080fd5b61041584610293565b9250602084013561ffff8116811461042c57600080fd5b9150604084013567ffffffffffffffff81111561044857600080fd5b610454868287016102bc565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156104b057835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161047e565b50508483015186820387850152805180835290840192506000918401905b808310156104f3576104e1828551610322565b915084840193506001830192506104ce565b509695505050505050565b604081526000835180604084015260005b8181101561052c576020818701810151606086840101520161050f565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830190506060838203016020840152610578606082018561045e565b95945050505050565b60008060006040848603121561059657600080fd5b61059f84610293565b9250602084013567ffffffffffffffff808211156105bc57600080fd5b818601915086601f8301126105d057600080fd5b8135818111156105df57600080fd5b8760208285010111156105f157600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610633604083018461045e565b94935050505056fea26469706673582212209e5aa47002642e3fc226cbcbdbcaae5cce4aaf6cced5eb357df52ed883460b6d64736f6c63430008110033\";\nconst isSuperArgs$D = (xs) => xs.length > 1;\nclass PlaceholderSetup__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$D(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$I, _bytecode$D, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$I);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$I, signerOrProvider);\n    }\n}\nPlaceholderSetup__factory.bytecode = _bytecode$D;\nPlaceholderSetup__factory.abi = _abi$I;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$p = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PlaceholderSetup__factory: PlaceholderSetup__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$H = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Claimed\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"claim\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isClaimed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"merkleRoot\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token\",\n        outputs: [\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"unclaimedBalance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IMerkleDistributor__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$H);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$H, signerOrProvider);\n    }\n}\nIMerkleDistributor__factory.abi = _abi$H;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$G = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"distributor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"merkleRoot\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"tree\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"context\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"MerkleMinted\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"_distributorBase\",\n                type: \"address\",\n            },\n        ],\n        name: \"changeDistributorBase\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"distributorBase\",\n        outputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_merkleRoot\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_totalAmount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_tree\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_context\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"merkleMint\",\n        outputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"distributor\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token\",\n        outputs: [\n            {\n                internalType: \"contract IERC20MintableUpgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IMerkleMinter__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$G);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$G, signerOrProvider);\n    }\n}\nIMerkleMinter__factory.abi = _abi$G;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$F = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TokenAlreadyClaimed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TokenClaimInvalid\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Claimed\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"claim\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_merkleRoot\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isClaimed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"merkleRoot\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token\",\n        outputs: [\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"unclaimedBalance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$C = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611b4261011960003960008181610466015281816104fc015281816106030152818161069901526107940152611b426000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780636133f985116100595780636133f985146102295780639e34070f14610249578063c9c4bfca14610269578063fc0c546a1461029d57600080fd5b806352d1902d146101df57806358beca34146101f45780635c60da1b1461021457600080fd5b80633659cfe6116100bb5780633659cfe61461015e5780634162169f1461017e57806341de6830146101b05780634f1ef286146101cc57600080fd5b806301ffc9a7146100e25780632e7ba6ef146101175780632eb4a7ab14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046115ff565b6102be565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b50610137610132366004611656565b61031a565b005b34801561014557600080fd5b5061015061012e5481565b60405190815260200161010e565b34801561016a57600080fd5b506101376101793660046116ef565b61045c565b34801561018a57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101bc57600080fd5b50600060405161010e919061170c565b6101376101da36600461177b565b6105f9565b3480156101eb57600080fd5b50610150610787565b34801561020057600080fd5b5061015061020f366004611823565b61084c565b34801561022057600080fd5b50610198610888565b34801561023557600080fd5b506101376102443660046118ef565b6108c0565b34801561025557600080fd5b50610102610264366004611930565b610a31565b34801561027557600080fd5b506101507f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102a957600080fd5b5061012d54610198906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3a499815000000000000000000000000000000000000000000000000000000001480610314575061031482610a73565b92915050565b61032385610a31565b15610362576040517f35c500ed000000000000000000000000000000000000000000000000000000008152600481018690526024015b60405180910390fd5b6103a1858585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b5692505050565b6103f0576040517f8fbd3f25000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038516602482015260448101849052606401610359565b6103f985610bd4565b61012d54610411906001600160a01b03168585610c13565b836001600160a01b0316857f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0268560405161044d91815260200190565b60405180910390a35050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104fa5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105d15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610359565b6105da81610c98565b604080516000808252602082019092526105f691839190610cd5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106975760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106f27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461076e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610359565b61077782610c98565b61078382826001610cd5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108275760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610359565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061085785610a31565b1561086457506000610880565b61087085858585610b56565b61087b57600061087d565b825b90505b949350505050565b60006108bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156108e05750600054600160ff909116105b806108fa5750303b1580156108fa575060005460ff166001145b61096c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610359565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156109ad576000805461ff0019166101001790555b6109b684610e75565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905561012e8290558015610a2b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600080610a406101008461195f565b90506000610a5061010085611973565b600092835261012f602052604090922054600190921b9182169091149392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de6830000000000000000000000000000000000000000000000000000000001480610b0657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061031457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610314565b600080858585604051602001610ba49392919092835260609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166020830152603482015260540190565b604051602081830303815290604052805190602001209050610bca8361012e5483610efb565b9695505050505050565b6000610be26101008361195f565b90506000610bf261010084611973565b600092835261012f60205260409092208054600190931b9092179091555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c93908490610f13565b505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610783906001600160a01b0316303384600036610ff8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d0857610c93836110e6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d62575060408051601f3d908101601f19168201909252610d5f91810190611987565b60015b610dd45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610359565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610e695760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610359565b50610c938383836111b1565b600054610100900460ff16610ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610359565b6105f6816111d6565b600082610f088584611282565b1490505b9392505050565b6000610f68826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112cf9092919063ffffffff16565b805190915015610c935780806020019051810190610f8691906119a0565b610c935760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610359565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069061104590889088908890889088906004016119c2565b602060405180830381865afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906119a0565b6110de576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610359565b505050505050565b6001600160a01b0381163b6111635760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610359565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6111ba836112de565b6000825111806111c75750805b15610c9357610a2b838361131e565b600054610100900460ff166112535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610359565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600081815b84518110156112c7576112b3828683815181106112a6576112a6611a16565b6020026020010151611429565b9150806112bf81611a2c565b915050611287565b509392505050565b60606108808484600085611455565b6112e7816110e6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61139d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610359565b600080846001600160a01b0316846040516113b89190611a96565b600060405180830381855af49150503d80600081146113f3576040519150601f19603f3d011682016040523d82523d6000602084013e6113f8565b606091505b50915091506114208282604051806060016040528060278152602001611ae660279139611547565b95945050505050565b6000818310611445576000828152602084905260409020610f0c565b5060009182526020526040902090565b6060824710156114cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610359565b600080866001600160a01b031685876040516114e99190611a96565b60006040518083038185875af1925050503d8060008114611526576040519150601f19603f3d011682016040523d82523d6000602084013e61152b565b606091505b509150915061153c87838387611560565b979650505050505050565b60608315611556575081610f0c565b610f0c83836115d5565b606083156115cf5782516000036115c8576001600160a01b0385163b6115c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610359565b5081610880565b61088083835b8151156115e55781518083602001fd5b8060405162461bcd60e51b81526004016103599190611ab2565b60006020828403121561161157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f0c57600080fd5b6001600160a01b03811681146105f657600080fd5b60008060008060006080868803121561166e57600080fd5b85359450602086013561168081611641565b935060408601359250606086013567ffffffffffffffff808211156116a457600080fd5b818801915088601f8301126116b857600080fd5b8135818111156116c757600080fd5b8960208260051b85010111156116dc57600080fd5b9699959850939650602001949392505050565b60006020828403121561170157600080fd5b8135610f0c81611641565b602081016003831061172e57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561177357611773611734565b604052919050565b6000806040838503121561178e57600080fd5b823561179981611641565b915060208381013567ffffffffffffffff808211156117b757600080fd5b818601915086601f8301126117cb57600080fd5b8135818111156117dd576117dd611734565b6117ef84601f19601f8401160161174a565b9150808252878482850101111561180557600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806080858703121561183957600080fd5b8435935060208086013561184c81611641565b935060408601359250606086013567ffffffffffffffff8082111561187057600080fd5b818801915088601f83011261188457600080fd5b81358181111561189657611896611734565b8060051b91506118a784830161174a565b818152918301840191848101908b8411156118c157600080fd5b938501935b838510156118df578435825293850193908501906118c6565b989b979a50959850505050505050565b60008060006060848603121561190457600080fd5b833561190f81611641565b9250602084013561191f81611641565b929592945050506040919091013590565b60006020828403121561194257600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b60008261196e5761196e611949565b500490565b60008261198257611982611949565b500690565b60006020828403121561199957600080fd5b5051919050565b6000602082840312156119b257600080fd5b81518015158114610f0c57600080fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a6b57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015611a8d578181015183820152602001611a75565b50506000910152565b60008251611aa8818460208701611a72565b9190910192915050565b6020815260008251806020840152611ad1816040850160208701611a72565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f1e7e1ef06609ed8e5907fe67f84e5aa4ad7ee86889ab36abf57b508d78f9cd364736f6c63430008110033\";\nconst isSuperArgs$C = (xs) => xs.length > 1;\nclass MerkleDistributor__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$C(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$F, _bytecode$C, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$F);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$F, signerOrProvider);\n    }\n}\nMerkleDistributor__factory.bytecode = _bytecode$C;\nMerkleDistributor__factory.abi = _abi$F;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$E = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"distributor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"merkleRoot\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"tree\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"context\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"MerkleMinted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"CHANGE_DISTRIBUTOR_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MERKLE_MINT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"_distributorBase\",\n                type: \"address\",\n            },\n        ],\n        name: \"changeDistributorBase\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"distributorBase\",\n        outputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20MintableUpgradeable\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"_distributorBase\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_merkleRoot\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_totalAmount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_tree\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_context\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"merkleMint\",\n        outputs: [\n            {\n                internalType: \"contract IMerkleDistributor\",\n                name: \"distributor\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token\",\n        outputs: [\n            {\n                internalType: \"contract IERC20MintableUpgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$B = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612062610119600039600081816103ca01528181610466015281816105740152818161060c015261070e01526120626000f3fe608060405260043610620000fb5760003560e01c80635c60da1b1162000095578063c9c4bfca1162000060578063c9c4bfca14620002c0578063d3feb83014620002f6578063ec8528f9146200031b578063fc0c546a146200033e57600080fd5b80635c60da1b146200022857806379708a6b1462000240578063c0c53b8b1462000276578063c97b8903146200029b57600080fd5b80634162169f11620000d65780634162169f14620001a657806341de683014620001da5780634f1ef28614620001f957806352d1902d146200021057600080fd5b806301ffc9a7146200010057806304e56116146200013a5780633659cfe6146200017f575b600080fd5b3480156200010d57600080fd5b50620001256200011f366004620013dc565b62000361565b60405190151581526020015b60405180910390f35b3480156200014757600080fd5b50620001707f41f49f8a4bf63d8f5630a1a87118692c5e9c20298af5f644b801ec1cadb6263081565b60405190815260200162000131565b3480156200018c57600080fd5b50620001a46200019e36600462001436565b620003c0565b005b348015620001b357600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200162000131565b348015620001e757600080fd5b50600060405162000131919062001456565b620001a46200020a366004620014c7565b6200056a565b3480156200021d57600080fd5b506200017062000701565b3480156200023557600080fd5b50620001c1620007c8565b3480156200024d57600080fd5b50620001707fd3a9da86ba539ea5147566d228763cc88a4062e19bf6dfe0e702a700041c790681565b3480156200028357600080fd5b50620001a46200029536600462001597565b62000801565b348015620002a857600080fd5b50620001a4620002ba36600462001436565b6200098b565b348015620002cd57600080fd5b50620001707f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156200030357600080fd5b50620001c16200031536600462001635565b620009fc565b3480156200032857600080fd5b5061012e54620001c1906001600160a01b031681565b3480156200034b57600080fd5b5061012d54620001c1906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f0a0c4da0000000000000000000000000000000000000000000000000000000001480620003ba5750620003ba8262000bec565b92915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620004645760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620004c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146200053e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016200045b565b620005498162000cd2565b60408051600080825260208201909252620005679183919062000d0d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036200060a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016200045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620006667f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614620006e45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016200045b565b620006ef8262000cd2565b620006fd8282600162000d0d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007a35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016200045b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000620007fc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff1615808015620008225750600054600160ff909116105b806200083e5750303b1580156200083e575060005460ff166001145b620008b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016200045b565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015620008f4576000805461ff0019166101001790555b620008ff8462000ebe565b61012d80546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff199283161790925561012e805492851692909116919091179055801562000985576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60c9547fd3a9da86ba539ea5147566d228763cc88a4062e19bf6dfe0e702a700041c790690620009cb906001600160a01b031630335b8460003662000f48565b5061012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60c9546000907f41f49f8a4bf63d8f5630a1a87118692c5e9c20298af5f644b801ec1cadb626309062000a3a906001600160a01b03163033620009c1565b61012e5460009062000b10906001600160a01b03167f6133f9850000000000000000000000000000000000000000000000000000000062000a8360c9546001600160a01b031690565b61012d546040516001600160a01b03928316602482015291166044820152606481018d905260840160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200103d565b61012d546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152602482018c90529293509116906340c10f1990604401600060405180830381600087803b15801562000b7b57600080fd5b505af115801562000b90573d6000803e3d6000fd5b5050505088816001600160a01b03167fd1fa72dcd8da0c53cf180de7043b2742dfda59fc1514e739a747b096eacbef578a8a8a8a8a60405162000bd8959493929190620016ea565b60405180910390a398975050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148062000c8057507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b80620003ba57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614620003ba565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590620006fd906001600160a01b03163033620009c1565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000d485762000d438362001081565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000da5575060408051601f3d908101601f1916820190925262000da29181019062001727565b60015b62000e195760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016200045b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811462000eb05760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016200045b565b5062000d438383836200114e565b600054610100900460ff1662000f3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200045b565b620005678162001179565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef91069062000f97908890889088908890889060040162001741565b602060405180830381865afa15801562000fb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fdb919062001781565b62001035576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016200045b565b505050505050565b600082826040516200104f90620013ce565b6200105c929190620017f9565b604051809103906000f08015801562001079573d6000803e3d6000fd5b509392505050565b6001600160a01b0381163b620011005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016200045b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620011598362001227565b600082511180620011675750805b1562000d435762000985838362001269565b600054610100900460ff16620011f85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200045b565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620012328162001081565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620012ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016200045b565b600080846001600160a01b03168460405162001307919062001825565b600060405180830381855af49150503d806000811462001344576040519150601f19603f3d011682016040523d82523d6000602084013e62001349565b606091505b509150915062001374828260405180606001604052806027815260200162002006602791396200137d565b95945050505050565b606083156200138e5750816200139a565b6200139a8383620013a1565b9392505050565b815115620013b25781518083602001fd5b8060405162461bcd60e51b81526004016200045b919062001843565b6107ad806200185983390190565b600060208284031215620013ef57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200139a57600080fd5b6001600160a01b03811681146200056757600080fd5b6000602082840312156200144957600080fd5b81356200139a8162001420565b602081016003831062001492577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215620014db57600080fd5b8235620014e88162001420565b9150602083013567ffffffffffffffff808211156200150657600080fd5b818501915085601f8301126200151b57600080fd5b81358181111562001530576200153062001498565b604051601f8201601f19908116603f011681019083821181831017156200155b576200155b62001498565b816040528281528860208487010111156200157557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600060608486031215620015ad57600080fd5b8335620015ba8162001420565b92506020840135620015cc8162001420565b91506040840135620015de8162001420565b809150509250925092565b60008083601f840112620015fc57600080fd5b50813567ffffffffffffffff8111156200161557600080fd5b6020830191508360208285010111156200162e57600080fd5b9250929050565b600080600080600080608087890312156200164f57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156200167657600080fd5b620016848a838b01620015e9565b909650945060608901359150808211156200169e57600080fd5b50620016ad89828a01620015e9565b979a9699509497509295939492505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b85815260606020820152600062001706606083018688620016bf565b82810360408401526200171b818587620016bf565b98975050505050505050565b6000602082840312156200173a57600080fd5b5051919050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015262001776608083018486620016bf565b979650505050505050565b6000602082840312156200179457600080fd5b815180151581146200139a57600080fd5b60005b83811015620017c2578181015183820152602001620017a8565b50506000910152565b60008151808452620017e5816020860160208601620017a5565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082015260006200181d6040830184620017cb565b949350505050565b6000825162001839818460208701620017a5565b9190910192915050565b6020815260006200139a6020830184620017cb56fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200da50166c080611e4978511dd6febacd07d8d15209ee46ad8cb68db149f7c6ef64736f6c63430008110033\";\nconst isSuperArgs$B = (xs) => xs.length > 1;\nclass MerkleMinter__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$B(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$E, _bytecode$B, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$E);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$E, signerOrProvider);\n    }\n}\nMerkleMinter__factory.bytecode = _bytecode$B;\nMerkleMinter__factory.abi = _abi$E;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$o = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  IMerkleDistributor__factory: IMerkleDistributor__factory,\n  IMerkleMinter__factory: IMerkleMinter__factory,\n  MerkleDistributor__factory: MerkleDistributor__factory,\n  MerkleMinter__factory: MerkleMinter__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$D = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"member\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidAddresslistUpdate\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"addresslistLength\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"addresslistLengthAtBlock\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isListed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isListedAtBlock\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass Addresslist__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$D);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$D, signerOrProvider);\n    }\n}\nAddresslist__factory.abi = _abi$D;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$n = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Addresslist__factory: Addresslist__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$m = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  counterExample: index$w,\n  governance: index$q,\n  placeholderVersion: index$p,\n  token: index$o,\n  utils: index$n\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$C = [\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"UnkownCallback\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"sig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CallbackReceived\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"selector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleCallback\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"selector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"registerCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$A = \"0x608060405234801561001057600080fd5b50610408806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806373be85531461003b578063fd292c5e14610083575b600080fd5b61004e610049366004610271565b6100f4565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6100f2610091366004610333565b7fffffffff000000000000000000000000000000000000000000000000000000008216600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e083901c1790555050565b005b6000806101018484610109565b949350505050565b7fffffffff00000000000000000000000000000000000000000000000000000000808316600090815260208190526040812054909160e09190911b9081166101ad576040517f54bdcc3e0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000080861660048301528216602482015260440160405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516101fe929190610366565b60405180910390a29392505050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461023d57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561028457600080fd5b61028d8361020d565b9150602083013567ffffffffffffffff808211156102aa57600080fd5b818501915085601f8301126102be57600080fd5b8135818111156102d0576102d0610242565b604051601f8201601f19908116603f011681019083821181831017156102f8576102f8610242565b8160405282815288602084870101111561031157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561034657600080fd5b61034f8361020d565b915061035d6020840161020d565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8316815260006020604081840152835180604085015260005b818110156103b057858101830151858201606001528201610394565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220f6806505f34053dc8a6aaa0ca726f1ab920e4012035e1671d5a4cb26716028b164736f6c63430008110033\";\nconst isSuperArgs$A = (xs) => xs.length > 1;\nclass CallbackHandlerMockHelper__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$A(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$C, _bytecode$A, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$C);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$C, signerOrProvider);\n    }\n}\nCallbackHandlerMockHelper__factory.bytecode = _bytecode$A;\nCallbackHandlerMockHelper__factory.abi = _abi$C;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$l = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CallbackHandlerMockHelper__factory: CallbackHandlerMockHelper__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$B = [\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"count\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"consumeGas\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"store\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$z = \"0x608060405234801561001057600080fd5b50610163806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636057361d1461003b578063a329e8de1461006d575b600080fd5b61005b6100493660046100b5565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008061007b3660046100b5565b610082565b005b60005b818110156100b157600081815260208190526040902060019055806100a9816100ce565b915050610085565b5050565b6000602082840312156100c757600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610126577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220a195996a4aea2ec0feac03e2c52dc6c8ac143c1812d679fe4d1fd2b3ad7d7b6d64736f6c63430008110033\";\nconst isSuperArgs$z = (xs) => xs.length > 1;\nclass GasConsumer__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$z(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$B, _bytecode$z, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$B);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$B, signerOrProvider);\n    }\n}\nGasConsumer__factory.bytecode = _bytecode$z;\nGasConsumer__factory.abi = _abi$B;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$k = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GasConsumer__factory: GasConsumer__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$A = [\n    {\n        inputs: [],\n        name: \"fail\",\n        outputs: [],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"newNum\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setTest\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$y = \"0x6080604052600a60005534801561001557600080fd5b50610118806100256000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636ca1f933146037578063a9cc471814605c575b600080fd5b604a604236600460ca565b600081905590565b60405190815260200160405180910390f35b60626064565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416374696f6e457865637574653a526576657274000000000000000000000000604482015260640160405180910390fd5b60006020828403121560db57600080fd5b503591905056fea2646970667358221220ef30671210f4d6f984c46eec111d0de75e9566c0ff33c6afb60bf1899b1d4d9b64736f6c63430008110033\";\nconst isSuperArgs$y = (xs) => xs.length > 1;\nclass ActionExecute__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$y(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$A, _bytecode$y, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$A);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$A, signerOrProvider);\n    }\n}\nActionExecute__factory.bytecode = _bytecode$y;\nActionExecute__factory.abi = _abi$A;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$z = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"initialOwner\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AnyAddressDisallowedForWhoAndWhere\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConditionNotPresentForAnyAddress\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"currentCondition\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"newCondition\",\n                type: \"address\",\n            },\n        ],\n        name: \"PermissionAlreadyGrantedForDifferentCondition\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PermissionsForAnyAddressDisallowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Unauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"_reference\",\n                type: \"string\",\n            },\n        ],\n        name: \"Deposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"actor\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"failureMap\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"execResults\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"Executed\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IPermissionCondition\",\n                name: \"condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"Granted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"MetadataSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NativeTokenDeposited\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"signatureValidator\",\n                type: \"address\",\n            },\n        ],\n        name: \"SignatureValidatorSet\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"StandardCallbackRegistered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"forwarder\",\n                type: \"address\",\n            },\n        ],\n        name: \"TrustedForwarderSet\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ROOT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"_items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applyMultiTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.SingleTargetPermission[]\",\n                name: \"items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applySingleTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"callId\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"_actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [\n            {\n                internalType: \"bytes[]\",\n                name: \"execResults\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"failureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTrustedForwarder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"grant\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"contract IPermissionCondition\",\n                name: \"_condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"grantWithCondition\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"hasPermission\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isValidSignature\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"pastVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_callbackSelector\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_magicNumber\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"registerStandardCallback\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"setMetadata\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"setSignatureValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"setTrustedForwarder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$x = \"0x60806040523480156200001157600080fd5b5060405162001af138038062001af183398101604081905262000034916200044d565b600054610100900460ff1615808015620000555750600054600160ff909116105b8062000085575062000072306200016c60201b620006f51760201c565b15801562000085575060005460ff166001145b620000ee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000112576000805461ff0019166101001790555b6200011d826200017b565b801562000164576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50506200047f565b6001600160a01b03163b151590565b600054610100900460ff16620001e85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620000e5565b620001f381620001f6565b50565b620001f3308260008051602062001ad18339815191526200021b838383600262000220565b505050565b6001600160a01b038481161480156200024157506001600160a01b03838116145b1562000260576040516385f1ba9960e01b815260040160405180910390fd5b6001600160a01b0384811614806200028057506001600160a01b03838116145b15620002f057600060008051602062001ad1833981519152831480620002a35750805b15620002c2576040516324159e5b60e01b815260040160405180910390fd5b6001196001600160a01b03831601620002ee576040516324aadf4360e21b815260040160405180910390fd5b505b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526001600160601b0319606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168281620003e65760008381526001602090815260409182902080546001600160a01b0319166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a462000444565b806001600160a01b0316826001600160a01b03161462000444576040516305cc3c4f60e11b81526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401620000e5565b50505050505050565b6000602082840312156200046057600080fd5b81516001600160a01b03811681146200047857600080fd5b9392505050565b611642806200048f6000396000f3fe6080604052600436106101295760003560e01c8063c71bf324116100a5578063d96054c411610074578063e978afe511610059578063e978afe51461037c578063ee57e36f1461039c578063fdef9106146103bb57600080fd5b8063d96054c41461035c578063da7422281461021b57600080fd5b8063c71bf324146102d2578063c9dbc2a414610300578063ce1b815f14610320578063d68bad2c1461033c57600080fd5b80633e2ab0d9116100fc578063bf963977116100e1578063bf96397714610266578063bfe07da61461029e578063c4a50145146102b257600080fd5b80633e2ab0d91461021b578063bd85b0391461023957600080fd5b806309e56b141461012e5780631626ba7e1461017557806322844d04146101c95780632675fdd0146101eb575b600080fd5b34801561013a57600080fd5b506101627f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020015b60405180910390f35b34801561018157600080fd5b50610198610190366004610dcb565b600092915050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161016c565b3480156101d557600080fd5b506101e96101e4366004610e27565b6103e0565b005b3480156101f757600080fd5b5061020b610206366004610eaf565b6104b0565b604051901515815260200161016c565b34801561022757600080fd5b506101e9610236366004610f1b565b50565b34801561024557600080fd5b50610162610254366004610f3f565b60336020526000908152604090205481565b34801561027257600080fd5b50610162610281366004610f58565b603460209081526000928352604080842090915290825290205481565b6101e96102ac366004610fcd565b50505050565b3480156102be57600080fd5b506101e96102cd36600461105e565b505050565b3480156102de57600080fd5b506102f26102ed3660046110a1565b6104fb565b60405161016c929190611261565b34801561030c57600080fd5b506101e961031b366004611283565b61054e565b34801561032c57600080fd5b506040516000815260200161016c565b34801561034857600080fd5b506101e96103573660046112d6565b610584565b34801561036857600080fd5b506101e96103773660046112d6565b6105b9565b34801561038857600080fd5b506101e9610397366004611317565b6105ee565b3480156103a857600080fd5b506101e96103b736600461138c565b5050565b3480156103c757600080fd5b5061020b6103d6366004610eaf565b6001949350505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361040a81610704565b60005b828110156104a9576000848483818110610429576104296113ce565b90506060020180360381019061043f91906113f3565b90506000815160028111156104565761045661143e565b036104735761046e8682602001518360400151610791565b6104a0565b6001815160028111156104885761048861143e565b036104a0576104a0868260200151836040015161079e565b5060010161040d565b5050505050565b60006104be858585856108b0565b806104d757506104d7856001600160a01b0385856108b0565b806104f057506104f06001600160a01b038585856108b0565b90505b949350505050565b60606000336001600160a01b03167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed78686848660405161053e9493929190611454565b60405180910390a2935093915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361057881610704565b6104a985858585610a24565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105ae81610704565b6102ac848484610791565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105e381610704565b6102ac84848461079e565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361061881610704565b60005b828110156102ac576000848483818110610637576106376113ce565b905060a0020180360381019061064d919061151f565b90506000815160028111156106645761066461143e565b0361068557610680816020015182604001518360800151610791565b6106ec565b60018151600281111561069a5761069a61143e565b036106b65761068081602001518260400151836080015161079e565b6002815160028111156106cb576106cb61143e565b036106ec576106ec8160200151826040015183608001518460600151610a24565b5060010161061b565b6001600160a01b03163b151590565b6107473033836000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104b092505050565b610236576040517f1e09743f000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290526064015b60405180910390fd5b6102cd8383836002610a24565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b0316156102ac5760008181526001602090815260409182902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080600160006109358888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b03169050806109605760009150506104f3565b6001196001600160a01b0382160161097c5760019150506104f3565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632675fdd0906109c79089908990899089906004016115ae565b602060405180830381865afa925050508015610a00575060408051601f3d908101601f191682019092526109fd918101906115ea565b60015b15610a18578015610a16576001925050506104f3565b505b50600095945050505050565b6001600160a01b03848116148015610a4457506001600160a01b03838116145b15610a7b576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038481161480610a9a57506001600160a01b03838116145b15610b495760007f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480610acc5750805b15610b03576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001196001600160a01b03831601610b47576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168281610c6d5760008381526001602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a4610ce2565b806001600160a01b0316826001600160a01b031614610ce2576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a401610788565b50505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610d2457610d24610ceb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d5357610d53610ceb565b604052919050565b600082601f830112610d6c57600080fd5b813567ffffffffffffffff811115610d8657610d86610ceb565b610d996020601f19601f84011601610d2a565b818152846020838601011115610dae57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610dde57600080fd5b82359150602083013567ffffffffffffffff811115610dfc57600080fd5b610e0885828601610d5b565b9150509250929050565b6001600160a01b038116811461023657600080fd5b600080600060408486031215610e3c57600080fd5b8335610e4781610e12565b9250602084013567ffffffffffffffff80821115610e6457600080fd5b818601915086601f830112610e7857600080fd5b813581811115610e8757600080fd5b876020606083028501011115610e9c57600080fd5b6020830194508093505050509250925092565b60008060008060808587031215610ec557600080fd5b8435610ed081610e12565b93506020850135610ee081610e12565b925060408501359150606085013567ffffffffffffffff811115610f0357600080fd5b610f0f87828801610d5b565b91505092959194509250565b600060208284031215610f2d57600080fd5b8135610f3881610e12565b9392505050565b600060208284031215610f5157600080fd5b5035919050565b60008060408385031215610f6b57600080fd5b8235610f7681610e12565b946020939093013593505050565b60008083601f840112610f9657600080fd5b50813567ffffffffffffffff811115610fae57600080fd5b602083019150836020828501011115610fc657600080fd5b9250929050565b60008060008060608587031215610fe357600080fd5b8435610fee81610e12565b935060208501359250604085013567ffffffffffffffff81111561101157600080fd5b61101d87828801610f84565b95989497509550505050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461105957600080fd5b919050565b60008060006060848603121561107357600080fd5b61107c84611029565b925061108a60208501611029565b915061109860408501611029565b90509250925092565b6000806000606084860312156110b657600080fd5b8335925060208085013567ffffffffffffffff808211156110d657600080fd5b818701915087601f8301126110ea57600080fd5b8135818111156110fc576110fc610ceb565b8060051b61110b858201610d2a565b918252838101850191858101908b84111561112557600080fd5b86860192505b838310156111af5782358581111561114257600080fd5b86016060818e03601f1901121561115857600080fd5b611160610d01565b8882013561116d81610e12565b815260408201358982015260608201358781111561118b5760008081fd5b6111998f8b83860101610d5b565b604083015250835250918601919086019061112b565b989b989a5050505060409690960135955050505050565b6000815180845260005b818110156111ec576020818501810151868301820152016111d0565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b858110156112545782840389526112428483516111c6565b9885019893509084019060010161122a565b5091979650505050505050565b604081526000611274604083018561120c565b90508260208301529392505050565b6000806000806080858703121561129957600080fd5b84356112a481610e12565b935060208501356112b481610e12565b92506040850135915060608501356112cb81610e12565b939692955090935050565b6000806000606084860312156112eb57600080fd5b83356112f681610e12565b9250602084013561130681610e12565b929592945050506040919091013590565b6000806020838503121561132a57600080fd5b823567ffffffffffffffff8082111561134257600080fd5b818501915085601f83011261135657600080fd5b81358181111561136557600080fd5b86602060a08302850101111561137a57600080fd5b60209290920196919550909350505050565b6000806020838503121561139f57600080fd5b823567ffffffffffffffff8111156113b657600080fd5b6113c285828601610f84565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b80356003811061105957600080fd5b60006060828403121561140557600080fd5b61140d610d01565b611416836113e4565b8152602083013561142681610e12565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600060808201868352602060808185015281875180845260a08601915060a08160051b870101935082890160005b828110156114f7578786037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60018452815180516001600160a01b0316875285810151868801526040908101516060918801829052906114e3818901836111c6565b975050509284019290840190600101611482565b50505050508460408401528281036060840152611514818561120c565b979650505050505050565b600060a0828403121561153157600080fd5b60405160a0810181811067ffffffffffffffff8211171561155457611554610ceb565b604052611560836113e4565b8152602083013561157081610e12565b6020820152604083013561158381610e12565b6040820152606083013561159681610e12565b60608201526080928301359281019290925250919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526115e060808301846111c6565b9695505050505050565b6000602082840312156115fc57600080fd5b81518015158114610f3857600080fdfea264697066735822122026fdb8afa815512654155aade9e08103580cc9c18bb4103de01f19301233ff2564736f6c63430008110033815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33\";\nconst isSuperArgs$x = (xs) => xs.length > 1;\nclass DAOMock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$x(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$z, _bytecode$x, args[0]);\n        }\n    }\n    deploy(initialOwner, overrides) {\n        return super.deploy(initialOwner, overrides || {});\n    }\n    getDeployTransaction(initialOwner, overrides) {\n        return super.getDeployTransaction(initialOwner, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$z);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$z, signerOrProvider);\n    }\n}\nDAOMock__factory.bytecode = _bytecode$x;\nDAOMock__factory.abi = _abi$z;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$y = [\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isValidSignature\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\nconst _bytecode$w = \"0x608060405234801561001057600080fd5b506101d8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631626ba7e14610030575b600080fd5b61006561003e3660046100c9565b7f414243440000000000000000000000000000000000000000000000000000000092915050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156100dc57600080fd5b82359150602083013567ffffffffffffffff808211156100fb57600080fd5b818501915085601f83011261010f57600080fd5b8135818111156101215761012161009a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101675761016761009a565b8160405282815288602084870101111561018057600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220d95519071cb111dd4f57a7d40d7ecd8368a4400e9919e8cd0887cfdf48bb0d1264736f6c63430008110033\";\nconst isSuperArgs$w = (xs) => xs.length > 1;\nclass ERC1271Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$w(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$y, _bytecode$w, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$y);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$y, signerOrProvider);\n    }\n}\nERC1271Mock__factory.bytecode = _bytecode$w;\nERC1271Mock__factory.abi = _abi$y;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$j = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  callbackHandlerHelperMockSol: index$l,\n  gasConsumerHelperSol: index$k,\n  ActionExecute__factory: ActionExecute__factory,\n  DAOMock__factory: DAOMock__factory,\n  ERC1271Mock__factory: ERC1271Mock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$x = [\n    {\n        inputs: [],\n        name: \"ADD_PERMISSIONED_SELECTOR\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"getSelector\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"sig\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\nconst _bytecode$v = \"0x608060405234801561001057600080fd5b506103d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630cbd17c8146100465780632675fdd014610091578063eafcb109146100b4575b600080fd5b61005b6100543660046101c2565b6020015190565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100a461009f3660046102ba565b6100db565b6040519015158152602001610088565b61005b7f44fff9200000000000000000000000000000000000000000000000000000000081565b604080516020601f84018190048102820181019092528281526000917f44fff920000000000000000000000000000000000000000000000000000000009161013d91869086908190840183828082843760009201919091525061005492505050565b7fffffffff00000000000000000000000000000000000000000000000000000000161461016957600080fd5b6000806101798460048188610355565b810190610186919061037f565b1098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101d457600080fd5b813567ffffffffffffffff808211156101ec57600080fd5b818401915084601f83011261020057600080fd5b81358181111561021257610212610193565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561025857610258610193565b8160405282815287602084870101111561027157600080fd5b826020860160208301376000928101602001929092525095945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b557600080fd5b919050565b6000806000806000608086880312156102d257600080fd5b6102db86610291565b94506102e960208701610291565b935060408601359250606086013567ffffffffffffffff8082111561030d57600080fd5b818801915088601f83011261032157600080fd5b81358181111561033057600080fd5b89602082850101111561034257600080fd5b9699959850939650602001949392505050565b6000808585111561036557600080fd5b8386111561037257600080fd5b5050820193919092039150565b6000806040838503121561039257600080fd5b5050803592602090910135915056fea264697066735822122023f7df25ac7c898561a62c1c60713577257f9b434ab4615b20a988635698497064736f6c63430008110033\";\nconst isSuperArgs$v = (xs) => xs.length > 1;\nclass TestParameterScopingPermissionCondition__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$v(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$x, _bytecode$v, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$x);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$x, signerOrProvider);\n    }\n}\nTestParameterScopingPermissionCondition__factory.bytecode = _bytecode$v;\nTestParameterScopingPermissionCondition__factory.abi = _abi$x;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$i = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TestParameterScopingPermissionCondition__factory: TestParameterScopingPermissionCondition__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$w = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bool\",\n                name: \"_result\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setWillPerform\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$u = \"0x60806040526000805460ff1916600117905534801561001d57600080fd5b5061025d8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632675fdd01461003b578063e20939911461006b575b600080fd5b610057610049366004610104565b60005460ff16949350505050565b604051901515815260200160405180910390f35b6100aa6100793660046101fe565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b803573ffffffffffffffffffffffffffffffffffffffff811681146100d057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561011a57600080fd5b610123856100ac565b9350610131602086016100ac565b925060408501359150606085013567ffffffffffffffff8082111561015557600080fd5b818701915087601f83011261016957600080fd5b81358181111561017b5761017b6100d5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101c1576101c16100d5565b816040528281528a60208487010111156101da57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561021057600080fd5b8135801515811461022057600080fd5b939250505056fea2646970667358221220b5e7f0e6414db1fed4dfa5a1f3cf7fbd627cb8d03aadb7a9c588eea20301ab8f64736f6c63430008110033\";\nconst isSuperArgs$u = (xs) => xs.length > 1;\nclass PermissionConditionMock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$u(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$w, _bytecode$u, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$w);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$w, signerOrProvider);\n    }\n}\nPermissionConditionMock__factory.bytecode = _bytecode$u;\nPermissionConditionMock__factory.abi = _abi$w;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$v = [\n    {\n        inputs: [],\n        name: \"AnyAddressDisallowedForWhoAndWhere\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConditionNotPresentForAnyAddress\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"currentCondition\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"newCondition\",\n                type: \"address\",\n            },\n        ],\n        name: \"PermissionAlreadyGrantedForDifferentCondition\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PermissionsForAnyAddressDisallowed\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Unauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"contract IPermissionCondition\",\n                name: \"condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"Granted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"here\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ROOT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TEST_PERMISSION_1_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TEST_PERMISSION_2_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"_items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applyMultiTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.SingleTargetPermission[]\",\n                name: \"items\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"applySingleTargetPermissions\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAnyAddr\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAuthPermission\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getPermissionHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"grant\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"contract IPermissionCondition\",\n                name: \"_condition\",\n                type: \"address\",\n            },\n        ],\n        name: \"grantWithCondition\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"hasPermission\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n        ],\n        name: \"init\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$t = \"\";\nconst isSuperArgs$t = (xs) => xs.length > 1;\nclass PermissionManagerTest__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$t(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$v, _bytecode$t, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$v);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$v, signerOrProvider);\n    }\n}\nPermissionManagerTest__factory.bytecode = _bytecode$t;\nPermissionManagerTest__factory.abi = _abi$v;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$h = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parameterScopingPermissionConditionTestSol: index$i,\n  PermissionConditionMock__factory: PermissionConditionMock__factory,\n  PermissionManagerTest__factory: PermissionManagerTest__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$u = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$s = \"0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033\";\nconst isSuperArgs$s = (xs) => xs.length > 1;\nclass PluginCloneableV1Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$s(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$u, _bytecode$s, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$u);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$u, signerOrProvider);\n    }\n}\nPluginCloneableV1Mock__factory.bytecode = _bytecode$s;\nPluginCloneableV1Mock__factory.abi = _abi$u;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$t = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$r = \"0x608060405234801561001057600080fd5b5060d78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636accab8c146037578063c4d66de8146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6064605c3660046066565b506001600055565b005b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea2646970667358221220c9935c94287392ba9d2acf99b6948ce94a75e34de32039d798a6fa4b7ae8216e64736f6c63430008110033\";\nconst isSuperArgs$r = (xs) => xs.length > 1;\nclass PluginCloneableV1MockBad__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$r(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$t, _bytecode$r, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$t);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$t, signerOrProvider);\n    }\n}\nPluginCloneableV1MockBad__factory.bytecode = _bytecode$r;\nPluginCloneableV1MockBad__factory.abi = _abi$t;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$s = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state2\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$q = \"0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610536806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636accab8c116100505780636accab8c146100d6578063c4d66de8146100ed578063efe51cca1461010257600080fd5b806301ffc9a7146100775780634162169f1461009f57806341de6830146100c7575b600080fd5b61008a610085366004610440565b61010b565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b60016040516100969190610489565b6100df60975481565b604051908152602001610096565b6101006100fb3660046104ca565b6101a4565b005b6100df60985481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061019e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101c45750600054600160ff909116105b806101de5750303b1580156101de575060005460ff166001145b6102555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610296576000805461ff0019166101001790555b61029f826102f3565b6001609755600260985580156102ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b6103798161037c565b50565b600054610100900460ff166103f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561045257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461048257600080fd5b9392505050565b60208101600383106104c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104dc57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048257600080fdfea26469706673582212200ea6280dfefac73805a1b303425ef753ef22dbb28b5ca575821ff308200f0ad564736f6c63430008110033\";\nconst isSuperArgs$q = (xs) => xs.length > 1;\nclass PluginCloneableV2Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$q(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$s, _bytecode$q, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$s);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$s, signerOrProvider);\n    }\n}\nPluginCloneableV2Mock__factory.bytecode = _bytecode$q;\nPluginCloneableV2Mock__factory.abi = _abi$s;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$g = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PluginCloneableV1Mock__factory: PluginCloneableV1Mock__factory,\n  PluginCloneableV1MockBad__factory: PluginCloneableV1MockBad__factory,\n  PluginCloneableV2Mock__factory: PluginCloneableV2Mock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$r = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$p = \"0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61060a806112eb83390190565b6112708061007b6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056006600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056006600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058f99608850e87a7b2a54f7e053960188fc7663ad9983d367e39ef6df058ef0564736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033\";\nconst isSuperArgs$p = (xs) => xs.length > 1;\nclass PluginCloneableSetupV1Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$p(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$r, _bytecode$p, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$r);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$r, signerOrProvider);\n    }\n}\nPluginCloneableSetupV1Mock__factory.bytecode = _bytecode$p;\nPluginCloneableSetupV1Mock__factory.abi = _abi$r;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$q = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$o = \"0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100c1565b61060a8061134083390190565b60f68061194a83390190565b611270806100d06000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056006600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056006600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b8df31769eb653e9a963a6a68a74b3be28c25b04f35980d44fd0296dd3904dc64736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033608060405234801561001057600080fd5b5060d78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636accab8c146037578063c4d66de8146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6064605c3660046066565b506001600055565b005b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea2646970667358221220c9935c94287392ba9d2acf99b6948ce94a75e34de32039d798a6fa4b7ae8216e64736f6c63430008110033\";\nconst isSuperArgs$o = (xs) => xs.length > 1;\nclass PluginCloneableSetupV1MockBad__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$o(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$q, _bytecode$o, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$q);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$q, signerOrProvider);\n    }\n}\nPluginCloneableSetupV1MockBad__factory.bytecode = _bytecode$o;\nPluginCloneableSetupV1MockBad__factory.abi = _abi$q;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$p = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$n = \"0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100c2565b61060a8061134183390190565b6106238061194b83390190565b611270806100d16000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c7565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd3660046200063b565b620001ca565b6040516200009791906200070c565b620000f9620000f336600462000759565b620001e3565b60405162000097929190620008a8565b620001206200011a366004620008f0565b6200020b565b60405162000097929190620009be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001dc60056007600162000271565b9392505050565b606062000203604051806040016040528060608152602001606081525090565b935093915050565b60006200022b604051806040016040528060608152602001606081525090565b60005462000243906001600160a01b03168562000413565b9150620002516001620004b9565b81526200026360056007600062000271565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029257600080fd5b6200029e848462000a00565b6001600160a01b031667ffffffffffffffff811115620002c257620002c2620008da565b6040519080825280602002602001820160405280156200033b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002e15790505b509050835b836001600160a01b0316816001600160a01b031610156200040b576040518060a001604052808460028111156200037b576200037b6200068f565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003ce878462000a00565b6001600160a01b031681518110620003ea57620003ea62000a2a565b60200260200101819052508080620004029062000a40565b91505062000340565b509392505050565b6040516001600160a01b0382166024820152600090620001dc9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057d565b6060816001600160a01b031667ffffffffffffffff811115620004e057620004e0620008da565b6040519080825280602002602001820160405280156200050a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000577578082826001600160a01b0316815181106200054a576200054a62000a2a565b6001600160a01b0390921660209283029190910190910152806200056e8162000a40565b91505062000510565b50919050565b600082826040516200058f90620005b9565b6200059c92919062000a69565b604051809103906000f0801580156200040b573d6000803e3d6000fd5b6107ad8062000a8e83390190565b600060208284031215620005da57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001dc57600080fd5b80356001600160a01b03811681146200062357600080fd5b919050565b6000606082840312156200057757600080fd5b600080604083850312156200064f57600080fd5b6200065a836200060b565b9150602083013567ffffffffffffffff8111156200067757600080fd5b620006858582860162000628565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c857634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074d576200073e838551620006a5565b93850193925060010162000728565b50909695505050505050565b6000806000606084860312156200076f57600080fd5b6200077a846200060b565b9250602084013561ffff811681146200079257600080fd5b9150604084013567ffffffffffffffff811115620007af57600080fd5b620007bd8682870162000628565b9150509250925092565b6000815180845260005b81811015620007ef57602081850181015186830182015201620007d1565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008565783516001600160a01b0316835292840192918401916001016200082f565b50508483015186820387850152805180835290840192506000918401905b808310156200089d576200088a828551620006a5565b9150848401935060018301925062000874565b509695505050505050565b604081526000620008bd6040830185620007c7565b8281036020840152620008d181856200080f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090457600080fd5b6200090f836200060b565b9150602083013567ffffffffffffffff808211156200092d57600080fd5b818501915085601f8301126200094257600080fd5b813581811115620009575762000957620008da565b604051601f8201601f19908116603f01168101908382118183101715620009825762000982620008da565b816040528281528860208487010111156200099c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e260408301846200080f565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a235762000a23620009ea565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5f5762000a5f620009ea565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e26040830184620007c756fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205ee05b5577199e41f81cf5762968e559c66516b57146805cebf5e1b477d3417264736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61051d806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341de68301161005057806341de6830146100bc5780636accab8c146100cb578063c4d66de8146100e257600080fd5b806301ffc9a71461006c5780634162169f14610094575b600080fd5b61007f61007a366004610427565b6100f7565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b600160405161008b9190610470565b6100d460975481565b60405190815260200161008b565b6100f56100f03660046104b1565b610190565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061018a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101b05750600054600160ff909116105b806101ca5750303b1580156101ca575060005460ff166001145b6102415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610282576000805461ff0019166101001790555b61028b826102da565b600160975580156102d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b61036081610363565b50565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610238565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561043957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461046957600080fd5b9392505050565b60208101600383106104ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104c357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046957600080fdfea2646970667358221220d777011815adf7f688c097c817db525db26f0b0dad30e0d85966aa0b7399dd2d64736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610536806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636accab8c116100505780636accab8c146100d6578063c4d66de8146100ed578063efe51cca1461010257600080fd5b806301ffc9a7146100775780634162169f1461009f57806341de6830146100c7575b600080fd5b61008a610085366004610440565b61010b565b60405190151581526020015b60405180910390f35b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b60016040516100969190610489565b6100df60975481565b604051908152602001610096565b6101006100fb3660046104ca565b6101a4565b005b6100df60985481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061019e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054610100900460ff16158080156101c45750600054600160ff909116105b806101de5750303b1580156101de575060005460ff166001145b6102555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610296576000805461ff0019166101001790555b61029f826102f3565b6001609755600260985580156102ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600054610100900460ff166103705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b6103798161037c565b50565b600054610100900460ff166103f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161024c565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006020828403121561045257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461048257600080fd5b9392505050565b60208101600383106104c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000602082840312156104dc57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048257600080fdfea26469706673582212200ea6280dfefac73805a1b303425ef753ef22dbb28b5ca575821ff308200f0ad564736f6c63430008110033\";\nconst isSuperArgs$n = (xs) => xs.length > 1;\nclass PluginCloneableSetupV2Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$n(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$p, _bytecode$n, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$p);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$p, signerOrProvider);\n    }\n}\nPluginCloneableSetupV2Mock__factory.bytecode = _bytecode$n;\nPluginCloneableSetupV2Mock__factory.abi = _abi$p;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$f = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PluginCloneableSetupV1Mock__factory: PluginCloneableSetupV1Mock__factory,\n  PluginCloneableSetupV1MockBad__factory: PluginCloneableSetupV1MockBad__factory,\n  PluginCloneableSetupV2Mock__factory: PluginCloneableSetupV2Mock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$e = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  pluginCloneableMockSol: index$g,\n  pluginCloneableSetupMockSol: index$f\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$o = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DO_SOMETHING_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_param1\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_param2\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"addPermissioned\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"msgSender\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_param1\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_param2\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"subPermissioned\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$m = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161135e610119600039600081816103910152818161042c015281816105cc01528181610662015261075d015261135e6000f3fe6080604052600436106100d25760003560e01c806344fff9201161007f5780635c60da1b116100595780635c60da1b14610226578063c4d66de81461023b578063c9c4bfca1461025b578063d737d0c71461028f57600080fd5b806344fff920146101de5780634f1ef286146101fe57806352d1902d1461021157600080fd5b80633ad65dff116100b05780633ad65dff146101705780634162169f1461019057806341de6830146101c257600080fd5b806301ffc9a7146100d757806335fddd251461010c5780633659cfe61461014e575b600080fd5b3480156100e357600080fd5b506100f76100f236600461102b565b6102a2565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b506101407fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e81565b604051908152602001610103565b34801561015a57600080fd5b5061016e610169366004611082565b610387565b005b34801561017c57600080fd5b5061014061018b36600461109f565b610529565b34801561019c57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610103565b3480156101ce57600080fd5b50600060405161010391906110c1565b3480156101ea57600080fd5b506101406101f936600461109f565b61057c565b61016e61020c3660046110ff565b6105c2565b34801561021d57600080fd5b50610140610750565b34801561023257600080fd5b506101aa610815565b34801561024757600080fd5b5061016e610256366004611082565b61084d565b34801561026757600080fd5b506101407f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561029b57600080fd5b50336101aa565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061033557507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061038157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361042a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104857f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105015760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610421565b61050a8161098c565b60408051600080825260208201909252610526918391906109c5565b50565b60c9546000907fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e9061056a906001600160a01b031630335b84600036610b6a565b61057483856111d9565b949350505050565b60c9546000907fca54365909c5b14918df1fa69b5c0f4680039e920dbae56833063630e9e76f0e906105b8906001600160a01b03163033610561565b61057483856111ec565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106605760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610421565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106bb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107375760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610421565b6107408261098c565b61074c828260016109c5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610421565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006108487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff161580801561086d5750600054600160ff909116105b806108875750303b158015610887575060005460ff166001145b6108f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610421565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561093a576000805461ff0019166101001790555b61094382610c58565b801561074c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59061074c906001600160a01b03163033610561565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109fd576109f883610cde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a57575060408051601f3d908101601f19168201909252610a54918101906111ff565b60015b610ac95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610421565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610421565b506109f8838383610db4565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610bb79088908890889088908890600401611218565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061126c565b610c50576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610421565b505050505050565b600054610100900460ff16610cd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610421565b61052681610ddf565b6001600160a01b0381163b610d5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610421565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610dbd83610e96565b600082511180610dca5750805b156109f857610dd98383610ed6565b50505050565b600054610100900460ff16610e5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610421565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e9f81610cde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610421565b600080846001600160a01b031684604051610f7091906112b2565b600060405180830381855af49150503d8060008114610fab576040519150601f19603f3d011682016040523d82523d6000602084013e610fb0565b606091505b5091509150610fd8828260405180606001604052806027815260200161130260279139610fe1565b95945050505050565b60608315610ff0575081610ffa565b610ffa8383611001565b9392505050565b8151156110115781518083602001fd5b8060405162461bcd60e51b815260040161042191906112ce565b60006020828403121561103d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ffa57600080fd5b6001600160a01b038116811461052657600080fd5b60006020828403121561109457600080fd5b8135610ffa8161106d565b600080604083850312156110b257600080fd5b50508035926020909101359150565b60208101600383106110e357634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561111257600080fd5b823561111d8161106d565b9150602083013567ffffffffffffffff8082111561113a57600080fd5b818501915085601f83011261114e57600080fd5b813581811115611160576111606110e9565b604051601f8201601f19908116603f01168101908382118183101715611188576111886110e9565b816040528281528860208487010111156111a157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610381576103816111c3565b80820180821115610381576103816111c3565b60006020828403121561121157600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561127e57600080fd5b81518015158114610ffa57600080fd5b60005b838110156112a9578181015183820152602001611291565b50506000910152565b600082516112c481846020870161128e565b9190910192915050565b60208152600082518060208401526112ed81604085016020870161128e565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e4d9c235b205f968b3c64cd01c07625cf1034abc5fd4cd06baa1a372ee067ac664736f6c63430008110033\";\nconst isSuperArgs$m = (xs) => xs.length > 1;\nclass TestPlugin__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$m(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$o, _bytecode$m, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$o);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$o, signerOrProvider);\n    }\n}\nTestPlugin__factory.bytecode = _bytecode$m;\nTestPlugin__factory.abi = _abi$o;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$d = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TestPlugin__factory: TestPlugin__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$n = [\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_id\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"allowedId\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_permissionId\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isGranted\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$l = \"0x608060405234801561001057600080fd5b5060405161024238038061024283398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b6101e38061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632675fdd01461003b5780637ffca28214610063575b600080fd5b61004e6100493660046100cf565b61007a565b60405190151581526020015b60405180910390f35b61006c60005481565b60405190815260200161005a565b60008061008a836004818761016a565b8101906100979190610194565b60005414979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ca57600080fd5b919050565b6000806000806000608086880312156100e757600080fd5b6100f0866100a6565b94506100fe602087016100a6565b935060408601359250606086013567ffffffffffffffff8082111561012257600080fd5b818801915088601f83011261013657600080fd5b81358181111561014557600080fd5b89602082850101111561015757600080fd5b9699959850939650602001949392505050565b6000808585111561017a57600080fd5b8386111561018757600080fd5b5050820193919092039150565b6000602082840312156101a657600080fd5b503591905056fea2646970667358221220a703264c39ea15006c2d12fa736d52f029f573bb523a97de430b21e68b30d89d64736f6c63430008110033\";\nconst isSuperArgs$l = (xs) => xs.length > 1;\nclass TestIdGatingCondition__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$l(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$n, _bytecode$l, args[0]);\n        }\n    }\n    deploy(_id, overrides) {\n        return super.deploy(_id, overrides || {});\n    }\n    getDeployTransaction(_id, overrides) {\n        return super.getDeployTransaction(_id, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$n);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$n, signerOrProvider);\n    }\n}\nTestIdGatingCondition__factory.bytecode = _bytecode$l;\nTestIdGatingCondition__factory.abi = _abi$n;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$m = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ObjectIdNotAssigned\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ID_GATED_ACTION_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"createNewObject\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"idGatedAction\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ownedIds\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$k = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611495610119600039600081816103b50152818161045001528181610557015281816105ed01526106e801526114956000f3fe6080604052600436106100d25760003560e01c806352d1902d1161007f5780637d5e6aaa116100595780637d5e6aaa14610232578063992c39de14610252578063c4d66de814610272578063c9c4bfca1461029257600080fd5b806352d1902d146101d15780635c60da1b146101e6578063628c68aa146101fb57600080fd5b80634162169f116100b05780634162169f1461017057806341de6830146101a25780634f1ef286146101be57600080fd5b806301ffc9a7146100d75780633659cfe61461010c578063369ce53c1461012e575b600080fd5b3480156100e357600080fd5b506100f76100f2366004611161565b6102c6565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b5061012c6101273660046111b8565b6103ab565b005b34801561013a57600080fd5b506101627f13c93c3c138ff6cda03d08545766e5edbd7eaae2b4c303f9aefd54f1f178526c81565b604051908152602001610103565b34801561017c57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610103565b3480156101ae57600080fd5b50600060405161010391906111d5565b61012c6101cc366004611213565b61054d565b3480156101dd57600080fd5b506101626106db565b3480156101f257600080fd5b5061018a6107a0565b34801561020757600080fd5b5061018a6102163660046112d7565b61012d602052600090815260409020546001600160a01b031681565b34801561023e57600080fd5b5061012c61024d3660046112d7565b6107d8565b34801561025e57600080fd5b5061016261026d3660046111b8565b610948565b34801561027e57600080fd5b5061012c61028d3660046111b8565b61099a565b34801561029e57600080fd5b506101627f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035957507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103a557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361044e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104a97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105255760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610445565b61052e81610ad9565b6040805160008082526020820190925261054a91839190610b16565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105eb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610445565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106467f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106c25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610445565b6106cb82610ad9565b6106d782826001610b16565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461077b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610445565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600081815261012d602052604090205481907f13c93c3c138ff6cda03d08545766e5edbd7eaae2b4c303f9aefd54f1f178526c906001600160a01b031661084e576040517f52f22e6200000000000000000000000000000000000000000000000000000000815260048101839052602401610445565b600082815261012d60205260408082205490517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163fdef9106916108aa9130913391879136906004016112f0565b602060405180830381865afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190611344565b6109435760c9546040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015230602482015233604482015260648101829052608401610445565b505050565b61012e8054600081815261012d60205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055825491929061099083611366565b9190505550919050565b600054610100900460ff16158080156109ba5750600054600160ff909116105b806109d45750303b1580156109d4575060005460ff166001145b610a465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610445565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a87576000805461ff0019166101001790555b610a9082610cb6565b80156106d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906106d7906001600160a01b0316303384600036610d3c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b495761094383610e2a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ba3575060408051601f3d908101601f19168201909252610ba0918101906113ac565b60015b610c155760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610445565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610caa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610445565b50610943838383610ef5565b600054610100900460ff16610d335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610445565b61054a81610f20565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d8990889088908890889088906004016112f0565b602060405180830381865afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca9190611344565b610e22576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610445565b505050505050565b6001600160a01b0381163b610ea75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610445565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610efe83610fcc565b600082511180610f0b5750805b1561094357610f1a838361100c565b50505050565b600054610100900460ff16610f9d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610445565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fd581610e2a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61108b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610445565b600080846001600160a01b0316846040516110a691906113e9565b600060405180830381855af49150503d80600081146110e1576040519150601f19603f3d011682016040523d82523d6000602084013e6110e6565b606091505b509150915061110e828260405180606001604052806027815260200161143960279139611117565b95945050505050565b60608315611126575081611130565b6111308383611137565b9392505050565b8151156111475781518083602001fd5b8060405162461bcd60e51b81526004016104459190611405565b60006020828403121561117357600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461113057600080fd5b6001600160a01b038116811461054a57600080fd5b6000602082840312156111ca57600080fd5b8135611130816111a3565b60208101600383106111f757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561122657600080fd5b8235611231816111a3565b9150602083013567ffffffffffffffff8082111561124e57600080fd5b818501915085601f83011261126257600080fd5b813581811115611274576112746111fd565b604051601f8201601f19908116603f0116810190838211818310171561129c5761129c6111fd565b816040528281528860208487010111156112b557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e957600080fd5b5035919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135657600080fd5b8151801515811461113057600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113a557634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156113be57600080fd5b5051919050565b60005b838110156113e05781810151838201526020016113c8565b50506000910152565b600082516113fb8184602087016113c5565b9190910192915050565b60208152600082518060208401526114248160408501602087016113c5565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cf7d7038b643135a4c16e20d731cf6204de0dece998141d83226ce36d013d09864736f6c63430008110033\";\nconst isSuperArgs$k = (xs) => xs.length > 1;\nclass TestSharedPlugin__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$k(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$m, _bytecode$k, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$m);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$m, signerOrProvider);\n    }\n}\nTestSharedPlugin__factory.bytecode = _bytecode$k;\nTestSharedPlugin__factory.abi = _abi$m;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$c = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TestIdGatingCondition__factory: TestIdGatingCondition__factory,\n  TestSharedPlugin__factory: TestSharedPlugin__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$l = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$j = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033\";\nconst isSuperArgs$j = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableV1Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$j(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$l, _bytecode$j, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$l);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$l, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableV1Mock__factory.bytecode = _bytecode$j;\nPluginUUPSUpgradeableV1Mock__factory.abi = _abi$l;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$k = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initializeV1toV2\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state2\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$i = \"\";\nconst isSuperArgs$i = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableV2Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$i(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$k, _bytecode$i, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$k);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$k, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableV2Mock__factory.bytecode = _bytecode$i;\nPluginUUPSUpgradeableV2Mock__factory.abi = _abi$k;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$j = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initializeV1toV3\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initializeV2toV3\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state1\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state2\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"state3\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$h = \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033\";\nconst isSuperArgs$h = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableV3Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$h(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$j, _bytecode$h, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$j);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$j, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableV3Mock__factory.bytecode = _bytecode$h;\nPluginUUPSUpgradeableV3Mock__factory.abi = _abi$j;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$b = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PluginUUPSUpgradeableV1Mock__factory: PluginUUPSUpgradeableV1Mock__factory,\n  PluginUUPSUpgradeableV2Mock__factory: PluginUUPSUpgradeableV2Mock__factory,\n  PluginUUPSUpgradeableV3Mock__factory: PluginUUPSUpgradeableV3Mock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$i = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$g = \"0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61132b806112e983390190565b61126e8061007b6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620005c5565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd36600462000639565b620001ca565b6040516200009791906200070a565b620000f9620000f336600462000757565b620001e2565b60405162000097929190620008a6565b620001206200011a366004620008ee565b6200020a565b60405162000097929190620009bc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db60006001806200026f565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b935093915050565b60006200022a604051806040016040528060608152602001606081525090565b60005462000242906001600160a01b03168562000411565b9150620002506002620004b7565b81526200026160006002816200026f565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200029057600080fd5b6200029c8484620009fe565b6001600160a01b031667ffffffffffffffff811115620002c057620002c0620008d8565b6040519080825280602002602001820160405280156200033957816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620002df5790505b509050835b836001600160a01b0316816001600160a01b0316101562000409576040518060a001604052808460028111156200037957620003796200068d565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620003cc8784620009fe565b6001600160a01b031681518110620003e857620003e862000a28565b60200260200101819052508080620004009062000a3e565b9150506200033e565b509392505050565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526200057b565b6060816001600160a01b031667ffffffffffffffff811115620004de57620004de620008d8565b60405190808252806020026020018201604052801562000508578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000575578082826001600160a01b03168151811062000548576200054862000a28565b6001600160a01b0390921660209283029190910190910152806200056c8162000a3e565b9150506200050e565b50919050565b600082826040516200058d90620005b7565b6200059a92919062000a67565b604051809103906000f08015801562000409573d6000803e3d6000fd5b6107ad8062000a8c83390190565b600060208284031215620005d857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b03811681146200062157600080fd5b919050565b6000606082840312156200057557600080fd5b600080604083850312156200064d57600080fd5b620006588362000609565b9150602083013567ffffffffffffffff8111156200067557600080fd5b620006838582860162000626565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620006c657634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156200074b576200073c838551620006a3565b93850193925060010162000726565b50909695505050505050565b6000806000606084860312156200076d57600080fd5b620007788462000609565b9250602084013561ffff811681146200079057600080fd5b9150604084013567ffffffffffffffff811115620007ad57600080fd5b620007bb8682870162000626565b9150509250925092565b6000815180845260005b81811015620007ed57602081850181015186830182015201620007cf565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008545783516001600160a01b0316835292840192918401916001016200082d565b50508483015186820387850152805180835290840192506000918401905b808310156200089b5762000888828551620006a3565b9150848401935060018301925062000872565b509695505050505050565b604081526000620008bb6040830185620007c5565b8281036020840152620008cf81856200080d565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200090257600080fd5b6200090d8362000609565b9150602083013567ffffffffffffffff808211156200092b57600080fd5b818501915085601f8301126200094057600080fd5b813581811115620009555762000955620008d8565b604051601f8201601f19908116603f01168101908382118183101715620009805762000980620008d8565b816040528281528860208487010111156200099a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b0383168152604060208201526000620009e060408301846200080d565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000a215762000a21620009e8565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000a5d5762000a5d620009e8565b6001019392505050565b6001600160a01b0383168152604060208201526000620009e06040830184620007c556fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122044e37b669a98caabd3b1c8d16e430caab2ea67edd4dcf95059efc47741a7fc9f64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033\";\nconst isSuperArgs$g = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableSetupV1Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$g(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$i, _bytecode$g, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$i);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$i, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableSetupV1Mock__factory.bytecode = _bytecode$g;\nPluginUUPSUpgradeableSetupV1Mock__factory.abi = _abi$i;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$h = [\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$f = \"0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61132b8061098683390190565b61090b8061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639cb0a124116100505780639cb0a124146100af578063a8a9c29e146100cf578063f10832f1146100f057600080fd5b806301ffc9a71461006c5780635c60da1b14610094575b600080fd5b61007f61007a366004610478565b610111565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200161008b565b6100c26100bd3660046104e8565b6101aa565b60405161008b91906105b2565b6100e26100dd3660046105fb565b6101c0565b60405161008b9291906106f5565b6101036100fe366004610770565b6101e7565b60405161008b929190610832565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806101a457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606101b96000600180610231565b9392505050565b60606101df604051806040016040528060608152602001606081525090565b935093915050565b6000610206604051806040016040528060608152602001606081525090565b6000915061021460016103bf565b81526102236000600181610231565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b03161161025157600080fd5b61025b8484610872565b6001600160a01b031667ffffffffffffffff81111561027c5761027c61075a565b6040519080825280602002602001820160405280156102f357816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161029a5790505b509050835b836001600160a01b0316816001600160a01b031610156103b7576040518060a0016040528084600281111561032f5761032f610536565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826103808784610872565b6001600160a01b03168151811061039957610399610899565b602002602001018190525080806103af906108af565b9150506102f8565b509392505050565b6060816001600160a01b031667ffffffffffffffff8111156103e3576103e361075a565b60405190808252806020026020018201604052801561040c578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015610472578082826001600160a01b03168151811061044857610448610899565b6001600160a01b03909216602092830291909101909101528061046a816108af565b915050610412565b50919050565b60006020828403121561048a57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146101b957600080fd5b80356001600160a01b03811681146104d157600080fd5b919050565b60006060828403121561047257600080fd5b600080604083850312156104fb57600080fd5b610504836104ba565b9150602083013567ffffffffffffffff81111561052057600080fd5b61052c858286016104d6565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811061056e57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b818110156105ef576105e183855161054c565b9385019392506001016105ce565b50909695505050505050565b60008060006060848603121561061057600080fd5b610619846104ba565b9250602084013561ffff8116811461063057600080fd5b9150604084013567ffffffffffffffff81111561064c57600080fd5b610658868287016104d6565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156106a75783516001600160a01b031683529284019291840191600101610682565b50508483015186820387850152805180835290840192506000918401905b808310156106ea576106d882855161054c565b915084840193506001830192506106c5565b509695505050505050565b604081526000835180604084015260005b818110156107235760208187018101516060868401015201610706565b50600060608285010152601f19601f8201168301905060608382030160208401526107516060820185610662565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561078357600080fd5b61078c836104ba565b9150602083013567ffffffffffffffff808211156107a957600080fd5b818501915085601f8301126107bd57600080fd5b8135818111156107cf576107cf61075a565b604051601f8201601f19908116603f011681019083821181831017156107f7576107f761075a565b8160405282815288602084870101111561081057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b03831681526040602082015260006108546040830184610662565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038281168282160390808211156108925761089261085c565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038083168181036108cb576108cb61085c565b600101939250505056fea26469706673582212207a1e5b31581e09f22c645bfe8bf797b4af34af5e86a6c12a38b5ce3251e8b85d64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c63430008110033\";\nconst isSuperArgs$f = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableSetupV1MockBad__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$f(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$h, _bytecode$f, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$h);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$h, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableSetupV1MockBad__factory.bytecode = _bytecode$f;\nPluginUUPSUpgradeableSetupV1MockBad__factory.abi = _abi$h;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$g = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$e = \"0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100c2565b61132b806113c383390190565b611416806126ee83390190565b6112f2806100d16000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b6200008536600462000649565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd366004620006bd565b620001ca565b6040516200009791906200078e565b620000f9620000f3366004620007db565b620001e2565b604051620000979291906200092a565b620001206200011a36600462000972565b62000294565b6040516200009792919062000a40565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db6000600180620002f9565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b8361ffff166001036200028c576200021b60026200049b565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe27e9a4e00000000000000000000000000000000000000000000000000000000179052915062000286600160026000620002f9565b60208201525b935093915050565b6000620002b4604051806040016040528060608152602001606081525090565b600054620002cc906001600160a01b0316856200055f565b9150620002da60026200049b565b8152620002eb6000600281620002f9565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b0316116200031a57600080fd5b62000326848462000a82565b6001600160a01b031667ffffffffffffffff8111156200034a576200034a6200095c565b604051908082528060200260200182016040528015620003c357816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620003695790505b509050835b836001600160a01b0316816001600160a01b0316101562000493576040518060a0016040528084600281111562000403576200040362000711565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef6080909101528262000456878462000a82565b6001600160a01b03168151811062000472576200047262000aac565b602002602001018190525080806200048a9062000ac2565b915050620003c8565b509392505050565b6060816001600160a01b031667ffffffffffffffff811115620004c257620004c26200095c565b604051908082528060200260200182016040528015620004ec578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000559578082826001600160a01b0316815181106200052c576200052c62000aac565b6001600160a01b039092166020928302919091019091015280620005508162000ac2565b915050620004f2565b50919050565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526000828260405162000611906200063b565b6200061e92919062000aeb565b604051809103906000f08015801562000493573d6000803e3d6000fd5b6107ad8062000b1083390190565b6000602082840312156200065c57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b0381168114620006a557600080fd5b919050565b6000606082840312156200055957600080fd5b60008060408385031215620006d157600080fd5b620006dc836200068d565b9150602083013567ffffffffffffffff811115620006f957600080fd5b6200070785828601620006aa565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200074a57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620007cf57620007c083855162000727565b938501939250600101620007aa565b50909695505050505050565b600080600060608486031215620007f157600080fd5b620007fc846200068d565b9250602084013561ffff811681146200081457600080fd5b9150604084013567ffffffffffffffff8111156200083157600080fd5b6200083f86828701620006aa565b9150509250925092565b6000815180845260005b81811015620008715760208185018101518683018201520162000853565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620008d85783516001600160a01b031683529284019291840191600101620008b1565b50508483015186820387850152805180835290840192506000918401905b808310156200091f576200090c82855162000727565b91508484019350600183019250620008f6565b509695505050505050565b6040815260006200093f604083018562000849565b828103602084015262000953818562000891565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200098657600080fd5b62000991836200068d565b9150602083013567ffffffffffffffff80821115620009af57600080fd5b818501915085601f830112620009c457600080fd5b813581811115620009d957620009d96200095c565b604051601f8201601f19908116603f0116810190838211818310171562000a045762000a046200095c565b8160405282815288602084870101111562000a1e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000a64604083018462000891565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000aa55762000aa562000a6c565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000ae15762000ae162000a6c565b6001019392505050565b6001600160a01b038316815260406020820152600062000a6460408301846200084956fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220eb9a1a5c972a4acc71936aaa6cc65c00428d7a19d97bf10f23d2152e28e9e2ad64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516112fd61011960003960008181610342015281816103dd015281816104e40152818161057a015261067501526112fd6000f3fe6080604052600436106100c75760003560e01c80635c60da1b11610074578063c9c4bfca1161004e578063c9c4bfca146101f3578063e27e9a4e14610227578063efe51cca1461023c57600080fd5b80635c60da1b146101a75780636accab8c146101bc578063c4d66de8146101d357600080fd5b806341de6830116100a557806341de6830146101555780634f1ef2861461017157806352d1902d1461018457600080fd5b806301ffc9a7146100cc5780633659cfe6146101015780634162169f14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ff6565b610253565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c36600461104d565b610338565b005b34801561012f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b34801561016157600080fd5b5060006040516100f8919061106a565b61012161017f3660046110da565b6104da565b34801561019057600080fd5b50610199610668565b6040519081526020016100f8565b3480156101b357600080fd5b5061013d61072d565b3480156101c857600080fd5b5061019961012d5481565b3480156101df57600080fd5b506101216101ee36600461104d565b610765565b3480156101ff57600080fd5b506101997f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561023357600080fd5b50610121610867565b34801561024857600080fd5b5061019961012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102e657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061033257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103db5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104367f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104b25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b6104bb81610953565b604080516000808252602082019092526104d791839190610990565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105785760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016103d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b61065882610953565b61066482826001610990565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103d2565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600290610100900460ff16158015610787575060005460ff8083169116105b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b6000805461ffff191660ff83161761010017905561081682610b35565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290610100900460ff16158015610889575060005460ff8083169116105b6108fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610664906001600160a01b0316303384600036610bbb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c8576109c383610ca9565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a22575060408051601f3d908101601f19168201909252610a1f9181019061119e565b60015b610a945760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b295760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103d2565b506109c3838383610d7f565b600054610100900460ff16610bb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b6104d781610daa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c0890889088908890889088906004016111b7565b602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061120b565b610ca1576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103d2565b505050505050565b6001600160a01b0381163b610d265760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d8883610e61565b600082511180610d955750805b156109c357610da48383610ea1565b50505050565b600054610100900460ff16610e275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e6a81610ca9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103d2565b600080846001600160a01b031684604051610f3b9190611251565b600060405180830381855af49150503d8060008114610f76576040519150601f19603f3d011682016040523d82523d6000602084013e610f7b565b606091505b5091509150610fa382826040518060600160405280602781526020016112a160279139610fac565b95945050505050565b60608315610fbb575081610fc5565b610fc58383610fcc565b9392505050565b815115610fdc5781518083602001fd5b8060405162461bcd60e51b81526004016103d2919061126d565b60006020828403121561100857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fc557600080fd5b6001600160a01b03811681146104d757600080fd5b60006020828403121561105f57600080fd5b8135610fc581611038565b60208101600383106110a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156110ed57600080fd5b82356110f881611038565b9150602083013567ffffffffffffffff8082111561111557600080fd5b818501915085601f83011261112957600080fd5b81358181111561113b5761113b6110ab565b604051601f8201601f19908116603f01168101908382118183101715611163576111636110ab565b8160405282815288602084870101111561117c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156111b057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561121d57600080fd5b81518015158114610fc557600080fd5b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000825161126381846020870161122d565b9190910192915050565b602081526000825180602084015261128c81604085016020870161122d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6e1ded66efe06d100f62c192b98b893065508d3441b03f5a77f7abf7ffd7e964736f6c63430008110033\";\nconst isSuperArgs$e = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableSetupV2Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$e(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$g, _bytecode$e, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$g);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$g, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableSetupV2Mock__factory.bytecode = _bytecode$e;\nPluginUUPSUpgradeableSetupV2Mock__factory.abi = _abi$g;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$f = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$d = \"0x608060405234801561001057600080fd5b5060405161001d906100f1565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100fe565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040516100af9061010b565b604051809103906000f0801580156100cb573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055610118565b61132b806114a383390190565b611416806127ce83390190565b61154b80613be483390190565b61137c806101276000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b62000085366004620006d3565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd36600462000747565b620001ca565b60405162000097919062000818565b620000f9620000f336600462000865565b620001e2565b60405162000097929190620009b4565b620001206200011a366004620009fc565b6200031e565b6040516200009792919062000aca565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db600060018062000383565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b8361ffff166001036200028c576200021b600362000525565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef46950000000000000000000000000000000000000000000000000000000017905291506200028660016003600062000383565b60208201525b8361ffff166002036200031657620002a5600362000525565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140457680000000000000000000000000000000000000000000000000000000017905291506200031060026003600062000383565b60208201525b935093915050565b60006200033e604051806040016040528060608152602001606081525090565b60005462000356906001600160a01b031685620005e9565b915062000364600362000525565b815262000375600060038162000383565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b031611620003a457600080fd5b620003b0848462000b0c565b6001600160a01b031667ffffffffffffffff811115620003d457620003d4620009e6565b6040519080825280602002602001820160405280156200044d57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620003f35790505b509050835b836001600160a01b0316816001600160a01b031610156200051d576040518060a001604052808460028111156200048d576200048d6200079b565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620004e0878462000b0c565b6001600160a01b031681518110620004fc57620004fc62000b36565b60200260200101819052508080620005149062000b4c565b91505062000452565b509392505050565b6060816001600160a01b031667ffffffffffffffff8111156200054c576200054c620009e6565b60405190808252806020026020018201604052801562000576578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015620005e3578082826001600160a01b031681518110620005b657620005b662000b36565b6001600160a01b039092166020928302919091019091015280620005da8162000b4c565b9150506200057c565b50919050565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152600082826040516200069b90620006c5565b620006a892919062000b75565b604051809103906000f0801580156200051d573d6000803e3d6000fd5b6107ad8062000b9a83390190565b600060208284031215620006e657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b03811681146200072f57600080fd5b919050565b600060608284031215620005e357600080fd5b600080604083850312156200075b57600080fd5b620007668362000717565b9150602083013567ffffffffffffffff8111156200078357600080fd5b620007918582860162000734565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b6000815160038110620007d457634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000859576200084a838551620007b1565b93850193925060010162000834565b50909695505050505050565b6000806000606084860312156200087b57600080fd5b620008868462000717565b9250602084013561ffff811681146200089e57600080fd5b9150604084013567ffffffffffffffff811115620008bb57600080fd5b620008c98682870162000734565b9150509250925092565b6000815180845260005b81811015620008fb57602081850181015186830182015201620008dd565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009625783516001600160a01b0316835292840192918401916001016200093b565b50508483015186820387850152805180835290840192506000918401905b80831015620009a95762000996828551620007b1565b9150848401935060018301925062000980565b509695505050505050565b604081526000620009c96040830185620008d3565b8281036020840152620009dd81856200091b565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a1057600080fd5b62000a1b8362000717565b9150602083013567ffffffffffffffff8082111562000a3957600080fd5b818501915085601f83011262000a4e57600080fd5b81358181111562000a635762000a63620009e6565b604051601f8201601f19908116603f0116810190838211818310171562000a8e5762000a8e620009e6565b8160405282815288602084870101111562000aa857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000aee60408301846200091b565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000b2f5762000b2f62000af6565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000b6b5762000b6b62000af6565b6001019392505050565b6001600160a01b038316815260406020820152600062000aee6040830184620008d356fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122096cff59a71f485568765feb311351bd2bc091e56d1eb2549868abdb3ec1c112f64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516112fd61011960003960008181610342015281816103dd015281816104e40152818161057a015261067501526112fd6000f3fe6080604052600436106100c75760003560e01c80635c60da1b11610074578063c9c4bfca1161004e578063c9c4bfca146101f3578063e27e9a4e14610227578063efe51cca1461023c57600080fd5b80635c60da1b146101a75780636accab8c146101bc578063c4d66de8146101d357600080fd5b806341de6830116100a557806341de6830146101555780634f1ef2861461017157806352d1902d1461018457600080fd5b806301ffc9a7146100cc5780633659cfe6146101015780634162169f14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ff6565b610253565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c36600461104d565b610338565b005b34801561012f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b34801561016157600080fd5b5060006040516100f8919061106a565b61012161017f3660046110da565b6104da565b34801561019057600080fd5b50610199610668565b6040519081526020016100f8565b3480156101b357600080fd5b5061013d61072d565b3480156101c857600080fd5b5061019961012d5481565b3480156101df57600080fd5b506101216101ee36600461104d565b610765565b3480156101ff57600080fd5b506101997f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561023357600080fd5b50610121610867565b34801561024857600080fd5b5061019961012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102e657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061033257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103db5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104367f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104b25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b6104bb81610953565b604080516000808252602082019092526104d791839190610990565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105785760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016103d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b61065882610953565b61066482826001610990565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103d2565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600290610100900460ff16158015610787575060005460ff8083169116105b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b6000805461ffff191660ff83161761010017905561081682610b35565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290610100900460ff16158015610889575060005460ff8083169116105b6108fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610664906001600160a01b0316303384600036610bbb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c8576109c383610ca9565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a22575060408051601f3d908101601f19168201909252610a1f9181019061119e565b60015b610a945760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b295760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103d2565b506109c3838383610d7f565b600054610100900460ff16610bb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b6104d781610daa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c0890889088908890889088906004016111b7565b602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061120b565b610ca1576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103d2565b505050505050565b6001600160a01b0381163b610d265760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d8883610e61565b600082511180610d955750805b156109c357610da48383610ea1565b50505050565b600054610100900460ff16610e275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e6a81610ca9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103d2565b600080846001600160a01b031684604051610f3b9190611251565b600060405180830381855af49150503d8060008114610f76576040519150601f19603f3d011682016040523d82523d6000602084013e610f7b565b606091505b5091509150610fa382826040518060600160405280602781526020016112a160279139610fac565b95945050505050565b60608315610fbb575081610fc5565b610fc58383610fcc565b9392505050565b815115610fdc5781518083602001fd5b8060405162461bcd60e51b81526004016103d2919061126d565b60006020828403121561100857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fc557600080fd5b6001600160a01b03811681146104d757600080fd5b60006020828403121561105f57600080fd5b8135610fc581611038565b60208101600383106110a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156110ed57600080fd5b82356110f881611038565b9150602083013567ffffffffffffffff8082111561111557600080fd5b818501915085601f83011261112957600080fd5b81358181111561113b5761113b6110ab565b604051601f8201601f19908116603f01168101908382118183101715611163576111636110ab565b8160405282815288602084870101111561117c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156111b057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561121d57600080fd5b81518015158114610fc557600080fd5b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000825161126381846020870161122d565b9190910192915050565b602081526000825180602084015261128c81604085016020870161122d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6e1ded66efe06d100f62c192b98b893065508d3441b03f5a77f7abf7ffd7e964736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033\";\nconst isSuperArgs$d = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableSetupV3Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$d(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$f, _bytecode$d, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$f);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$f, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableSetupV3Mock__factory.bytecode = _bytecode$d;\nPluginUUPSUpgradeableSetupV3Mock__factory.abi = _abi$f;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$e = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_pluginUUPSUpgradeableV3\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"prepareInstallation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"plugin\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUninstallation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum PermissionLib.Operation\",\n                        name: \"operation\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"where\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"who\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"condition\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"permissionId\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                name: \"permissions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_currentBuild\",\n                type: \"uint16\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"plugin\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address[]\",\n                        name: \"currentHelpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.SetupPayload\",\n                name: \"_payload\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"prepareUpdate\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"initData\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"helpers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum PermissionLib.Operation\",\n                                name: \"operation\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"where\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"who\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"condition\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"permissionId\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct PermissionLib.MultiTargetPermission[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct IPluginSetup.PreparedSetupData\",\n                name: \"preparedSetupData\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$c = \"0x608060405234801561001057600080fd5b5060405162005212380380620052128339810160408190526100319161013c565b60405161003d90610112565b604051809103906000f080158015610059573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905560405161008690610120565b604051809103906000f0801580156100a2573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040516100cf9061012e565b604051809103906000f0801580156100eb573d6000803e3d6000fd5b5050600080546001600160a01b0319166001600160a01b039290921691909117905561016c565b61132b806200158683390190565b61141680620028b183390190565b61154b8062003cc783390190565b60006020828403121561014e57600080fd5b81516001600160a01b038116811461016557600080fd5b9392505050565b61140a806200017c6000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80639cb0a12411620000565780639cb0a12414620000bc578063a8a9c29e14620000e2578063f10832f1146200010957600080fd5b806301ffc9a714620000745780635c60da1b14620000a0575b600080fd5b6200008b6200008536600462000761565b62000130565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b03909116815260200162000097565b620000d3620000cd366004620007d5565b620001ca565b604051620000979190620008a6565b620000f9620000f3366004620008f3565b620001e2565b6040516200009792919062000a42565b620001206200011a36600462000a8a565b62000278565b6040516200009792919062000b58565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620001c457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060620001db6000600180620002dd565b9392505050565b606062000202604051806040016040528060608152602001606081525090565b8361ffff166003036200022a576200021f600360046000620002dd565b602082015262000270565b8361ffff16600114806200024257508361ffff166002145b156200027057620002558585856200047f565b90925090506200026a600460056000620002dd565b60208201525b935093915050565b600062000298604051806040016040528060608152602001606081525090565b600054620002b0906001600160a01b031685620005ad565b9150620002be600362000653565b8152620002cf6000600381620002dd565b602082015290939092509050565b6060836001600160a01b0316836001600160a01b031611620002fe57600080fd5b6200030a848462000b9a565b6001600160a01b031667ffffffffffffffff8111156200032e576200032e62000a74565b604051908082528060200260200182016040528015620003a757816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816200034d5790505b509050835b836001600160a01b0316816001600160a01b0316101562000477576040518060a00160405280846002811115620003e757620003e762000829565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826200043a878462000b9a565b6001600160a01b03168151811062000456576200045662000bc4565b602002602001018190525080806200046e9062000bda565b915050620003ac565b509392505050565b60606200049f604051806040016040528060608152602001606081525090565b8361ffff166001036200052957620004b8600362000653565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef469500000000000000000000000000000000000000000000000000000000179052915062000523600160036000620002dd565b60208201525b8361ffff16600203620002705762000542600362000653565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140457680000000000000000000000000000000000000000000000000000000017905291506200026a600260036000620002dd565b6040516001600160a01b0382166024820152600090620001db9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000717565b6060816001600160a01b031667ffffffffffffffff8111156200067a576200067a62000a74565b604051908082528060200260200182016040528015620006a4578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000711578082826001600160a01b031681518110620006e457620006e462000bc4565b6001600160a01b039092166020928302919091019091015280620007088162000bda565b915050620006aa565b50919050565b60008282604051620007299062000753565b6200073692919062000c03565b604051809103906000f08015801562000477573d6000803e3d6000fd5b6107ad8062000c2883390190565b6000602082840312156200077457600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620001db57600080fd5b80356001600160a01b0381168114620007bd57600080fd5b919050565b6000606082840312156200071157600080fd5b60008060408385031215620007e957600080fd5b620007f483620007a5565b9150602083013567ffffffffffffffff8111156200081157600080fd5b6200081f85828601620007c2565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200086257634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620008e757620008d88385516200083f565b938501939250600101620008c2565b50909695505050505050565b6000806000606084860312156200090957600080fd5b6200091484620007a5565b9250602084013561ffff811681146200092c57600080fd5b9150604084013567ffffffffffffffff8111156200094957600080fd5b6200095786828701620007c2565b9150509250925092565b6000815180845260005b8181101562000989576020818501810151868301820152016200096b565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009f05783516001600160a01b031683529284019291840191600101620009c9565b50508483015186820387850152805180835290840192506000918401905b8083101562000a375762000a248285516200083f565b9150848401935060018301925062000a0e565b509695505050505050565b60408152600062000a57604083018562000961565b828103602084015262000a6b8185620009a9565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a9e57600080fd5b62000aa983620007a5565b9150602083013567ffffffffffffffff8082111562000ac757600080fd5b818501915085601f83011262000adc57600080fd5b81358181111562000af15762000af162000a74565b604051601f8201601f19908116603f0116810190838211818310171562000b1c5762000b1c62000a74565b8160405282815288602084870101111562000b3657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000b7c6040830184620009a9565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000bbd5762000bbd62000b84565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000bf95762000bf962000b84565b6001019392505050565b6001600160a01b038316815260406020820152600062000b7c60408301846200096156fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a7c6f2fcb78c7b4c40d8fd8b3b79a2770d3af4a9e7da56689bfa5ce2c1ce5a2164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122079f2acd32c16646ddc77eb36843a38e815c11c2f7d9862f7b3534d534889698e64736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611212610119600039600081816103000152818161039b015281816104a201528181610538015261063301526112126000f3fe6080604052600436106100b15760003560e01c806352d1902d116100695780636accab8c1161004e5780636accab8c146101a6578063c4d66de8146101bd578063c9c4bfca146101dd57600080fd5b806352d1902d1461016e5780635c60da1b1461019157600080fd5b80634162169f1161009a5780634162169f1461010d57806341de68301461013f5780634f1ef2861461015b57600080fd5b806301ffc9a7146100b65780633659cfe6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610f0b565b610211565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b610106366004610f62565b6102f6565b005b34801561011957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561014b57600080fd5b5060006040516100e29190610f7f565b61010b610169366004610fef565b610498565b34801561017a57600080fd5b50610183610626565b6040519081526020016100e2565b34801561019d57600080fd5b506101276106eb565b3480156101b257600080fd5b5061018361012d5481565b3480156101c957600080fd5b5061010b6101d8366004610f62565b610723565b3480156101e957600080fd5b506101837f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102a457507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806102f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61047981610868565b60408051600080825260208201909252610495918391906108a5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610390565b61061682610868565b610622828260016108a5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610390565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061071e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156107435750600054600160ff909116105b8061075d5750303b15801561075d575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610390565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610810576000805461ff0019166101001790555b61081982610a4a565b600161012d558015610622576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610622906001600160a01b0316303384600036610ad0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108dd576108d883610bbe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610937575060408051601f3d908101601f19168201909252610934918101906110b3565b60015b6109a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a3e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610390565b506108d8838383610c94565b600054610100900460ff16610ac75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b61049581610cbf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610b1d90889088908890889088906004016110cc565b602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611120565b610bb6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610390565b505050505050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610c9d83610d76565b600082511180610caa5750805b156108d857610cb98383610db6565b50505050565b600054610100900460ff16610d3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610390565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d7f81610bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610e355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610390565b600080846001600160a01b031684604051610e509190611166565b600060405180830381855af49150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150610eb882826040518060600160405280602781526020016111b660279139610ec1565b95945050505050565b60608315610ed0575081610eda565b610eda8383610ee1565b9392505050565b815115610ef15781518083602001fd5b8060405162461bcd60e51b81526004016103909190611182565b600060208284031215610f1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b6001600160a01b038116811461049557600080fd5b600060208284031215610f7457600080fd5b8135610eda81610f4d565b6020810160038310610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561100257600080fd5b823561100d81610f4d565b9150602083013567ffffffffffffffff8082111561102a57600080fd5b818501915085601f83011261103e57600080fd5b81358181111561105057611050610fc0565b604051601f8201601f19908116603f0116810190838211818310171561107857611078610fc0565b8160405282815288602084870101111561109157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156110c557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561113257600080fd5b81518015158114610eda57600080fd5b60005b8381101561115d578181015183820152602001611145565b50506000910152565b60008251611178818460208701611142565b9190910192915050565b60208152600082518060208401526111a1816040850160208701611142565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aa78becc040bb3be58b18d3e806d765b5d7029603ff728567eb601cf8b1df89564736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516112fd61011960003960008181610342015281816103dd015281816104e40152818161057a015261067501526112fd6000f3fe6080604052600436106100c75760003560e01c80635c60da1b11610074578063c9c4bfca1161004e578063c9c4bfca146101f3578063e27e9a4e14610227578063efe51cca1461023c57600080fd5b80635c60da1b146101a75780636accab8c146101bc578063c4d66de8146101d357600080fd5b806341de6830116100a557806341de6830146101555780634f1ef2861461017157806352d1902d1461018457600080fd5b806301ffc9a7146100cc5780633659cfe6146101015780634162169f14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ff6565b610253565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c36600461104d565b610338565b005b34801561012f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b34801561016157600080fd5b5060006040516100f8919061106a565b61012161017f3660046110da565b6104da565b34801561019057600080fd5b50610199610668565b6040519081526020016100f8565b3480156101b357600080fd5b5061013d61072d565b3480156101c857600080fd5b5061019961012d5481565b3480156101df57600080fd5b506101216101ee36600461104d565b610765565b3480156101ff57600080fd5b506101997f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561023357600080fd5b50610121610867565b34801561024857600080fd5b5061019961012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102e657507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061033257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103db5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104367f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104b25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b6104bb81610953565b604080516000808252602082019092526104d791839190610990565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105785760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016103d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016103d2565b61065882610953565b61066482826001610990565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103d2565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600290610100900460ff16158015610787575060005460ff8083169116105b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b6000805461ffff191660ff83161761010017905561081682610b35565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290610100900460ff16158015610889575060005460ff8083169116105b6108fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610664906001600160a01b0316303384600036610bbb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c8576109c383610ca9565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a22575060408051601f3d908101601f19168201909252610a1f9181019061119e565b60015b610a945760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610b295760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103d2565b506109c3838383610d7f565b600054610100900460ff16610bb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b6104d781610daa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610c0890889088908890889088906004016111b7565b602060405180830381865afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061120b565b610ca1576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103d2565b505050505050565b6001600160a01b0381163b610d265760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103d2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d8883610e61565b600082511180610d955750805b156109c357610da48383610ea1565b50505050565b600054610100900460ff16610e275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610e6a81610ca9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103d2565b600080846001600160a01b031684604051610f3b9190611251565b600060405180830381855af49150503d8060008114610f76576040519150601f19603f3d011682016040523d82523d6000602084013e610f7b565b606091505b5091509150610fa382826040518060600160405280602781526020016112a160279139610fac565b95945050505050565b60608315610fbb575081610fc5565b610fc58383610fcc565b9392505050565b815115610fdc5781518083602001fd5b8060405162461bcd60e51b81526004016103d2919061126d565b60006020828403121561100857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fc557600080fd5b6001600160a01b03811681146104d757600080fd5b60006020828403121561105f57600080fd5b8135610fc581611038565b60208101600383106110a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156110ed57600080fd5b82356110f881611038565b9150602083013567ffffffffffffffff8082111561111557600080fd5b818501915085601f83011261112957600080fd5b81358181111561113b5761113b6110ab565b604051601f8201601f19908116603f01168101908382118183101715611163576111636110ab565b8160405282815288602084870101111561117c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156111b057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561121d57600080fd5b81518015158114610fc557600080fd5b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000825161126381846020870161122d565b9190910192915050565b602081526000825180602084015261128c81604085016020870161122d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6e1ded66efe06d100f62c192b98b893065508d3441b03f5a77f7abf7ffd7e964736f6c6343000811003360a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611432610119600039600081816104760152818161050c01528181610613015281816106a901526107a401526114326000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780637cef4695116100595780637cef469514610215578063c4d66de81461022a578063c9c4bfca1461024a578063efe51cca1461027e57600080fd5b806352d1902d146101d45780635c60da1b146101e95780636accab8c146101fe57600080fd5b80633659cfe6116100bb5780633659cfe6146101535780634162169f1461017357806341de6830146101a55780634f1ef286146101c157600080fd5b806301ffc9a7146100e257806314045768146101175780632491118d1461012e575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461112b565b610295565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c61037a565b005b34801561013a57600080fd5b5061014561012f5481565b60405190815260200161010e565b34801561015f57600080fd5b5061012c61016e366004611182565b61046c565b34801561017f57600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b3480156101b157600080fd5b50600060405161010e919061119f565b61012c6101cf36600461120f565b610609565b3480156101e057600080fd5b50610145610797565b3480156101f557600080fd5b5061018d61085c565b34801561020a57600080fd5b5061014561012d5481565b34801561022157600080fd5b5061012c610894565b34801561023657600080fd5b5061012c610245366004611182565b610980565b34801561025657600080fd5b506101457f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561028a57600080fd5b5061014561012e5481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061032857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061037457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600054600390610100900460ff1615801561039c575060005460ff8083169116105b6104135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105657f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b6105ea81610a88565b6040805160008082526020820190925261060691839190610ac5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161040a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461077e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161040a565b61078782610a88565b61079382826001610ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108375760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161040a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061088f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156108b6575060005460ff8083169116105b6109285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610461565b600054600390610100900460ff161580156109a2575060005460ff8083169116105b610a145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161040a565b6000805461ffff191660ff831617610100179055610a3182610c6a565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610793906001600160a01b0316303384600036610cf0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610afd57610af883610dde565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b57575060408051601f3d908101601f19168201909252610b54918101906112d3565b60015b610bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161040a565b50610af8838383610eb4565b600054610100900460ff16610ce75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b61060681610edf565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d3d90889088908890889088906004016112ec565b602060405180830381865afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190611340565b610dd6576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161040a565b505050505050565b6001600160a01b0381163b610e5b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161040a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610ebd83610f96565b600082511180610eca5750805b15610af857610ed98383610fd6565b50505050565b600054610100900460ff16610f5c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161040a565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610f9f81610dde565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161040a565b600080846001600160a01b0316846040516110709190611386565b600060405180830381855af49150503d80600081146110ab576040519150601f19603f3d011682016040523d82523d6000602084013e6110b0565b606091505b50915091506110d882826040518060600160405280602781526020016113d6602791396110e1565b95945050505050565b606083156110f05750816110fa565b6110fa8383611101565b9392505050565b8151156111115781518083602001fd5b8060405162461bcd60e51b815260040161040a91906113a2565b60006020828403121561113d57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110fa57600080fd5b6001600160a01b038116811461060657600080fd5b60006020828403121561119457600080fd5b81356110fa8161116d565b60208101600383106111da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561122257600080fd5b823561122d8161116d565b9150602083013567ffffffffffffffff8082111561124a57600080fd5b818501915085601f83011261125e57600080fd5b813581811115611270576112706111e0565b604051601f8201601f19908116603f01168101908382118183101715611298576112986111e0565b816040528281528860208487010111156112b157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112e557600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561135257600080fd5b815180151581146110fa57600080fd5b60005b8381101561137d578181015183820152602001611365565b50506000910152565b60008251611398818460208701611362565b9190910192915050565b60208152600082518060208401526113c1816040850160208701611362565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f630624ef7278c36f89f9302f8fe3a5d36e9894ea29bd6ddac229bf41ce9435e64736f6c63430008110033\";\nconst isSuperArgs$c = (xs) => xs.length > 1;\nclass PluginUUPSUpgradeableSetupV4Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$c(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$e, _bytecode$c, args[0]);\n        }\n    }\n    deploy(_pluginUUPSUpgradeableV3, overrides) {\n        return super.deploy(_pluginUUPSUpgradeableV3, overrides || {});\n    }\n    getDeployTransaction(_pluginUUPSUpgradeableV3, overrides) {\n        return super.getDeployTransaction(_pluginUUPSUpgradeableV3, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$e);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$e, signerOrProvider);\n    }\n}\nPluginUUPSUpgradeableSetupV4Mock__factory.bytecode = _bytecode$c;\nPluginUUPSUpgradeableSetupV4Mock__factory.abi = _abi$e;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$a = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PluginUUPSUpgradeableSetupV1Mock__factory: PluginUUPSUpgradeableSetupV1Mock__factory,\n  PluginUUPSUpgradeableSetupV1MockBad__factory: PluginUUPSUpgradeableSetupV1MockBad__factory,\n  PluginUUPSUpgradeableSetupV2Mock__factory: PluginUUPSUpgradeableSetupV2Mock__factory,\n  PluginUUPSUpgradeableSetupV3Mock__factory: PluginUUPSUpgradeableSetupV3Mock__factory,\n  PluginUUPSUpgradeableSetupV4Mock__factory: PluginUUPSUpgradeableSetupV4Mock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$9 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  pluginUupsUpgradeableMockSol: index$b,\n  pluginUupsUpgradeableSetupMockSol: index$a\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$d = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"member\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidAddresslistUpdate\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_newAddresses\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"addAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"addresslistLength\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"addresslistLengthAtBlock\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n        ],\n        name: \"isListed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isListedAtBlock\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_exitingAddresses\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"removeAddresses\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$b = \"0x608060405234801561001057600080fd5b50610988806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a84eb99911610050578063a84eb999146100ba578063b1bb8d26146100cd578063f794062e146100f057600080fd5b806327f1608d146100775780633628731c146100925780636a6b2d86146100a7575b600080fd5b61007f610103565b6040519081526020015b60405180910390f35b6100a56100a03660046107e2565b61011d565b005b61007f6100b5366004610857565b61012b565b6100a56100c83660046107e2565b61013e565b6100e06100db366004610899565b610148565b6040519015158152602001610089565b6100e06100fe3660046108c3565b610181565b600061010f60016101c2565b6001600160e01b0316905090565b610127828261020b565b5050565b6000610138600183610336565b92915050565b61012782826103e9565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081206101779083610336565b6001149392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081206101af906101c2565b6001600160e01b03166001149050919050565b80546000908015610201576101ea836101dc6001846108f4565b600091825260209091200190565b5464010000000090046001600160e01b0316610204565b60005b9392505050565b60005b818110156103215761024083838381811061022b5761022b610907565b90506020020160208101906100fe91906108c3565b156102bc5782828281811061025757610257610907565b905060200201602081019061026c91906108c3565b6040517fc0b7477d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b61031760016000808686868181106102d6576102d6610907565b90506020020160208101906102eb91906108c3565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002090610452565b505060010161020e565b5061033060016104868361048a565b50505050565b60004382106103875760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016102b3565b6000610392836104c2565b845490915060006103a586848385610542565b905080156103d3576103bc866101dc6001846108f4565b5464010000000090046001600160e01b03166103d6565b60005b6001600160e01b03169695505050505050565b60005b818110156104435761040983838381811061022b5761022b610907565b61041f5782828281811061025757610257610907565b61043960008060008686868181106102d6576102d6610907565b50506001016103ec565b5061033060016105a08361048a565b60008061047084610462436104c2565b61046b866105a5565b610624565b6001600160e01b03918216969116945092505050565b0190565b6000806104b5856104b061049d886101c2565b6001600160e01b0316868863ffffffff16565b610452565b915091505b935093915050565b600063ffffffff82111561053e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016102b3565b5090565b60005b8183101561059857600061055984846107c7565b60008781526020902090915063ffffffff86169082015463ffffffff16111561058457809250610592565b61058f81600161091d565b93505b50610545565b509392505050565b900390565b60006001600160e01b0382111561053e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016102b3565b82546000908190801561076d576000610642876101dc6001856108f4565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b0316602084015291925090871610156106c45760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016102b3565b805163ffffffff80881691160361070d57846106e5886101dc6001866108f4565b80546001600160e01b03929092166401000000000263ffffffff90921691909117905561075d565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506104ba9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816104ba565b60006107d66002848418610930565b6102049084841661091d565b600080602083850312156107f557600080fd5b823567ffffffffffffffff8082111561080d57600080fd5b818501915085601f83011261082157600080fd5b81358181111561083057600080fd5b8660208260051b850101111561084557600080fd5b60209290920196919550909350505050565b60006020828403121561086957600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461089457600080fd5b919050565b600080604083850312156108ac57600080fd5b6108b583610870565b946020939093013593505050565b6000602082840312156108d557600080fd5b61020482610870565b634e487b7160e01b600052601160045260246000fd5b81810381811115610138576101386108de565b634e487b7160e01b600052603260045260246000fd5b80820180821115610138576101386108de565b60008261094d57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122080d9c453eafa972d52b7c1efe486696db814277072f220b27be1b29d1460f7f564736f6c63430008110033\";\nconst isSuperArgs$b = (xs) => xs.length > 1;\nclass AddresslistMock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$b(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$d, _bytecode$b, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$d);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$d, signerOrProvider);\n    }\n}\nAddresslistMock__factory.bytecode = _bytecode$b;\nAddresslistMock__factory.abi = _abi$d;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$c = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"deployClone\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"clone\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$a = \"0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b6112558061021b83390190565b6080516101a96100726000396000606801526101a96000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630227bcf014610030575b600080fd5b610038610061565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60006100a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166100a7565b905090565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661016e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b91905056fea264697066735822122048e9d17fc1daa61d2be9461606c003a21df02f24ba6ccd710a0fd5002d47503564736f6c63430008110033608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611168806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a230c5241161005b578063a230c524146100f4578063c4d66de814610107578063cfceb5881461011a578063da35c6641461014f57600080fd5b806301ffc9a71461008d5780634162169f146100b557806341de6830146100d057806361af5ebe146100df575b600080fd5b6100a061009b3660046109be565b610157565b60405190151581526020015b60405180910390f35b6065546040516001600160a01b0390911681526020016100ac565b60016040516100ac9190610a07565b6100f26100ed366004610a48565b6101ff565b005b6100a0610102366004610b2a565b61028f565b6100f2610115366004610b2a565b610344565b6101417ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea88788981565b6040519081526020016100ac565b6101416104bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa57933560000000000000000000000000000000000000000000000000000000014806101ea57507fffffffff0000000000000000000000000000000000000000000000000000000082167fa230c52400000000000000000000000000000000000000000000000000000000145b806101f957506101f9826104cd565b92915050565b6065547ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea8878899061023c906001600160a01b0316303384600036610523565b600061024742610611565b9050600061025b33898985868b8b8b610695565b90506102836102726065546001600160a01b031690565b8261027d888a610c1c565b876106fb565b50505050505050505050565b60006102a36065546001600160a01b031690565b6001600160a01b031663fdef910630847ff281525e53675515a6ba7cc7bea8a81e649b3608423ee2d73be1752cea887889604051806020016040528060008152506040518563ffffffff1660e01b81526004016103039493929190610d76565b602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610db2565b600054610100900460ff16158080156103645750600054600160ff909116105b8061037e5750303b15801561037e575060005460ff166001145b6103f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610436576000805461ff0019166101001790555b61043f826107ca565b6040516001600160a01b038316907f3f1ec22954d444cb99f80a1989ac8f631616b8a575a89379e514c0f7f748c93390600090a280156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006104c860975490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fda35c6640000000000000000000000000000000000000000000000000000000014806101f957506101f982610853565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105709088908890889088908890600401610dff565b602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610db2565b610609576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103ec565b505050505050565b600067ffffffffffffffff8211156106915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016103ec565b5090565b600061069f6108ea565b9050886001600160a01b0316817fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c9288888c8c8a8a8a6040516106e79796959493929190610e3d565b60405180910390a398975050505050505050565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf3249061074a90889088908890600401610f88565b6000604051808303816000875af1158015610769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610791919081019061103e565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b600054610100900460ff166108475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b61085081610907565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806101f957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146101f9565b60006108f46104bd565b9050610904609780546001019055565b90565b600054610100900460ff166109845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ec565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000602082840312156109d057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a0057600080fd5b9392505050565b6020810160038310610a42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060608688031215610a6057600080fd5b853567ffffffffffffffff80821115610a7857600080fd5b818801915088601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b896020828501011115610aad57600080fd5b602092830197509550908701359080821115610ac857600080fd5b818801915088601f830112610adc57600080fd5b813581811115610aeb57600080fd5b8960208260051b8501011115610b0057600080fd5b96999598505060200195604001359392505050565b6001600160a01b038116811461085057600080fd5b600060208284031215610b3c57600080fd5b8135610a0081610b15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b9957610b99610b47565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610b47565b604052919050565b600067ffffffffffffffff821115610bea57610bea610b47565b5060051b60200190565b600067ffffffffffffffff821115610c0e57610c0e610b47565b50601f01601f191660200190565b6000610c2f610c2a84610bd0565b610b9f565b80848252602080830192508560051b850136811115610c4d57600080fd5b855b81811015610d1a57803567ffffffffffffffff80821115610c705760008081fd5b818901915060608236031215610c865760008081fd5b610c8e610b76565b8235610c9981610b15565b8152828601358682015260408084013583811115610cb75760008081fd5b939093019236601f850112610cce57600092508283fd5b83359250610cde610c2a84610bf4565b8381523688858701011115610cf35760008081fd5b83888601898301376000938101880193909352810191909152865250938201938201610c4f565b50919695505050505050565b60005b83811015610d41578181015183820152602001610d29565b50506000910152565b60008151808452610d62816020860160208601610d26565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610da86080830184610d4a565b9695505050505050565b600060208284031215610dc457600080fd5b81518015158114610a0057600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152610e32608083018486610dd4565b979650505050505050565b600067ffffffffffffffff808a1683526020818a1681850152604060a081860152610e6c60a086018a8c610dd4565b606086820381880152818983528483019050848a60051b8401018b60005b8c811015610f6a57601f1986840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18f3603018112610ecd57600080fd5b8e018035610eda81610b15565b6001600160a01b03168452808901358985015287810135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112610f2257600080fd5b0188810190358a811115610f3557600080fd5b803603821315610f4457600080fd5b8689860152610f568786018284610dd4565b958a01959450505090870190600101610e8a565b50508097505050505050505082608083015298975050505050505050565b600060608083018684526020828186015281875180845260808701915060808160051b880101935082890160005b82811015611027578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180516001600160a01b03168752858101518688015260409081015190870188905261101488880182610d4a565b9650509284019290840190600101610fb6565b505050505060409390930193909352509392505050565b600080604080848603121561105257600080fd5b835167ffffffffffffffff8082111561106a57600080fd5b818601915086601f83011261107e57600080fd5b8151602061108e610c2a83610bd0565b82815260059290921b8401810191818101908a8411156110ad57600080fd5b8286015b8481101561111e578051868111156110c95760008081fd5b8701603f81018d136110db5760008081fd5b848101516110eb610c2a82610bf4565b8181528e8b8385010111156111005760008081fd5b61110f828883018d8601610d26565b855250509183019183016110b1565b50989091015197999798505050505050505056fea2646970667358221220f8a601bb27aa23726e8123b3c7e7d4fd7f42220cc07966c8a6e2c11440cdea1964736f6c63430008110033\";\nconst isSuperArgs$a = (xs) => xs.length > 1;\nclass AdminCloneFactory__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$a(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$c, _bytecode$a, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$c);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$c, signerOrProvider);\n    }\n}\nAdminCloneFactory__factory.bytecode = _bytecode$a;\nAdminCloneFactory__factory.abi = _abi$c;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$b = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"DateOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint64\",\n                name: \"limit\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"actual\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"MinDurationOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposalCreationForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecutionForbidden\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"limit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RatioOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"VoteCastForbidden\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"creator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"startDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"endDate\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"metadata\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalCreated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ProposalExecuted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"voter\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"voteOption\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"votingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VoteCast\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"votingMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"supportThreshold\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"minParticipation\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"minDuration\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"minProposerVotingPower\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"VotingSettingsUpdated\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"UPDATE_VOTING_SETTINGS_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"canExecute\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"canVote\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        name: \"createProposal\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"execute\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getProposal\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"open\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"executed\",\n                type: \"bool\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"startDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"endDate\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"snapshotBlock\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.ProposalParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"abstain\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"yes\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"no\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.Tally\",\n                name: \"tally\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"to\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IDAO.Action[]\",\n                name: \"actions\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"allowFailureMap\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_voter\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVoteOption\",\n        outputs: [\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"implementation\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"initializeMock\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isMinParticipationReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReached\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isSupportThresholdReachedEarly\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minDuration\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minParticipation\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minProposerVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pluginType\",\n        outputs: [\n            {\n                internalType: \"enum IPlugin.PluginType\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proposalCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"supportThreshold\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"totalVotingPower\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"enum MajorityVotingBase.VotingMode\",\n                        name: \"votingMode\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"supportThreshold\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint32\",\n                        name: \"minParticipation\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"minDuration\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"minProposerVotingPower\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct MajorityVotingBase.VotingSettings\",\n                name: \"_votingSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"updateVotingSettings\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"enum IMajorityVoting.VoteOption\",\n                name: \"_voteOption\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_tryEarlyExecution\",\n                type: \"bool\",\n            },\n        ],\n        name: \"vote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"votingMode\",\n        outputs: [\n            {\n                internalType: \"enum MajorityVotingBase.VotingMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$9 = \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161285a6200012060003960008181610740015281816107db015281816108e2015281816109780152610a6f015261285a6000f3fe6080604052600436106101b75760003560e01c80635c60da1b116100ec578063c9c4bfca1161008a578063cf13114911610064578063cf1311491461057b578063da35c6641461059b578063f60046b2146105b0578063fe0d94c1146105c657600080fd5b8063c9c4bfca14610507578063cc63604a1461053b578063ce6366c41461055b57600080fd5b80638a4b00f8116100c65780638a4b00f814610433578063970601d8146104535780639cba3021146104ab578063c7f758a8146104d557600080fd5b80635c60da1b146103dd578063693e0064146103f25780637c36e8e81461041257600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461035357806352d1902d14610366578063536f9f421461037b578063567157611461039c57600080fd5b80633659cfe6146102ed5780634162169f1461030d57806341de68301461033f57600080fd5b80630dfb278e116101955780630dfb278e1461024757806317d1b404146102695780631befc4051461028957806323d07188146102cb57600080fd5b806301ffc9a7146101bc578063054fd2c2146101f15780630de2185614610227575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611dcd565b6105e6565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101605465010000000000900463ffffffff165b60405163ffffffff90911681526020016101e8565b34801561023357600080fd5b506101dc610242366004611df7565b61065e565b34801561025357600080fd5b50610267610262366004611e28565b6106e1565b005b34801561027557600080fd5b506101dc610284366004611e6d565b61072c565b34801561029557600080fd5b506102bd7fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe581565b6040519081526020016101e8565b3480156102d757600080fd5b506101605460ff165b6040516101e89190611ed1565b3480156102f957600080fd5b50610267610308366004611ee4565b610736565b34801561031957600080fd5b5060c9546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561034b57600080fd5b5060006102e0565b610267610361366004611f70565b6108d8565b34801561037257600080fd5b506102bd610a62565b34801561038757600080fd5b506102bd610396366004611df7565b50600090565b3480156103a857600080fd5b50610160546901000000000000000000900467ffffffffffffffff1660405167ffffffffffffffff90911681526020016101e8565b3480156103e957600080fd5b50610327610b27565b3480156103fe57600080fd5b5061026761040d366004612003565b610b5f565b34801561041e57600080fd5b5061016054610100900463ffffffff16610212565b34801561043f57600080fd5b506101dc61044e366004611df7565b610c83565b34801561045f57600080fd5b5061049e61046e366004612039565b600082815261015f602090815260408083206001600160a01b038516845260060190915290205460ff1692915050565b6040516101e8919061207d565b3480156104b757600080fd5b506102bd6104c6366004612111565b60009998505050505050505050565b3480156104e157600080fd5b506104f56104f0366004611df7565b610cc3565b6040516101e8969594939291906122c4565b34801561051357600080fd5b506102bd7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561054757600080fd5b506101dc610556366004611df7565b610f3d565b34801561056757600080fd5b5061026761057636600461237c565b610f48565b34801561058757600080fd5b506101dc610596366004611df7565b610f50565b3480156105a757600080fd5b506102bd610fb2565b3480156105bc57600080fd5b50610161546102bd565b3480156105d257600080fd5b506102676105e1366004611df7565b610fbe565b60006001600160e01b031982167f8678b01e00000000000000000000000000000000000000000000000000000000148061064957506001600160e01b031982167f4d19145e00000000000000000000000000000000000000000000000000000000145b80610658575061065882611009565b92915050565b600081815261015f602052604081206003810154600482015483919061068490836123d2565b61068e91906123d2565b60018301549091506106ac908290610100900463ffffffff166123e5565b600483015460018401546106ce90610100900463ffffffff16620f42406123d2565b6106d891906123e5565b11949350505050565b60c9547fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe59061071f906001600160a01b031630335b84600036611047565b61072882611135565b5050565b60015b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107d95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108347f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146108b05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107d0565b6108b981611338565b604080516000808252602082019092526108d591839190611371565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109765760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a4d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107d0565b610a5682611338565b61072882826001611371565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b025760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107d0565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000610b5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff1615808015610b7f5750600054600160ff909116105b80610b995750303b158015610b99575060005460ff166001145b610c0b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107d0565b6000805460ff191660011790558015610c2e576000805461ff0019166101001790555b610c388383611511565b8015610c7e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600081815261015f602052604081206002810154600382015460058301546004840154610cb091906123fc565b610cba91906123fc565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290528190610d1a60405180606001604052806000815260200160008152602001600081525090565b600085815261015f6020526040812060609190610d36816115a0565b81546040805160c08101909152600184018054939a5060ff9283169950909290918391166002811115610d6b57610d6b611eab565b6002811115610d7c57610d7c611eab565b8152815463ffffffff61010082041660208084019190915267ffffffffffffffff65010000000000830481166040808601919091526d0100000000000000000000000000840482166060808701919091527501000000000000000000000000000000000000000000909404909116608085015260019094015460a090930192909252825190810183526003850154815260048501548183015260058501548184015260078501805484518185028101850190955280855294995090975091929060009084015b82821015610f26576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191610e959061240f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec19061240f565b8015610f0e5780601f10610ee357610100808354040283529160200191610f0e565b820191906000526020600020905b815481529060010190602001808311610ef157829003601f168201915b50505050508152505081526020019060010190610e42565b505050509250806008015491505091939550919395565b60006106588261160e565b335b50505050565b600081815261015f6020526040812060058101546001820154610f7e9190610100900463ffffffff166123e5565b60048201546001830154610fa090610100900463ffffffff16620f42406123d2565b610faa91906123e5565b119392505050565b6000610b5a61012d5490565b610fc78161160e565b611000576040517f9fefd0f1000000000000000000000000000000000000000000000000000000008152600481018290526024016107d0565b6108d5816116b6565b60006001600160e01b031982167fda35c66400000000000000000000000000000000000000000000000000000000148061065857506106588261181e565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906110949088908890889088908890600401612443565b602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190612497565b61112d576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016107d0565b505050505050565b6111436001620f42406123d2565b61115360408301602084016124c6565b63ffffffff1611156111be5761116d6001620f42406123d2565b61117d60408301602084016124c6565b6040517fcc80c195000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff1660248201526044016107d0565b620f42406111d260608301604084016124c6565b63ffffffff1611156111f257620f424061117d60608301604084016124c6565b610e1061120560808301606084016124e3565b67ffffffffffffffff16101561126e57610e1061122860808301606084016124e3565b6040517fc51033ee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9283166004820152911660248201526044016107d0565b6301e1338061128360808301606084016124e3565b67ffffffffffffffff1611156112a8576301e1338061122860808301606084016124e3565b806101606112b6828261251a565b507fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e90506112e7602083018361262d565b6112f760408401602085016124c6565b61130760608501604086016124c6565b61131760808601606087016124e3565b856080013560405161132d95949392919061264a565b60405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610728906001600160a01b03163033610716565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113a457610c7e836118b9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113fe575060408051601f3d908101601f191682019092526113fb91810190612686565b60015b6114705760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016107d0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146115055760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016107d0565b50610c7e83838361198f565b600054610100900460ff1661158e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b611597826119b4565b61072881611135565b6000806115ac42611a3a565b600184015490915067ffffffffffffffff8083166501000000000090920416118015906115fb5750600183015467ffffffffffffffff6d01000000000000000000000000009091048116908216105b801561072f575050905460ff1615919050565b600081815261015f60205260408120805460ff16156116305750600092915050565b611639816115a0565b156116815760018082015460ff16600281111561165857611658611eab565b146116665750600092915050565b61166f8361065e565b61167c5750600092915050565b611697565b61168a83610f50565b6116975750600092915050565b6116a083610c83565b6116ad5750600092915050565b50600192915050565b600081815261015f60205260409020805460ff19166001179055610c7e6116e560c9546001600160a01b031690565b8261015f6000858152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611801576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916117709061240f565b80601f016020809104026020016040519081016040528092919081815260200182805461179c9061240f565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b5050505050815250508152602001906001019061171d565b505050600086815261015f60205260409020600801549050611abe565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061188157506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061065857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610658565b6001600160a01b0381163b6119365760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107d0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61199883611b8d565b6000825111806119a55750805b15610c7e57610f4a8383611bcd565b600054610100900460ff16611a315760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b6108d581611cd8565b600067ffffffffffffffff821115611aba5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016107d0565b5090565b6040517fc71bf3240000000000000000000000000000000000000000000000000000000081526060906000906001600160a01b0387169063c71bf32490611b0d9088908890889060040161269f565b6000604051808303816000875af1158015611b2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5491908101906126c8565b604051919350915085907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a294509492505050565b611b96816118b9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611c4c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107d0565b600080846001600160a01b031684604051611c6791906127ce565b600060405180830381855af49150503d8060008114611ca2576040519150601f19603f3d011682016040523d82523d6000602084013e611ca7565b606091505b5091509150611ccf82826040518060600160405280602781526020016127fe60279139611d8f565b95945050505050565b600054610100900460ff16611d555760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d0565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60608315611d9e57508161072f565b61072f8383815115611db35781518083602001fd5b8060405162461bcd60e51b81526004016107d091906127ea565b600060208284031215611ddf57600080fd5b81356001600160e01b03198116811461072f57600080fd5b600060208284031215611e0957600080fd5b5035919050565b600060a08284031215611e2257600080fd5b50919050565b600060a08284031215611e3a57600080fd5b61072f8383611e10565b6001600160a01b03811681146108d557600080fd5b803560048110611e6857600080fd5b919050565b600080600060608486031215611e8257600080fd5b833592506020840135611e9481611e44565b9150611ea260408501611e59565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b600381106108d5576108d5611eab565b60208101611ede83611ec1565b91905290565b600060208284031215611ef657600080fd5b813561072f81611e44565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f4057611f40611f01565b604052919050565b600067ffffffffffffffff821115611f6257611f62611f01565b50601f01601f191660200190565b60008060408385031215611f8357600080fd5b8235611f8e81611e44565b9150602083013567ffffffffffffffff811115611faa57600080fd5b8301601f81018513611fbb57600080fd5b8035611fce611fc982611f48565b611f17565b818152866020838501011115611fe357600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060c0838503121561201657600080fd5b823561202181611e44565b91506120308460208501611e10565b90509250929050565b6000806040838503121561204c57600080fd5b82359150602083013561205e81611e44565b809150509250929050565b6004811061207957612079611eab565b9052565b602081016106588284612069565b60008083601f84011261209d57600080fd5b50813567ffffffffffffffff8111156120b557600080fd5b6020830191508360208260051b85010111156120d057600080fd5b9250929050565b67ffffffffffffffff811681146108d557600080fd5b8035611e68816120d7565b80151581146108d557600080fd5b8035611e68816120f8565b600080600080600080600080600060e08a8c03121561212f57600080fd5b893567ffffffffffffffff8082111561214757600080fd5b818c0191508c601f83011261215b57600080fd5b81358181111561216a57600080fd5b8d602082850101111561217c57600080fd5b60209283019b509950908b0135908082111561219757600080fd5b506121a48c828d0161208b565b90985096505060408a013594506121bd60608b016120ed565b93506121cb60808b016120ed565b92506121d960a08b01611e59565b91506121e760c08b01612106565b90509295985092959850929598565b60005b838110156122115781810151838201526020016121f9565b50506000910152565b600081518084526122328160208601602086016121f6565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156122b7578284038952815180516001600160a01b0316855285810151868601526040908101516060918601829052906122a38187018361221a565b9a87019a9550505090840190600101612264565b5091979650505050505050565b60006101a08815158352871515602084015286516122e181611ec1565b8060408501525063ffffffff6020880151166060840152604087015167ffffffffffffffff80821660808601528060608a01511660a08601528060808a01511660c0860152505060a087015160e08401526123546101008401878051825260208082015190830152604090810151910152565b8061016084015261236781840186612246565b91505082610180830152979650505050505050565b60008060006060848603121561239157600080fd5b833592506123a160208501611e59565b915060408401356123b1816120f8565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610658576106586123bc565b8082028115828204841417610658576106586123bc565b80820180821115610658576106586123bc565b600181811c9082168061242357607f821691505b602082108103611e2257634e487b7160e01b600052602260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156124a957600080fd5b815161072f816120f8565b63ffffffff811681146108d557600080fd5b6000602082840312156124d857600080fd5b813561072f816124b4565b6000602082840312156124f557600080fd5b813561072f816120d7565b600381106108d557600080fd5b60008135610658816120d7565b813561252581612500565b61252e81611ec1565b815460ff821691508160ff198216178355602084013561254d816124b4565b64ffffffff008160081b16905080837fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008416171784556040850135612591816124b4565b68ffffffff00000000008160281b16847fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000085161783171785555050505061261f6125dd6060840161250d565b82547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1660489190911b70ffffffffffffffff00000000000000000016178255565b608082013560018201555050565b60006020828403121561263f57600080fd5b813561072f81612500565b60a0810161265787611ec1565b95815263ffffffff948516602082015292909316604083015267ffffffffffffffff1660608201526080015290565b60006020828403121561269857600080fd5b5051919050565b8381526060602082015260006126b86060830185612246565b9050826040830152949350505050565b60008060408084860312156126dc57600080fd5b835167ffffffffffffffff808211156126f457600080fd5b818601915086601f83011261270857600080fd5b815160208282111561271c5761271c611f01565b8160051b61272b828201611f17565b928352848101820192828101908b85111561274557600080fd5b83870192505b848310156127ba578251868111156127635760008081fd5b8701603f81018d136127755760008081fd5b84810151612785611fc982611f48565b8181528e8b83850101111561279a5760008081fd5b6127a9828883018d86016121f6565b84525050918301919083019061274b565b9990920151989a9899505050505050505050565b600082516127e08184602087016121f6565b9190910192915050565b60208152600061072f602083018461221a56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122027884b30dbdde13026a691c72a9363d4430f832cb63f5274fbb01760109def0764736f6c63430008110033\";\nconst isSuperArgs$9 = (xs) => xs.length > 1;\nclass MajorityVotingMock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$9(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$b, _bytecode$9, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$b);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$b, signerOrProvider);\n    }\n}\nMajorityVotingMock__factory.bytecode = _bytecode$9;\nMajorityVotingMock__factory.abi = _abi$b;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$8 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  clonable: index$e,\n  pluginTestSol: index$d,\n  sharedPluginTestSol: index$c,\n  uupsUpgradeable: index$9,\n  AddresslistMock__factory: AddresslistMock__factory,\n  AdminCloneFactory__factory: AdminCloneFactory__factory,\n  MajorityVotingMock__factory: MajorityVotingMock__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$a = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"receivers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"amounts\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct GovernanceERC20.MintSettings\",\n                name: \"_mintSettings\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"receiversArrayLength\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amountsArrayLength\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"MintSettingsArrayLengthMismatch\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"fromDelegate\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"toDelegate\",\n                type: \"address\",\n            },\n        ],\n        name: \"DelegateChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegate\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"previousBalance\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newBalance\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVotesChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MINT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint32\",\n                name: \"pos\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"checkpoints\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint32\",\n                        name: \"fromBlock\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint224\",\n                        name: \"votes\",\n                        type: \"uint224\",\n                    },\n                ],\n                internalType: \"struct ERC20VotesUpgradeable.Checkpoint\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"subtractedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"decreaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"expiry\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"delegateBySig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegates\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastTotalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"addedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"receivers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"amounts\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct GovernanceERC20.MintSettings\",\n                name: \"_mintSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"numCheckpoints\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setBalance\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$8 = \"0x60806040523480156200001157600080fd5b5060405162003cd838038062003cd8833981016040819052620000349162000d28565b83838383620000468484848462000054565b50505050505050506200103f565b600054610100900460ff1615808015620000755750600054600160ff909116105b80620000a5575062000092306200024760201b62000f1e1760201c565b158015620000a5575060005460ff166001145b6200010e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000132576000805461ff0019166101001790555b602082015151825151146200016d578151516020830151516040516398b1381560e01b81526004810192909252602482015260440162000105565b62000179848462000256565b6200018484620002c2565b6200018f856200034c565b60005b825151811015620001f857620001ef83600001518281518110620001ba57620001ba62000e8d565b602002602001015184602001518381518110620001db57620001db62000e8d565b6020026020010151620003cb60201b60201c565b60010162000192565b50801562000240576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b600054610100900460ff16620002b25760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b620002be82826200047f565b5050565b600054610100900460ff166200031e5760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b6200034981604051806040016040528060018152602001603160f81b815250620004fd60201b60201c565b50565b600054610100900460ff16620003a85760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b620003e282826200057360201b62000f2d1760201c565b6001600160e01b03620003f6620006428216565b11156200045f5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840162000105565b6200047961010062000ffa6200064860201b17836200065f565b50505050565b600054610100900460ff16620004db5760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b6068620004e9838262000f31565b506069620004f8828262000f31565b505050565b600054610100900460ff16620005595760405162461bcd60e51b815260206004820152602b602482015260008051602062003c9883398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000105565b815160209283012081519190920120609791909155609855565b6001600160a01b038216620005cb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000105565b8060676000828254620005df919062001013565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620002be60008383620007f1565b60675490565b600062000656828462001013565b90505b92915050565b82546000908190818115620006bf576200068e876200068060018562001029565b600091825260209091200190565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152620006d4565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350620006f284868860201c565b92506000821180156200070b5750805163ffffffff1643145b15620007625762000727836200086760201b620010061760201c565b62000739886200068060018662001029565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007e7565b8660405180604001604052806200078443620008d660201b620010891760201c565b63ffffffff168152602001620007a5866200086760201b620010061760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b620008098383836200093d60201b620011051760201c565b6001600160a01b03821615801590620008305750620008288262000989565b63ffffffff16155b80156200085557506001600160a01b03828116600090815260fe602052604090205416155b15620004f857620004f88280620009b8565b60006001600160e01b03821115620008d25760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840162000105565b5090565b600063ffffffff821115620008d25760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840162000105565b62000955838383620004f860201b620007b21760201c565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054620004f89291821691168362000a2f565b6001600160a01b038116600090815260ff60209081526040822054620006599162001089620008d6821b17901c565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4620004798284835b816001600160a01b0316836001600160a01b03161415801562000a525750600081115b15620004f8576001600160a01b0383161562000adf576001600160a01b038316600090815260ff602090815260408220829162000a9c919062000b6a901b6200113717856200065f565b91509150846001600160a01b031660008051602062003cb8833981519152838360405162000ad4929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615620004f8576001600160a01b038216600090815260ff602090815260408220829162000b23919062000648901b62000ffa17856200065f565b91509150836001600160a01b031660008051602062003cb8833981519152838360405162000b5b929190918252602082015260400190565b60405180910390a25050505050565b600062000656828462001029565b6001600160a01b03811681146200034957600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000bc95762000bc962000b8e565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000bfa5762000bfa62000b8e565b604052919050565b600082601f83011262000c1457600080fd5b81516001600160401b0381111562000c305762000c3062000b8e565b602062000c46601f8301601f1916820162000bcf565b828152858284870101111562000c5b57600080fd5b60005b8381101562000c7b57858101830151828201840152820162000c5e565b506000928101909101919091529392505050565b60006001600160401b0382111562000cab5762000cab62000b8e565b5060051b60200190565b600082601f83011262000cc757600080fd5b8151602062000ce062000cda8362000c8f565b62000bcf565b82815260059290921b8401810191818101908684111562000d0057600080fd5b8286015b8481101562000d1d578051835291830191830162000d04565b509695505050505050565b6000806000806080858703121562000d3f57600080fd5b845162000d4c8162000b78565b602086810151919550906001600160401b038082111562000d6c57600080fd5b62000d7a89838a0162000c02565b9550604088015191508082111562000d9157600080fd5b62000d9f89838a0162000c02565b9450606088015191508082111562000db657600080fd5b908701906040828a03121562000dcb57600080fd5b62000dd562000ba4565b82518281111562000de557600080fd5b8301601f81018b1362000df757600080fd5b805162000e0862000cda8262000c8f565b81815260059190911b8201860190868101908d83111562000e2857600080fd5b928701925b8284101562000e5357835162000e438162000b78565b8252928701929087019062000e2d565b8452505050828401518281111562000e6a57600080fd5b62000e788b82860162000cb5565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000eb857607f821691505b60208210810362000ed957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f857600081815260208120601f850160051c8101602086101562000f085750805b601f850160051c820191505b8181101562000f295782815560010162000f14565b505050505050565b81516001600160401b0381111562000f4d5762000f4d62000b8e565b62000f658162000f5e845462000ea3565b8462000edf565b602080601f83116001811462000f9d576000841562000f845750858301515b600019600386901b1c1916600185901b17855562000f29565b600085815260208120601f198616915b8281101562000fce5788860151825594840194600190910190840162000fad565b508582101562000fed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000659576200065962000ffd565b8181038181111562000659576200065962000ffd565b612c49806200104f6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063b2d2989c11610097578063dab27fa911610071578063dab27fa9146103fa578063dd62ed3e1461040d578063e30443bc14610446578063f1127ed81461045957600080fd5b8063b2d2989c146103ad578063c3cda520146103d4578063d505accf146103e757600080fd5b806395d89b41116100d357806395d89b411461036c5780639ab24eb014610374578063a457c2d714610387578063a9059cbb1461039a57600080fd5b806370a082311461031d5780637ecebe00146103465780638e539e8c1461035957600080fd5b806339509351116101665780634162169f116101405780634162169f14610290578063587cde1e146102b65780635c19a95c146102e25780636fcfff45146102f557600080fd5b806339509351146102555780633a46b1a81461026857806340c10f191461027b57600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063313ce5671461023e5780633644e5151461024d57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d736600461248c565b610496565b60405190151581526020015b60405180910390f35b6101f96105cf565b6040516101e891906124b6565b6101dc610214366004612519565b610661565b6067545b6040519081526020016101e8565b6101dc610239366004612545565b610679565b604051601281526020016101e8565b61021d61069d565b6101dc610263366004612519565b6106ac565b61021d610276366004612519565b6106eb565b61028e610289366004612519565b61076a565b005b610130546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b61029e6102c4366004612586565b6001600160a01b03908116600090815260fe60205260409020541690565b61028e6102f0366004612586565b6107b7565b610308610303366004612586565b6107c4565b60405163ffffffff90911681526020016101e8565b61021d61032b366004612586565b6001600160a01b031660009081526065602052604090205490565b61021d610354366004612586565b6107e6565b61021d6103673660046125a3565b610804565b6101f9610861565b61021d610382366004612586565b610870565b6101dc610395366004612519565b6108f7565b6101dc6103a8366004612519565b6109a1565b61021d7fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c81565b61028e6103e23660046125d2565b6109af565b61028e6103f536600461262c565b610ae5565b61028e610408366004612809565b610c49565b61021d61041b366004612953565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61028e610454366004612519565b610e4b565b61046c61046736600461298c565b610e9a565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101e8565b60006001600160e01b031982167f36372b070000000000000000000000000000000000000000000000000000000014806104f957506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061052d57506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061056157506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b8061059557506001600160e01b031982167f40c10f1900000000000000000000000000000000000000000000000000000000145b806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105de906129c3565b80601f016020809104026020016040519081016040528092919081815260200182805461060a906129c3565b80156106575780601f1061062c57610100808354040283529160200191610657565b820191906000526020600020905b81548152906001019060200180831161063a57829003601f168201915b5050505050905090565b60003361066f818585611143565b5060019392505050565b60003361068785828561129b565b61069285858561132d565b506001949350505050565b60006106a7611527565b905090565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061066f90829086906106e6908790612a0d565b611143565b60004382106107415760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff6020526040902061076390836115a2565b9392505050565b610130547fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c906107a8906001600160a01b0316303384600036611699565b6107b28383611787565b505050565b6107c1338261181f565b50565b6001600160a01b038116600090815260ff60205260408120546105c990611089565b6001600160a01b038116600090815260cb60205260408120546105c9565b60004382106108555760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610738565b6105c9610100836115a2565b6060606980546105de906129c3565b6001600160a01b038116600090815260ff602052604081205480156108e4576001600160a01b038316600090815260ff602052604090206108b2600183612a20565b815481106108c2576108c2612a33565b60009182526020909120015464010000000090046001600160e01b03166108e7565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610738565b6106928286868403611143565b60003361066f81858561132d565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610738565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206118b1565b85858561191a565b9050610a8481611942565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610738565b610adc818861181f565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610738565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611942565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826118b1565b90506000610bcf8287878761191a565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610738565b610c3d8a8a8a611143565b50505050505050505050565b600054610100900460ff1615808015610c695750600054600160ff909116105b80610c835750303b158015610c83575060005460ff166001145b610cf55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610738565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d36576000805461ff0019166101001790555b60208201515182515114610d88578151516020830151516040517f98b1381500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610738565b610d92848461196a565b610d9b846119df565b610da485611a89565b60005b825151811015610dfd57610df583600001518281518110610dca57610dca612a33565b602002602001015184602001518381518110610de857610de8612a33565b6020026020010151611787565b600101610da7565b508015610e44576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03821660009081526065602052604090205481811015610e7f576107b283610e7a8385612a20565b611787565b818111156107b2576107b283610e958484612a20565b611b2f565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610ede57610ede612a33565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038216610f835760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610738565b8060676000828254610f959190612a0d565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610ff660008383611b48565b5050565b60006107638284612a0d565b60006001600160e01b038211156110855760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610738565b5090565b600063ffffffff8211156110855760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03838116600090815260fe60205260408082205485841683529120546107b292918216911683611baa565b60006107638284612a20565b6001600160a01b0383166111be5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03821661123a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152606660209081526040808320938616835292905220546000198114611327578181101561131a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610738565b6113278484848403611143565b50505050565b6001600160a01b0383166113a95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0382166114255760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b038316600090815260656020526040902054818110156114b45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115149086815260200190565b60405180910390a3611327848484611b48565b60006106a77f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61155660975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b8154600090818160058111156115fc5760006115bd84611ce7565b6115c79085612a20565b600088815260209020909150869082015463ffffffff1611156115ec578091506115fa565b6115f7816001612a0d565b92505b505b808210156116495760006116108383611dcf565b600088815260209020909150869082015463ffffffff16111561163557809150611643565b611640816001612a0d565b92505b506115fc565b80156116835761166c8661165e600184612a20565b600091825260209091200190565b5464010000000090046001600160e01b0316611686565b60005b6001600160e01b03169695505050505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116e69088908890889088908890600401612a49565b602060405180830381865afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190612a9d565b61177f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610738565b505050505050565b6117918282610f2d565b6067546001600160e01b0310156118105760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610738565b611327610100610ffa83611dea565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611327828483611baa565b60006105c96118be611527565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061192b87878787611f3e565b9150915061193881612002565b5095945050505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b600054610100900460ff166119d55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610ff68282612167565b600054610100900460ff16611a4a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b6107c1816040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506121eb565b600054610100900460ff16611af45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611b398282612270565b61132761010061113783611dea565b611b53838383611105565b6001600160a01b03821615801590611b775750611b6f826107c4565b63ffffffff16155b8015611b9b57506001600160a01b03828116600090815260fe602052604090205416155b156107b2576107b2828361181f565b816001600160a01b0316836001600160a01b031614158015611bcc5750600081115b156107b2576001600160a01b03831615611c5a576001600160a01b038316600090815260ff602052604081208190611c079061113785611dea565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611c4f929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156107b2576001600160a01b038216600090815260ff602052604081208190611c9090610ffa85611dea565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611cd8929190918252602082015260400190565b60405180910390a25050505050565b600081600003611cf957506000919050565b60006001611d06846123e2565b901c6001901b90506001818481611d1f57611d1f612abf565b048201901c90506001818481611d3757611d37612abf565b048201901c90506001818481611d4f57611d4f612abf565b048201901c90506001818481611d6757611d67612abf565b048201901c90506001818481611d7f57611d7f612abf565b048201901c90506001818481611d9757611d97612abf565b048201901c90506001818481611daf57611daf612abf565b048201901c905061076381828581611dc957611dc9612abf565b04612476565b6000611dde6002848418612ad5565b61076390848416612a0d565b82546000908190818115611e3757611e078761165e600185612a20565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e4c565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e6c84868863ffffffff16565b9250600082118015611e845750805163ffffffff1643145b15611ec957611e9283611006565b611ea18861165e600186612a20565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055611f34565b866040518060400160405280611ede43611089565b63ffffffff168152602001611ef286611006565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f755750600090506003611ff9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fc9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ff257600060019250925050611ff9565b9150600090505b94509492505050565b600081600481111561201657612016612af7565b0361201e5750565b600181600481111561203257612032612af7565b0361207f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610738565b600281600481111561209357612093612af7565b036120e05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610738565b60038160048111156120f4576120f4612af7565b036107c15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610738565b600054610100900460ff166121d25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b60686121de8382612b53565b5060696107b28282612b53565b600054610100900460ff166122565760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b815160209283012081519190920120609791909155609855565b6001600160a01b0382166122ec5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b0382166000908152606560205260409020548181101561237b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610738565b6001600160a01b03831660008181526065602090815260408083208686039055606780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107b283600084611b48565b600080608083901c156123f757608092831c92015b604083901c1561240957604092831c92015b602083901c1561241b57602092831c92015b601083901c1561242d57601092831c92015b600883901c1561243f57600892831c92015b600483901c1561245157600492831c92015b600283901c1561246357600292831c92015b600183901c156105c95760010192915050565b60008183106124855781610763565b5090919050565b60006020828403121561249e57600080fd5b81356001600160e01b03198116811461076357600080fd5b600060208083528351808285015260005b818110156124e3578581018301518582016040015282016124c7565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146107c157600080fd5b6000806040838503121561252c57600080fd5b823561253781612504565b946020939093013593505050565b60008060006060848603121561255a57600080fd5b833561256581612504565b9250602084013561257581612504565b929592945050506040919091013590565b60006020828403121561259857600080fd5b813561076381612504565b6000602082840312156125b557600080fd5b5035919050565b803560ff811681146125cd57600080fd5b919050565b60008060008060008060c087890312156125eb57600080fd5b86356125f681612504565b95506020870135945060408701359350612612606088016125bc565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561264757600080fd5b873561265281612504565b9650602088013561266281612504565b9550604088013594506060880135935061267e608089016125bc565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156126d3576126d361269a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156127025761270261269a565b604052919050565b600082601f83011261271b57600080fd5b813567ffffffffffffffff8111156127355761273561269a565b6127486020601f19601f840116016126d9565b81815284602083860101111561275d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156127945761279461269a565b5060051b60200190565b600082601f8301126127af57600080fd5b813560206127c46127bf8361277a565b6126d9565b82815260059290921b840181019181810190868411156127e357600080fd5b8286015b848110156127fe57803583529183019183016127e7565b509695505050505050565b6000806000806080858703121561281f57600080fd5b843561282a81612504565b935060208581013567ffffffffffffffff8082111561284857600080fd5b61285489838a0161270a565b9550604088013591508082111561286a57600080fd5b61287689838a0161270a565b9450606088013591508082111561288c57600080fd5b908701906040828a0312156128a057600080fd5b6128a86126b0565b8235828111156128b757600080fd5b8301601f81018b136128c857600080fd5b80356128d66127bf8261277a565b81815260059190911b8201860190868101908d8311156128f557600080fd5b928701925b8284101561291c57833561290d81612504565b825292870192908701906128fa565b8452505050828401358281111561293257600080fd5b61293e8b82860161279e565b85830152508094505050505092959194509250565b6000806040838503121561296657600080fd5b823561297181612504565b9150602083013561298181612504565b809150509250929050565b6000806040838503121561299f57600080fd5b82356129aa81612504565b9150602083013563ffffffff8116811461298157600080fd5b600181811c908216806129d757607f821691505b60208210810361196457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105c9576105c96129f7565b818103818111156105c9576105c96129f7565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215612aaf57600080fd5b8151801515811461076357600080fd5b634e487b7160e01b600052601260045260246000fd5b600082612af257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b601f8211156107b257600081815260208120601f850160051c81016020861015612b345750805b601f850160051c820191505b8181101561177f57828155600101612b40565b815167ffffffffffffffff811115612b6d57612b6d61269a565b612b8181612b7b84546129c3565b84612b0d565b602080601f831160018114612bb65760008415612b9e5750858301515b600019600386901b1c1916600185901b17855561177f565b600085815260208120601f198616915b82811015612be557888601518255948401946001909101908401612bc6565b5085821015612c035787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220512375dccb8ed2f8409278533eb61bc5c248e947ac0a35f90aa7a3f1fda13e7e64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724\";\nconst isSuperArgs$8 = (xs) => xs.length > 1;\nclass GovernanceERC20Mock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$8(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$a, _bytecode$8, args[0]);\n        }\n    }\n    deploy(_dao, _name, _symbol, _mintSettings, overrides) {\n        return super.deploy(_dao, _name, _symbol, _mintSettings, overrides || {});\n    }\n    getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides) {\n        return super.getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$a);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$a, signerOrProvider);\n    }\n}\nGovernanceERC20Mock__factory.bytecode = _bytecode$8;\nGovernanceERC20Mock__factory.abi = _abi$a;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$9 = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"URI_\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"TransferBatch\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferSingle\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"value\",\n                type: \"string\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"URI\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"accounts\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"balanceOfBatch\",\n        outputs: [\n            {\n                internalType: \"uint256[]\",\n                name: \"\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"burn\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"amounts\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeBatchTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"uri\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode$7 = \"0x60806040523480156200001157600080fd5b5060405162001d3938038062001d39833981016040819052620000349162000070565b80620000408162000048565b5050620002a0565b6002620000568282620001d4565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008457600080fd5b82516001600160401b03808211156200009c57600080fd5b818501915085601f830112620000b157600080fd5b815181811115620000c657620000c66200005a565b604051601f8201601f19908116603f01168101908382118183101715620000f157620000f16200005a565b8160405282815288868487010111156200010a57600080fd5b600093505b828410156200012e57848401860151818501870152928501926200010f565b600086848301015280965050505050505092915050565b600181811c908216806200015a57607f821691505b6020821081036200017b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001cf57600081815260208120601f850160051c81016020861015620001aa5750805b601f850160051c820191505b81811015620001cb57828155600101620001b6565b5050505b505050565b81516001600160401b03811115620001f057620001f06200005a565b620002088162000201845462000145565b8462000181565b602080601f831160018114620002405760008415620002275750858301515b600019600386901b1c1916600185901b178555620001cb565b600085815260208120601f198616915b82811015620002715788860151825594840194600190910190840162000250565b5085821015620002905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611a8980620002b06000396000f3fe608060405234801561001057600080fd5b50600436106100bd5760003560e01c80634e1273f411610076578063e985e9c51161005b578063e985e9c514610186578063f242432a146101c2578063f5298aca146101d557600080fd5b80634e1273f414610153578063a22cb4651461017357600080fd5b80630e89341c116100a75780630e89341c1461010b578063156e29f61461012b5780632eb2c2d61461014057600080fd5b8062fdd58e146100c257806301ffc9a7146100e8575b600080fd5b6100d56100d03660046112eb565b6101e8565b6040519081526020015b60405180910390f35b6100fb6100f6366004611346565b610294565b60405190151581526020016100df565b61011e61011936600461136a565b610377565b6040516100df91906113c9565b61013e6101393660046113dc565b61040b565b005b61013e61014e36600461155b565b61042b565b610166610161366004611605565b6104cd565b6040516100df919061170b565b61013e61018136600461171e565b61060b565b6100fb61019436600461175a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61013e6101d036600461178d565b61061a565b61013e6101e33660046113dc565b6106b5565b60006001600160a01b03831661026b5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061032757507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061028e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461028e565b606060028054610386906117f2565b80601f01602080910402602001604051908101604052809291908181526020018280546103b2906117f2565b80156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b50505050509050919050565b610426838383604051806020016040528060008152506106c0565b505050565b6001600160a01b03851633148061044757506104478533610194565b6104b95760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610262565b6104c685858585856107f0565b5050505050565b606081518351146105465760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610262565b6000835167ffffffffffffffff8111156105625761056261140f565b60405190808252806020026020018201604052801561058b578160200160208202803683370190505b50905060005b8451811015610603576105d68582815181106105af576105af61182c565b60200260200101518583815181106105c9576105c961182c565b60200260200101516101e8565b8282815181106105e8576105e861182c565b60209081029190910101526105fc81611858565b9050610591565b509392505050565b610616338383610a8e565b5050565b6001600160a01b03851633148061063657506106368533610194565b6106a85760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610262565b6104c68585858585610ba0565b610426838383610d76565b6001600160a01b03841661073c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610262565b33600061074885610f25565b9050600061075585610f25565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610787908490611890565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46107e783600089898989610f70565b50505050505050565b81518351146108675760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610262565b6001600160a01b0384166108e35760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610262565b3360005b8451811015610a205760008582815181106109045761090461182c565b6020026020010151905060008583815181106109225761092261182c565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156109c85760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610262565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610a05908490611890565b9250508190555050505080610a1990611858565b90506108e7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a709291906118a3565b60405180910390a4610a86818787878787611174565b505050505050565b816001600160a01b0316836001600160a01b031603610b155760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610262565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610c1c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610262565b336000610c2885610f25565b90506000610c3585610f25565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015610cce5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610262565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610d0b908490611890565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d6b848a8a8a8a8a610f70565b505050505050505050565b6001600160a01b038316610df25760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610262565b336000610dfe84610f25565b90506000610e0b84610f25565b60408051602080820183526000918290528882528181528282206001600160a01b038b1683529052205490915084811015610ead5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610262565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526107e7565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610f5f57610f5f61182c565b602090810291909101015292915050565b6001600160a01b0384163b15610a86576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190610fcd90899089908890889088906004016118d1565b6020604051808303816000875af1925050508015611008575060408051601f3d908101601f1916820190925261100591810190611914565b60015b6110bd57611014611931565b806308c379a00361104d575061102861194d565b80611033575061104f565b8060405162461bcd60e51b815260040161026291906113c9565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610262565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e6100000000000000000000000000000000000000000000000000000000146107e75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610262565b6001600160a01b0384163b15610a86576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c81906111d190899089908890889088906004016119f5565b6020604051808303816000875af192505050801561120c575060408051601f3d908101601f1916820190925261120991810190611914565b60015b61121857611014611931565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c8100000000000000000000000000000000000000000000000000000000146107e75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610262565b80356001600160a01b03811681146112e657600080fd5b919050565b600080604083850312156112fe57600080fd5b611307836112cf565b946020939093013593505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461134357600080fd5b50565b60006020828403121561135857600080fd5b813561136381611315565b9392505050565b60006020828403121561137c57600080fd5b5035919050565b6000815180845260005b818110156113a95760208185018101518683018201520161138d565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006113636020830184611383565b6000806000606084860312156113f157600080fd5b6113fa846112cf565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561144b5761144b61140f565b6040525050565b600067ffffffffffffffff82111561146c5761146c61140f565b5060051b60200190565b600082601f83011261148757600080fd5b8135602061149482611452565b6040516114a18282611425565b83815260059390931b85018201928281019150868411156114c157600080fd5b8286015b848110156114dc57803583529183019183016114c5565b509695505050505050565b600082601f8301126114f857600080fd5b813567ffffffffffffffff8111156115125761151261140f565b6040516115296020601f19601f8501160182611425565b81815284602083860101111561153e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561157357600080fd5b61157c866112cf565b945061158a602087016112cf565b9350604086013567ffffffffffffffff808211156115a757600080fd5b6115b389838a01611476565b945060608801359150808211156115c957600080fd5b6115d589838a01611476565b935060808801359150808211156115eb57600080fd5b506115f8888289016114e7565b9150509295509295909350565b6000806040838503121561161857600080fd5b823567ffffffffffffffff8082111561163057600080fd5b818501915085601f83011261164457600080fd5b8135602061165182611452565b60405161165e8282611425565b83815260059390931b850182019282810191508984111561167e57600080fd5b948201945b838610156116a357611694866112cf565b82529482019490820190611683565b965050860135925050808211156116b957600080fd5b506116c685828601611476565b9150509250929050565b600081518084526020808501945080840160005b83811015611700578151875295820195908201906001016116e4565b509495945050505050565b60208152600061136360208301846116d0565b6000806040838503121561173157600080fd5b61173a836112cf565b91506020830135801515811461174f57600080fd5b809150509250929050565b6000806040838503121561176d57600080fd5b611776836112cf565b9150611784602084016112cf565b90509250929050565b600080600080600060a086880312156117a557600080fd5b6117ae866112cf565b94506117bc602087016112cf565b93506040860135925060608601359150608086013567ffffffffffffffff8111156117e657600080fd5b6115f8888289016114e7565b600181811c9082168061180657607f821691505b60208210810361182657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361188957611889611842565b5060010190565b8082018082111561028e5761028e611842565b6040815260006118b660408301856116d0565b82810360208401526118c881856116d0565b95945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261190960a0830184611383565b979650505050505050565b60006020828403121561192657600080fd5b815161136381611315565b600060033d111561194a5760046000803e5060005160e01c5b90565b600060443d101561195b5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff81602484011181841117156119a957505050505090565b82850191508151818111156119c15750505050505090565b843d87010160208285010111156119db5750505050505090565b6119ea60208286010187611425565b509095945050505050565b60006001600160a01b03808816835280871660208401525060a06040830152611a2160a08301866116d0565b8281036060840152611a3381866116d0565b90508281036080840152611a478185611383565b9897505050505050505056fea264697066735822122074e486d6794f4e479c23bb084089395aa59f62242100b3856875d8ef12adf94e64736f6c63430008110033\";\nconst isSuperArgs$7 = (xs) => xs.length > 1;\nclass TestERC1155__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$7(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$9, _bytecode$7, args[0]);\n        }\n    }\n    deploy(URI_, overrides) {\n        return super.deploy(URI_, overrides || {});\n    }\n    getDeployTransaction(URI_, overrides) {\n        return super.getDeployTransaction(URI_, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$9);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$9, signerOrProvider);\n    }\n}\nTestERC1155__factory.bytecode = _bytecode$7;\nTestERC1155__factory.abi = _abi$9;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$8 = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"name_\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"symbol_\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amountToMint\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals_\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"subtractedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"decreaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"addedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setBalance\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"_decimals\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"setDecimals\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$6 = \"0x60806040526005805460ff191660121790553480156200001e57600080fd5b50604051620012d5380380620012d583398101604081905262000041916200038b565b828260036200005183826200048c565b5060046200006082826200048c565b5050506200007533826200007e60201b60201c565b505050620005a0565b6001600160a01b03821660009081526020819052604090205481811015620000bc57620000b783620000b183856200056e565b620000dc565b505050565b81811115620000b757620000b783620000d684846200056e565b62000192565b6001600160a01b038216620001385760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546200014c91906200058a565b90915550506001600160a01b03821660008181526020818152604080832080548601905551848152600080516020620012b5833981519152910160405180910390a35050565b6001600160a01b038216620001f45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016200012f565b6001600160a01b038216600090815260208190526040902054818110156200026a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016200012f565b6001600160a01b038316600081815260208181526040808320868603905560028054879003905551858152919291600080516020620012b5833981519152910160405180910390a3620000b7836000846001600160e01b038416565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002ee57600080fd5b81516001600160401b03808211156200030b576200030b620002c6565b604051601f8301601f19908116603f01168101908282118183101715620003365762000336620002c6565b816040528381526020925086838588010111156200035357600080fd5b600091505b8382101562000377578582018301518183018401529082019062000358565b600093810190920192909252949350505050565b600080600060608486031215620003a157600080fd5b83516001600160401b0380821115620003b957600080fd5b620003c787838801620002dc565b94506020860151915080821115620003de57600080fd5b50620003ed86828701620002dc565b925050604084015190509250925092565b600181811c908216806200041357607f821691505b6020821081036200043457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000b757600081815260208120601f850160051c81016020861015620004635750805b601f850160051c820191505b8181101562000484578281556001016200046f565b505050505050565b81516001600160401b03811115620004a857620004a8620002c6565b620004c081620004b98454620003fe565b846200043a565b602080601f831160018114620004f85760008415620004df5750858301515b600019600386901b1c1916600185901b17855562000484565b600085815260208120601f198616915b82811015620005295788860151825594840194600190910190840162000508565b5085821015620005485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000584576200058462000558565b92915050565b8082018082111562000584576200058462000558565b610d0580620005b06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637a1395aa1161008c578063a9059cbb11610066578063a9059cbb14610209578063dd62ed3e1461021c578063e30443bc14610255578063f785ef721461026857600080fd5b80637a1395aa146101aa57806395d89b41146101ee578063a457c2d7146101f657600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016e57806370a082311461018157600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610275565b6040516101049190610ac1565b60405180910390f35b61012061011b366004610b49565b610307565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610b73565b610321565b60055460ff165b60405160ff9091168152602001610104565b61012061017c366004610b49565b610345565b61013461018f366004610baf565b6001600160a01b031660009081526020819052604090205490565b6101ec6101b8366004610bd1565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b005b6100f7610384565b610120610204366004610b49565b610393565b610120610217366004610b49565b610442565b61013461022a366004610bf4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101ec610263366004610b49565b610450565b60055461015c9060ff1681565b60606003805461028490610c27565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610c27565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b5050505050905090565b6000336103158185856104a4565b60019150505b92915050565b60003361032f8582856105fc565b61033a8585856106ac565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610315908290869061037f908790610ca9565b6104a4565b60606004805461028490610c27565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104355760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61033a82868684036104a4565b6000336103158185856106ac565b6001600160a01b03821660009081526020819052604090205481811015610489576104848361047f8385610cbc565b610899565b505050565b81811115610484576104848361049f8484610cbc565b610958565b6001600160a01b03831661051f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03821661059b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106a657818110156106995760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042c565b6106a684848484036104a4565b50505050565b6001600160a01b0383166107285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0382166107a45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b038316600090815260208190526040902054818110156108335760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106a6565b6001600160a01b0382166108ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042c565b80600260008282546109019190610ca9565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166109d45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b03821660009081526020819052604090205481811015610a635760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600060208083528351808285015260005b81811015610aee57858101830151858201604001528201610ad2565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80356001600160a01b0381168114610b4457600080fd5b919050565b60008060408385031215610b5c57600080fd5b610b6583610b2d565b946020939093013593505050565b600080600060608486031215610b8857600080fd5b610b9184610b2d565b9250610b9f60208501610b2d565b9150604084013590509250925092565b600060208284031215610bc157600080fd5b610bca82610b2d565b9392505050565b600060208284031215610be357600080fd5b813560ff81168114610bca57600080fd5b60008060408385031215610c0757600080fd5b610c1083610b2d565b9150610c1e60208401610b2d565b90509250929050565b600181811c90821680610c3b57607f821691505b602082108103610c74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561031b5761031b610c7a565b8181038181111561031b5761031b610c7a56fea2646970667358221220ae786a8de7c95ce137a7fe8805369fe3c7863d200c2ebd905a604d41888300e764736f6c63430008110033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\";\nconst isSuperArgs$6 = (xs) => xs.length > 1;\nclass TestERC20__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$6(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$8, _bytecode$6, args[0]);\n        }\n    }\n    deploy(name_, symbol_, amountToMint, overrides) {\n        return super.deploy(name_, symbol_, amountToMint, overrides || {});\n    }\n    getDeployTransaction(name_, symbol_, amountToMint, overrides) {\n        return super.getDeployTransaction(name_, symbol_, amountToMint, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$8);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$8, signerOrProvider);\n    }\n}\nTestERC20__factory.bytecode = _bytecode$6;\nTestERC20__factory.abi = _abi$8;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$7 = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"name_\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"symbol_\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"approved\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"burn\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getApproved\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ownerOf\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"tokenURI\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$5 = \"0x60806040523480156200001157600080fd5b5060405162001a4538038062001a45833981016040819052620000349162000123565b818160006200004483826200021c565b5060016200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61174d80620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146101ff578063b88d4fde14610212578063c87b56dd14610225578063e985e9c51461023857600080fd5b80636352211e146101b057806370a08231146101c357806395d89b41146101e45780639dc29fac146101ec57600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806323b872dd1461017757806340c10f191461018a57806342842e0e1461019d57600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004611382565b610274565b60405190151581526020015b60405180910390f35b61012a610359565b60405161011991906113ef565b61014a610145366004611402565b6103eb565b6040516001600160a01b039091168152602001610119565b610175610170366004611437565b610412565b005b610175610185366004611461565b610566565b610175610198366004611437565b6105ed565b6101756101ab366004611461565b6105fb565b61014a6101be366004611402565b610616565b6101d66101d136600461149d565b61067b565b604051908152602001610119565b61012a610715565b6101756101fa366004611437565b610724565b61017561020d3660046114b8565b61072d565b61017561022036600461150a565b610738565b61012a610233366004611402565b6107c6565b61010d6102463660046115e6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061030757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461036890611619565b80601f016020809104026020016040519081016040528092919081815260200182805461039490611619565b80156103e15780601f106103b6576101008083540402835291602001916103e1565b820191906000526020600020905b8154815290600101906020018083116103c457829003601f168201915b5050505050905090565b60006103f68261083a565b506000908152600460205260409020546001600160a01b031690565b600061041d82610616565b9050806001600160a01b0316836001600160a01b0316036104ab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104e557506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6105575760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a2565b61056183836108a1565b505050565b610570338261091c565b6105e25760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b61056183838361099b565b6105f78282610bde565b5050565b61056183838360405180602001604052806000815250610738565b6000818152600260205260408120546001600160a01b0316806103535760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b60006001600160a01b0382166106f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104a2565b506001600160a01b031660009081526003602052604090205490565b60606001805461036890611619565b6105f781610d84565b6105f7338383610e34565b610742338361091c565b6107b45760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b6107c084848484610f20565b50505050565b60606107d18261083a565b60006107e860408051602081019091526000815290565b905060008151116108085760405180602001604052806000815250610833565b8061081284610fa9565b604051602001610823929190611653565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661089e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906108e382610616565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061092883610616565b9050806001600160a01b0316846001600160a01b0316148061096f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806109935750836001600160a01b0316610988846103eb565b6001600160a01b0316145b949350505050565b826001600160a01b03166109ae82610616565b6001600160a01b031614610a2a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6001600160a01b038216610aa55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104a2565b610ab28383836001611049565b826001600160a01b0316610ac582610616565b6001600160a01b031614610b415760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610c345760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104a2565b6000818152600260205260409020546001600160a01b031615610c995760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b610ca7600083836001611049565b6000818152600260205260409020546001600160a01b031615610d0c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610d8f82610616565b9050610d9f816000846001611049565b610da882610616565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603610e955760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a2565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f2b84848461099b565b610f37848484846110d1565b6107c05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b60606000610fb683611272565b600101905060008167ffffffffffffffff811115610fd657610fd66114f4565b6040519080825280601f01601f191660200182016040528015611000576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461100a57509392505050565b60018111156107c0576001600160a01b0384161561108f576001600160a01b03841660009081526003602052604081208054839290611089908490611698565b90915550505b6001600160a01b038316156107c0576001600160a01b038316600090815260036020526040812080548392906110c69084906116ab565b909155505050505050565b60006001600160a01b0384163b15611267576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061112e9033908990889088906004016116be565b6020604051808303816000875af1925050508015611169575060408051601f3d908101601f19168201909252611166918101906116fa565b60015b61121c573d808015611197576040519150601f19603f3d011682016040523d82523d6000602084013e61119c565b606091505b5080516000036112145760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610993565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112bb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106112e7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061130557662386f26fc10000830492506010015b6305f5e100831061131d576305f5e100830492506008015b612710831061133157612710830492506004015b60648310611343576064830492506002015b600a83106103535760010192915050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461089e57600080fd5b60006020828403121561139457600080fd5b813561083381611354565b60005b838110156113ba5781810151838201526020016113a2565b50506000910152565b600081518084526113db81602086016020860161139f565b601f01601f19169290920160200192915050565b60208152600061083360208301846113c3565b60006020828403121561141457600080fd5b5035919050565b80356001600160a01b038116811461143257600080fd5b919050565b6000806040838503121561144a57600080fd5b6114538361141b565b946020939093013593505050565b60008060006060848603121561147657600080fd5b61147f8461141b565b925061148d6020850161141b565b9150604084013590509250925092565b6000602082840312156114af57600080fd5b6108338261141b565b600080604083850312156114cb57600080fd5b6114d48361141b565b9150602083013580151581146114e957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561152057600080fd5b6115298561141b565b93506115376020860161141b565b925060408501359150606085013567ffffffffffffffff8082111561155b57600080fd5b818701915087601f83011261156f57600080fd5b813581811115611581576115816114f4565b604051601f8201601f19908116603f011681019083821181831017156115a9576115a96114f4565b816040528281528a60208487010111156115c257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156115f957600080fd5b6116028361141b565b91506116106020840161141b565b90509250929050565b600181811c9082168061162d57607f821691505b60208210810361164d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161166581846020880161139f565b83519083019061167981836020880161139f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561035357610353611682565b8082018082111561035357610353611682565b60006001600160a01b038087168352808616602084015250836040830152608060608301526116f060808301846113c3565b9695505050505050565b60006020828403121561170c57600080fd5b81516108338161135456fea26469706673582212200cd0966f74b1cac4d1ae34ab4d4b220618fb971dd467f1413232e41fa50a495864736f6c63430008110033\";\nconst isSuperArgs$5 = (xs) => xs.length > 1;\nclass TestERC721__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$5(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$7, _bytecode$5, args[0]);\n        }\n    }\n    deploy(name_, symbol_, overrides) {\n        return super.deploy(name_, symbol_, overrides || {});\n    }\n    getDeployTransaction(name_, symbol_, overrides) {\n        return super.getDeployTransaction(name_, symbol_, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$7);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$7, signerOrProvider);\n    }\n}\nTestERC721__factory.bytecode = _bytecode$5;\nTestERC721__factory.abi = _abi$7;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$7 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GovernanceERC20Mock__factory: GovernanceERC20Mock__factory,\n  TestERC1155__factory: TestERC1155__factory,\n  TestERC20__factory: TestERC20__factory,\n  TestERC721__factory: TestERC721__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$6 = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"subdomain\",\n                type: \"string\",\n            },\n        ],\n        name: \"isSubdomainValid\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\nconst _bytecode$4 = \"0x608060405234801561001057600080fd5b5061024d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a6fe91aa14610030575b600080fd5b61004361003e366004610117565b610057565b604051901515815260200160405180910390f35b6000610063838361006c565b90505b92915050565b6000828280835b8181101561010a57600084848381811061008f5761008f610189565b919091013560f81c9150506060811180156100ad5750607b8160ff16105b156100b857506100f8565b602f8160ff161180156100ce5750603a8160ff16105b156100d957506100f8565b8060ff16602d036100ea57506100f8565b600095505050505050610066565b80610102816101b8565b915050610073565b5060019695505050505050565b6000806020838503121561012a57600080fd5b823567ffffffffffffffff8082111561014257600080fd5b818501915085601f83011261015657600080fd5b81358181111561016557600080fd5b86602082850101111561017757600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610210577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212206abc490182a5fa6da85ec289a4a51a0dfbc2de4ceff05eea73dd8265aa0cd1c164736f6c63430008110033\";\nconst isSuperArgs$4 = (xs) => xs.length > 1;\nclass RegistryUtils__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$4(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$6, _bytecode$4, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$6);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$6, signerOrProvider);\n    }\n}\nRegistryUtils__factory.bytecode = _bytecode$4;\nRegistryUtils__factory.abi = _abi$6;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$6 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  RegistryUtils__factory: RegistryUtils__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$5 = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractAlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractERC165SupportInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"ContractInterfaceInvalid\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"previousAdmin\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"newAdmin\",\n                type: \"address\",\n            },\n        ],\n        name: \"AdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"beacon\",\n                type: \"address\",\n            },\n        ],\n        name: \"BeaconUpgraded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"Registered\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"implementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"Upgraded\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"REGISTER_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"UPGRADE_REGISTRY_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"entries\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"targetInterface\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"registrant\",\n                type: \"address\",\n            },\n        ],\n        name: \"register\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"targetInterfaceId\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n        ],\n        name: \"upgradeTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newImplementation\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$3 = \"0x60a06040523060805234801561001457600080fd5b506080516113e761004c6000396000818161027801528181610313015281816105c50152818161065b015261075601526113e76000f3fe6080604052600436106100b15760003560e01c80634f1ef2861161006957806374574eb71161004e57806374574eb7146101c6578063f29ee125146101fa578063f2c59caf1461023a57600080fd5b80634f1ef2861461019057806352d1902d146101a357600080fd5b80634162169f1161009a5780634162169f146100f857806344162ef8146101255780634420e4861461017057600080fd5b80633659cfe6146100b657806339871111146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d136600461111a565b61026e565b005b3480156100e457600080fd5b506100d66100f3366004611137565b610410565b34801561010457600080fd5b506097546040516001600160a01b0390911681526020015b60405180910390f35b34801561013157600080fd5b5060c95461013f9060e01b81565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161011c565b34801561017c57600080fd5b506100d661018b36600461111a565b610534565b6100d661019e3660046111c4565b6105bb565b3480156101af57600080fd5b506101b8610749565b60405190815260200161011c565b3480156101d257600080fd5b506101b87f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561020657600080fd5b5061022a61021536600461111a565b60ca6020526000908152604090205460ff1681565b604051901515815260200161011c565b34801561024657600080fd5b506101b87fffb51f414ffad7ae6aa3ebe7a53cbd03087d492fd38b0f6cbaa8704085baac4581565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103115760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661036c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146103e85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610308565b6103f18161080e565b6040805160008082526020820190925261040d91839190610847565b50565b600054610100900460ff16158080156104305750600054600160ff909116105b8061044a5750303b15801561044a575060005460ff166001145b6104bc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610308565b6000805460ff1916600117905580156104df576000805461ff0019166101001790555b6104e983836109e7565b801561052f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6097547fffb51f414ffad7ae6aa3ebe7a53cbd03087d492fd38b0f6cbaa8704085baac4590610572906001600160a01b031630335b84600036610aa2565b61057b82610b90565b6040516001600160a01b03831681527f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e99060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106595760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610308565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107305760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610308565b6107398261080e565b61074582826001610847565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610308565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610745906001600160a01b03163033610569565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561087a5761052f83610c6d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156108d4575060408051601f3d908101601f191682019092526108d191810190611288565b60015b6109465760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610308565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146109db5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610308565b5061052f838383610d43565b600054610100900460ff16610a645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610308565b610a6d82610d6e565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610aef90889088908890889088906004016112a1565b602060405180830381865afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3091906112f5565b610b88576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610308565b505050505050565b6001600160a01b038116600090815260ca602052604090205460ff1615610bee576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610308565b60c954610c08906001600160a01b0383169060e01b610e25565b610c49576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610308565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6001600160a01b0381163b610cea5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610308565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d4c83610e48565b600082511180610d595750805b1561052f57610d688383610e88565b50505050565b600054610100900460ff16610deb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610308565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610e3083610f93565b8015610e415750610e418383610ff8565b9392505050565b610e5181610c6d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610f075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610308565b600080846001600160a01b031684604051610f22919061133b565b600060405180830381855af49150503d8060008114610f5d576040519150601f19603f3d011682016040523d82523d6000602084013e610f62565b606091505b5091509150610f8a828260405180606001604052806027815260200161138b602791396110c7565b95945050505050565b6000610fbf827f01ffc9a700000000000000000000000000000000000000000000000000000000610ff8565b8015610ff25750610ff0827fffffffff00000000000000000000000000000000000000000000000000000000610ff8565b155b92915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156110b0575060208210155b80156110bc5750600081115b979650505050505050565b606083156110d6575081610e41565b610e4183838151156110eb5781518083602001fd5b8060405162461bcd60e51b81526004016103089190611357565b6001600160a01b038116811461040d57600080fd5b60006020828403121561112c57600080fd5b8135610e4181611105565b6000806040838503121561114a57600080fd5b823561115581611105565b915060208301357fffffffff000000000000000000000000000000000000000000000000000000008116811461118a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111d757600080fd5b82356111e281611105565b9150602083013567ffffffffffffffff808211156111ff57600080fd5b818501915085601f83011261121357600080fd5b81358181111561122557611225611195565b604051601f8201601f19908116603f0116810190838211818310171561124d5761124d611195565b8160405282815288602084870101111561126657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129a57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561130757600080fd5b81518015158114610e4157600080fd5b60005b8381101561133257818101518382015260200161131a565b50506000910152565b6000825161134d818460208701611317565b9190910192915050565b6020815260008251806020840152611376816040850160208701611317565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a9286eb673e4ffd0726bc4f3575e1d44acdacdfef315115d1853a40aaffdac1a64736f6c63430008110033\";\nconst isSuperArgs$3 = (xs) => xs.length > 1;\nclass InterfaceBasedRegistryMock__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$3(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$5, _bytecode$3, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$5);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$5, signerOrProvider);\n    }\n}\nInterfaceBasedRegistryMock__factory.bytecode = _bytecode$3;\nInterfaceBasedRegistryMock__factory.abi = _abi$5;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$4 = [\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"limit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"actual\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RatioOutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ratio\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"applyRatioCeiled\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRatioBase\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\nconst _bytecode$2 = \"0x608060405234801561001057600080fd5b50610236806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633d9de6701461003b578063a027562014610052575b600080fd5b620f42405b60405190815260200160405180910390f35b610040610060366004610109565b600061006c8383610075565b90505b92915050565b6000620f42408211156100c4576040517fcc80c195000000000000000000000000000000000000000000000000000000008152620f424060048201526024810183905260440160405180910390fd5b6100ce828461015a565b925060006100df620f4240856101a0565b90506100ee620f4240856101b4565b91508015610102576100ff826101c8565b91505b5092915050565b6000806040838503121561011c57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761006f5761006f61012b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826101af576101af610171565b500690565b6000826101c3576101c3610171565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101f9576101f961012b565b506001019056fea2646970667358221220be5cfa0a432b7b982a4a50ce52432c520f3d2db1fa0e89d7c3b8c3ffc9adfec864736f6c63430008110033\";\nconst isSuperArgs$2 = (xs) => xs.length > 1;\nclass RatioTest__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$2(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$4, _bytecode$2, args[0]);\n        }\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$4);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$4, signerOrProvider);\n    }\n}\nRatioTest__factory.bytecode = _bytecode$2;\nRatioTest__factory.abi = _abi$4;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$5 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  registryUtilsTestSol: index$6,\n  InterfaceBasedRegistryMock__factory: InterfaceBasedRegistryMock__factory,\n  RatioTest__factory: RatioTest__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  dao: index$j,\n  permission: index$h,\n  plugin: index$8,\n  token: index$7,\n  utils: index$5\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$3 = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"receivers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"amounts\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct GovernanceERC20.MintSettings\",\n                name: \"_mintSettings\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"where\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"who\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"permissionId\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DaoUnauthorized\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"receiversArrayLength\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amountsArrayLength\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"MintSettingsArrayLengthMismatch\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"fromDelegate\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"toDelegate\",\n                type: \"address\",\n            },\n        ],\n        name: \"DelegateChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegate\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"previousBalance\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newBalance\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVotesChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MINT_PERMISSION_ID\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint32\",\n                name: \"pos\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"checkpoints\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint32\",\n                        name: \"fromBlock\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint224\",\n                        name: \"votes\",\n                        type: \"uint224\",\n                    },\n                ],\n                internalType: \"struct ERC20VotesUpgradeable.Checkpoint\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"dao\",\n        outputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"subtractedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"decreaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"expiry\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"delegateBySig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegates\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastTotalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"addedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IDAO\",\n                name: \"_dao\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address[]\",\n                        name: \"receivers\",\n                        type: \"address[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"amounts\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct GovernanceERC20.MintSettings\",\n                name: \"_mintSettings\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"numCheckpoints\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode$1 = \"0x60806040523480156200001157600080fd5b5060405162003ad838038062003ad8833981016040819052620000349162000d20565b62000042848484846200004c565b5050505062001037565b600054610100900460ff16158080156200006d5750600054600160ff909116105b806200009d57506200008a306200023f60201b62000eb11760201c565b1580156200009d575060005460ff166001145b620001065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156200012a576000805461ff0019166101001790555b6020820151518251511462000165578151516020830151516040516398b1381560e01b815260048101929092526024820152604401620000fd565b6200017184846200024e565b6200017c84620002ba565b620001878562000344565b60005b825151811015620001f057620001e783600001518281518110620001b257620001b262000e85565b602002602001015184602001518381518110620001d357620001d362000e85565b6020026020010151620003c360201b60201c565b6001016200018a565b50801562000238576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b600054610100900460ff16620002aa5760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b620002b6828262000477565b5050565b600054610100900460ff16620003165760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b6200034181604051806040016040528060018152602001603160f81b815250620004f560201b60201c565b50565b600054610100900460ff16620003a05760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b620003da82826200056b60201b62000ec01760201c565b6001600160e01b03620003ee6200063a8216565b1115620004575760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401620000fd565b6200047161010062000f8d6200064060201b178362000657565b50505050565b600054610100900460ff16620004d35760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b6068620004e1838262000f29565b506069620004f0828262000f29565b505050565b600054610100900460ff16620005515760405162461bcd60e51b815260206004820152602b602482015260008051602062003a9883398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fd565b815160209283012081519190920120609791909155609855565b6001600160a01b038216620005c35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000fd565b8060676000828254620005d791906200100b565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620002b660008383620007e9565b60675490565b60006200064e82846200100b565b90505b92915050565b82546000908190818115620006b75762000686876200067860018562001021565b600091825260209091200190565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152620006cc565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350620006ea84868860201c565b9250600082118015620007035750805163ffffffff1643145b156200075a576200071f836200085f60201b62000f991760201c565b62000731886200067860018662001021565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007df565b8660405180604001604052806200077c43620008ce60201b6200101c1760201c565b63ffffffff1681526020016200079d866200085f60201b62000f991760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b620008018383836200093560201b620010981760201c565b6001600160a01b03821615801590620008285750620008208262000981565b63ffffffff16155b80156200084d57506001600160a01b03828116600090815260fe602052604090205416155b15620004f057620004f08280620009b0565b60006001600160e01b03821115620008ca5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620000fd565b5090565b600063ffffffff821115620008ca5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620000fd565b6200094d838383620004f060201b620007941760201c565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054620004f09291821691168362000a27565b6001600160a01b038116600090815260ff6020908152604082205462000651916200101c620008ce821b17901c565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4620004718284835b816001600160a01b0316836001600160a01b03161415801562000a4a5750600081115b15620004f0576001600160a01b0383161562000ad7576001600160a01b038316600090815260ff602090815260408220829162000a94919062000b62901b620010ca178562000657565b91509150846001600160a01b031660008051602062003ab8833981519152838360405162000acc929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615620004f0576001600160a01b038216600090815260ff602090815260408220829162000b1b919062000640901b62000f8d178562000657565b91509150836001600160a01b031660008051602062003ab8833981519152838360405162000b53929190918252602082015260400190565b60405180910390a25050505050565b60006200064e828462001021565b6001600160a01b03811681146200034157600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000bc15762000bc162000b86565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000bf25762000bf262000b86565b604052919050565b600082601f83011262000c0c57600080fd5b81516001600160401b0381111562000c285762000c2862000b86565b602062000c3e601f8301601f1916820162000bc7565b828152858284870101111562000c5357600080fd5b60005b8381101562000c7357858101830151828201840152820162000c56565b506000928101909101919091529392505050565b60006001600160401b0382111562000ca35762000ca362000b86565b5060051b60200190565b600082601f83011262000cbf57600080fd5b8151602062000cd862000cd28362000c87565b62000bc7565b82815260059290921b8401810191818101908684111562000cf857600080fd5b8286015b8481101562000d15578051835291830191830162000cfc565b509695505050505050565b6000806000806080858703121562000d3757600080fd5b845162000d448162000b70565b602086810151919550906001600160401b038082111562000d6457600080fd5b62000d7289838a0162000bfa565b9550604088015191508082111562000d8957600080fd5b62000d9789838a0162000bfa565b9450606088015191508082111562000dae57600080fd5b908701906040828a03121562000dc357600080fd5b62000dcd62000b9c565b82518281111562000ddd57600080fd5b8301601f81018b1362000def57600080fd5b805162000e0062000cd28262000c87565b81815260059190911b8201860190868101908d83111562000e2057600080fd5b928701925b8284101562000e4b57835162000e3b8162000b70565b8252928701929087019062000e25565b8452505050828401518281111562000e6257600080fd5b62000e708b82860162000cad565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000eb057607f821691505b60208210810362000ed157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f057600081815260208120601f850160051c8101602086101562000f005750805b601f850160051c820191505b8181101562000f215782815560010162000f0c565b505050505050565b81516001600160401b0381111562000f455762000f4562000b86565b62000f5d8162000f56845462000e9b565b8462000ed7565b602080601f83116001811462000f95576000841562000f7c5750858301515b600019600386901b1c1916600185901b17855562000f21565b600085815260208120601f198616915b8281101562000fc65788860151825594840194600190910190840162000fa5565b508582101562000fe55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000651576200065162000ff5565b8181038181111562000651576200065162000ff5565b612a5180620010476000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636fcfff45116100f9578063a9059cbb11610097578063d505accf11610071578063d505accf146103dc578063dab27fa9146103ef578063dd62ed3e14610402578063f1127ed81461043b57600080fd5b8063a9059cbb1461038f578063b2d2989c146103a2578063c3cda520146103c957600080fd5b80638e539e8c116100d35780638e539e8c1461034e57806395d89b41146103615780639ab24eb014610369578063a457c2d71461037c57600080fd5b80636fcfff45146102ea57806370a08231146103125780637ecebe001461033b57600080fd5b80633644e5151161016657806340c10f191161014057806340c10f19146102705780634162169f14610285578063587cde1e146102ab5780635c19a95c146102d757600080fd5b80633644e51514610242578063395093511461024a5780633a46b1a81461025d57600080fd5b806318160ddd1161019757806318160ddd1461020e57806323b872dd14610220578063313ce5671461023357600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063095ea7b3146101fb575b600080fd5b6101d16101cc366004612294565b610478565b60405190151581526020015b60405180910390f35b6101ee6105b1565b6040516101dd91906122be565b6101d1610209366004612321565b610643565b6067545b6040519081526020016101dd565b6101d161022e36600461234d565b61065b565b604051601281526020016101dd565b61021261067f565b6101d1610258366004612321565b61068e565b61021261026b366004612321565b6106cd565b61028361027e366004612321565b61074c565b005b610130546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b6102936102b936600461238e565b6001600160a01b03908116600090815260fe60205260409020541690565b6102836102e536600461238e565b610799565b6102fd6102f836600461238e565b6107a6565b60405163ffffffff90911681526020016101dd565b61021261032036600461238e565b6001600160a01b031660009081526065602052604090205490565b61021261034936600461238e565b6107c8565b61021261035c3660046123ab565b6107e6565b6101ee610843565b61021261037736600461238e565b610852565b6101d161038a366004612321565b6108d9565b6101d161039d366004612321565b610983565b6102127fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c81565b6102836103d73660046123da565b610991565b6102836103ea366004612434565b610ac7565b6102836103fd366004612611565b610c2b565b61021261041036600461275b565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61044e610449366004612794565b610e2d565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101dd565b60006001600160e01b031982167f36372b070000000000000000000000000000000000000000000000000000000014806104db57506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061050f57506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061054357506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b8061057757506001600160e01b031982167f40c10f1900000000000000000000000000000000000000000000000000000000145b806105ab57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105c0906127cb565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec906127cb565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b5050505050905090565b6000336106518185856110d6565b5060019392505050565b60003361066985828561122e565b6106748585856112c0565b506001949350505050565b60006106896114ba565b905090565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061065190829086906106c8908790612815565b6110d6565b60004382106107235760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff602052604090206107459083611535565b9392505050565b610130547fb737b436e6cc542520cb79ec04245c720c38eebfa56d9e2d99b043979db20e4c9061078a906001600160a01b031630338460003661162c565b610794838361171a565b505050565b6107a333826117b2565b50565b6001600160a01b038116600090815260ff60205260408120546105ab9061101c565b6001600160a01b038116600090815260cb60205260408120546105ab565b60004382106108375760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161071a565b6105ab61010083611535565b6060606980546105c0906127cb565b6001600160a01b038116600090815260ff602052604081205480156108c6576001600160a01b038316600090815260ff60205260409020610894600183612828565b815481106108a4576108a461283b565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156109765760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161071a565b61067482868684036110d6565b6000336106518185856112c0565b834211156109e15760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161071a565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a5b90610a539060a00160405160208183030381529060405280519060200120611844565b8585856118ad565b9050610a66816118d5565b8614610ab45760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161071a565b610abe81886117b2565b50505050505050565b83421115610b175760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161071a565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b468c6118d5565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ba182611844565b90506000610bb1828787876118ad565b9050896001600160a01b0316816001600160a01b031614610c145760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161071a565b610c1f8a8a8a6110d6565b50505050505050505050565b600054610100900460ff1615808015610c4b5750600054600160ff909116105b80610c655750303b158015610c65575060005460ff166001145b610cd75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161071a565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d18576000805461ff0019166101001790555b60208201515182515114610d6a578151516020830151516040517f98b138150000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161071a565b610d7484846118fd565b610d7d84611972565b610d8685611a1c565b60005b825151811015610ddf57610dd783600001518281518110610dac57610dac61283b565b602002602001015184602001518381518110610dca57610dca61283b565b602002602001015161171a565b600101610d89565b508015610e26576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610e7157610e7161283b565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038216610f165760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161071a565b8060676000828254610f289190612815565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610f8960008383611ac2565b5050565b60006107458284612815565b60006001600160e01b038211156110185760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f3234206269747300000000000000000000000000000000000000000000000000606482015260840161071a565b5090565b600063ffffffff8211156110185760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b03838116600090815260fe602052604080822054858416835291205461079492918216911683611b24565b60006107458284612828565b6001600160a01b0383166111515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0382166111cd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526066602090815260408083209386168352929052205460001981146112ba57818110156112ad5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161071a565b6112ba84848484036110d6565b50505050565b6001600160a01b03831661133c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0382166113b85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b038316600090815260656020526040902054818110156114475760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161071a565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114a79086815260200190565b60405180910390a36112ba848484611ac2565b60006106897f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6114e960975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561158f57600061155084611c61565b61155a9085612828565b600088815260209020909150869082015463ffffffff16111561157f5780915061158d565b61158a816001612815565b92505b505b808210156115dc5760006115a38383611d49565b600088815260209020909150869082015463ffffffff1611156115c8578091506115d6565b6115d3816001612815565b92505b5061158f565b8015611616576115ff866115f1600184612828565b600091825260209091200190565b5464010000000090046001600160e01b0316611619565b60005b6001600160e01b03169695505050505050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906116799088908890889088908890600401612851565b602060405180830381865afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba91906128a5565b611712576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161071a565b505050505050565b6117248282610ec0565b6067546001600160e01b0310156117a35760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f74657300000000000000000000000000000000606482015260840161071a565b6112ba610100610f8d83611d64565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46112ba828483611b24565b60006105ab6118516114ba565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006118be87878787611eb8565b915091506118cb81611f7c565b5095945050505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b600054610100900460ff166119685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b610f8982826120e1565b600054610100900460ff166119dd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b6107a3816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612165565b600054610100900460ff16611a875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611acd838383611098565b6001600160a01b03821615801590611af15750611ae9826107a6565b63ffffffff16155b8015611b1557506001600160a01b03828116600090815260fe602052604090205416155b156107945761079482836117b2565b816001600160a01b0316836001600160a01b031614158015611b465750600081115b15610794576001600160a01b03831615611bd4576001600160a01b038316600090815260ff602052604081208190611b81906110ca85611d64565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bc9929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610794576001600160a01b038216600090815260ff602052604081208190611c0a90610f8d85611d64565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611c52929190918252602082015260400190565b60405180910390a25050505050565b600081600003611c7357506000919050565b60006001611c80846121ea565b901c6001901b90506001818481611c9957611c996128c7565b048201901c90506001818481611cb157611cb16128c7565b048201901c90506001818481611cc957611cc96128c7565b048201901c90506001818481611ce157611ce16128c7565b048201901c90506001818481611cf957611cf96128c7565b048201901c90506001818481611d1157611d116128c7565b048201901c90506001818481611d2957611d296128c7565b048201901c905061074581828581611d4357611d436128c7565b0461227e565b6000611d5860028484186128dd565b61074590848416612815565b82546000908190818115611db157611d81876115f1600185612828565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611dc6565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611de684868863ffffffff16565b9250600082118015611dfe5750805163ffffffff1643145b15611e4357611e0c83610f99565b611e1b886115f1600186612828565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055611eae565b866040518060400160405280611e584361101c565b63ffffffff168152602001611e6c86610f99565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611eef5750600090506003611f73565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f43573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f6c57600060019250925050611f73565b9150600090505b94509492505050565b6000816004811115611f9057611f906128ff565b03611f985750565b6001816004811115611fac57611fac6128ff565b03611ff95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161071a565b600281600481111561200d5761200d6128ff565b0361205a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161071a565b600381600481111561206e5761206e6128ff565b036107a35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161071a565b600054610100900460ff1661214c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b6068612158838261295b565b506069610794828261295b565b600054610100900460ff166121d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161071a565b815160209283012081519190920120609791909155609855565b600080608083901c156121ff57608092831c92015b604083901c1561221157604092831c92015b602083901c1561222357602092831c92015b601083901c1561223557601092831c92015b600883901c1561224757600892831c92015b600483901c1561225957600492831c92015b600283901c1561226b57600292831c92015b600183901c156105ab5760010192915050565b600081831061228d5781610745565b5090919050565b6000602082840312156122a657600080fd5b81356001600160e01b03198116811461074557600080fd5b600060208083528351808285015260005b818110156122eb578581018301518582016040015282016122cf565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146107a357600080fd5b6000806040838503121561233457600080fd5b823561233f8161230c565b946020939093013593505050565b60008060006060848603121561236257600080fd5b833561236d8161230c565b9250602084013561237d8161230c565b929592945050506040919091013590565b6000602082840312156123a057600080fd5b81356107458161230c565b6000602082840312156123bd57600080fd5b5035919050565b803560ff811681146123d557600080fd5b919050565b60008060008060008060c087890312156123f357600080fd5b86356123fe8161230c565b9550602087013594506040870135935061241a606088016123c4565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561244f57600080fd5b873561245a8161230c565b9650602088013561246a8161230c565b95506040880135945060608801359350612486608089016123c4565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156124db576124db6124a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561250a5761250a6124a2565b604052919050565b600082601f83011261252357600080fd5b813567ffffffffffffffff81111561253d5761253d6124a2565b6125506020601f19601f840116016124e1565b81815284602083860101111561256557600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561259c5761259c6124a2565b5060051b60200190565b600082601f8301126125b757600080fd5b813560206125cc6125c783612582565b6124e1565b82815260059290921b840181019181810190868411156125eb57600080fd5b8286015b8481101561260657803583529183019183016125ef565b509695505050505050565b6000806000806080858703121561262757600080fd5b84356126328161230c565b935060208581013567ffffffffffffffff8082111561265057600080fd5b61265c89838a01612512565b9550604088013591508082111561267257600080fd5b61267e89838a01612512565b9450606088013591508082111561269457600080fd5b908701906040828a0312156126a857600080fd5b6126b06124b8565b8235828111156126bf57600080fd5b8301601f81018b136126d057600080fd5b80356126de6125c782612582565b81815260059190911b8201860190868101908d8311156126fd57600080fd5b928701925b828410156127245783356127158161230c565b82529287019290870190612702565b8452505050828401358281111561273a57600080fd5b6127468b8286016125a6565b85830152508094505050505092959194509250565b6000806040838503121561276e57600080fd5b82356127798161230c565b915060208301356127898161230c565b809150509250929050565b600080604083850312156127a757600080fd5b82356127b28161230c565b9150602083013563ffffffff8116811461278957600080fd5b600181811c908216806127df57607f821691505b6020821081036118f757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105ab576105ab6127ff565b818103818111156105ab576105ab6127ff565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156128b757600080fd5b8151801515811461074557600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826128fa57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b601f82111561079457600081815260208120601f850160051c8101602086101561293c5750805b601f850160051c820191505b8181101561171257828155600101612948565b815167ffffffffffffffff811115612975576129756124a2565b6129898161298384546127cb565b84612915565b602080601f8311600181146129be57600084156129a65750858301515b600019600386901b1c1916600185901b178555611712565b600085815260208120601f198616915b828110156129ed578886015182559484019460019091019084016129ce565b5085821015612a0b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122041caba7a2487d56f35f548b7b8ba855e47da6845347c133e79ffcf608c69803e64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724\";\nconst isSuperArgs$1 = (xs) => xs.length > 1;\nclass GovernanceERC20__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs$1(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$3, _bytecode$1, args[0]);\n        }\n    }\n    deploy(_dao, _name, _symbol, _mintSettings, overrides) {\n        return super.deploy(_dao, _name, _symbol, _mintSettings, overrides || {});\n    }\n    getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides) {\n        return super.getDeployTransaction(_dao, _name, _symbol, _mintSettings, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$3);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$3, signerOrProvider);\n    }\n}\nGovernanceERC20__factory.bytecode = _bytecode$1;\nGovernanceERC20__factory.abi = _abi$3;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$2 = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"fromDelegate\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"toDelegate\",\n                type: \"address\",\n            },\n        ],\n        name: \"DelegateChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"delegate\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"previousBalance\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newBalance\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVotesChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint32\",\n                name: \"pos\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"checkpoints\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint32\",\n                        name: \"fromBlock\",\n                        type: \"uint32\",\n                    },\n                    {\n                        internalType: \"uint224\",\n                        name: \"votes\",\n                        type: \"uint224\",\n                    },\n                ],\n                internalType: \"struct ERC20VotesUpgradeable.Checkpoint\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"subtractedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"decreaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"delegatee\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"expiry\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"delegateBySig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"delegates\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"depositFor\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastTotalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getPastVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getVotes\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"addedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"_token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"_symbol\",\n                type: \"string\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"numCheckpoints\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"underlying\",\n        outputs: [\n            {\n                internalType: \"contract IERC20Upgradeable\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"withdrawTo\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x60806040523480156200001157600080fd5b50604051620034723803806200347283398101604081905262000034916200053b565b620000418383836200004a565b5050506200071f565b600054610100900460ff16158080156200006b5750600054600160ff909116105b806200009b575062000088306200019760201b62000dd61760201c565b1580156200009b575060005460ff166001145b620001045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000128576000805461ff0019166101001790555b620001348383620001a6565b6200013f8362000212565b6200014a846200029c565b801562000191576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b03163b151590565b600054610100900460ff16620002025760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200020e828262000303565b5050565b600054610100900460ff166200026e5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200029981604051806040016040528060018152602001603160f81b8152506200038160201b60201c565b50565b600054610100900460ff16620002f85760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b6200029981620003f7565b600054610100900460ff166200035f5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b60686200036d838262000653565b5060696200037c828262000653565b505050565b600054610100900460ff16620003dd5760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b815160209283012081519190920120609791909155609855565b600054610100900460ff16620004535760405162461bcd60e51b815260206004820152602b60248201526000805160206200345283398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000fb565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200049e57600080fd5b81516001600160401b0380821115620004bb57620004bb62000476565b604051601f8301601f19908116603f01168101908282118183101715620004e657620004e662000476565b816040528381526020925086838588010111156200050357600080fd5b600091505b8382101562000527578582018301518183018401529082019062000508565b600093810190920192909252949350505050565b6000806000606084860312156200055157600080fd5b83516001600160a01b03811681146200056957600080fd5b60208501519093506001600160401b03808211156200058757600080fd5b62000595878388016200048c565b93506040860151915080821115620005ac57600080fd5b50620005bb868287016200048c565b9150509250925092565b600181811c90821680620005da57607f821691505b602082108103620005fb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200037c57600081815260208120601f850160051c810160208610156200062a5750805b601f850160051c820191505b818110156200064b5782815560010162000636565b505050505050565b81516001600160401b038111156200066f576200066f62000476565b6200068781620006808454620005c5565b8462000601565b602080601f831160018114620006bf5760008415620006a65750858301515b600019600386901b1c1916600185901b1785556200064b565b600085815260208120601f198616915b82811015620006f057888601518255948401946001909101908401620006cf565b50858210156200070f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d23806200072f6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636f307dc3116100f95780639ab24eb011610097578063c3cda52011610071578063c3cda520146103d9578063d505accf146103ec578063dd62ed3e146103ff578063f1127ed81461043857600080fd5b80639ab24eb0146103a0578063a457c2d7146103b3578063a9059cbb146103c657600080fd5b80637ecebe00116100d35780637ecebe001461035f5780638e539e8c14610372578063906571471461038557806395d89b411461039857600080fd5b80636f307dc3146102fa5780636fcfff451461030e57806370a082311461033657600080fd5b80632f4f21e2116101665780633950935111610140578063395093511461027b5780633a46b1a81461028e578063587cde1e146102a15780635c19a95c146102e557600080fd5b80632f4f21e214610246578063313ce567146102595780633644e5151461027357600080fd5b806318160ddd1161019757806318160ddd1461020e578063205c28781461022057806323b872dd1461023357600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063095ea7b3146101fb575b600080fd5b6101d16101cc366004612712565b610475565b60405190151581526020015b60405180910390f35b6101ee6105ae565b6040516101dd9190612760565b6101d16102093660046127a8565b610640565b6067545b6040519081526020016101dd565b6101d161022e3660046127a8565b610658565b6101d16102413660046127d4565b61066b565b6101d16102543660046127a8565b61068f565b61026161069b565b60405160ff90911681526020016101dd565b6102126106aa565b6101d16102893660046127a8565b6106b4565b61021261029c3660046127a8565b6106f3565b6102cd6102af366004612815565b6001600160a01b03908116600090815260fe60205260409020541690565b6040516001600160a01b0390911681526020016101dd565b6102f86102f3366004612815565b61076b565b005b610130546102cd906001600160a01b031681565b61032161031c366004612815565b610778565b60405163ffffffff90911681526020016101dd565b610212610344366004612815565b6001600160a01b031660009081526065602052604090205490565b61021261036d366004612815565b61079a565b610212610380366004612832565b6107b8565b6102f86103933660046128ee565b610815565b6101ee61096a565b6102126103ae366004612815565b610979565b6101d16103c13660046127a8565b610a00565b6101d16103d43660046127a8565b610aaa565b6102f86103e7366004612973565b610ab8565b6102f86103fa3660046129cf565b610bee565b61021261040d366004612a40565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61044b610446366004612a79565b610d52565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101dd565b60006001600160e01b031982167f0f13099a0000000000000000000000000000000000000000000000000000000014806104d857506001600160e01b031982167f36372b0700000000000000000000000000000000000000000000000000000000145b8061050c57506001600160e01b031982167f9d8ff7da00000000000000000000000000000000000000000000000000000000145b8061054057506001600160e01b031982167fa219a02500000000000000000000000000000000000000000000000000000000145b8061057457506001600160e01b031982167fe90fb3f600000000000000000000000000000000000000000000000000000000145b806105a857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606880546105bd90612ab0565b80601f01602080910402602001604051908101604052809291908181526020018280546105e990612ab0565b80156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b5050505050905090565b60003361064e818585610de5565b5060019392505050565b60006106648383610f3d565b9392505050565b600033610679858285610f6a565b610684858585610ff6565b506001949350505050565b600061066483836111f0565b60006106a5611216565b905090565b60006106a56112a5565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061064e90829086906106ee908790612afa565b610de5565b60004382106107495760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff602052604090206106649083611320565b6107753382611417565b50565b6001600160a01b038116600090815260ff60205260408120546105a8906114a9565b6001600160a01b038116600090815260cb60205260408120546105a8565b60004382106108095760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610740565b6105a861010083611320565b600054610100900460ff16158080156108355750600054600160ff909116105b8061084f5750303b15801561084f575060005460ff166001145b6108c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610740565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610902576000805461ff0019166101001790555b61090c8383611529565b610915836115a2565b61091e8461164c565b8015610964576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6060606980546105bd90612ab0565b6001600160a01b038116600090815260ff602052604081205480156109ed576001600160a01b038316600090815260ff602052604090206109bb600183612b0d565b815481106109cb576109cb612b20565b60009182526020909120015464010000000090046001600160e01b03166109f0565b60005b6001600160e01b03169392505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919083811015610a9d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610740565b6106848286868403610de5565b60003361064e818585610ff6565b83421115610b085760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610740565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610b8290610b7a9060a001604051602081830303815290604052805190602001206116c0565b858585611729565b9050610b8d81611753565b8614610bdb5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610740565b610be58188611417565b50505050505050565b83421115610c3e5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610740565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610c6d8c611753565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610cc8826116c0565b90506000610cd882878787611729565b9050896001600160a01b0316816001600160a01b031614610d3b5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610740565b610d468a8a8a610de5565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff8416908110610d9657610d96612b20565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b6001600160a01b038316610e605760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b038216610edc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f49338361177b565b61013054610f61906001600160a01b03168484611785565b50600192915050565b6001600160a01b0383811660009081526066602090815260408083209386168352929052205460001981146109645781811015610fe95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610740565b6109648484848403610de5565b6001600160a01b0383166110725760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0382166110ee5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0383166000908152606560205260409020548181101561117d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111dd9086815260200190565b60405180910390a3610964848484611806565b6101305460009061120c906001600160a01b0316333085611868565b610f6183836118b9565b61013054604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa925050508015611296575060408051601f3d908101601f1916820190925261129391810190612b36565b60015b6112a05750601290565b919050565b60006106a57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6112d460975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561137a57600061133b846118c3565b6113459085612b0d565b600088815260209020909150869082015463ffffffff16111561136a57809150611378565b611375816001612afa565b92505b505b808210156113c757600061138e83836119ab565b600088815260209020909150869082015463ffffffff1611156113b3578091506113c1565b6113be816001612afa565b92505b5061137a565b8015611401576113ea866113dc600184612b0d565b600091825260209091200190565b5464010000000090046001600160e01b0316611404565b60005b6001600160e01b03169695505050505050565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46109648284836119c6565b600063ffffffff8211156115255760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610740565b5090565b600054610100900460ff166115945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61159e8282611b03565b5050565b600054610100900460ff1661160d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b610775816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250611b87565b600054610100900460ff166116b75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61077581611c0c565b60006105a86116cd6112a5565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061173a87878787611cb2565b9150915061174781611d76565b5090505b949350505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b61159e8282611edb565b6040516001600160a01b0383166024820152604481018290526118019084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ef4565b505050565b611811838383611fd9565b6001600160a01b03821615801590611835575061182d82610778565b63ffffffff16155b801561185957506001600160a01b03828116600090815260fe602052604090205416155b15611801576118018283611417565b6040516001600160a01b03808516602483015283166044820152606481018290526109649085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117ca565b61159e828261200b565b6000816000036118d557506000919050565b600060016118e2846120a3565b901c6001901b905060018184816118fb576118fb612b53565b048201901c9050600181848161191357611913612b53565b048201901c9050600181848161192b5761192b612b53565b048201901c9050600181848161194357611943612b53565b048201901c9050600181848161195b5761195b612b53565b048201901c9050600181848161197357611973612b53565b048201901c9050600181848161198b5761198b612b53565b048201901c9050610664818285816119a5576119a5612b53565b04612137565b60006119ba6002848418612b69565b61066490848416612afa565b816001600160a01b0316836001600160a01b0316141580156119e85750600081115b15611801576001600160a01b03831615611a76576001600160a01b038316600090815260ff602052604081208190611a239061214d85612159565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611a6b929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611801576001600160a01b038216600090815260ff602052604081208190611aac906122ad85612159565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611af4929190918252602082015260400190565b60405180910390a25050505050565b600054610100900460ff16611b6e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b6068611b7a8382612bd9565b5060696118018282612bd9565b600054610100900460ff16611bf25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b815160209283012081519190920120609791909155609855565b600054610100900460ff16611c775760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610740565b61013080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ce95750600090506003611d6d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d3d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d6657600060019250925050611d6d565b9150600090505b94509492505050565b6000816004811115611d8a57611d8a612c99565b03611d925750565b6001816004811115611da657611da6612c99565b03611df35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610740565b6002816004811115611e0757611e07612c99565b03611e545760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610740565b6003816004811115611e6857611e68612c99565b036107755760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610740565b611ee582826122b9565b61096461010061214d83612159565b6000611f49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661242b9092919063ffffffff16565b8051909150156118015780806020019051810190611f679190612caf565b6118015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054611801929182169116836119c6565b612015828261243a565b6067546001600160e01b0310156120945760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610740565b6109646101006122ad83612159565b600080608083901c156120b857608092831c92015b604083901c156120ca57604092831c92015b602083901c156120dc57602092831c92015b601083901c156120ee57601092831c92015b600883901c1561210057600892831c92015b600483901c1561211257600492831c92015b600283901c1561212457600292831c92015b600183901c156105a85760010192915050565b60008183106121465781610664565b5090919050565b60006106648284612b0d565b825460009081908181156121a657612176876113dc600185612b0d565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b031660208201526121bb565b60408051808201909152600080825260208201525b905080602001516001600160e01b031693506121db84868863ffffffff16565b92506000821180156121f35750805163ffffffff1643145b156122385761220183612503565b612210886113dc600186612b0d565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556122a3565b86604051806040016040528061224d436114a9565b63ffffffff16815260200161226186612503565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106648284612afa565b6001600160a01b0382166123355760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b038216600090815260656020526040902054818110156123c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610740565b6001600160a01b03831660008181526065602090815260408083208686039055606780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361180183600084611806565b606061174b8484600085612582565b6001600160a01b0382166124905760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610740565b80606760008282546124a29190612afa565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361159e60008383611806565b60006001600160e01b038211156115255760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610740565b6060824710156125fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610740565b600080866001600160a01b031685876040516126169190612cd1565b60006040518083038185875af1925050503d8060008114612653576040519150601f19603f3d011682016040523d82523d6000602084013e612658565b606091505b509150915061266987838387612674565b979650505050505050565b606083156126e35782516000036126dc576001600160a01b0385163b6126dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610740565b508161174b565b61174b83838151156126f85781518083602001fd5b8060405162461bcd60e51b81526004016107409190612760565b60006020828403121561272457600080fd5b81356001600160e01b03198116811461066457600080fd5b60005b8381101561275757818101518382015260200161273f565b50506000910152565b602081526000825180602084015261277f81604085016020870161273c565b601f01601f19169190910160400192915050565b6001600160a01b038116811461077557600080fd5b600080604083850312156127bb57600080fd5b82356127c681612793565b946020939093013593505050565b6000806000606084860312156127e957600080fd5b83356127f481612793565b9250602084013561280481612793565b929592945050506040919091013590565b60006020828403121561282757600080fd5b813561066481612793565b60006020828403121561284457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261287257600080fd5b813567ffffffffffffffff8082111561288d5761288d61284b565b604051601f8301601f19908116603f011681019082821181831017156128b5576128b561284b565b816040528381528660208588010111156128ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561290357600080fd5b833561290e81612793565b9250602084013567ffffffffffffffff8082111561292b57600080fd5b61293787838801612861565b9350604086013591508082111561294d57600080fd5b5061295a86828701612861565b9150509250925092565b60ff8116811461077557600080fd5b60008060008060008060c0878903121561298c57600080fd5b863561299781612793565b9550602087013594506040870135935060608701356129b581612964565b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a0312156129ea57600080fd5b87356129f581612793565b96506020880135612a0581612793565b955060408801359450606088013593506080880135612a2381612964565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612a5357600080fd5b8235612a5e81612793565b91506020830135612a6e81612793565b809150509250929050565b60008060408385031215612a8c57600080fd5b8235612a9781612793565b9150602083013563ffffffff81168114612a6e57600080fd5b600181811c90821680612ac457607f821691505b60208210810361177557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105a8576105a8612ae4565b818103818111156105a8576105a8612ae4565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612b4857600080fd5b815161066481612964565b634e487b7160e01b600052601260045260246000fd5b600082612b8657634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561180157600081815260208120601f850160051c81016020861015612bb25750805b601f850160051c820191505b81811015612bd157828155600101612bbe565b505050505050565b815167ffffffffffffffff811115612bf357612bf361284b565b612c0781612c018454612ab0565b84612b8b565b602080601f831160018114612c3c5760008415612c245750858301515b600019600386901b1c1916600185901b178555612bd1565b600085815260208120601f198616915b82811015612c6b57888601518255948401946001909101908401612c4c565b5085821015612c895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612cc157600080fd5b8151801515811461066457600080fd5b60008251612ce381846020870161273c565b919091019291505056fea2646970667358221220f8232a488630a0f1eaef4afb12d23bc9b68523c9c47b3d23e6824c7f01ee171f64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass GovernanceWrappedERC20__factory extends ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi$2, _bytecode, args[0]);\n        }\n    }\n    deploy(_token, _name, _symbol, overrides) {\n        return super.deploy(_token, _name, _symbol, overrides || {});\n    }\n    getDeployTransaction(_token, _name, _symbol, overrides) {\n        return super.getDeployTransaction(_token, _name, _symbol, overrides || {});\n    }\n    attach(address) {\n        return super.attach(address);\n    }\n    connect(signer) {\n        return super.connect(signer);\n    }\n    static createInterface() {\n        return new utils.Interface(_abi$2);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$2, signerOrProvider);\n    }\n}\nGovernanceWrappedERC20__factory.bytecode = _bytecode;\nGovernanceWrappedERC20__factory.abi = _abi$2;\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi$1 = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"depositFor\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"withdrawTo\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IGovernanceWrappedERC20__factory {\n    static createInterface() {\n        return new utils.Interface(_abi$1);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi$1, signerOrProvider);\n    }\n}\nIGovernanceWrappedERC20__factory.abi = _abi$1;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GovernanceERC20__factory: GovernanceERC20__factory,\n  GovernanceWrappedERC20__factory: GovernanceWrappedERC20__factory,\n  IGovernanceWrappedERC20__factory: IGovernanceWrappedERC20__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IERC20MintableUpgradeable__factory {\n    static createInterface() {\n        return new utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new Contract(address, _abi, signerOrProvider);\n    }\n}\nIERC20MintableUpgradeable__factory.abi = _abi;\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  governance: index$3,\n  IERC20MintableUpgradeable__factory: IERC20MintableUpgradeable__factory\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  erc20: index$2\n});\n\n/* Autogenerated file. Do not edit manually. */\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  core: index$G,\n  framework: index$z,\n  plugins: index$m,\n  test: index$4,\n  token: index$1\n});\n\nconst activeContractsList = activeContracts;\n\nexport { ActionExecute__factory, AddresslistMock__factory, AddresslistVotingSetup__factory, AddresslistVoting__factory, Addresslist__factory, AdminCloneFactory__factory, AdminSetup__factory, Admin__factory, CallbackHandlerMockHelper__factory, CallbackHandler__factory, CounterV1PluginSetup__factory, CounterV1__factory, CounterV2PluginSetup__factory, CounterV2__factory, DAOFactory__factory, DAOMock__factory, DAORegistry__factory, DAO__factory, DaoAuthorizableUpgradeable__factory, DaoAuthorizable__factory, ENSSubdomainRegistrar__factory, ERC1271Mock__factory, GasConsumer__factory, GovernanceERC20Mock__factory, GovernanceERC20__factory, GovernanceWrappedERC20__factory, IDAO__factory, IEIP4824__factory, IERC20MintableUpgradeable__factory, IGovernanceWrappedERC20__factory, IMajorityVoting__factory, IMembership__factory, IMerkleDistributor__factory, IMerkleMinter__factory, IMultisig__factory, IPermissionCondition__factory, IPluginRepo__factory, IPluginSetup__factory, IPlugin__factory, IProposal__factory, InterfaceBasedRegistryMock__factory, InterfaceBasedRegistry__factory, MajorityVotingBase__factory, MajorityVotingMock__factory, MerkleDistributor__factory, MerkleMinter__factory, MultiplyHelper__factory, MultisigSetup__factory, Multisig__factory, PermissionConditionMock__factory, PermissionLib__factory, PermissionManagerTest__factory, PermissionManager__factory, PlaceholderSetup__factory, PluginCloneableSetupV1MockBad__factory, PluginCloneableSetupV1Mock__factory, PluginCloneableSetupV2Mock__factory, PluginCloneableV1MockBad__factory, PluginCloneableV1Mock__factory, PluginCloneableV2Mock__factory, PluginCloneable__factory, PluginRepoFactory__factory, PluginRepoRegistry__factory, PluginRepo__factory, PluginSetupProcessor__factory, PluginSetup__factory, PluginUUPSUpgradeableSetupV1MockBad__factory, PluginUUPSUpgradeableSetupV1Mock__factory, PluginUUPSUpgradeableSetupV2Mock__factory, PluginUUPSUpgradeableSetupV3Mock__factory, PluginUUPSUpgradeableSetupV4Mock__factory, PluginUUPSUpgradeableV1Mock__factory, PluginUUPSUpgradeableV2Mock__factory, PluginUUPSUpgradeableV3Mock__factory, PluginUUPSUpgradeable__factory, Plugin__factory, ProposalUpgradeable__factory, Proposal__factory, RatioTest__factory, RegistryUtils__factory, TestERC1155__factory, TestERC20__factory, TestERC721__factory, TestIdGatingCondition__factory, TestParameterScopingPermissionCondition__factory, TestPlugin__factory, TestSharedPlugin__factory, TokenFactory__factory, TokenVotingSetup__factory, TokenVoting__factory, activeContractsList, index as factories };\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import { IClientConfig } from \"../interfaces\";\nimport { GenericRecord } from \"../typings\";\nimport fetch from \"isomorphic-unfetch\";\n\nexport namespace Network {\n  /**\n   * Performs a request and returns a JSON object with the response\n   */\n  export async function request(\n    config: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const { url, headers } = config;\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    const response = await fetch(endpoint.href, {\n      method: method || \"GET\",\n      headers,\n      body,\n      signal,\n    });\n\n    if (!response.ok) {\n      throw Object.assign(\n        new Error(`${response.status}: ${response.statusText}`),\n        { response },\n      );\n    }\n    return response.json();\n  }\n\n  export async function* stream(\n    { url, headers }: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    method = method || \"GET\";\n    const res = await fetch(endpoint.href, { method, headers, body, signal });\n\n    if (!res.ok) {\n      const msg = `${res.status}: ${res.statusText}`;\n      throw Object.assign(new Error(msg), { response: res });\n    }\n\n    if (!res.body) {\n      throw Object.assign(new Error(\"Missing response body\"), {\n        response: res,\n      });\n    }\n    yield* streamedBytes(res.body);\n  }\n\n  async function* streamedBytes(\n    stream: ReadableStream<Uint8Array>,\n  ): AsyncGenerator<Uint8Array> {\n    let error = null;\n    const reader = stream.getReader();\n    try {\n      while (true) {\n        const result = await reader.read();\n        if (result.done) {\n          break;\n        }\n        yield result.value;\n      }\n    } catch (err) {\n      error = err;\n    } finally {\n      reader.cancel();\n      reader.releaseLock();\n    }\n    if (error) throw error;\n  }\n}\n", "import {\n  AddOptions,\n  CatOptions,\n  NodeInfoOptions,\n  PinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport {\n  AddResponse,\n  GenericRecord,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\n\nexport namespace Helpers {\n  export function getName(file: File | (Blob & { name?: string })) {\n    return file.name;\n  }\n\n  export function handleError(error: Error & { response?: Response }) {\n    if (error.response?.ok) {\n      return new Error(\"Error parsing body\");\n    } else {\n      return error;\n    }\n  }\n\n  export async function streamToUInt8Array(\n    stream: AsyncGenerator<Uint8Array>\n  ): Promise<Uint8Array> {\n    const chunks: Uint8Array[] = [];\n    let byteCount = 0;\n    for await (const chunk of stream) {\n      chunks.push(chunk);\n      byteCount += chunk.length;\n    }\n\n    const mergedArray = new Uint8Array(byteCount);\n    let lastIndex = 0;\n    for (const chunk of chunks) {\n      mergedArray.set(chunk, lastIndex);\n      lastIndex += chunk.length;\n    }\n    return mergedArray;\n  }\n\n  export function toVersionResponse(data: {\n    [k: string]: any;\n  }): VersionResponse {\n    const {\n      Version: version,\n      Commit: commit,\n      Repo: repo,\n      System: system,\n      Golang: golang,\n    } = data;\n    return {\n      version,\n      commit,\n      repo,\n      system,\n      golang,\n    };\n  }\n\n  export function toNodeInfoResponse(data: {\n    [k: string]: any;\n  }): NodeInfoResponse {\n    const {\n      ID: id,\n      Addresses: addresses,\n      AgentVersion: agentVersion,\n      ProtocolVersion: protocolVersion,\n      Protocols: protocols,\n      PublicKey: publicKey,\n    } = data;\n\n    return {\n      id,\n      addresses,\n      agentVersion,\n      protocolVersion,\n      protocols,\n      publicKey,\n    };\n  }\n\n  export function toAddResponse(data: { [k: string]: any }): AddResponse {\n    const { Bytes: bytes, Hash: hash, Name: name, Size: size } = data;\n    return {\n      bytes,\n      hash,\n      name,\n      size,\n    };\n  }\n\n  export function toPinResponse(data: { [k: string]: any }): PinResponse {\n    const { Pins: pins, Progress: progress } = data;\n    return { pins, progress };\n  }\n\n  export function getVersionParams(\n    options: VersionOptions = {}\n  ): GenericRecord {\n    return encodeParams({\n      number: options.number,\n      commit: options.commit,\n      all: options.all,\n    });\n  }\n\n  export function getNodeInfoParams(\n    options: NodeInfoOptions = {}\n  ): GenericRecord {\n    return encodeParams({\n      arg: options.arg,\n      format: options.format,\n      \"peerid-base\": options.peeridBase,\n    });\n  }\n\n  export function getAddParams(options: AddOptions = {}): GenericRecord {\n    return encodeParams({\n      quiet: options.quiet,\n      quieter: options.quieter,\n      silent: options.silent,\n      progress: options.progress,\n      trickle: options.trickle,\n      \"only-hash\": options.onlyHash,\n      \"wrap-with-directory\": options.wrapWithDirectory,\n      chunker: options.chunker,\n      pin: options.pin,\n      \"raw-leaves\": options.rawLeaves,\n      nocopy: options.noCopy,\n      fscache: options.fsCache,\n      \"cid-version\": options.cidVersion,\n      hash: options.hash,\n      inline: options.inline,\n      \"inline-limit\": options.inlineLimit,\n    });\n  }\n\n  export function getCatParams(options: CatOptions = {}): GenericRecord {\n    return encodeParams({\n      offset: options.offset,\n      length: options.length,\n      progress: options.progress,\n    });\n  }\n\n  export function getPinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n      progress: options.progress,\n    });\n  }\n\n  export function getUnpinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n    });\n  }\n\n  function encodeParams<T extends {}>(\n    options: T\n  ): { [K in keyof T]: Exclude<T[K], undefined> } {\n    // @ts-ignore\n    return Object.fromEntries(\n      Object.entries(options).filter(([, v]) => v != null)\n    );\n  }\n}\n", "import {\n  AddOptions,\n  CatOptions,\n  IClientConfig,\n  NodeInfoOptions,\n  PinOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport { Network } from \"./network\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\nimport { Helpers } from \"./helpers\";\n\nexport namespace API {\n  /** Gets cluster version */\n  export function version(\n    cluster: IClientConfig,\n    options: VersionOptions = {},\n  ): Promise<VersionResponse> {\n    return Network.request(cluster, \"version\", {\n      method: \"POST\",\n      params: Helpers.getVersionParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toVersionResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Gets the cluster node information */\n  export function nodeInfo(\n    cluster: IClientConfig,\n    options = {} as NodeInfoOptions,\n  ): Promise<NodeInfoResponse> {\n    return Network.request(cluster, \"id\", {\n      method: \"POST\",\n      params: Helpers.getNodeInfoParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toNodeInfoResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Upload a file to the cluster and pin it */\n  export function add(\n    cluster: IClientConfig,\n    file: File | Blob | Uint8Array | string,\n    options: AddOptions = {},\n  ): Promise<AddResponse> {\n    if (\n      !(file instanceof File) &&\n      !(file instanceof Blob) &&\n      !(file instanceof Uint8Array) &&\n      typeof file !== \"string\"\n    ) {\n      throw new Error(\"Invalid file\");\n    }\n\n    const body = new FormData();\n    if (typeof file === \"string\") {\n      body.append(\"path\", file);\n    } else if (file instanceof Uint8Array) {\n      body.append(\"path\", new Blob([file]));\n    } else {\n      body.append(\"path\", file, getName(file) || \"file\");\n    }\n\n    return Network.request(cluster, \"add\", {\n      params: Helpers.getAddParams(options),\n      method: \"POST\",\n      body,\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toAddResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Fetches the data behind the given path or CiD and returns it as bytes */\n  export async function cat(\n    cluster: IClientConfig,\n    path: string,\n    options: CatOptions = {},\n  ): Promise<Uint8Array> {\n    if (!path) {\n      throw new Error(\"Invalid CID\");\n    }\n    const stream = Network.stream(cluster, \"cat\", {\n      method: \"POST\",\n      params: {\n        ...Helpers.getCatParams(options),\n        arg: path,\n      },\n      signal: options.signal,\n    });\n    return Helpers.streamToUInt8Array(stream);\n  }\n\n  /** Pins the given path or CiD or IPFS/IPNS path to the cluster */\n  export function pin(\n    cluster: IClientConfig,\n    path: string,\n    options: PinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/add\", {\n        params: {\n          ...Helpers.getPinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n\n  /** Unpins the given path or CiD or IPFS/IPNS path from the cluster */\n  export function unpin(\n    cluster: IClientConfig,\n    path: string,\n    options: UnpinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/rm\", {\n        params: {\n          ...Helpers.getUnpinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n}\n\nconst getName = (file: File | (Blob & { name?: string })) => file.name;\n", "import { API } from \"./internal/api\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"./typings\";\nimport {\n  AddOptions,\n  CatOptions,\n  PinOptions,\n  RequestOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"./interfaces\";\n\nexport class Client {\n  readonly url: URL;\n  readonly headers: Record<string, string>;\n\n  /** Create a new instance of the IPFS cluster client */\n  constructor(url: string | URL, headers?: Record<string, string>) {\n    const newUrl = typeof url === \"string\" ? new URL(url) : url;\n    if (!newUrl.pathname.endsWith(\"/\")) {\n      newUrl.pathname += \"/\";\n    }\n    this.url = newUrl;\n\n    this.headers = headers || {};\n  }\n\n  /**\n   * Get Cluster version.\n   * @param {API.RequestOptions} [options]\n   */\n  version(options?: VersionOptions): Promise<VersionResponse> {\n    return API.version(this, options);\n  }\n\n  /**\n   * Get Cluster peer information.\n   */\n  nodeInfo(options?: RequestOptions): Promise<NodeInfoResponse> {\n    return API.nodeInfo(this, options);\n  }\n\n  /**\n   * Imports a file to the cluster. First argument must be a `File` or `Blob`.\n   * Note: by default this module uses v1 CIDs and raw leaves enabled.\n   */\n  add(\n    file: File | Blob | Uint8Array | string,\n    options?: AddOptions,\n  ): Promise<AddResponse> {\n    return API.add(this, file, options);\n  }\n\n  /** Fetches the contents behind the cid and returns them as an Uint8Array */\n  cat(path: string, options?: CatOptions): Promise<Uint8Array> {\n    return API.cat(this, path, options);\n  }\n\n  /**\n   * Tracks a path with the given replication factor and a name for\n   * human-friendliness.\n   */\n  pin(path: string, options?: PinOptions): Promise<PinResponse> {\n    return API.pin(this, path, options);\n  }\n\n  /**\n   * Untracks a path on the cluster.\n   */\n  unpin(path: string, options?: UnpinOptions): Promise<PinResponse> {\n    return API.unpin(this, path, options);\n  }\n}\n", null, null, null, null, null, null, null, "import { ContractInterface } from \"@ethersproject/contracts\";\n\nexport const erc20ContractAbi: ContractInterface = [\n  {\n    name: \"Transfer\",\n    inputs: [\n      { type: \"address\", name: \"sender\", indexed: true },\n      { type: \"address\", name: \"receiver\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Approval\",\n    inputs: [\n      { type: \"address\", name: \"owner\", indexed: true },\n      { type: \"address\", name: \"spender\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"transfer\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_to\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"approve\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_spender\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"symbol\",\n    outputs: [{ type: \"string\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"decimals\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"balanceOf\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [{ type: \"address\", name: \"arg0\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"allowance\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"arg0\" },\n      { type: \"address\", name: \"arg1\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"totalSupply\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n", "import { gql } from \"graphql-request\";\n\nexport const QueryDao = gql`\n  query Dao($address: ID!) {\n    dao(id: $address){\n      id\n      subdomain\n      metadata\n      createdAt\n      plugins{\n        id\n        __typename\n      }\n    }\n  }\n`;\nexport const QueryDaos = gql`\n  query Daos ($limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: Dao_orderBy!) {\n    daos(first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n      id\n      subdomain\n      metadata\n      plugins{\n        id\n        __typename\n      }\n    }\n  }\n`;\n\nexport const QueryDaoTransfersByAddress = gql`\nquery DaoTransfersByAddress($address: ID!) {\n  dao(id: $address) {\n    withdraws {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      to\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n    deposits {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      sender\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenBalances = gql`\nquery TokenBalances($where: TokenBalance_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenBalance_orderBy!) {\n  tokenBalances (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    lastUpdated\n    __typename\n    ... on ERC20Balance {\n      balance\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n    }\n    ... on ERC721Balance {\n      token {\n        name\n        symbol\n        id\n      }\n    }\n    ... on NativeBalance {\n      balance\n    }\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenTransfers = gql`\nquery TokenTransfers($where: TokenTransfer_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenTransfer_orderBy!) {\n  tokenTransfers (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    from\n    to\n    type\n    createdAt\n    txHash\n    proposal{\n      id\n    }\n    __typename\n    ... on ERC20Transfer {\n      amount\n      token {\n        id\n        name\n        symbol\n        decimals\n      }\n    }\n    ... on ERC721Transfer {\n      token{\n      \tid\n        name\n        symbol\n      }\n      \n    }\n    ... on NativeTransfer {\n      amount\n    }\n  }\n}\n`;\n", "// This file contains the definitions of the general purpose DAO client\n\nimport {\n  DaoAction,\n  GasFeeEstimation,\n  IInterfaceParams,\n  IPagination,\n  IPluginInstallItem,\n  Pagination,\n} from \"./client-common/interfaces/common\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { IClientCore } from \"./client-common/interfaces/core\";\nimport { ApplyInstallationParams, DecodedApplyInstallationParams } from \"./client-common\";\n\n/** Defines the shape of the general purpose Client class */\nexport interface IClientMethods extends IClientCore {\n  createDao: (params: CreateDaoParams) => AsyncGenerator<DaoCreationStepValue>;\n  pinMetadata: (params: DaoMetadata) => Promise<string>;\n  /** Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet*/\n  getDaoBalances: (\n    params: DaoBalancesQueryParams,\n  ) => Promise<AssetBalance[] | null>;\n  /** Retrieves the list of transfers from or to the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet*/\n  getDaoTransfers: (params: ITransferQueryParams) => Promise<Transfer[] | null>;\n  /** Checks whether a role is granted by the current DAO's ACL settings */\n  hasPermission: (params: IHasPermissionParams) => Promise<boolean>;\n  /** Deposits ether or an ERC20 token */\n  deposit: (\n    params: DepositParams,\n  ) => AsyncGenerator<DaoDepositStepValue>;\n  /** Retrieves metadata for DAO with given identifier (address or ens domain)*/\n  updateAllowance: (\n    params: UpdateAllowanceParams,\n  ) => AsyncGenerator<UpdateAllowanceStepValue>;\n  /** Retrieves metadata for DAO with given identifier (address or ens domain)*/\n  getDao: (daoAddressOrEns: string) => Promise<DaoDetails | null>;\n  /** Retrieves metadata for many daos */\n  getDaos: (params: IDaoQueryParams) => Promise<DaoListItem[]>;\n}\n\nexport interface IClientEncoding extends IClientCore {\n  grantAction: (\n    daoAddress: string,\n    params: IGrantPermissionParams,\n  ) => DaoAction;\n  grantWithConditionAction: (\n    daoAddress: string,\n    params: GrantPermissionWithConditionParams,\n  ) => DaoAction;\n  revokeAction: (\n    daoAddress: string,\n    params: IRevokePermissionParams,\n  ) => DaoAction;\n  withdrawAction: (\n    parameters: WithdrawParams,\n  ) => Promise<DaoAction>;\n  updateDaoMetadataAction: (\n    daoAddressOrEns: string,\n    metadataUri: string,\n  ) => Promise<DaoAction>;\n  setDaoUriAction: (\n    daoAddressOrEns: string,\n    daoUri: string,\n  ) => DaoAction;\n  registerStandardCallbackAction: (\n    daoAddressOrEns: string,\n    params: RegisterStandardCallbackParams,\n  ) => DaoAction;\n  setSignatureValidatorAction: (\n    daoAddressOrEns: string,\n    signatureValidator: string,\n  ) => DaoAction;\n  upgradeToAction: (\n    daoAddressOrEns: string,\n    implementationAddress: string,\n  ) => DaoAction;\n  upgradeToAndCallAction: (\n    daoAddressOrEns: string,\n    params: UpgradeToAndCallParams,\n  ) => DaoAction;\n  applyInstallationAction: (\n    daoAddressOrEns: string,\n    params: ApplyInstallationParams,\n  ) => DaoAction;\n}\n\nexport interface IClientDecoding {\n  grantAction: (data: Uint8Array) => IGrantPermissionDecodedParams;\n  grantWithConditionAction: (\n    data: Uint8Array,\n  ) => GrantPermissionWithConditionParams;\n  revokeAction: (data: Uint8Array) => IRevokePermissionDecodedParams;\n  withdrawAction: (\n    to: string,\n    value: bigint,\n    data: Uint8Array,\n  ) => WithdrawParams;\n  updateDaoMetadataRawAction: (data: Uint8Array) => string;\n  updateDaoMetadataAction: (data: Uint8Array) => Promise<DaoMetadata>;\n  setDaoUriAction: (data: Uint8Array) => string;\n  registerStandardCallbackAction: (\n    data: Uint8Array,\n  ) => RegisterStandardCallbackParams;\n  setSignatureValidatorAction: (data: Uint8Array) => string;\n  upgradeToAction: (data: Uint8Array) => string;\n  upgradeToAndCallAction: (data: Uint8Array) => UpgradeToAndCallParams;\n  findInterface: (data: Uint8Array) => IInterfaceParams | null;\n  applyInstallationAction: (\n    data: Uint8Array,\n  ) => DecodedApplyInstallationParams;\n}\n\nexport interface IClientEstimation {\n  createDao: (params: CreateDaoParams) => Promise<GasFeeEstimation>;\n  deposit: (\n    params: DepositParams,\n  ) => Promise<GasFeeEstimation>;\n  updateAllowance: (params: UpdateAllowanceParams) => Promise<GasFeeEstimation>;\n}\n\nexport interface IClient {\n  methods: IClientMethods;\n  encoding: IClientEncoding;\n  decoding: IClientDecoding;\n  estimation: IClientEstimation;\n}\n\n// DAO CREATION\n\n/** Holds the parameters that the DAO will be created with */\nexport type CreateDaoParams = {\n  metadataUri: string;\n  daoUri?: string;\n  ensSubdomain: string;\n  trustedForwarder?: string;\n  plugins: IPluginInstallItem[];\n};\n\nexport type DaoMetadata = {\n  name: string;\n  description: string;\n  avatar?: string;\n  links: DaoResourceLink[];\n};\n\n// Withdrawals\ntype WithdrawParamsBase = {\n  type: TokenType;\n  recipientAddressOrEns: string;\n};\n\ntype WithdrawEthParams = WithdrawParamsBase & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\ntype WithdrawErc20Params = WithdrawParamsBase & {\n  type: TokenType.ERC20;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport type WithdrawParams = WithdrawEthParams | WithdrawErc20Params;\n\ninterface IPermissionParamsBase {\n  where: string;\n  who: string;\n  permission: string;\n}\ninterface IPermissionDecodedParamsBase extends IPermissionParamsBase {\n  permissionId: string;\n}\nexport interface IGrantPermissionParams extends IPermissionParamsBase {}\nexport interface IRevokePermissionParams extends IPermissionParamsBase {}\nexport interface IGrantPermissionDecodedParams\n  extends IPermissionDecodedParamsBase {}\nexport interface IRevokePermissionDecodedParams\n  extends IPermissionDecodedParamsBase {}\n\nexport type PermisionParamsBase = {\n  where: string;\n  who: string;\n  permission: string;\n};\n\nexport type GrantPermissionWithConditionParams = PermisionParamsBase & {\n  condition: string;\n};\nexport type GrantPermissionWithConditionDecodedParams = PermisionParamsBase & {\n  condition: string;\n  permissionId: string;\n};\n\nexport interface IHasPermissionParams {\n  daoAddressOrEns: string;\n  where: string;\n  who: string;\n  permission: string; // permission name\n  data?: Uint8Array;\n}\n\nconst Permissions = {\n  UPGRADE_PERMISSION: \"UPGRADE_PERMISSION\",\n  SET_METADATA_PERMISSION: \"SET_METADATA_PERMISSION\",\n  EXECUTE_PERMISSION: \"EXECUTE_PERMISSION\",\n  WITHDRAW_PERMISSION: \"WITHDRAW_PERMISSION\",\n  SET_SIGNATURE_VALIDATOR_PERMISSION: \"SET_SIGNATURE_VALIDATOR_PERMISSION\",\n  SET_TRUSTED_FORWARDER_PERMISSION: \"SET_TRUSTED_FORWARDER_PERMISSION\",\n  ROOT_PERMISSION: \"ROOT_PERMISSION\",\n  CREATE_VERSION_PERMISSION: \"CREATE_VERSION_PERMISSION\",\n  REGISTER_PERMISSION: \"REGISTER_PERMISSION\",\n  REGISTER_DAO_PERMISSION: \"REGISTER_DAO_PERMISSION\",\n  REGISTER_ENS_SUBDOMAIN_PERMISSION: \"REGISTER_ENS_SUBDOMAIN_PERMISSION\",\n  MINT_PERMISSION: \"MINT_PERMISSION\",\n  MERKLE_MINT_PERMISSION: \"MERKLE_MINT_PERMISSION\",\n  MODIFY_ALLOWLIST_PERMISSION: \"MODIFY_ALLOWLIST_PERMISSION\",\n  SET_CONFIGURATION_PERMISSION: \"SET_CONFIGURATION_PERMISSION\",\n};\n\nconst PermissionIds = Object.entries(Permissions).reduce(\n  (acc, [k, v]) => ({ ...acc, [k + \"_ID\"]: keccak256(toUtf8Bytes(v)) }),\n  {} as { [k: string]: string },\n);\nObject.freeze(Permissions);\nexport { Permissions };\nObject.freeze(PermissionIds);\nexport { PermissionIds };\n\nexport enum DaoCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type DaoCreationStepValue =\n  | { key: DaoCreationSteps.CREATING; txHash: string }\n  | { key: DaoCreationSteps.DONE; address: string; pluginAddresses: string[] };\n\n// DEPOSIT\n\nexport type DepositBaseParams = {\n  daoAddressOrEns: string;\n};\n\nexport type DepositEthParams = DepositBaseParams & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\nexport type DepositErc20Params = DepositBaseParams & {\n  type: TokenType.ERC20;\n  tokenAddress: string;\n  amount: bigint;\n};\n// export type DepositErc721Params = DepositBaseParams & {\n//   type: TokenType.ERC721;\n//   tokenAddress: string;\n// };\n\nexport type DepositParams = DepositEthParams | DepositErc20Params; // | DepositErc721Params;\n\nexport type UpdateAllowanceParams = {\n  daoAddressOrEns: string;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport enum DaoDepositSteps {\n  CHECKED_ALLOWANCE = \"checkedAllowance\",\n  UPDATING_ALLOWANCE = \"updatingAllowance\",\n  UPDATED_ALLOWANCE = \"updatedAllowance\",\n  DEPOSITING = \"depositing\",\n  DONE = \"done\",\n}\nexport type UpdateAllowanceStepValue =\n  | { key: DaoDepositSteps.CHECKED_ALLOWANCE; allowance: bigint }\n  | { key: DaoDepositSteps.UPDATING_ALLOWANCE; txHash: string }\n  | { key: DaoDepositSteps.UPDATED_ALLOWANCE; allowance: bigint };\n\nexport type DaoDepositStepValue =\n  | UpdateAllowanceStepValue\n  | { key: DaoDepositSteps.DEPOSITING; txHash: string }\n  | { key: DaoDepositSteps.DONE; amount: bigint };\n\n// Token balances\n\ntype AssetBalanceBase = {\n  address: string;\n  name: string;\n  symbol: string;\n  updateDate: Date;\n};\n\ntype NativeAssetBalance = {\n  type: TokenType.NATIVE;\n  balance: bigint;\n  updateDate: Date;\n};\ntype Erc20AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC20;\n  balance: bigint;\n  decimals: number;\n};\ntype Erc721AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC721;\n};\n\nexport type AssetBalance =\n  | NativeAssetBalance\n  | Erc20AssetBalance\n  | Erc721AssetBalance;\n\n// Token transfers\nexport enum TransferType {\n  DEPOSIT = \"deposit\",\n  WITHDRAW = \"withdraw\",\n}\nexport enum TokenType {\n  NATIVE = \"native\",\n  ERC20 = \"erc20\",\n  ERC721 = \"erc721\",\n}\n\ntype BaseTokenTransfer = {\n  creationDate: Date;\n  transactionId: string;\n  to: string;\n  from: string;\n};\n\ntype NativeTokenTransfer = BaseTokenTransfer & {\n  tokenType: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype Erc721TokenTransfer = BaseTokenTransfer & {\n  tokenType: TokenType.ERC721;\n  token: {\n    address: string;\n    name: string;\n    symbol: string;\n  };\n};\n\ntype Erc20TokenTransfer = BaseTokenTransfer & {\n  tokenType: TokenType.ERC20;\n  amount: bigint;\n  token: {\n    address: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n};\n\nexport type Deposit =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.DEPOSIT;\n  };\n\nexport type Withdraw =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.WITHDRAW;\n    proposalId: string;\n  };\n\nexport type Transfer = Deposit | Withdraw;\n\nexport type RegisterStandardCallbackParams = {\n  interfaceId: string;\n  callbackSelector: string;\n  magicNumber: string;\n};\n\nexport type UpgradeToAndCallParams = {\n  implementationAddress: string;\n  data: Uint8Array;\n};\n\n// DAO details\n\nexport type DaoResourceLink = { name: string; url: string };\nexport type InstalledPluginListItem = {\n  id: string;\n  instanceAddress: string;\n  version: string;\n};\n\nexport type DaoDetails = {\n  address: string;\n  ensDomain: string;\n  metadata: DaoMetadata;\n  creationDate: Date;\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoListItem = {\n  address: string;\n  ensDomain: string;\n  metadata: {\n    name: string;\n    description: string;\n    avatar?: string;\n  };\n  plugins: InstalledPluginListItem[];\n};\n\nexport interface IDaoQueryParams extends IPagination {\n  sortBy?: DaoSortBy;\n}\nexport interface ITransferQueryParams extends IPagination {\n  sortBy?: TransferSortBy;\n  type?: TransferType;\n  daoAddressOrEns?: string;\n}\nexport enum TransferSortBy {\n  CREATED_AT = \"createdAt\",\n}\n\nexport type DaoBalancesQueryParams = Pagination & {\n  sortBy?: AssetBalanceSortBy;\n  daoAddressOrEns?: string;\n};\nexport enum AssetBalanceSortBy {\n  LAST_UPDATED = \"lastUpdated\",\n}\n\nexport enum DaoSortBy {\n  CREATED_AT = \"createdAt\",\n  SUBDOMAIN = \"subdomain\",\n  POPULARITY = \"totalProposals\", // currently defined as number of proposals\n}\n\nexport enum SubgraphPluginTypeName {\n  TOKEN_VOTING = \"TokenVotingPlugin\",\n  ADDRESS_LIST = \"AddresslistVotingPlugin\",\n  ADMIN = \"AdminPlugin\",\n  MULTISIG = \"MultisigPlugin\",\n}\n\nexport const SubgraphPluginTypeMap: Map<\n  SubgraphPluginTypeName,\n  string\n> = new Map([\n  [SubgraphPluginTypeName.TOKEN_VOTING, \"token-voting.plugin.dao.eth\"],\n  [SubgraphPluginTypeName.ADDRESS_LIST, \"address-list-voting.plugin.dao.eth\"],\n  [SubgraphPluginTypeName.ADMIN, \"admin.plugin.dao.eth\"],\n  [SubgraphPluginTypeName.MULTISIG, \"multisig.plugin.dao.eth\"],\n]);\n\nexport type SubgraphPluginListItem = {\n  id: string;\n  __typename: SubgraphPluginTypeName;\n};\n\ntype SubgraphDaoBase = {\n  id: string;\n  subdomain: string;\n  metadata: string;\n  plugins: SubgraphPluginListItem[];\n};\n\nexport type SubgraphDao = SubgraphDaoBase & {\n  createdAt: string;\n};\n\nexport type SubgraphDaoListItem = SubgraphDaoBase;\n\nexport type SubgraphBalance = {\n  __typename: string;\n  token: {\n    id: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  balance: string;\n  lastUpdated: string;\n};\n\nexport enum SubgraphTransferType {\n  DEPOSIT = \"Deposit\",\n  WITHDRAW = \"Withdraw\",\n}\n\nexport type SubgraphTransferListItem = {\n  from: string;\n  to: string;\n  type: SubgraphTransferType;\n  createdAt: string;\n  txHash: string;\n  proposal: {\n    id: string | null;\n  };\n  amount: string;\n  token: SubgraphToken;\n  __typename: string;\n};\n\nexport type SubgraphToken = {\n  id: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n};\nexport const SubgraphTransferTypeMap: Map<\n  TransferType,\n  SubgraphTransferType\n> = new Map([\n  [TransferType.DEPOSIT, SubgraphTransferType.DEPOSIT],\n  [TransferType.WITHDRAW, SubgraphTransferType.WITHDRAW],\n]);\n\nexport type ContractPermissionParams = [string, string, string];\nexport type ContractPermissionWithConditionParams = [\n  string,\n  string,\n  string,\n  string,\n];\nexport type ContractWithdrawParams = [string, string, BigNumber, string];\n", "import { BigNumber } from \"@ethersproject/bignumber\";\nimport { DaoAction, IPagination } from \"./common\";\n\n/**\n * Contains the states of a proposal. Note that on chain\n * proposals cannot be in draft state\n */\nexport enum ProposalStatus {\n  ACTIVE = \"Active\",\n  PENDING = \"Pending\",\n  SUCCEEDED = \"Succeeded\",\n  EXECUTED = \"Executed\",\n  DEFEATED = \"Defeated\",\n}\n\nexport enum VoteValues {\n  // NONE = 0,\n  ABSTAIN = 1,\n  YES = 2,\n  NO = 3,\n}\n\n// TYPES\n\nexport type MajorityVotingSettingsBase = {\n  /** Float between 0 and 1 */\n  supportThreshold: number;\n  /** Float between 0 and 1 */\n  minParticipation: number;\n};\n\nexport type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {\n  duration: number;\n};\nexport type MajorityVotingSettings = MajorityVotingSettingsBase & {\n  /* default is standard */\n  votingMode?: VotingMode;\n  /* minimum is 3600 */\n  minDuration: number;\n  /* default is 0 */\n  minProposerVotingPower?: bigint;\n};\n\nexport type VotingSettings = MajorityVotingSettings;\n\nexport enum VotingMode {\n  STANDARD = \"Standard\",\n  EARLY_EXECUTION = \"EarlyExecution\",\n  VOTE_REPLACEMENT = \"VoteReplacement\",\n}\n\nexport type ContractVotingSettings = [\n  BigNumber, // votingMode\n  BigNumber, // supportThreshold\n  BigNumber, // minParticipation\n  BigNumber, // minDuration\n  BigNumber, // minProposerVotingPower\n];\n\nexport type CreateProposalBaseParams = {\n  pluginAddress: string;\n  actions?: DaoAction[];\n  /** For every action item, denotes whether its execution could fail\n   * without aborting the whole proposal execution */\n  failSafeActions?: Array<boolean>;\n  metadataUri: string;\n};\n\nexport type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {\n  startDate?: Date;\n  endDate?: Date;\n  executeOnPass?: boolean;\n  creatorVote?: VoteValues;\n};\n\nexport interface IVoteProposalParams {\n  vote: VoteValues;\n  proposalId: string;\n}\n\nexport interface CanVoteParams {\n  proposalId: string;\n  voterAddressOrEns: string;\n  vote: VoteValues;\n}\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadata = {\n  title: string;\n  summary: string;\n  description: string;\n  resources: Array<{ url: string; name: string }>;\n  media?: {\n    header?: string;\n    logo?: string;\n  };\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadataSummary = {\n  title: string;\n  summary: string;\n};\n\n// Long version\nexport type ProposalBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadata;\n  startDate: Date;\n  endDate: Date;\n  creationDate: Date;\n  actions: Array<DaoAction>;\n  status: ProposalStatus;\n};\n\n// Short version\nexport type ProposalListItemBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadataSummary;\n  startDate: Date;\n  endDate: Date;\n  status: ProposalStatus;\n};\n\nexport enum SubgraphVoteValues {\n  YES = \"Yes\",\n  NO = \"No\",\n  ABSTAIN = \"Abstain\",\n}\nexport const SubgraphVoteValuesMap: Map<\n  SubgraphVoteValues,\n  VoteValues\n> = new Map([\n  [SubgraphVoteValues.YES, VoteValues.YES],\n  [SubgraphVoteValues.NO, VoteValues.NO],\n  [SubgraphVoteValues.ABSTAIN, VoteValues.ABSTAIN],\n]);\n\nexport type SubgraphVoterListItemBase = {\n  voter: {\n    address: string;\n  };\n  voteReplaced: boolean;\n  voteOption: SubgraphVoteValues;\n};\n\nexport type SubgraphAction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type SubgraphProposalBase = {\n  id: string;\n  dao: {\n    id: string;\n    subdomain: string;\n  };\n  creator: string;\n  metadata: string;\n  yes: string;\n  no: string;\n  abstain: string;\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  executable: boolean;\n};\n\nexport interface IComputeStatusProposal {\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  executable: boolean;\n}\n\nexport interface IProposalQueryParams extends IPagination {\n  sortBy?: ProposalSortBy;\n  status?: ProposalStatus;\n  daoAddressOrEns?: string;\n}\n\nexport enum ProposalSortBy {\n  CREATED_AT = \"createdAt\",\n  NAME = \"name\",\n  POPULARITY = \"popularity\",\n  VOTES = \"votes\", // currently defined as number of proposals\n}\n\n// STEPS\n\n// PROPOSAL CREATION\nexport enum ProposalCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type ProposalCreationStepValue =\n  | { key: ProposalCreationSteps.CREATING; txHash: string }\n  | { key: ProposalCreationSteps.DONE; proposalId: string };\n\n// PROPOSAL VOTING\nexport enum VoteProposalStep {\n  VOTING = \"voting\",\n  DONE = \"done\",\n}\n\nexport type VoteProposalStepValue =\n  | { key: VoteProposalStep.VOTING; txHash: string }\n  | { key: VoteProposalStep.DONE };\n\n// PROPOSAL EXECUTION\nexport enum ExecuteProposalStep {\n  EXECUTING = \"executing\",\n  DONE = \"done\",\n}\n\nexport type ExecuteProposalStepValue =\n  | { key: ExecuteProposalStep.EXECUTING; txHash: string }\n  | { key: ExecuteProposalStep.DONE };\n\nexport type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];\n\nexport type SubgraphVotingSettings = {\n  minDuration: string;\n  minProposerVotingPower: string;\n  minParticipation: string;\n  supportThreshold: string;\n  votingMode: VotingMode;\n};\n\nexport type SubgraphMembers = {\n  members: {\n    address: string;\n  }[];\n};\nexport enum PrepareInstallationStep {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\n\nexport type PrepareInstallationStepValue =\n  | { key: PrepareInstallationStep.PREPARING; txHash: string }\n  | {\n    key: PrepareInstallationStep.DONE;\n  } & ApplyInstallationParams;\n\nexport type ApplyInstallationParamsBase = {\n  permissions: MultiTargetPermission[];\n  versionTag: VersionTag;\n  pluginRepo: string;\n  pluginAddress: string;\n};\n\nexport type ApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpers: string[];\n};\nexport type DecodedApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpersHash: string;\n};\n\nexport type VersionTag = {\n  build: number;\n  release: number;\n};\n\nexport enum PermissionOperationType {\n  GRANT = 0,\n  REVOKE = 1,\n  GRANT_WITH_CONDITION = 2,\n}\n\nexport type MultiTargetPermission = {\n  operation: PermissionOperationType;\n  where: string;\n  who: string;\n  condition: string;\n  permissionId: Uint8Array;\n};\n", "export const SupportedNetworksArray = [\n  \"mainnet\",\n  \"goerli\",\n  \"matic\",\n  \"maticmum\",\n] as const;\nexport type SupportedNetworks = typeof SupportedNetworksArray[number];\nexport type NetworkDeployment = {\n  daoFactory: string;\n  pluginSetupProcessor: string;\n  multisigRepo: string;\n  adminRepo: string;\n  addresslistVotingRepo: string;\n  tokenVotingRepo: string;\n  multisigSetup: string;\n  adminSetup: string;\n  addresslistVotingSetup: string;\n  tokenVotingSetup: string;\n  ensRegistry?: string;\n};\n\n// This file contains common types, interfaces, and enumerations\n\nexport enum DaoRole {\n  UPGRADE_ROLE = \"UPGRADE_ROLE\",\n  DAO_CONFIG_ROLE = \"DAO_CONFIG_ROLE\",\n  EXEC_ROLE = \"EXEC_ROLE\",\n  WITHDRAW_ROLE = \"WITHDRAW_ROLE\",\n  SET_SIGNATURE_VALIDATOR_ROLE = \"SET_SIGNATURE_VALIDATOR_ROLE\",\n}\n\n/**\n * Contains the payload passed to the global DAO factory so that\n * plugins can be initialized\n */\nexport interface IPluginInstallItem {\n  id: string; // ENS domain or address of the plugin's Repo\n  data: Uint8Array;\n}\n/**\n * Contains the payload passed to governance contracts, serializing\n * the actions to do upon approval\n */\nexport type DaoAction = {\n  to: string;\n  value: bigint;\n  data: Uint8Array;\n};\n\n/**\n * Contains the general human readable information about the DAO\n */\nexport type DaoConfig = {\n  name: string;\n  metadataUri: string;\n};\n\nexport type GasFeeEstimation = {\n  average: bigint;\n  max: bigint;\n};\n\nexport interface IPagination {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n}\n\nexport type Pagination = {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n};\n\nexport enum SortDirection {\n  ASC = \"asc\",\n  DESC = \"desc\",\n}\n\nexport interface IInterfaceParams {\n  id: string;\n  functionName: string;\n  hash: string;\n}\n", "import { Context } from \"../../client-common/context\";\nimport { Wallet } from \"@ethersproject/wallet\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { GasFeeEstimation } from \"../../client-common/interfaces/common\";\nimport { IClientWeb3Core } from \"../interfaces/core\";\nimport {\n  NoDaoFactory,\n  NoPluginRepoRegistry,\n  NoDaoRegistry,\n} from \"@aragon/sdk-common\";\n\nconst daoFactoryAddressMap = new Map<Web3Module, string>();\nconst daoRegistryAddressMap = new Map<Web3Module, string>();\nconst pluginRepoRegistryAddressMap = new Map<Web3Module, string>();\nconst gasFeeEstimationFactorMap = new Map<Web3Module, number>();\nconst providersMap = new Map<Web3Module, JsonRpcProvider[]>();\nconst providerIdxMap = new Map<Web3Module, number>();\nconst signerMap = new Map<Web3Module, Signer>();\n\nexport class Web3Module implements IClientWeb3Core {\n  private static readonly PRECISION_FACTOR_BASE = 1000;\n\n  constructor(context: Context) {\n    providerIdxMap.set(this, -1);\n    // Storing client data in the private module's scope to prevent external mutation\n    if (context.web3Providers) {\n      providersMap.set(this, context.web3Providers);\n      providerIdxMap.set(this, 0);\n    }\n\n    if (context.signer) {\n      this.useSigner(context.signer);\n    }\n\n    if (context.daoFactoryAddress) {\n      daoFactoryAddressMap.set(this, context.daoFactoryAddress);\n    }\n\n    if (context.daoRegistryAddress) {\n      daoRegistryAddressMap.set(this, context.daoRegistryAddress);\n    }\n\n    if (context.pluginRepoRegistryAddress) {\n      pluginRepoRegistryAddressMap.set(this, context.pluginRepoRegistryAddress);\n    }\n\n    if (context.gasFeeEstimationFactor) {\n      gasFeeEstimationFactorMap.set(this, context.gasFeeEstimationFactor);\n    }\n    Object.freeze(Web3Module.prototype);\n    Object.freeze(this);\n  }\n\n  private get daoFactoryAddress(): string {\n    return daoFactoryAddressMap.get(this) || \"\";\n  }\n  private get daoRegistryAddress(): string {\n    return daoRegistryAddressMap.get(this) || \"\";\n  }\n  private get pluginRepoRegistryAddress(): string {\n    return pluginRepoRegistryAddressMap.get(this) || \"\";\n  }\n  private get gasFeeEstimationFactor(): number {\n    return gasFeeEstimationFactorMap.get(this) || 1;\n  }\n  private get providers(): JsonRpcProvider[] {\n    return providersMap.get(this) || [];\n  }\n  private get providerIdx(): number {\n    return providerIdxMap.get(this)!;\n  }\n  private get signer(): Signer | undefined {\n    return signerMap.get(this);\n  }\n\n  /** Replaces the current signer by the given one */\n  public useSigner(signer: Signer): void {\n    if (!signer) {\n      throw new Error(\"Empty wallet or signer\");\n    }\n    signerMap.set(this, signer);\n  }\n\n  /** Starts using the next available Web3 provider */\n  public shiftProvider(): void {\n    if (!this.providers.length) {\n      throw new Error(\"No endpoints\");\n    } else if (this.providers.length <= 1) {\n      throw new Error(\"No other endpoints\");\n    }\n    providerIdxMap.set(this, (this.providerIdx + 1) % this.providers.length);\n  }\n\n  /** Retrieves the current signer */\n  public getSigner(): Signer | null {\n    return this.signer || null;\n  }\n\n  /** Returns a signer connected to the current network provider */\n  public getConnectedSigner(): Signer {\n    let signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\"No signer\");\n    } else if (!signer.provider && !this.getProvider()) {\n      throw new Error(\"No provider\");\n    } else if (signer.provider) {\n      return signer;\n    }\n\n    const provider = this.getProvider();\n    if (!provider) throw new Error(\"No provider\");\n\n    signer = signer.connect(provider);\n    return signer;\n  }\n\n  /** Returns the currently active network provider */\n  public getProvider(): JsonRpcProvider | null {\n    return this.providers[this.providerIdx] || null;\n  }\n\n  /** Returns whether the current provider is functional or not */\n  public isUp(): Promise<boolean> {\n    const provider = this.getProvider();\n    if (!provider) return Promise.reject(new Error(\"No provider\"));\n\n    return provider\n      .getNetwork()\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.providers.length) {\n      return Promise.reject(new Error(\"No provider\"));\n    }\n\n    for (let i = 0; i < this.providers.length; i++) {\n      if (await this.isUp()) return;\n\n      this.shiftProvider();\n    }\n    throw new Error(\"No providers available\");\n  }\n\n  /**\n   * Returns a contract instance at the given address\n   *\n   * @param address Contract instance address\n   * @param abi The Application Binary Inteface of the contract\n   * @return A contract instance attached to the given address\n   */\n  public attachContract<T>(\n    address: string,\n    abi: ContractInterface\n  ): Contract & T {\n    if (!address) throw new Error(\"Invalid contract address\");\n    else if (!abi) throw new Error(\"Invalid contract ABI\");\n\n    const signer = this.getSigner();\n    if (!signer && !this.getProvider()) {\n      throw new Error(\"No signer\");\n    }\n\n    const provider = this.getProvider();\n    if (!provider) throw new Error(\"No provider\");\n\n    const contract = new Contract(address, abi, provider);\n\n    if (!signer) {\n      return contract as Contract & T;\n    } else if (signer instanceof Wallet) {\n      return contract.connect(signer.connect(provider)) as Contract & T;\n    }\n\n    return contract.connect(signer) as Contract & T;\n  }\n\n  /** Calculates the expected maximum gas fee */\n  public getMaxFeePerGas(): Promise<bigint> {\n    return this.getConnectedSigner()\n      .getFeeData()\n      .then(feeData => {\n        if (!feeData.maxFeePerGas) {\n          return Promise.reject(new Error(\"Cannot estimate gas\"));\n        }\n        return feeData.maxFeePerGas.toBigInt();\n      });\n  }\n\n  public getApproximateGasFee(estimatedFee: bigint): Promise<GasFeeEstimation> {\n    return this.getMaxFeePerGas().then(maxFeePerGas => {\n      const max = estimatedFee * maxFeePerGas;\n\n      const factor =\n        this.gasFeeEstimationFactor * Web3Module.PRECISION_FACTOR_BASE;\n\n      const average =\n        (max * BigInt(Math.trunc(factor))) /\n        BigInt(Web3Module.PRECISION_FACTOR_BASE);\n\n      return { average, max };\n    });\n  }\n\n  /** Returns the current DAO factory address */\n  public getDaoFactoryAddress(): string {\n    if (!this.daoFactoryAddress) {\n      throw new NoDaoFactory();\n    }\n    return this.daoFactoryAddress;\n  }\n\n  public getPluginRepoRegistryAddress(): string {\n    if (!this.pluginRepoRegistryAddress) {\n      throw new NoPluginRepoRegistry();\n    }\n    return this.pluginRepoRegistryAddress;\n  }\n\n  public getDaoRegistry(): string {\n    if (!this.daoRegistryAddress) {\n      throw new NoDaoRegistry();\n    }\n    return this.daoRegistryAddress;\n  }\n}\n", "import { Context } from \"../../client-common/context\";\nimport { IClientIpfsCore } from \"../interfaces/core\";\nimport { Client as IpfsClient, PinResponse } from \"@aragon/sdk-ipfs\";\n\nconst clientsMap = new Map<IPFSModule, IpfsClient[]>();\nconst clientsIdxMap = new Map<IPFSModule, number>();\n\nexport class IPFSModule implements IClientIpfsCore {\n  constructor(context: Context) {\n    clientsIdxMap.set(this, -1);\n    // Storing client data in the private module's scope to prevent external mutation\n    if (context.ipfs?.length) {\n      clientsIdxMap.set(\n        this,\n        Math.floor(Math.random() * context.ipfs.length),\n      );\n      clientsMap.set(this, context.ipfs);\n    }\n    Object.freeze(IPFSModule.prototype);\n    Object.freeze(this);\n  }\n\n  private get clients(): IpfsClient[] {\n    return clientsMap.get(this) || [];\n  }\n  private get clientsIdx(): number {\n    return clientsIdxMap.get(this)!;\n  }\n\n  public getClient(): IpfsClient {\n    if (!this.clients[this.clientsIdx]) {\n      throw new Error(\"No IPFS endpoints available\");\n    }\n    return this.clients[this.clientsIdx];\n  }\n\n  /**\n   * Starts using the next available IPFS endpoint\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new Error(\"No IPFS endpoints available\");\n    } else if (this.clients?.length < 2) {\n      throw new Error(\"No other endpoints\");\n    }\n    clientsIdxMap.set(this, (this.clientsIdx + 1) % this.clients.length);\n  }\n\n  /** Returns `true` if the current client is on line */\n  public isUp(): Promise<boolean> {\n    if (!this.clients?.length) return Promise.resolve(false);\n    return this.getClient().nodeInfo().then(() => true).catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      return Promise.reject(new Error(\"IPFS client is not initialized\"));\n    }\n\n    for (let i = 0; i < this.clients?.length; i++) {\n      if (await this.isUp()) return;\n\n      this.shiftClient();\n    }\n    throw new Error(\"No IPFS nodes available\");\n  }\n\n  public getOnlineClient(): Promise<IpfsClient> {\n    return this.ensureOnline().then(() => this.getClient());\n  }\n\n  // IPFS METHODS\n\n  public async add(input: string | Uint8Array): Promise<string> {\n    return this.getOnlineClient().then(\n      (client) => client.add(input).then((res) => res.hash),\n    ).catch((e) => {\n      throw new Error(`Could not upload data: ${e?.message || \"\"}`);\n    });\n  }\n\n  public async pin(input: string): Promise<PinResponse> {\n    return this.getOnlineClient().then(\n      (client) => client.pin(input),\n    ).catch((e) => {\n      throw new Error(`Could not pin data: ${e?.message || \"\"}`);\n    });\n  }\n\n  public fetchBytes(cid: string): Promise<Uint8Array | undefined> {\n    return this.getOnlineClient().then((client) => client.cat(cid));\n  }\n\n  public fetchString(cid: string): Promise<string> {\n    return this.fetchBytes(cid)\n      .then((bytes) => new TextDecoder().decode(bytes))\n      .catch((e) => {\n        throw new Error(`Could not upload data: ${e?.message || \"\"}`);\n      });\n  }\n}\n", "import { gql } from \"graphql-request\";\n\nexport const QueryStatus = gql`\n{\n  _meta{\n    deployment\n  }\n}\n`;\n", "import {\n  ClientNotInitializedError,\n  GraphQLError,\n  NoNodesAvailableError,\n  runAndRetry,\n} from \"@aragon/sdk-common\";\nimport { ClientError, GraphQLClient } from \"graphql-request\";\nimport { Context } from \"../../client-common/context\";\nimport { QueryStatus } from \"../graphql-queries\";\nimport { IClientGraphQLCore } from \"../interfaces/core\";\n\nexport class GraphqlModule implements IClientGraphQLCore {\n  private clientIdx: number = -1;\n  private clients: GraphQLClient[] = [];\n  constructor(context: Context) {\n    if (context.graphql?.length) {\n      this.clients = context.graphql;\n      this.clientIdx = Math.floor(Math.random() * context.graphql.length);\n    }\n  }\n  /**\n   * Get the current graphql client\n   * @returns {GraphQLClient}\n   */\n  public getClient(): GraphQLClient {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available Graphql endpoint\n   * @returns {void}\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    } else if (this.clients.length < 2) {\n      throw new NoNodesAvailableError(\"graphql\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /**\n   * Checks if the current node is online\n   * @returns {Promise<boolean>}\n   */\n  public isUp(): Promise<boolean> {\n    return this.getClient().request(QueryStatus).then((res) => {\n      return !!res._meta?.deployment;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n  /**\n   * Ensures that the graphql is online.\n   * If the current node is not online\n   * it will shift to the next one and\n   * repeat until it finds an online\n   * node. In the case that there are no\n   * nodes or none of them is available\n   * it will throw an error\n   * @returns {Promise<void>}\n   */\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    for (let i = 0; i < this.clients.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"graphql\");\n  }\n\n  public request({ query, params, name }: {\n    query: string;\n    params: { [key: string]: any };\n    name?: string;\n  }) {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: () => this.getClient().request(query, params),\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          // If the error code is not a 5XX means the\n          // error is not generated by the server\n          if (e.response.status < 500) {\n            throw new GraphQLError(name || \"\");\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n}\n", "import {\n  IClientCore,\n  IClientGraphQLCore,\n  IClientIpfsCore,\n  IClientWeb3Core,\n} from \"./interfaces/core\";\nimport { Context } from \"./context\";\nimport { Web3Module } from \"./modules/web3\";\nimport { IPFSModule } from \"./modules/ipfs\";\nimport { GraphqlModule } from \"./modules/graphql\";\n\nconst web3Map = new Map<ClientCore, IClientWeb3Core>();\nconst ipfsMap = new Map<ClientCore, IClientIpfsCore>();\nconst graphqlMap = new Map<ClientCore, IClientGraphQLCore>();\n/**\n * Provides the low level foundation so that subclasses have ready-made access to Web3, IPFS and GraphQL primitives\n */\nexport abstract class ClientCore implements IClientCore {\n  constructor(context: Context) {\n    web3Map.set(this, new Web3Module(context));\n    ipfsMap.set(this, new IPFSModule(context));\n    graphqlMap.set(this, new GraphqlModule(context));\n    Object.freeze(ClientCore.prototype);\n  }\n\n  get web3(): IClientWeb3Core {\n    return web3Map.get(this)!;\n  }\n  get ipfs(): IClientIpfsCore {\n    return ipfsMap.get(this)!;\n  }\n  get graphql(): IClientGraphQLCore {\n    return graphqlMap.get(this)!;\n  }\n}\n", "import { ContextParams, ContextState } from \"./interfaces/context\";\nimport { JsonRpcProvider, Networkish } from \"@ethersproject/providers\";\nimport { UnsupportedProtocolError } from \"@aragon/sdk-common\";\nimport { activeContractsList } from \"@aragon/osx-ethers\";\nimport { Client as IpfsClient } from \"@aragon/sdk-ipfs\";\nimport { GraphQLClient } from \"graphql-request\";\n// import { GraphQLClient } from \"graphql-request\";\n\nexport { ContextParams } from \"./interfaces/context\";\n\nconst DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;\nconst supportedProtocols = [\"https:\"];\nif (typeof process !== \"undefined\" && process.env?.TESTING) {\n  supportedProtocols.push(\"http:\");\n}\n\n// State\nconst defaultState: ContextState = {\n  network: \"mainnet\",\n  web3Providers: [],\n  gasFeeEstimationFactor: DEFAULT_GAS_FEE_ESTIMATION_FACTOR,\n};\n\nexport class Context {\n  protected state: ContextState = Object.assign({}, defaultState);\n  // INTERNAL CONTEXT STATE\n\n  /**\n   * @param {Object} params\n   *\n   * @constructor\n   */\n  constructor(params: Partial<ContextParams>) {\n    this.set(params);\n  }\n\n  /**\n   * Does set and parse the given context configuration object\n   *\n   * @method setFullContext\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  setFull(contextParams: ContextParams): void {\n    if (!contextParams.network) {\n      throw new Error(\"Missing network\");\n    } else if (!contextParams.daoFactoryAddress) {\n      throw new Error(\"Missing DAO factory address\");\n    } else if (!contextParams.signer) {\n      throw new Error(\"Please pass the required signer\");\n    } else if (!contextParams.web3Providers) {\n      throw new Error(\"No web3 endpoints defined\");\n    } else if (!contextParams.gasFeeEstimationFactor) {\n      throw new Error(\"No gas fee reducer defined\");\n    } else if (!contextParams.ipfsNodes?.length) {\n      throw new Error(\"No IPFS nodes defined\");\n    } else if (!contextParams.graphqlNodes?.length) {\n      throw new Error(\"No graphql URL defined\");\n    }\n\n    this.state = {\n      network: contextParams.network,\n      signer: contextParams.signer,\n      daoFactoryAddress: contextParams.daoFactoryAddress,\n      daoRegistryAddress: contextParams.daoRegistryAddress,\n      pluginRepoRegistryAddress: contextParams.pluginRepoRegistryAddress,\n      web3Providers: Context.resolveWeb3Providers(\n        contextParams.web3Providers,\n        contextParams.network\n      ),\n      gasFeeEstimationFactor: Context.resolveGasFeeEstimationFactor(\n        contextParams.gasFeeEstimationFactor\n      ),\n      ipfs: Context.resolveIpfs(contextParams.ipfsNodes),\n      graphql: Context.resolveGraphql(contextParams.graphqlNodes),\n    };\n  }\n\n  set(contextParams: Partial<ContextParams>) {\n    if (contextParams.network) {\n      this.state.network = contextParams.network;\n    }\n    if (contextParams.daoFactoryAddress) {\n      this.state.daoFactoryAddress = contextParams.daoFactoryAddress;\n    } else if (this.state.network.toString() in activeContractsList) {\n      this.state.daoFactoryAddress =\n        activeContractsList[\n          this.state.network.toString() as keyof typeof activeContractsList\n        ].DAOFactory;\n    }\n    if (contextParams.signer) {\n      this.state.signer = contextParams.signer;\n    }\n    if (contextParams.web3Providers) {\n      this.state.web3Providers = Context.resolveWeb3Providers(\n        contextParams.web3Providers,\n        this.state.network\n      );\n    }\n    if (contextParams.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = Context.resolveGasFeeEstimationFactor(\n        contextParams.gasFeeEstimationFactor\n      );\n    }\n\n    if (contextParams.ipfsNodes?.length) {\n      this.state.ipfs = Context.resolveIpfs(contextParams.ipfsNodes);\n    }\n    if (contextParams.graphqlNodes?.length) {\n      this.state.graphql = Context.resolveGraphql(contextParams.graphqlNodes);\n    }\n  }\n  // GETTERS\n\n  /**\n   * Getter for the network\n   *\n   * @var network\n   *\n   * @returns {Networkish}\n   *\n   * @public\n   */\n  get network() {\n    return this.state.network || defaultState.network;\n  }\n\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get signer() {\n    return this.state.signer || defaultState.signer;\n  }\n\n  /**\n   * Getter for the web3 providers\n   *\n   * @var web3Providers\n   *\n   * @returns {JsonRpcProvider[]}\n   *\n   * @public\n   */\n  get web3Providers() {\n    return this.state.web3Providers || defaultState.web3Providers;\n  }\n\n  /**\n   * Getter for daoFactoryAddress property\n   *\n   * @var daoFactoryAddress\n   *\n   * @returns {string}\n   *\n   * @public\n   */\n  get daoFactoryAddress(): string | undefined {\n    return this.state.daoFactoryAddress;\n  }\n\n  /**\n   * Getter for daoFactoryAddress property\n   *\n   * @var daoFactoryAddress\n   *\n   * @returns {string}\n   *\n   * @public\n   */\n  get daoRegistryAddress(): string | undefined {\n    return this.state.daoRegistryAddress;\n  }\n\n  /**\n   * Getter for daoFactoryAddress property\n   *\n   * @var daoFactoryAddress\n   *\n   * @returns {string}\n   *\n   * @public\n   */\n  get pluginRepoRegistryAddress(): string | undefined {\n    return this.state.pluginRepoRegistryAddress;\n  }\n\n  /**\n   * Getter for the gas fee reducer used in estimations\n   *\n   * @var gasFeeEstimationFactor\n   *\n   * @returns {number}\n   *\n   * @public\n   */\n  get gasFeeEstimationFactor(): number {\n    return (\n      this.state.gasFeeEstimationFactor || defaultState.gasFeeEstimationFactor\n    );\n  }\n\n  /**\n   * Getter for the IPFS http client\n   *\n   * @var ipfs\n   *\n   * @returns {IpfsClient[] | undefined}\n   *\n   * @public\n   */\n  get ipfs(): IpfsClient[] | undefined {\n    return this.state.ipfs || defaultState.ipfs;\n  }\n\n  /**\n   * Getter for the GraphQL client\n   *\n   * @var graphql\n   *\n   * @returns {GraphQLClient[] | undefined}\n   *\n   * @public\n   */\n  get graphql(): GraphQLClient[] | undefined {\n    return this.state.graphql || defaultState.graphql;\n  }\n\n  // DEFAULT CONTEXT STATE\n  static setDefault(params: Partial<ContextParams>) {\n    if (params.daoFactoryAddress) {\n      defaultState.daoFactoryAddress = params.daoFactoryAddress;\n    }\n    if (params.signer) {\n      defaultState.signer = params.signer;\n    }\n  }\n  static getDefault() {\n    return defaultState;\n  }\n\n  // INTERNAL HELPERS\n\n  private static resolveWeb3Providers(\n    endpoints: string | JsonRpcProvider | (string | JsonRpcProvider)[],\n    network: Networkish\n  ): JsonRpcProvider[] {\n    if (Array.isArray(endpoints)) {\n      return endpoints.map(item => {\n        if (typeof item === \"string\") {\n          const url = new URL(item);\n          if (!supportedProtocols.includes(url.protocol)) {\n            throw new UnsupportedProtocolError(url.protocol);\n          }\n          return new JsonRpcProvider(url.href, network);\n        }\n        return item;\n      });\n    } else if (typeof endpoints === \"string\") {\n      const url = new URL(endpoints);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      return [new JsonRpcProvider(url.href, network)];\n    } else {\n      return [endpoints];\n    }\n  }\n\n  private static resolveIpfs(\n    configs: {\n      url: string;\n      headers?: Record<string, string>;\n    }[]\n  ): IpfsClient[] {\n    let clients: IpfsClient[] = [];\n    configs.forEach(config => {\n      const url = new URL(config.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new IpfsClient(url, config.headers));\n    });\n    return clients;\n  }\n\n  private static resolveGraphql(endpoints: { url: string }[]): GraphQLClient[] {\n    let clients: GraphQLClient[] = [];\n    endpoints.forEach(endpoint => {\n      const url = new URL(endpoint.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new GraphQLClient(url.href));\n    });\n    return clients;\n  }\n\n  private static resolveGasFeeEstimationFactor(\n    gasFeeEstimationFactor: number\n  ): number {\n    if (typeof gasFeeEstimationFactor === \"undefined\") return 1;\n    else if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {\n      throw new Error(\n        \"Gas estimation factor value should be a number between 0 and 1\"\n      );\n    }\n    return gasFeeEstimationFactor;\n  }\n}\n", "import { Context } from \"./context\";\nimport {\n  ContextPluginParams,\n  ContextPluginState,\n  ContextState,\n} from \"./interfaces/context\";\n// State\nconst defaultState: ContextPluginState = {};\n\nexport class ContextPlugin extends Context {\n  protected state: ContextState & ContextPluginState = Object.assign(\n    {},\n    Context.getDefault(),\n    defaultState,\n  );\n\n  // INTERNAL CONTEXT STATE\n\n  /**\n   * @param {ContextPluginParams} params The parameters for the client context\n   *\n   * @constructor\n   */\n  constructor(params: Partial<ContextPluginParams>) {\n    super(params);\n\n    this.set(params);\n  }\n\n  /**\n   * Generate a plugin context from a client clontext and a plugin address\n   *\n   * @param {Context} ctx\n   * @param {string} pluginAddress\n   * @return {*}  {ContextPlugin}\n   * @memberof ContextPlugin\n   */\n  static fromContext(ctx: Context): ContextPlugin {\n    const ctxPlugin = new ContextPlugin({});\n    Object.assign(ctxPlugin, ctx);\n    return ctxPlugin;\n  }\n\n  /**\n   * Does set and parse the given context configuration object\n   *\n   * @method setFull\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  setFull(contextParams: ContextPluginParams): void {\n    super.setFull(contextParams);\n  }\n\n  set(contextParams: Partial<ContextPluginParams>) {\n    super.set(contextParams);\n  }\n\n  // DEFAULT CONTEXT STATE\n  static setDefault(params: Partial<ContextPluginParams>) {\n    super.setDefault(params);\n  }\n  static getDefault() {\n    return Object.assign(super.getDefault(), defaultState);\n  }\n}\n", "import { IDAO } from \"@aragon/osx-ethers\";\nimport { ContractReceipt } from \"@ethersproject/contracts\";\nimport { VoteValues, VotingMode } from \"../client-common/interfaces/plugin\";\nimport {\n  CreateMajorityVotingProposalParams,\n  IComputeStatusProposal,\n  ProposalStatus,\n} from \"./interfaces/plugin\";\n\nimport { Interface } from \"@ethersproject/abi\";\nimport { id } from \"@ethersproject/hash\";\nimport { Log } from \"@ethersproject/providers\";\nimport { InvalidVotingModeError } from \"@aragon/sdk-common\";\n\nexport function unwrapProposalParams(\n  params: CreateMajorityVotingProposalParams,\n): [string, IDAO.ActionStruct[], number, number, boolean, number] {\n  return [\n    params.metadataUri,\n    params.actions ?? [],\n    // TODO: Verify => seconds?\n    params.startDate ? Math.floor(params.startDate.getTime() / 1000) : 0,\n    // TODO: Verify => seconds?\n    params.endDate ? Math.floor(params.endDate.getTime() / 1000) : 0,\n    params.executeOnPass ?? false,\n    params.creatorVote ?? VoteValues.ABSTAIN,\n  ];\n}\n\nexport function computeProposalStatus(\n  proposal: IComputeStatusProposal,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  } else if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  } else if (endDate >= now) {\n    return ProposalStatus.ACTIVE;\n  } else if (\n    proposal.executable\n  ) {\n    return ProposalStatus.SUCCEEDED;\n  } else {\n    return ProposalStatus.DEFEATED;\n  }\n}\n\nexport function computeProposalStatusFilter(\n  status: ProposalStatus,\n): Object {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = { executable: true, endDate_lt: now };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = { executable: false, endDate_lt: now, executed: false };\n      break;\n    default:\n      throw new Error(\"invalid proposal status\");\n  }\n  return where;\n}\n\nexport function findLog(\n  receipt: ContractReceipt,\n  iface: Interface,\n  eventName: string,\n): Log | undefined {\n  return receipt.logs.find(\n    (log) =>\n      log.topics[0] ===\n        id(\n          iface.getEvent(eventName).format(\n            \"sighash\",\n          ),\n        ),\n  );\n}\n\nexport function votingModeToContracts(votingMode: VotingMode): number {\n  switch (votingMode) {\n    case VotingMode.STANDARD:\n      return 0;\n    case VotingMode.EARLY_EXECUTION:\n      return 1;\n    case VotingMode.VOTE_REPLACEMENT:\n      return 2;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\nexport function votingModeFromContracts(votingMode: number): VotingMode {\n  switch (votingMode) {\n    case 0:\n      return VotingMode.STANDARD;\n    case 1:\n      return VotingMode.EARLY_EXECUTION;\n    case 2:\n      return VotingMode.VOTE_REPLACEMENT;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\n\n", "import {\n  MajorityVotingBase,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nimport { bytesToHex, hexToBytes } from \"@aragon/sdk-common\";\nimport { VotingMode, VotingSettings } from \"./interfaces/plugin\";\nimport { FunctionFragment, Interface, Result } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { votingModeFromContracts, votingModeToContracts } from \"./utils\";\nimport { encodeRatio, decodeRatio } from \"@aragon/sdk-common\";\n\nexport function decodeUpdatePluginSettingsAction(\n  data: Uint8Array,\n): VotingSettings {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedfunction = votingInterface.getFunction(\"updateVotingSettings\");\n  const result = votingInterface.decodeFunctionData(\n    expectedfunction,\n    hexBytes,\n  );\n  return pluginSettingsFromContract(result);\n}\n\nexport function encodeUpdateVotingSettingsAction(\n  params: VotingSettings,\n): Uint8Array {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const args = votingSettingsToContract(params);\n  // get hex bytes\n  const hexBytes = votingInterface.encodeFunctionData(\n    \"updateVotingSettings\",\n    [args],\n  );\n  // Strip 0x => encode in Uint8Array\n  return hexToBytes(hexBytes);\n}\n\nfunction pluginSettingsFromContract(result: Result): VotingSettings {\n  return {\n    votingMode: votingModeFromContracts(result[0][0]),\n    supportThreshold: decodeRatio(result[0][1], 6),\n    minParticipation: decodeRatio(result[0][2], 6),\n    minDuration: result[0][3].toNumber(),\n    minProposerVotingPower: BigInt(result[0][4]),\n  };\n}\n\nexport function votingSettingsToContract(\n  params: VotingSettings,\n): MajorityVotingBase.VotingSettingsStruct {\n  return {\n    votingMode: BigNumber.from(\n      votingModeToContracts(params.votingMode || VotingMode.STANDARD),\n    ),\n    supportThreshold: encodeRatio(params.supportThreshold, 6),\n    minParticipation: encodeRatio(params.minParticipation, 6),\n    minDuration: BigNumber.from(params.minDuration),\n    minProposerVotingPower: BigNumber.from(params.minProposerVotingPower || 0),\n  };\n}\n\nexport function getFunctionFragment(\n  data: Uint8Array,\n  availableFunctions: string[],\n): FunctionFragment {\n  const hexBytes = bytesToHex(data);\n  const iface = new Interface(availableFunctions);\n  return iface.getFunction(hexBytes.substring(0, 10));\n}\n", "import { activeContractsList } from \"@aragon/osx-ethers\";\nimport { NetworkDeployment, SupportedNetworks } from \"./interfaces/common\";\nimport { ProposalMetadata } from \"./interfaces/plugin\";\n\nexport const UNSUPPORTED_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(unsupported metadata link)\",\n  summary: \"(the link to the metadata is not supported)\",\n  description: \"(the link to the metadata is not supported)\",\n  resources: [],\n};\nexport const EMPTY_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(the proposal has no metadata)\",\n  summary: \"(the current proposal does not have any content defined)\",\n  description: \"(the current proposal does not have any content defined)\",\n  resources: [],\n};\nexport const UNAVAILABLE_PROPOSAL_METADATA: ProposalMetadata = {\n  title: \"(unavailable metadata)\",\n  summary: \"(the proposal metadata is not available)\",\n  description: \"(the proposal metadata is not available)\",\n  resources: [],\n};\n\nexport const LIVE_CONTRACTS: { [K in SupportedNetworks]: NetworkDeployment } = {\n  mainnet: {\n    daoFactory: activeContractsList.mainnet.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mainnet.PluginRepoFactory,\n    multisigRepo: activeContractsList.mainnet[\"multisig-repo\"],\n    adminRepo: activeContractsList.mainnet[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mainnet[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mainnet[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mainnet.MultisigSetup,\n    adminSetup: activeContractsList.mainnet.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mainnet.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mainnet.TokenVotingSetup,\n  },\n  goerli: {\n    daoFactory: activeContractsList.goerli.DAOFactory,\n    pluginSetupProcessor: activeContractsList.goerli.PluginSetupProcessor,\n    multisigRepo: activeContractsList.goerli[\"multisig-repo\"],\n    adminRepo: activeContractsList.goerli[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.goerli[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.goerli[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.goerli.MultisigSetup,\n    adminSetup: activeContractsList.goerli.AdminSetup,\n    addresslistVotingSetup: activeContractsList.goerli.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.goerli.TokenVotingSetup,\n  },\n  maticmum: {\n    daoFactory: activeContractsList.mumbai.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mumbai.PluginSetupProcessor,\n    multisigRepo: activeContractsList.mumbai[\"multisig-repo\"],\n    adminRepo: activeContractsList.mumbai[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mumbai[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mumbai[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mumbai.MultisigSetup,\n    adminSetup: activeContractsList.mumbai.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mumbai.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mumbai.TokenVotingSetup,\n    ensRegistry: activeContractsList.mumbai.ENSRegistry,\n  },\n  matic: {\n    daoFactory: activeContractsList.polygon.DAOFactory,\n    pluginSetupProcessor: activeContractsList.polygon.PluginSetupProcessor,\n    multisigRepo: activeContractsList.polygon[\"multisig-repo\"],\n    adminRepo: activeContractsList.polygon[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.polygon[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.polygon[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.polygon.MultisigSetup,\n    adminSetup: activeContractsList.polygon.AdminSetup,\n    addresslistVotingSetup: activeContractsList.polygon.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.polygon.TokenVotingSetup,\n    ensRegistry: activeContractsList.polygon.ENSRegistry,\n  },\n};\n", "import {\n  AssetBalance,\n  ContractPermissionParams,\n  ContractPermissionWithConditionParams,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DepositErc20Params,\n  DepositEthParams,\n  GrantPermissionWithConditionDecodedParams,\n  GrantPermissionWithConditionParams,\n  IGrantPermissionDecodedParams,\n  IGrantPermissionParams,\n  InstalledPluginListItem,\n  IRevokePermissionDecodedParams,\n  IRevokePermissionParams,\n  PermissionIds,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphPluginListItem,\n  SubgraphPluginTypeMap,\n  SubgraphTransferListItem,\n  SubgraphTransferType,\n  TokenType,\n  Transfer,\n  TransferType,\n  WithdrawParams,\n} from \"../interfaces\";\nimport { defaultAbiCoder, Result } from \"@ethersproject/abi\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { PluginSetupProcessor } from \"@aragon/osx-ethers\";\nimport {\n  ApplyInstallationParams,\n  DecodedApplyInstallationParams,\n} from \"../client-common\";\nimport { hexToBytes } from \"@aragon/sdk-common\";\n\nexport function unwrapDepositParams(\n  params: DepositEthParams | DepositErc20Params,\n): [string, bigint, string, string] {\n  return [\n    params.daoAddressOrEns,\n    params.amount,\n    (params as any)?.tokenAddress ?? AddressZero,\n    \"\",\n  ];\n}\n\nexport function toDaoDetails(\n  dao: SubgraphDao,\n  metadata: DaoMetadata,\n): DaoDetails {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n      links: metadata.links,\n    },\n    creationDate: new Date(parseInt(dao.createdAt) * 1000),\n    // TODO update when new subgraph schema is deployed\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => {\n        return {\n          instanceAddress: plugin.id,\n          // TODO\n          // temporary ens addreses for the plugins\n          id: SubgraphPluginTypeMap.get(\n            plugin.__typename,\n          ) as string,\n          // TODO\n          // update when subgraph returns version\n          version: \"0.0.1\",\n        };\n      },\n    ),\n  };\n}\n\nexport function toDaoListItem(\n  dao: SubgraphDaoListItem,\n  metadata: DaoMetadata,\n): DaoListItem {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n    },\n    // TODO update when new subgraph schema is deployed\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => {\n        return {\n          instanceAddress: plugin.id,\n          // TODO\n          // temporary ens addreses for the plugins\n          id: SubgraphPluginTypeMap.get(\n            plugin.__typename,\n          ) as string,\n          // TODO\n          // update when subgraph returns version\n          version: \"0.0.1\",\n        };\n      },\n    ),\n  };\n}\n\nexport function toAssetBalance(balance: SubgraphBalance): AssetBalance {\n  const updateDate = new Date(parseInt(balance.lastUpdated) * 1000);\n  if (balance.__typename === \"NativeBalance\") {\n    return {\n      type: TokenType.NATIVE,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  } else if (balance.__typename === \"ERC721Balance\") {\n    return {\n      type: TokenType.ERC721,\n      name: balance.token.symbol,\n      symbol: balance.token.symbol,\n      updateDate,\n      address: balance.token.id,\n    };\n  } else {\n    return {\n      type: TokenType.ERC20,\n      address: balance.token.id,\n      name: balance.token.name,\n      symbol: balance.token.symbol,\n      decimals: balance.token.decimals,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  }\n}\n\nexport function toTokenTransfer(transfer: SubgraphTransferListItem): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.__typename === \"NativeTransfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.NATIVE,\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.NATIVE,\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      proposalId: transfer.proposal?.id || \"\",\n      to: transfer.to,\n      from: transfer.from,\n    };\n  } else if (transfer.__typename === \"ERC721Transfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC721,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n        },\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC721,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n      },\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  } else {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC20,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n          decimals: transfer.token.decimals,\n        },\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC20,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n        decimals: transfer.token.decimals,\n      },\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  }\n}\n\nexport function applyInstallatonParamsToContract(\n  params: ApplyInstallationParams,\n): PluginSetupProcessor.ApplyInstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    helpersHash: keccak256(\n      defaultAbiCoder.encode([\"address[]\"], [params.helpers]),\n    ),\n    permissions: params.permissions,\n  };\n}\nexport function applyInstallatonParamsFromContract(\n  result: Result,\n): DecodedApplyInstallationParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions.map((permission: any) => {\n      return {\n        ...permission,\n        permissionId: hexToBytes(permission.permissionId),\n      };\n    }),\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n  };\n}\n\nexport function permissionParamsToContract(\n  params: IGrantPermissionParams | IRevokePermissionParams,\n): ContractPermissionParams {\n  return [params.where, params.who, keccak256(toUtf8Bytes(params.permission))];\n}\nexport function permissionWithConditionParamsToContract(\n  params: GrantPermissionWithConditionParams,\n): ContractPermissionWithConditionParams {\n  return [\n    ...permissionParamsToContract({\n      who: params.who,\n      where: params.where,\n      permission: params.permission,\n    }),\n    params.condition,\n  ];\n}\n\nexport function permissionParamsFromContract(\n  result: Result,\n): IGrantPermissionDecodedParams | IRevokePermissionDecodedParams {\n  return {\n    where: result[0],\n    who: result[1],\n    permissionId: result[2],\n    permission: Object.keys(PermissionIds)\n      .find((k) => PermissionIds[k] === result[2])\n      ?.replace(/_ID$/, \"\") || \"\",\n  };\n}\nexport function permissionParamsWitConditionFromContract(\n  result: Result,\n): GrantPermissionWithConditionDecodedParams {\n  return {\n    ...permissionParamsFromContract(result),\n    condition: result[3],\n  };\n}\n\nexport function withdrawParamsFromContract(\n  to: string,\n  _value: bigint,\n  result: Result,\n  tokenStandard: TokenType,\n): WithdrawParams {\n  if (tokenStandard === TokenType.ERC20) {\n    return {\n      type: TokenType.ERC20,\n      tokenAddress: to,\n      recipientAddressOrEns: result[0],\n      amount: BigInt(result[1]),\n    };\n  }\n  // TODO Add ERC721 and ERC1155\n  throw new Error(\"not implemented\");\n}\n", "import { DAO__factory } from \"@aragon/osx-ethers\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { DaoMetadata } from \"../interfaces\";\nimport { erc20ContractAbi } from \"./abi/erc20\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  new Contract(AddressZero, erc20ContractAbi).interface.getFunction(\"transfer\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grant\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grantWithCondition\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"revoke\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setMetadata\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setDaoURI\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"registerStandardCallback\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setSignatureValidator\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"upgradeTo\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"upgradeToAndCall\").format(\"minimal\"),\n];\n\nexport const UNSUPPORTED_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  links: [],\n};\nexport const EMPTY_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(the DAO has no metadata)\",\n  description: \"(the DAO did not define any content)\",\n  links: [],\n};\n\nexport const UNAVAILABLE_DAO_METADATA: DaoMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the DAO metadata is not available)\",\n  links: [],\n};\n", "import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  DAORegistry__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  AmountMismatchError,\n  FailedDepositError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  IpfsPinError,\n  MissingExecPermissionError,\n  NoProviderError,\n  NoSignerError,\n  resolveIpfsCid,\n  UpdateAllowanceError,\n} from \"@aragon/sdk-common\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract, ContractTransaction } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  QueryDao,\n  QueryDaos,\n  QueryTokenBalances,\n  QueryTokenTransfers,\n} from \"../graphql-queries\";\nimport {\n  AssetBalance,\n  AssetBalanceSortBy,\n  CreateDaoParams,\n  DaoBalancesQueryParams,\n  DaoCreationSteps,\n  DaoCreationStepValue,\n  DaoDepositSteps,\n  DaoDepositStepValue,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DaoSortBy,\n  DepositParams,\n  IClientMethods,\n  IDaoQueryParams,\n  IHasPermissionParams,\n  ITransferQueryParams,\n  PermissionIds,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferTypeMap,\n  TokenType,\n  Transfer,\n  TransferSortBy,\n  UpdateAllowanceParams,\n  UpdateAllowanceStepValue,\n} from \"../../interfaces\";\nimport {\n  ClientCore,\n  Context,\n  findLog,\n  SortDirection,\n} from \"../../client-common\";\nimport {\n  toAssetBalance,\n  toDaoDetails,\n  toDaoListItem,\n  toTokenTransfer,\n  unwrapDepositParams,\n} from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { id } from \"@ethersproject/hash\";\nimport {\n  EMPTY_DAO_METADATA_LINK,\n  UNAVAILABLE_DAO_METADATA,\n  UNSUPPORTED_DAO_METADATA_LINK,\n} from \"../constants\";\n\n/**\n * Methods module the SDK Generic Client\n */\nexport class ClientMethods extends ClientCore implements IClientMethods {\n  constructor(context: Context) {\n    super(context);\n    Object.freeze(ClientMethods.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Creates a DAO with the given settings and plugins\n   *\n   * @param {CreateDaoParams} params\n   * @return {*}  {AsyncGenerator<DaoCreationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *createDao(\n    params: CreateDaoParams,\n  ): AsyncGenerator<DaoCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    } else if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new Error(\"Invalid subdomain format: use a-z, 0-9 and -\");\n    }\n\n    const daoFactoryInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    // check if at least one plugin requests EXECUTE_PERMISSION on the DAO\n    // This check isn't 100% correct all the time\n    // simulate the DAO creation to get an address\n    const pluginSetupProcessorAddr = await daoFactoryInstance\n      .pluginSetupProcessor();\n    const pluginSetupProcessor = PluginSetupProcessor__factory.connect(\n      pluginSetupProcessorAddr,\n      signer,\n    );\n    let execPermissionFound = false;\n\n    // using the DAO base because it reflects a newly created DAO the best\n    const daoBaseAddr = await daoFactoryInstance.daoBase();\n    // simulates each plugin installation seperately to get the requested permissions\n    for (const installData of pluginInstallationData) {\n      const pluginSetupProcessorResponse = await pluginSetupProcessor.callStatic\n        .prepareInstallation(daoBaseAddr, installData);\n      const found = pluginSetupProcessorResponse[1].permissions.find(\n        (permission) =>\n          permission.permissionId === PermissionIds.EXECUTE_PERMISSION_ID,\n      );\n      if (found) {\n        execPermissionFound = true;\n        break;\n      }\n    }\n\n    if (!execPermissionFound) {\n      throw new MissingExecPermissionError();\n    }\n\n    const tx = await daoFactoryInstance.connect(signer).createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    yield {\n      key: DaoCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n    // start tx\n    const receipt = await tx.wait();\n    const daoFactoryInterface = DAORegistry__factory.createInterface();\n    // find dao address using the dao registry address\n    const log = receipt.logs?.find(\n      (e) =>\n        e.topics[0] ===\n          id(daoFactoryInterface.getEvent(\"DAORegistered\").format(\"sighash\")),\n    );\n\n    if (!log) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    // Plugin logs\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const installedLogs = receipt.logs?.filter(\n      (e) =>\n        e.topics[0] ===\n          id(pspInterface.getEvent(\"InstallationApplied\").format(\"sighash\")),\n    );\n\n    // DAO logs\n    const parsedLog = daoFactoryInterface.parseLog(log);\n    if (!parsedLog.args[\"dao\"]) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    yield {\n      key: DaoCreationSteps.DONE,\n      address: parsedLog.args[\"dao\"],\n      pluginAddresses: installedLogs.map(\n        (log) => pspInterface.parseLog(log).args[1],\n      ),\n    };\n  }\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: DaoMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch {\n      throw new IpfsPinError();\n    }\n  }\n  /**\n   * Deposits ether or an ERC20 token into the DAO\n   *\n   * @param {DepositParams} params\n   * @return {*}  {AsyncGenerator<DaoDepositStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *deposit(\n    params: DepositParams,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new Error(\"A signer is needed\");\n    } else if (!signer.provider) {\n      throw new Error(\"A web3 provider is needed\");\n    }\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new Error(\"Please, use the token's transfer function directly\");\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    if (tokenAddress && tokenAddress !== AddressZero) {\n      // If the target is an ERC20 token, ensure that the amount can be transferred\n      // Relay the yield steps to the caller as they are received\n      yield* this.updateAllowance(\n        {\n          amount: params.amount,\n          daoAddressOrEns: daoAddress,\n          tokenAddress,\n        },\n      );\n    }\n\n    // Doing the transfer\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n    const override: { value?: bigint } = {};\n\n    if (tokenAddress === AddressZero) {\n      // Ether\n      override.value = amount;\n    }\n\n    const tx = await daoInstance.deposit(\n      tokenAddress,\n      amount,\n      reference,\n      override,\n    );\n    yield { key: DaoDepositSteps.DEPOSITING, txHash: tx.hash };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, daoInstance.interface, \"Deposited\");\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const daoInterface = DAO__factory.createInterface();\n    const parsedLog = daoInterface.parseLog(log);\n\n    if (!amount.toString() === parsedLog.args[\"amount\"]) {\n      throw new AmountMismatchError(\n        amount,\n        parsedLog.args[\"amount\"].toBigInt(),\n      );\n    }\n    yield { key: DaoDepositSteps.DONE, amount: amount };\n  }\n\n  /**\n   * Checks if the allowance is enough and updates it\n   *\n   * @param {UpdateAllowanceParams} params\n   * @return {*}  {AsyncGenerator<UpdateAllowanceStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *updateAllowance(\n    params: UpdateAllowanceParams,\n  ): AsyncGenerator<UpdateAllowanceStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    // TODO\n    // add params check with yup\n\n    const tokenInstance = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n\n    const currentAllowance = await tokenInstance.allowance(\n      await signer.getAddress(),\n      params.daoAddressOrEns,\n    );\n\n    yield {\n      key: DaoDepositSteps.CHECKED_ALLOWANCE,\n      allowance: currentAllowance.toBigInt(),\n    };\n\n    if (currentAllowance.gte(params.amount)) return;\n\n    const tx: ContractTransaction = await tokenInstance.approve(\n      params.daoAddressOrEns,\n      BigNumber.from(params.amount),\n    );\n\n    yield {\n      key: DaoDepositSteps.UPDATING_ALLOWANCE,\n      txHash: tx.hash,\n    };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, tokenInstance.interface, \"Approval\");\n\n    if (!log) {\n      throw new UpdateAllowanceError();\n    }\n    const value = log.data;\n    if (!value || BigNumber.from(params.amount).gt(BigNumber.from(value))) {\n      throw new UpdateAllowanceError();\n    }\n\n    yield {\n      key: DaoDepositSteps.UPDATED_ALLOWANCE,\n      allowance: params.amount,\n    };\n  }\n  /**\n   * Checks whether a role is granted by the current DAO's ACL settings\n   *\n   * @param {IHasPermissionParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async hasPermission(params: IHasPermissionParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    // connect to the managing dao\n    const daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);\n    return daoInstance.hasPermission(\n      params.where,\n      params.who,\n      id(params.permission),\n      params.data || new Uint8Array([]),\n    );\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {string} daoAddressOrEns\n   * @return {*}  {(Promise<DaoDetails | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDao(daoAddressOrEns: string): Promise<DaoDetails | null> {\n    let address = daoAddressOrEns;\n    if (!isAddress(address)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      const resolvedAddress = await provider.resolveName(address);\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n\n      address = resolvedAddress.toLowerCase();\n    }\n    const query = QueryDao;\n    const params = { address };\n    const name = \"DAO\";\n    type T = { dao: SubgraphDao };\n    const { dao } = await this.graphql.request<T>({ query, params, name });\n    if (!dao) {\n      return null;\n    } else if (!dao.metadata) {\n      return toDaoDetails(\n        dao,\n        EMPTY_DAO_METADATA_LINK,\n      );\n    }\n    // TODO use same approach as in graphql\n    await this.ipfs.ensureOnline();\n    try {\n      const metadataCid = resolveIpfsCid(dao.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as DaoMetadata;\n      return toDaoDetails(dao, metadata);\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toDaoDetails(dao, UNSUPPORTED_DAO_METADATA_LINK);\n      }\n      return toDaoDetails(dao, UNAVAILABLE_DAO_METADATA);\n    }\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {IDaoQueryParams} {\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = DaoSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {Promise<DaoListItem[]>}\n   * @memberof ClientMethods\n   */\n  public async getDaos({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = DaoSortBy.CREATED_AT,\n  }: IDaoQueryParams): Promise<DaoListItem[]> {\n    const query = QueryDaos;\n    const params = {\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"DAOs\";\n    type T = { daos: SubgraphDaoListItem[] };\n    const { daos } = await this.graphql.request<T>({ query, params, name });\n    // TODO use same approach as in graphql\n    await this.ipfs.ensureOnline();\n    return Promise.all(\n      daos.map(\n        async (dao: SubgraphDaoListItem): Promise<DaoListItem> => {\n          if (!dao.metadata) {\n            return toDaoListItem(\n              dao,\n              EMPTY_DAO_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(dao.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata);\n            return toDaoListItem(dao, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toDaoListItem(dao, UNSUPPORTED_DAO_METADATA_LINK);\n            }\n            return toDaoListItem(dao, UNAVAILABLE_DAO_METADATA);\n          }\n        },\n      ),\n    );\n  }\n  /**\n   * Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet\n   *\n   * @param {DaoBalancesQueryParams} {\n   *     daoAddressOrEns,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = AssetBalanceSortBy.LAST_UPDATED,\n   *   }\n   * @return {*}  {(Promise<AssetBalance[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoBalances({\n    daoAddressOrEns,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = AssetBalanceSortBy.LAST_UPDATED,\n  }: DaoBalancesQueryParams): Promise<AssetBalance[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    const query = QueryTokenBalances;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao balances\";\n    type T = { tokenBalances: SubgraphBalance[] };\n    const { tokenBalances } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (tokenBalances.length === 0) {\n      return [];\n    }\n    return Promise.all(\n      tokenBalances.map(\n        (balance: SubgraphBalance): AssetBalance => toAssetBalance(balance),\n      ),\n    );\n  }\n  /**\n   * Retrieves the list of asset transfers to and from the given DAO (by default, from ETH, DAI, USDC and USDT, on Mainnet)\n   *\n   * @param {ITransferQueryParams} {\n   *     daoAddressOrEns,\n   *     type,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = TransferSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {(Promise<Transfer[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoTransfers({\n    daoAddressOrEns,\n    type,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = TransferSortBy.CREATED_AT,\n  }: ITransferQueryParams): Promise<Transfer[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (type) {\n      where = { ...where, type: SubgraphTransferTypeMap.get(type) };\n    }\n    const query = QueryTokenTransfers;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao transfers\";\n    type T = { tokenTransfers: SubgraphTransferListItem[] };\n    const { tokenTransfers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenTransfers) {\n      return null;\n    }\n    return Promise.all(\n      tokenTransfers.map(\n        (transfer: SubgraphTransferListItem): Transfer =>\n          toTokenTransfer(transfer),\n      ),\n    );\n  }\n}\n", "import {\n  GrantPermissionWithConditionParams,\n  IClientEncoding,\n  IGrantPermissionParams,\n  IRevokePermissionParams,\n  RegisterStandardCallbackParams,\n  TokenType,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../interfaces\";\nimport {\n  ApplyInstallationParams,\n  ClientCore,\n  Context,\n  DaoAction,\n} from \"../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsToContract,\n  permissionParamsToContract,\n  permissionWithConditionParamsToContract,\n} from \"../utils\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  hexToBytes,\n  InvalidAddressError,\n  NoSignerError,\n} from \"@aragon/sdk-common\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\n/**\n * Encoding module the SDK Generic Client\n */\nexport class ClientEncoding extends ClientCore implements IClientEncoding {\n  constructor(context: Context) {\n    super(context);\n    Object.freeze(ClientEncoding.prototype);\n    Object.freeze(this);\n  }\n  /**\n   *\n   *\n   * @param {string} daoAddress\n   * @param {ApplyInstallationParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public applyInstallationAction(\n    daoAddress: string,\n    params: ApplyInstallationParams,\n  ): DaoAction {\n    if (!isAddress(daoAddress)) {\n      throw new InvalidAddressError();\n    }\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n\n    const args = applyInstallatonParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyInstallation\", [\n      daoAddress,\n      args,\n    ]);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {IGrantPermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantAction(\n    daoAddress: string,\n    params: IGrantPermissionParams,\n  ): DaoAction {\n    const signer = this.web3.getSigner();\n    const { where, who } = params;\n    if (!signer) {\n      throw new Error(\"A signer is needed\");\n    } else if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new Error(\"Invalid address\");\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"grant\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO given a certain condition\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionWithConditionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantWithConditionAction(\n    daoAddress: string,\n    params: GrantPermissionWithConditionParams,\n  ): DaoAction {\n    const signer = this.web3.getSigner();\n    const { where, who } = params;\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionWithConditionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n        condition: params.condition,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"grantWithCondition\",\n      args,\n    );\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that revokes a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {IRevokePermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public revokeAction(\n    daoAddress: string,\n    params: IRevokePermissionParams,\n  ): DaoAction {\n    const signer = this.web3.getSigner();\n    const { where, who } = params;\n    if (!signer) {\n      throw new Error(\"A signer is needed\");\n    } else if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new Error(\"Invalid address\");\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"revoke\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that withdraws ether from the DAO\n   *\n   * @param {string} recipientAddressOrEns\n   * @param {WithdrawParams} value\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async withdrawAction(params: WithdrawParams): Promise<DaoAction> {\n    let to = params.recipientAddressOrEns;\n    if (!isAddress(params.recipientAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        params.recipientAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"invalid ens\");\n      }\n      to = resolvedAddress;\n    }\n\n    switch (params.type) {\n      case TokenType.NATIVE:\n        return { to, value: params.amount, data: new Uint8Array() };\n      case TokenType.ERC20:\n        if (!params.tokenAddress) {\n          throw new Error(\"Empty token contract address\");\n        }\n\n        const iface = new Contract(\n          params.tokenAddress,\n          erc20ContractAbi,\n        ).interface;\n        const data = iface.encodeFunctionData(\"transfer\", [\n          params.recipientAddressOrEns,\n          params.amount,\n        ]);\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n    }\n    throw new Error(\"Unsupported token type\");\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that updates the metadata the DAO\n   *\n   * @param {string} daoAddressOrEns\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async updateDaoMetadataAction(\n    daoAddressOrEns: string,\n    metadataUri: string,\n  ): Promise<DaoAction> {\n    let address = daoAddressOrEns;\n    if (!isAddress(daoAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        daoAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"Invalid ENS\");\n      }\n      address = resolvedAddress;\n    }\n    // upload metadata to IPFS\n    const daoInterface = DAO__factory.createInterface();\n    const args = toUtf8Bytes(metadataUri);\n    const hexBytes = daoInterface.encodeFunctionData(\"setMetadata\", [args]);\n    return {\n      to: address,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the dao uri\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setDaoUriAction(\n    daoAddressOrEns: string,\n    daoUri: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setDaoURI\", [daoUri]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that registers a new standard callback\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public registerStandardCallbackAction(\n    daoAddressOrEns: string,\n    params: RegisterStandardCallbackParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"registerStandardCallback\",\n      [params.interfaceId, params.callbackSelector, params.magicNumber],\n    );\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the signature validator\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} signatureValidator\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setSignatureValidatorAction(\n    daoAddressOrEns: string,\n    signatureValidator: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setSignatureValidator\", [\n      signatureValidator,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} implementationAddress\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAction(\n    daoAddressOrEns: string,\n    implementationAddress: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeTo\", [\n      implementationAddress,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy and calls the callback function with the specified data\n   *\n   * @param {string} daoAddressOrEns\n   * @param {UpgradeToAndCallParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAndCallAction(\n    daoAddressOrEns: string,\n    params: UpgradeToAndCallParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeToAndCall\", [\n      params.implementationAddress,\n      params.data,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n", "import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  PluginRepo__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  InvalidAddressOrEnsError,\n  NoProviderError,\n  NoSignerError,\n  NoTokenAddress,\n} from \"@aragon/sdk-common\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { ClientCore, Context, GasFeeEstimation } from \"../../client-common\";\nimport {\n  CreateDaoParams,\n  DepositParams,\n  IClientEstimation,\n  TokenType,\n  UpdateAllowanceParams,\n} from \"../../interfaces\";\nimport { unwrapDepositParams } from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\n/**\n * Estimation module the SDK Generic Client\n */\nexport class ClientEstimation extends ClientCore implements IClientEstimation {\n  constructor(context: Context) {\n    super(context);\n    Object.freeze(ClientEstimation.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Estimates the gas fee of creating a DAO\n   *\n   * @param {CreateDaoParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async createDao(params: CreateDaoParams): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    } else if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new Error(\"Invalid subdomain format: use a-z, 0-9 and -\");\n    }\n\n    const daoInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    const gasEstimation = await daoInstance.estimateGas.createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    return this.web3.getApproximateGasFee(gasEstimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of depositing ether or an ERC20 token into the DAO\n   * This does not estimate the gas cost of updating the allowance of an ERC20 token\n   *\n   * @param {DepositParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public deposit(\n    params: DepositParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new Error(\"Please, use the token's transfer function directly\");\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n\n    const override: { value?: bigint } = {};\n    if (tokenAddress === AddressZero) {\n      override.value = amount;\n    }\n\n    return daoInstance.estimateGas\n      .deposit(tokenAddress, amount, reference, override)\n      .then((gasLimit) => {\n        return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n      });\n  }\n  /**\n   * Estimates the gas fee of updating the allowance of an ERC20 token\n   *\n   * @param {UpdateAllowanceParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async updateAllowance(\n    params: UpdateAllowanceParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    } else if (!params.tokenAddress) {\n      throw new NoTokenAddress();\n    }\n\n    // resolve ens\n    let daoAddress = params.daoAddressOrEns;\n    if (!isAddress(daoAddress)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      const resolvedAddress = await provider.resolveName(daoAddress);\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n      daoAddress = resolvedAddress;\n    }\n\n    const contract = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n    return contract.estimateGas.approve(\n      daoAddress,\n      params.amount,\n    ).then((gasLimit) => {\n      return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n    });\n  }\n}\n", "import {\n  DaoMetadata,\n  GrantPermissionWithConditionParams,\n  IClientDecoding,\n  IGrantPermissionDecodedParams,\n  IRevokePermissionDecodedParams,\n  RegisterStandardCallbackParams,\n  TokenType,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../interfaces\";\nimport {\n  ClientCore,\n  Context,\n  DecodedApplyInstallationParams,\n  getFunctionFragment,\n  IInterfaceParams,\n} from \"../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsFromContract,\n  permissionParamsFromContract,\n  permissionParamsWitConditionFromContract,\n  withdrawParamsFromContract,\n} from \"../utils\";\nimport { bytesToHex, hexToBytes, resolveIpfsCid } from \"@aragon/sdk-common\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { toUtf8String } from \"@ethersproject/strings\";\n\n/**\n * Decoding module the SDK Generic Client\n */\nexport class ClientDecoding extends ClientCore implements IClientDecoding {\n  constructor(context: Context) {\n    super(context);\n    Object.freeze(ClientDecoding.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * @param {data} Uint8Array\n   * @return {*}  {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyInstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyInstallationParams {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyInstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result)\n  }\n  /**\n   * Decodes the permission parameters from an encoded grant action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {IGrantPermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public grantAction(data: Uint8Array): IGrantPermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grant\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the grant permission with condition parameters from an encoded grant with condition action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {GrantPermissionWithConditionParams}\n   * @memberof ClientDecoding\n   */\n  public grantWithConditionAction(\n    data: Uint8Array,\n  ): GrantPermissionWithConditionParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grantWithCondition\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsWitConditionFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded revoke action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {IRevokePermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public revokeAction(data: Uint8Array): IRevokePermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"revoke\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the withdraw parameters from an encoded withdraw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {WithdrawParams}\n   * @memberof ClientDecoding\n   */\n  public withdrawAction(\n    to: string,\n    value: bigint,\n    data: Uint8Array,\n  ): WithdrawParams {\n    // Native\n    if (!data?.length) {\n      return {\n        type: TokenType.NATIVE,\n        recipientAddressOrEns: to,\n        amount: value,\n      };\n    }\n\n    // ERC20 and other\n    const abiObjects = [{\n      tokenStandard: TokenType.ERC20,\n      abi: erc20ContractAbi,\n    }];\n    for (const abiObject of abiObjects) {\n      const hexBytes = bytesToHex(data);\n      const iface = new Contract(AddressZero, abiObject.abi).interface;\n      const expectedFunction = iface.getFunction(\"transfer\");\n      const result = iface.decodeFunctionData(expectedFunction, hexBytes);\n      return withdrawParamsFromContract(\n        to,\n        value,\n        result,\n        abiObject.tokenStandard,\n      );\n    }\n    throw new Error(\"The received action is not recognized\");\n  }\n  /**\n   * Decodes a dao metadata ipfs uri from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public updateDaoMetadataRawAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    resolveIpfsCid(metadataUri);\n    return metadataUri;\n  }\n  /**\n   * Decodes a dao metadata from an encoded update metadata raw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {Promise<DaoMetadata>}\n   * @memberof ClientDecoding\n   */\n  public async updateDaoMetadataAction(data: Uint8Array): Promise<DaoMetadata> {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    const ipfsCid = resolveIpfsCid(metadataUri);\n    try {\n      const stringMetadata = await this.ipfs.fetchString(ipfsCid);\n      return JSON.parse(stringMetadata);\n    } catch {\n      throw new Error(\"Error reading data from IPFS\");\n    }\n  }\n  /**\n   * Decodes the daoUri from a setDaoUriAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setDaoUriAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setDaoURI\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes the RegisterStandardCallbackParams from a registerStandardCallbackAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {RegisterStandardCallbackParams}\n   * @memberof ClientDecoding\n   */\n  public registerStandardCallbackAction(\n    data: Uint8Array,\n  ): RegisterStandardCallbackParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"registerStandardCallback\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      interfaceId: result[0],\n      callbackSelector: result[1],\n      magicNumber: result[2],\n    };\n  }\n  /**\n   * Decodes the implementation address from an encoded upgradeToAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setSignatureValidatorAction(\n    data: Uint8Array,\n  ): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"setSignatureValidator\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  public upgradeToAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeTo\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes upgradeToAndCallback params from an upgradeToAndCallAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {UpgradeToAndCallParams}\n   * @memberof ClientDecoding\n   */\n  public upgradeToAndCallAction(\n    data: Uint8Array,\n  ): UpgradeToAndCallParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeToAndCall\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      implementationAddress: result[0],\n      data: hexToBytes(result[1]),\n    };\n  }\n\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(IInterfaceParams | null)}\n   * @memberof ClientDecoding\n   */\n  public findInterface(data: Uint8Array): IInterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n", "import { Context } from \"./client-common/context\";\nimport { ClientMethods } from \"./internal/client/methods\";\nimport { ClientEncoding } from \"./internal/client/encoding\";\nimport { ClientEstimation } from \"./internal/client/estimation\";\nimport { ClientDecoding } from \"./internal/client/decoding\";\nimport {\n  IClient,\n  IClientDecoding,\n  IClientEncoding,\n  IClientEstimation,\n  IClientMethods,\n} from \"./interfaces\";\nimport { ClientCore } from \"./client-common/core\";\n\n/**\n * Provider a generic client with high level methods to manage and interact with DAO's\n */\nexport class Client extends ClientCore implements IClient {\n  private privateMethods: IClientMethods;\n  private privateEncoding: IClientEncoding;\n  private privateDecoding: IClientDecoding;\n  private privateEstimation: IClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.privateMethods = new ClientMethods(context);\n    this.privateEncoding = new ClientEncoding(context);\n    this.privateDecoding = new ClientDecoding(context);\n    this.privateEstimation = new ClientEstimation(context);\n    Object.freeze(Client.prototype);\n    Object.freeze(this);\n  }\n  get methods(): IClientMethods {\n    return this.privateMethods;\n  }\n  get encoding(): IClientEncoding {\n    return this.privateEncoding;\n  }\n  get decoding(): IClientDecoding {\n    return this.privateDecoding;\n  }\n  get estimation(): IClientEstimation {\n    return this.privateEstimation;\n  }\n}\n", "import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingMembers = gql`\nquery AddresslistVotingMembers($address: ID!) {\n    addresslistVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingProposal = gql`\nquery AddresslistVotingProposal($proposalId: ID!) {\n  addresslistVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes\n    no\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    executable\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryAddresslistVotingProposals = gql`\nquery AddresslistVotingProposals($where: AddresslistVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: AddresslistVotingProposal_orderBy!) {\n  addresslistVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes\n    no\n    abstain\n    startDate\n    endDate\n    executed\n    executable\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingSettings = gql`\nquery AddresslistVotingSettings($address: ID!) {\n  addresslistVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n", "import { decodeRatio, getCompactProposalId, hexToBytes } from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n  ContractAddresslistVotingInitParams,\n  IAddresslistVotingPluginInstall,\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n  SubgraphAddresslistVotingVoterListItem,\n} from \"../interfaces\";\n\nexport function toAddresslistVotingProposal(\n  proposal: SubgraphAddresslistVotingProposal,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    executionTxHash: proposal.executionTxHash || null,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n    },\n    totalVotingWeight: parseInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\nexport function toAddresslistVotingProposalListItem(\n  proposal: SubgraphAddresslistVotingProposalListItem,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n  };\n}\n\nexport function addresslistVotingInitParamsToContract(\n  params: IAddresslistVotingPluginInstall,\n): ContractAddresslistVotingInitParams {\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    params.addresses,\n  ];\n}\n", "import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  IPluginInstallItem,\n  SupportedNetworks,\n  SupportedNetworksArray,\n  VotingSettings,\n  votingSettingsToContract,\n} from \"../../../client-common\";\nimport {\n  IAddresslistVotingClientEncoding,\n  IAddresslistVotingPluginInstall,\n} from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\n\n/**\n * Encoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientEncoding extends ClientCore\n  implements IAddresslistVotingClientEncoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(AddresslistVotingClientEncoding.prototype);\n    Object.freeze(this);\n  }\n\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {IAddresslistVotingPluginInstall} params\n   * @param {SupportedNetworks} network\n   * @return {*}  {IPluginInstallItem}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: IAddresslistVotingPluginInstall,\n    network: SupportedNetworks,\n  ): IPluginInstallItem {\n    if (!SupportedNetworksArray.includes(network)) {\n      throw new UnsupportedNetworkError(network);\n    }\n    const {\n      votingMode,\n      supportThreshold,\n      minParticipation,\n      minDuration,\n      minProposerVotingPower,\n    } = votingSettingsToContract(params.votingSettings);\n\n    const hexBytes = defaultAbiCoder.encode(\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"address[] members\",\n      ],\n      [\n        [\n          votingMode,\n          supportThreshold,\n          minParticipation,\n          minDuration,\n          minProposerVotingPower,\n        ],\n        params.addresses,\n      ],\n    );\n\n    return {\n      id: LIVE_CONTRACTS[network].addresslistVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public addMembersAction(pluginAddress: string, members: string[]): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"addAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that removes addresses from the address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public removeMembersAction(\n    pluginAddress: string,\n    members: string[],\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n", "import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  NoSignerError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  AddresslistVotingPluginPrepareInstallationParams,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n  IAddresslistVotingClientMethods,\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n} from \"../../interfaces\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  ContextPlugin,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  IProposalQueryParams,\n  IVoteProposalParams,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  SubgraphVotingSettings,\n  SupportedNetworks,\n  SupportedNetworksArray,\n  VersionTag,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  QueryAddresslistVotingMembers,\n  QueryAddresslistVotingProposal,\n  QueryAddresslistVotingProposals,\n  QueryAddresslistVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  toAddresslistVotingProposal,\n  toAddresslistVotingProposalListItem,\n} from \"../utils\";\nimport {\n  AddresslistVoting__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { AddresslistVotingClientEncoding } from \"./encoding\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class AddresslistVotingClientMethods extends ClientCore\n  implements IAddresslistVotingClientMethods {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(AddresslistVotingClientMethods.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Creates a new proposal on the given AddressList plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await addresslistContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const addresslistContractInterface = AddresslistVoting__factory\n      .createInterface();\n\n    const log = findLog(\n      receipt,\n      addresslistContractInterface,\n      \"ProposalCreated\",\n    );\n\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = addresslistContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch {\n      throw new IpfsPinError();\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {IVoteProposalParams} params\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *voteProposal(\n    params: IVoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await addresslistContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await addresslistContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {AddresslistVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: AddresslistVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    const network = await signer.provider.getNetwork();\n    const networkName = network.name as SupportedNetworks;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const addresslistVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await addresslistVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].addresslistVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const addresslistVotingPluginInstallItem = AddresslistVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n          versionTag: versionTag!,\n        },\n        data: addresslistVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer.provider) {\n      throw new NoProviderError();\n    } else if (!isAddress(params.voterAddressOrEns)) {\n      throw new InvalidAddressError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return addresslistContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return addresslistContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses with signing capabilities on the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getMembers(pluginAddress: string): Promise<string[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVotingVoting members\";\n    type T = { addresslistVotingPlugin: SubgraphMembers };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return addresslistVotingPlugin.members.map((\n      member: { address: string },\n    ) => member.address);\n  }\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<AddresslistVotingProposal | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<AddresslistVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryAddresslistVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"AddresslistVoting proposal\";\n    type T = { addresslistVotingProposal: SubgraphAddresslistVotingProposal };\n    const { addresslistVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingProposal) {\n      return null;\n    } else if (!addresslistVotingProposal.metadata) {\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(addresslistVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toAddresslistVotingProposal(addresslistVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toAddresslistVotingProposal(\n          addresslistVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {IProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<AddresslistVotingProposalListItem[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: IProposalQueryParams): Promise<AddresslistVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n\n    const query = QueryAddresslistVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"AddresslistVoting proposals\";\n    type T = {\n      addresslistVotingProposals: SubgraphAddresslistVotingProposalListItem[];\n    };\n    const { addresslistVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    await this.ipfs.ensureOnline();\n    return Promise.all(\n      addresslistVotingProposals.map(\n        async (\n          proposal: SubgraphAddresslistVotingProposalListItem,\n        ): Promise<AddresslistVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toAddresslistVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toAddresslistVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {(Promise<VotingSettings | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVoting settings\";\n    type T = { addresslistVotingPlugin: SubgraphVotingSettings };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(addresslistVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(addresslistVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(addresslistVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        addresslistVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: addresslistVotingPlugin.votingMode,\n    };\n  }\n}\n", "import {\n  AddresslistVoting__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n];\n", "import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  IInterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { IAddresslistVotingClientDecoding } from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientDecoding extends ClientCore\n  implements IAddresslistVotingClientDecoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(AddresslistVotingClientDecoding.prototype);\n    Object.freeze(this);\n  }\n\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public addMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"addAddresses\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public removeMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(IInterfaceParams | null)}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): IInterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n", "import { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  GasFeeEstimation,\n  CreateMajorityVotingProposalParams,\n  IVoteProposalParams,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  NoProviderError,\n  NoSignerError,\n} from \"@aragon/sdk-common\";\n\n/**\n * Estimation module the SDK Address List Client\n */\nexport class AddresslistVotingClientEstimation extends ClientCore\n  implements IAddresslistVotingClientEstimation {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(AddresslistVotingClientEstimation.prototype);\n    Object.freeze(this);\n  }\n\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await addresslistContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {IVoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async voteProposal(\n    params: IVoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await addresslistContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing an AddressList proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await addresslistContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n", "import {\n  IAddresslistVotingClient,\n  IAddresslistVotingClientDecoding,\n  IAddresslistVotingClientEncoding,\n  IAddresslistVotingClientEstimation,\n  IAddresslistVotingClientMethods,\n  IAddresslistVotingPluginInstall,\n} from \"./interfaces\";\nimport { AddresslistVotingClientMethods } from \"./internal/client/methods\";\nimport { AddresslistVotingClientEncoding } from \"./internal/client/encoding\";\nimport { AddresslistVotingClientDecoding } from \"./internal/client/decoding\";\nimport { AddresslistVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  SupportedNetworks,\n  ClientCore,\n  ContextPlugin,\n  IPluginInstallItem,\n} from \"../client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class AddresslistVotingClient extends ClientCore\n  implements IAddresslistVotingClient {\n  private privateMethods: IAddresslistVotingClientMethods;\n  private privateEncoding: IAddresslistVotingClientEncoding;\n  private privateDecoding: IAddresslistVotingClientDecoding;\n  private privateEstimation: IAddresslistVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.privateMethods = new AddresslistVotingClientMethods(context);\n    this.privateEncoding = new AddresslistVotingClientEncoding(context);\n    this.privateDecoding = new AddresslistVotingClientDecoding(context);\n    this.privateEstimation = new AddresslistVotingClientEstimation(context);\n    Object.freeze(AddresslistVotingClient.prototype);\n    Object.freeze(this);\n  }\n  get methods(): IAddresslistVotingClientMethods {\n    return this.privateMethods;\n  }\n  get encoding(): IAddresslistVotingClientEncoding {\n    return this.privateEncoding;\n  }\n  get decoding(): IAddresslistVotingClientDecoding {\n    return this.privateDecoding;\n  }\n  get estimation(): IAddresslistVotingClientEstimation {\n    return this.privateEstimation;\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {IAddresslistVotingPluginInstall} params\n     * @param {SupportedNetworks} [network=\"mainnet\"]\n     * @return {*}  {IPluginInstallItem}\n     * @memberof AddresslistVotingClient\n     */\n    getPluginInstallItem: (\n      params: IAddresslistVotingPluginInstall,\n      network: SupportedNetworks = \"mainnet\",\n    ): IPluginInstallItem =>\n      AddresslistVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n", "// This file contains the definitions of the TokenVoting client\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CanVoteParams,\n  ContractVotingSettings,\n  CreateMajorityVotingProposalParams,\n  DaoAction,\n  ExecuteProposalStepValue,\n  GasFeeEstimation,\n  IClientCore,\n  IInterfaceParams,\n  IProposalQueryParams,\n  IVoteProposalParams,\n  MajorityVotingProposalSettings,\n  PrepareInstallationStepValue,\n  ProposalBase,\n  ProposalCreationStepValue,\n  ProposalListItemBase,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphProposalBase,\n  SubgraphVoterListItemBase,\n  VersionTag,\n  VoteProposalStepValue,\n  VoteValues,\n  VotingMode,\n  VotingSettings,\n} from \"../client-common\";\nimport { TokenType } from \"../interfaces\";\n\n// TokenVoting\n\nexport interface ITokenVotingClientMethods extends IClientCore {\n  createProposal: (\n    params: CreateMajorityVotingProposalParams,\n  ) => AsyncGenerator<ProposalCreationStepValue>;\n  pinMetadata: (params: ProposalMetadata) => Promise<string>;\n  voteProposal: (\n    params: IVoteProposalParams,\n  ) => AsyncGenerator<VoteProposalStepValue>;\n  executeProposal: (\n    proposalId: string,\n  ) => AsyncGenerator<ExecuteProposalStepValue>;\n  prepareInstallation: (\n    params: TokenVotingPluginPrepareInstallationParams,\n  ) => AsyncGenerator<PrepareInstallationStepValue>;\n  canVote: (params: CanVoteParams) => Promise<boolean>;\n  canExecute: (proposalId: string) => Promise<boolean>;\n  getMembers: (addressOrEns: string) => Promise<string[]>;\n  getProposal: (propoosalId: string) => Promise<TokenVotingProposal | null>;\n  getProposals: (\n    params: IProposalQueryParams,\n  ) => Promise<TokenVotingProposalListItem[]>;\n  getVotingSettings: (pluginAddress: string) => Promise<VotingSettings | null>;\n  getToken: (\n    pluginAddress: string,\n  ) => Promise<Erc20TokenDetails | Erc721TokenDetails | null>;\n}\n\nexport interface ITokenVotingClientEncoding extends IClientCore {\n  updatePluginSettingsAction: (\n    pluginAddress: string,\n    params: VotingSettings,\n  ) => DaoAction;\n  mintTokenAction: (\n    minterAddress: string,\n    params: IMintTokenParams,\n  ) => DaoAction;\n}\nexport interface ITokenVotingClientDecoding extends IClientCore {\n  updatePluginSettingsAction: (data: Uint8Array) => VotingSettings;\n  mintTokenAction: (data: Uint8Array) => IMintTokenParams;\n  findInterface: (data: Uint8Array) => IInterfaceParams | null;\n}\nexport interface ITokenVotingClientEstimation extends IClientCore {\n  createProposal: (\n    params: CreateMajorityVotingProposalParams,\n  ) => Promise<GasFeeEstimation>;\n  voteProposal: (params: IVoteProposalParams) => Promise<GasFeeEstimation>;\n  executeProposal: (\n    proposalId: string,\n  ) => Promise<GasFeeEstimation>;\n}\n\n/** Defines the shape of the Token client class */\nexport interface ITokenVotingClient {\n  methods: ITokenVotingClientMethods;\n  encoding: ITokenVotingClientEncoding;\n  decoding: ITokenVotingClientDecoding;\n  estimation: ITokenVotingClientEstimation;\n}\n// Factory init params\n\nexport type ITokenVotingPluginInstall = {\n  votingSettings: VotingSettings;\n  newToken?: NewTokenParams;\n  useToken?: ExistingTokenParams;\n};\n\ntype ExistingTokenParams = {\n  address: string;\n};\n\ntype NewTokenParams = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  minter?: string;\n  balances: { address: string; balance: bigint }[];\n};\n\n// PROPOSAL RETRIEVAL\nexport type TokenVotingProposal = ProposalBase & {\n  result: TokenVotingProposalResult;\n  settings: MajorityVotingProposalSettings;\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  usedVotingWeight: bigint;\n  votes: Array<\n    { address: string; vote: VoteValues; weight: bigint; voteReplaced: boolean }\n  >;\n  totalVotingWeight: bigint;\n  creationBlockNumber: number;\n  executionDate: Date | null;\n  executionBlockNumber: number | null;\n  executionTxHash: string | null;\n};\n\nexport type TokenVotingProposalListItem = ProposalListItemBase & {\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  result: TokenVotingProposalResult;\n  totalVotingWeight: bigint;\n  settings: MajorityVotingProposalSettings;\n};\n\nexport type TokenVotingProposalResult = {\n  yes: bigint;\n  no: bigint;\n  abstain: bigint;\n};\n\nexport type Erc20TokenDetails = TokenBaseDetails & {\n  decimals: number;\n  type: TokenType.ERC20;\n};\nexport type Erc721TokenDetails = TokenBaseDetails & {\n  type: TokenType.ERC721;\n};\n\nexport type TokenBaseDetails = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\nexport type SubgraphTokenVotingVoterListItem = SubgraphVoterListItemBase & {\n  votingPower: string;\n};\n\nexport type SubgraphTokenVotingProposalListItem = SubgraphProposalBase & {\n  plugin: {\n    token: SubgraphErc20Token | SubgraphErc721Token;\n  };\n  supportThreshold: string;\n  minVotingPower: bigint;\n  totalVotingPower: string;\n  votingMode: VotingMode;\n};\n\ntype SubgraphBaseToken = {\n  symbol: string;\n  name: string;\n  id: string;\n};\nexport enum SubgraphTokenType {\n  ERC20 = \"ERC20Token\",\n  ERC721 = \"ERC721Token\",\n}\nexport enum SubgraphContractType {\n  ERC20 = \"ERC20Contract\",\n  ERC721 = \"ERC721Contract\",\n}\n\nexport type SubgraphErc20Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC20;\n  decimals: number;\n};\nexport type SubgraphErc721Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC721;\n};\n\nexport type SubgraphTokenVotingProposal =\n  & SubgraphTokenVotingProposalListItem\n  & {\n    createdAt: string;\n    actions: SubgraphAction[];\n    voters: SubgraphTokenVotingVoterListItem[];\n    creationBlockNumber: string;\n    executionDate: string;\n    executionTxHash: string;\n    executionBlockNumber: string;\n  };\n\nexport interface IMintTokenParams {\n  address: string;\n  amount: bigint;\n}\n\nexport type ContractMintTokenParams = [string, BigNumber];\nexport type ContractTokenVotingInitParams = [\n  ContractVotingSettings,\n  [\n    string, // address\n    string, // name\n    string, // symbol\n  ],\n  [\n    string[], // receivers,\n    BigNumber[], // amounts\n  ],\n];\n\nexport type TokenVotingPluginPrepareInstallationParams = {\n  settings: ITokenVotingPluginInstall;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingProposal = gql`\nquery TokenVotingProposal($proposalId: ID!) {\n  tokenVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes,\n    no,\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    executable\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin {\n      token {\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryTokenVotingProposals = gql`\nquery TokenVotingProposals($where: TokenVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenVotingProposal_orderBy!) {\n  tokenVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes,\n    no,\n    abstain\n    startDate\n    endDate\n    executed\n    executable\n    votingMode\n    supportThreshold\n    minVotingPower\n    totalVotingPower\n    plugin{\n      token{\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingSettings = gql`\nquery TokenVotingSettings($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingPlugin = gql`\nquery TokenVotingPlugin($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    token {\n      id\n      name\n      symbol\n      __typename\n      ...on ERC20Contract {\n        decimals\n      }\n    }\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingMembers = gql`\nquery TokenVotingMembers($address: ID!) {\n    tokenVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n", "import {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  ContractMintTokenParams,\n  ContractTokenVotingInitParams,\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  IMintTokenParams,\n  ITokenVotingPluginInstall,\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  SubgraphTokenVotingVoterListItem,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n} from \"../interfaces\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Result } from \"@ethersproject/abi\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { decodeRatio, getCompactProposalId, hexToBytes } from \"@aragon/sdk-common\";\nimport { TokenType } from \"../../interfaces\";\n\nexport function toTokenVotingProposal(\n  proposal: SubgraphTokenVotingProposal,\n  metadata: ProposalMetadata,\n): TokenVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  let usedVotingWeight: bigint = BigInt(0);\n  for (const voter of proposal.voters) {\n    usedVotingWeight += BigInt(voter.votingPower);\n  }\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    token,\n    usedVotingWeight,\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function toTokenVotingProposalListItem(\n  proposal: SubgraphTokenVotingProposalListItem,\n  metadata: ProposalMetadata,\n): TokenVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    settings:{\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    token,\n  };\n}\n\nexport function mintTokenParamsToContract(\n  params: IMintTokenParams,\n): ContractMintTokenParams {\n  return [params.address, BigNumber.from(params.amount)];\n}\n\nexport function mintTokenParamsFromContract(result: Result): IMintTokenParams {\n  return {\n    address: result[0],\n    amount: BigInt(result[1]),\n  };\n}\n\nexport function tokenVotingInitParamsToContract(\n  params: ITokenVotingPluginInstall,\n): ContractTokenVotingInitParams {\n  let token: [string, string, string] = [\"\", \"\", \"\"];\n  let balances: [string[], BigNumber[]] = [[], []];\n  if (params.newToken) {\n    token = [AddressZero, params.newToken.name, params.newToken.symbol];\n    balances = [\n      params.newToken.balances.map((balance) => balance.address),\n      params.newToken.balances.map(({ balance }) => BigNumber.from(balance)),\n    ];\n  } else if (params.useToken) {\n    token = [params.useToken?.address, \"\", \"\"];\n  }\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    token,\n    balances,\n  ];\n}\n\nfunction parseToken(\n  subgraphToken: SubgraphErc20Token | SubgraphErc721Token,\n): Erc20TokenDetails | Erc721TokenDetails | null {\n  let token: Erc721TokenDetails | Erc20TokenDetails | null = null;\n  if (subgraphToken.__typename === SubgraphContractType.ERC20) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      decimals: subgraphToken.decimals,\n      type: TokenType.ERC20,\n    };\n  } else if (subgraphToken.__typename === SubgraphContractType.ERC721) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      type: TokenType.ERC721,\n    };\n  }\n  return token;\n}\n", "import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  IPluginInstallItem,\n  SupportedNetworks,\n  SupportedNetworksArray,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  IMintTokenParams,\n  ITokenVotingClientEncoding,\n  ITokenVotingPluginInstall,\n} from \"../../interfaces\";\nimport {\n  IERC20MintableUpgradeable__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  mintTokenParamsToContract,\n  tokenVotingInitParamsToContract,\n} from \"../utils\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\n\n/**\n * Encoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEncoding extends ClientCore\n  implements ITokenVotingClientEncoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(TokenVotingClientEncoding.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {ITokenVotingPluginInstall} params\n   * @param {SupportedNetworks} network\n   * @return {*}  {IPluginInstallItem}\n   * @memberof TokenVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: ITokenVotingPluginInstall,\n    network: SupportedNetworks,\n  ): IPluginInstallItem {\n    if (!SupportedNetworksArray.includes(network)) {\n      throw new UnsupportedNetworkError(network);\n    }\n    const args = tokenVotingInitParamsToContract(params);\n    const hexBytes = defaultAbiCoder.encode(\n      // [\"votingMode\",\"supportThreshold\", \"minParticipation\", \"minDuration\"], [\"address\",\"name\",\"symbol\"][ \"receivers\",\"amount\"]\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"tuple(address addr, string name, string symbol) tokenSettings\",\n        \"tuple(address[] receivers, uint256[] amounts) mintSettings\",\n      ],\n      args,\n    );\n    return {\n      id: LIVE_CONTRACTS[network].tokenVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new Error(\"Invalid plugin address\");\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that mints an amount of ERC-20 tokens to an address\n   *\n   * @param {string} minterAddress\n   * @param {IMintTokenParams} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public mintTokenAction(\n    minterAddress: string,\n    params: IMintTokenParams,\n  ): DaoAction {\n    if (!isAddress(minterAddress) || !isAddress(params.address)) {\n      throw new InvalidAddressError();\n    }\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const args = mintTokenParamsToContract(params);\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\"mint\", args);\n    return {\n      to: minterAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n", "import { isAddress } from \"@ethersproject/address\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  NoSignerError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  ContextPlugin,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  IProposalQueryParams,\n  IVoteProposalParams,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  SubgraphVotingSettings,\n  SupportedNetworks,\n  SupportedNetworksArray,\n  VersionTag,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  ITokenVotingClientMethods,\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  TokenVotingPluginPrepareInstallationParams,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n} from \"../../interfaces\";\nimport {\n  QueryTokenVotingMembers,\n  QueryTokenVotingPlugin,\n  QueryTokenVotingProposal,\n  QueryTokenVotingProposals,\n  QueryTokenVotingSettings,\n} from \"../graphql-queries\";\nimport { toTokenVotingProposal, toTokenVotingProposalListItem } from \"../utils\";\nimport {\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { TokenType } from \"../../../interfaces\";\nimport { TokenVotingClientEncoding } from \"./encoding\";\n/**\n * Methods module the SDK TokenVoting Client\n */\nexport class TokenVotingClientMethods extends ClientCore\n  implements ITokenVotingClientMethods {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(TokenVotingClientMethods.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Creates a new proposal on the given TokenVoting plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await tokenVotingContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const tokenVotingContractInterface = TokenVoting__factory.createInterface();\n    const log = findLog(\n      receipt,\n      tokenVotingContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = tokenVotingContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch {\n      throw new IpfsPinError();\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {IVoteProposalParams} params\n   * @param {VoteValues} vote\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *voteProposal(\n    params: IVoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await tokenVotingContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await tokenVotingContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {TokenVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *prepareInstallation(\n    params: TokenVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    const network = await signer.provider.getNetwork();\n    const networkName = network.name as SupportedNetworks;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const tokenVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await tokenVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].tokenVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const tokenVotingPluginInstallItem = TokenVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallationon\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n          versionTag: versionTag!\n        },\n        data: tokenVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new PluginInstallationPreparationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @returns {*}  {Promise<boolean>}\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer.provider) {\n      throw new NoProviderError();\n    } else if (!isAddress(params.voterAddressOrEns)) {\n      throw new InvalidAddressError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return tokenVotingContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return tokenVotingContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses holding tokens from the underlying Token contract used by the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getMembers(pluginAddress: string): Promise<string[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting members\";\n    type T = { tokenVotingPlugin: SubgraphMembers };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return tokenVotingPlugin.members.map((\n      member: { address: string },\n    ) => member.address);\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<TokenVotingProposal>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<TokenVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryTokenVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"TokenVoting proposal\";\n    type T = { tokenVotingProposal: SubgraphTokenVotingProposal };\n    const { tokenVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingProposal) {\n      return null;\n    } else if (!tokenVotingProposal.metadata) {\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    // format in the metadata field\n    try {\n      const metadataCid = resolveIpfsCid(tokenVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toTokenVotingProposal(tokenVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toTokenVotingProposal(\n          tokenVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {IProposalQueryParams} params\n   * @return {*}  {Promise<TokenVotingProposalListItem[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: IProposalQueryParams): Promise<TokenVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryTokenVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"TokenVoting proposals\";\n    type T = { tokenVotingProposals: SubgraphTokenVotingProposalListItem[] };\n    const { tokenVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    await this.ipfs.ensureOnline();\n    return Promise.all(\n      tokenVotingProposals.map(\n        async (\n          proposal: SubgraphTokenVotingProposalListItem,\n        ): Promise<TokenVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toTokenVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toTokenVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toTokenVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toTokenVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<VotingSettings>}\n   * @memberof TokenVotingClient\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting settings\";\n    type T = { tokenVotingPlugin: SubgraphVotingSettings };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(tokenVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(tokenVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(tokenVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        tokenVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: tokenVotingPlugin.votingMode,\n    };\n  }\n\n  /**\n   * Returns the details of the token used in a specific plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<Erc20TokenDetails | null>}\n   * @memberof TokenVotingClient\n   */\n  public async getToken(\n    pluginAddress: string,\n  ): Promise<Erc20TokenDetails | Erc721TokenDetails | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingPlugin;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting token\";\n    type T = {\n      tokenVotingPlugin: { token: SubgraphErc20Token | SubgraphErc721Token };\n    };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    let token: SubgraphErc20Token | SubgraphErc721Token =\n      tokenVotingPlugin.token;\n    // type erc20\n    if (token.__typename === SubgraphContractType.ERC20) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        type: TokenType.ERC20,\n      };\n      // type erc721\n    } else if (token.__typename === SubgraphContractType.ERC721) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        type: TokenType.ERC721,\n      };\n    }\n    return null;\n  }\n}\n", "import {\n  IERC20MintableUpgradeable__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  IERC20MintableUpgradeable__factory.createInterface().getFunction(\"mint\")\n    .format(\"minimal\"),\n];\n", "import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  IInterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { IMintTokenParams, ITokenVotingClientDecoding } from \"../../interfaces\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport { mintTokenParamsFromContract } from \"../utils\";\n\n/**\n * Decoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientDecoding extends ClientCore\n  implements ITokenVotingClientDecoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(TokenVotingClientDecoding.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof TokenVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes the mint token params from an encoded mint token action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {IMintTokenParams}\n   * @memberof TokenVotingClientDecoding\n   */\n  public mintTokenAction(data: Uint8Array): IMintTokenParams {\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"mint\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return mintTokenParamsFromContract(result);\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(IInterfaceParams | null)}\n   * @memberof TokenVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): IInterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n", "import { TokenVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  GasFeeEstimation,\n  CreateMajorityVotingProposalParams,\n  IVoteProposalParams,\n} from \"../../../client-common\";\nimport { ITokenVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  NoProviderError,\n  NoSignerError,\n} from \"@aragon/sdk-common\";\n/**\n * Estimation module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEstimation extends ClientCore\n  implements ITokenVotingClientEstimation {\n  constructor(context: ContextPlugin) {\n    super(context);\n    Object.freeze(TokenVotingClientEstimation.prototype);\n    Object.freeze(this);\n  }\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await tokenVotingContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {IVoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async voteProposal(\n    params: IVoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await tokenVotingContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing a TokenVoting proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await tokenVotingContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n", "import {\n  ITokenVotingClient,\n  ITokenVotingClientDecoding,\n  ITokenVotingClientEncoding,\n  ITokenVotingClientEstimation,\n  ITokenVotingClientMethods,\n  ITokenVotingPluginInstall,\n} from \"./interfaces\";\nimport { TokenVotingClientMethods } from \"./internal/client/methods\";\nimport { TokenVotingClientEncoding } from \"./internal/client/encoding\";\nimport { TokenVotingClientDecoding } from \"./internal/client/decoding\";\nimport { TokenVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  SupportedNetworks,\n  ClientCore,\n  ContextPlugin,\n  IPluginInstallItem,\n} from \"../client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact a Token Voting plugin installed in a DAO\n */\nexport class TokenVotingClient extends ClientCore\n  implements ITokenVotingClient {\n  private privateMethods: ITokenVotingClientMethods;\n  private privateEncoding: ITokenVotingClientEncoding;\n  private privateDecoding: ITokenVotingClientDecoding;\n  private privateEstimation: ITokenVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.privateMethods = new TokenVotingClientMethods(context);\n    this.privateEncoding = new TokenVotingClientEncoding(context);\n    this.privateDecoding = new TokenVotingClientDecoding(context);\n    this.privateEstimation = new TokenVotingClientEstimation(context);\n    Object.freeze(TokenVotingClient.prototype);\n    Object.freeze(this);\n  }\n  get methods(): ITokenVotingClientMethods {\n    return this.privateMethods;\n  }\n  get encoding(): ITokenVotingClientEncoding {\n    return this.privateEncoding;\n  }\n  get decoding(): ITokenVotingClientDecoding {\n    return this.privateDecoding;\n  }\n  get estimation(): ITokenVotingClientEstimation {\n    return this.privateEstimation;\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {ITokenVotingPluginInstall} params\n     * @param {SupportedNetworks} [network=\"mainnet\"]\n     * @return {*}  {IPluginInstallItem}\n     * @memberof TokenVotingClient\n     */\n    getPluginInstallItem: (\n      params: ITokenVotingPluginInstall,\n      network: SupportedNetworks = \"mainnet\",\n    ): IPluginInstallItem =>\n      TokenVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n", "// This file contains the definitions of the AddressList DAO client\n\nimport {\n  CreateProposalBaseParams,\n  DaoAction,\n  ExecuteProposalStepValue,\n  GasFeeEstimation,\n  IClientCore,\n  IInterfaceParams,\n  IProposalQueryParams,\n  PrepareInstallationStepValue,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalMetadataSummary,\n  ProposalStatus,\n  SubgraphAction,\n  VersionTag,\n} from \"../client-common\";\n\n// Multisig\nexport interface IMultisigClientMethods extends IClientCore {\n  createProposal: (\n    params: CreateMultisigProposalParams,\n  ) => AsyncGenerator<ProposalCreationStepValue>;\n  pinMetadata: (params: ProposalMetadata) => Promise<string>;\n  approveProposal: (\n    params: ApproveMultisigProposalParams,\n  ) => AsyncGenerator<ApproveProposalStepValue>;\n  executeProposal: (\n    proposalId: string,\n  ) => AsyncGenerator<ExecuteProposalStepValue>;\n  prepareInstallation: (\n    params: MultisigPluginPrepareInstallationParams,\n  ) => AsyncGenerator<PrepareInstallationStepValue>;\n  canApprove: (params: CanApproveParams) => Promise<boolean>;\n  canExecute: (proposalId: string) => Promise<boolean>;\n  getVotingSettings: (\n    addressOrEns: string,\n  ) => Promise<MultisigVotingSettings>;\n  getMembers: (\n    addressOrEns: string,\n  ) => Promise<string[]>;\n  getProposal: (proposalId: string) => Promise<MultisigProposal | null>;\n  getProposals: (\n    params: IProposalQueryParams,\n  ) => Promise<MultisigProposalListItem[]>;\n}\n\nexport interface IMultisigClientEncoding extends IClientCore {\n  addAddressesAction: (params: AddAddressesParams) => DaoAction;\n  removeAddressesAction: (params: RemoveAddressesParams) => DaoAction;\n  updateMultisigVotingSettings: (\n    params: UpdateMultisigVotingSettingsParams,\n  ) => DaoAction;\n}\nexport interface IMultisigClientDecoding extends IClientCore {\n  addAddressesAction: (data: Uint8Array) => string[];\n  removeAddressesAction: (data: Uint8Array) => string[];\n  updateMultisigVotingSettings: (data: Uint8Array) => MultisigVotingSettings;\n  findInterface: (data: Uint8Array) => IInterfaceParams | null;\n}\nexport interface IMultisigClientEstimation extends IClientCore {\n  createProposal: (\n    params: CreateMultisigProposalParams,\n  ) => Promise<GasFeeEstimation>;\n  approveProposal: (\n    params: ApproveMultisigProposalParams,\n  ) => Promise<GasFeeEstimation>;\n  executeProposal: (\n    proposalId: string,\n  ) => Promise<GasFeeEstimation>;\n}\n\n/** Defines the shape of the AddressList client class */\nexport interface IMultisigClient {\n  methods: IMultisigClientMethods;\n  encoding: IMultisigClientEncoding;\n  decoding: IMultisigClientDecoding;\n  estimation: IMultisigClientEstimation;\n}\n\nexport type MultisigPluginInstallParams = MultisigPluginSettings;\n\nexport type MultisigPluginPrepareInstallationParams = {\n  settings: MultisigPluginSettings;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\nexport type MultisigVotingSettings = {\n  minApprovals: number;\n  onlyListed: boolean;\n};\n\nexport type MultisigPluginSettings = {\n  members: string[];\n  votingSettings: MultisigVotingSettings;\n};\n\nexport type UpdateAddressesParams = {\n  pluginAddress: string;\n  members: string[];\n};\nexport type RemoveAddressesParams = UpdateAddressesParams;\nexport type AddAddressesParams = UpdateAddressesParams;\n\nexport type UpdateMultisigVotingSettingsParams = {\n  pluginAddress: string;\n  votingSettings: MultisigVotingSettings;\n};\n\nexport type CreateMultisigProposalParams = CreateProposalBaseParams & {\n  approve?: boolean;\n  tryExecution?: boolean;\n  startDate?: Date;\n  /** Date at which the proposal will expire if not approved */\n  endDate?: Date;\n};\n\nexport type ApproveMultisigProposalParams = {\n  proposalId: string;\n  tryExecution: boolean;\n};\n\nexport type CanApproveParams = {\n  proposalId: string;\n  approverAddressOrEns: string;\n};\n\nexport enum ApproveProposalStep {\n  APPROVING = \"approving\",\n  DONE = \"done\",\n}\n\nexport type ApproveProposalStepValue =\n  | { key: ApproveProposalStep.APPROVING; txHash: string }\n  | { key: ApproveProposalStep.DONE };\n\ntype MultisigProposalBase = {\n  id: string;\n  settings: MultisigVotingSettings;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  status: ProposalStatus;\n  startDate: Date;\n  endDate: Date;\n  approvals: string[];\n};\n\nexport type MultisigProposalListItem = MultisigProposalBase & {\n  metadata: ProposalMetadataSummary;\n};\n\nexport type MultisigProposal = MultisigProposalBase & {\n  creationDate: Date;\n  creationBlockNumber: number;\n  executionDate: Date | null;\n  executionBlockNumber: number | null;\n  executionTxHash: string | null;\n  metadata: ProposalMetadata;\n  actions: DaoAction[];\n};\n\ntype SubgraphProposalBase = {\n  id: string;\n  dao: {\n    id: string;\n    subdomain: string;\n  };\n  creator: string;\n  metadata: string;\n  executed: boolean;\n  createdAt: string;\n  startDate: string;\n  endDate: string;\n};\n\nexport type SubgraphMultisigProposalBase = SubgraphProposalBase & {\n  plugin: SubgraphMultisigVotingSettings;\n  minApprovals: number;\n  executable: boolean;\n  approvers: { id: string }[];\n  // TODO change on subgraph fix\n  // approvers: SubgraphMultisigApproversListItem[];\n};\n\nexport type SubgraphMultisigProposalListItem = SubgraphMultisigProposalBase;\nexport type SubgraphMultisigProposal = SubgraphMultisigProposalBase & {\n  actions: SubgraphAction[];\n  executionTxHash: string;\n  executionDate: string;\n  executionBlockNumber: string;\n  creationBlockNumber: string;\n};\n\nexport type SubgraphMultisigApproversListItem = {\n  approver: { id: string };\n};\n\nexport type SubgraphMultisigVotingSettings = {\n  minApprovals: string;\n  onlyListed: boolean;\n};\n\n", "import { gql } from \"graphql-request\";\n\nexport const QueryMultisigProposal = gql`\nquery MultisigProposal($proposalId: ID!) {\n  multisigProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    startDate\n    endDate\n    actions {\n      to\n      value\n      data\n    }\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    plugin {\n      onlyListed\n    }\n    minApprovals\n    executionTxHash\n    executed\n    executable\n    approvers{\n      id\n    }\n  }\n}\n`;\nexport const QueryMultisigProposals = gql`\nquery MultisigProposals($where: MultisigProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: MultisigProposal_orderBy!) {\n  multisigProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    executed\n    executable\n    approvals\n    startDate\n    endDate\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    approvers {\n      id\n    }\n    minApprovals\n    plugin{\n      onlyListed\n    }\n  }\n}\n`;\n", "import { gql } from \"graphql-request\";\n\nexport const QueryMultisigVotingSettings = gql`\nquery MultisigVotingSettings($address: ID!) {\n    multisigPlugin(id: $address){\n        minApprovals\n        onlyListed\n    }\n}\n`;\n", "import { getCompactProposalId, hexToBytes } from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n} from \"../../client-common\";\nimport {\n  MultisigProposal,\n  MultisigProposalListItem,\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n} from \"../interfaces\";\n\nexport function toMultisigProposal(\n  proposal: SubgraphMultisigProposal,\n  metadata: ProposalMetadata,\n): MultisigProposal {\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    creationBlockNumber: parseInt(proposal.creationBlockNumber) || 0,\n    creationDate,\n    startDate,\n    endDate,\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n  };\n}\nexport function toMultisigProposalListItem(\n  proposal: SubgraphMultisigProposalListItem,\n  metadata: ProposalMetadata,\n): MultisigProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n  };\n}\n", "import { gql } from \"graphql-request\";\n\nexport const QueryMultisigMembers = gql`\nquery MultisigMembers($address: ID!) {\n    multisigPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n", "import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  DaoAction,\n  IPluginInstallItem,\n  SupportedNetworks,\n  SupportedNetworksArray,\n} from \"../../../client-common\";\nimport {\n  AddAddressesParams,\n  IMultisigClientEncoding,\n  MultisigPluginInstallParams,\n  RemoveAddressesParams,\n  UpdateMultisigVotingSettingsParams,\n} from \"../../interfaces\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\n\n/**\n * Encoding module for the SDK Multisig Client\n */\nexport class MultisigClientEncoding extends ClientCore\n  implements IMultisigClientEncoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n  }\n\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {MultisigPluginInstallParams} params\n   * @param {SupportedNetworks} network\n   *\n   * @return {*}  {IPluginInstallItem}\n   * @memberof MultisigClientEncoding\n   */\n  static getPluginInstallItem(\n    params: MultisigPluginInstallParams,\n    network: SupportedNetworks,\n  ): IPluginInstallItem {\n    if (!SupportedNetworksArray.includes(network)) {\n      throw new UnsupportedNetworkError(network);\n    }\n    const hexBytes = defaultAbiCoder.encode(\n      // members, [onlyListed, minApprovals]\n      [\n        \"address[]\",\n        \"tuple(bool, uint16)\",\n      ],\n      [\n        params.members,\n        [\n          params.votingSettings.onlyListed,\n          params.votingSettings.minApprovals,\n        ],\n      ],\n    );\n    return {\n      id: LIVE_CONTRACTS[network].multisigRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {AddAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public addAddressesAction(\n    params: AddAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"addAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {RemoveAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public removeAddressesAction(\n    params: RemoveAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal updates multisig settings\n   *\n   * @param {UpdateMultisigVotingSettingsParams} params\n   * @return {*}  {DaoAction}\n   * @memberof MultisigClientEncoding\n   */\n  public updateMultisigVotingSettings(\n    params: UpdateMultisigVotingSettingsParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"updateMultisigSettings\",\n      [params.votingSettings],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n", "import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  NoSignerError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ApproveMultisigProposalParams,\n  ApproveProposalStep,\n  ApproveProposalStepValue,\n  CanApproveParams,\n  CreateMultisigProposalParams,\n  IMultisigClientMethods,\n  MultisigPluginPrepareInstallationParams,\n  MultisigProposal,\n  MultisigProposalListItem,\n  MultisigVotingSettings,\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n  SubgraphMultisigVotingSettings,\n} from \"../../interfaces\";\nimport {\n  ClientCore,\n  computeProposalStatusFilter,\n  ContextPlugin,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  IProposalQueryParams,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  SupportedNetworks,\n  SupportedNetworksArray,\n  VersionTag,\n} from \"../../../client-common\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport {\n  Multisig__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  QueryMultisigProposal,\n  QueryMultisigProposals,\n  QueryMultisigVotingSettings,\n} from \"../graphql-queries\";\nimport { toMultisigProposal, toMultisigProposalListItem } from \"../utils\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { QueryMultisigMembers } from \"../graphql-queries/members\";\nimport { MultisigClientEncoding } from \"./encoding\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class MultisigClientMethods extends ClientCore\n  implements IMultisigClientMethods {\n  constructor(context: ContextPlugin) {\n    super(context);\n  }\n  /**\n   * Creates a new proposal on the given multisig plugin contract\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *createProposal(\n    params: CreateMultisigProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await multisigContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || false,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const multisigContractInterface = Multisig__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      multisigContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = multisigContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof MultisigClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch {\n      throw new IpfsPinError();\n    }\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ApproveProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): AsyncGenerator<ApproveProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.approve(\n      id,\n      params.tryExecution,\n    );\n\n    yield {\n      key: ApproveProposalStep.APPROVING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ApproveProposalStep.DONE,\n    };\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteMultisigProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.execute(\n      id,\n    );\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a multisig plugin in a given dao\n   *\n   * @param {MultisigPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: MultisigPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    const network = await signer.provider.getNetwork();\n    const networkName = network.name as SupportedNetworks;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const multisigRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].multisigRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await multisigRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].multisigSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const multisigPluginInstallItem = MultisigClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n          versionTag: versionTag!,\n        },\n        data: multisigPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n  /**\n   * Checks whether the current proposal can be approved by the given address\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canApprove(\n    params: CanApproveParams,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    if (!isAddress(params.approverAddressOrEns)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canApprove(id, params.approverAddressOrEns);\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canExecute(id);\n  }\n  /**\n   * Returns the voting settings\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<MultisigVotingSettings>}\n   * @memberof MultisigClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<MultisigVotingSettings> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig settings\";\n    type T = { multisigPlugin: SubgraphMultisigVotingSettings };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return {\n      onlyListed: multisigPlugin.onlyListed,\n      minApprovals: parseInt(multisigPlugin.minApprovals),\n    };\n  }\n  /**\n   * returns the members of the multisig\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<string[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getMembers(\n    pluginAddress: string,\n  ): Promise<string[]> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig members\";\n    type T = { multisigPlugin: SubgraphMembers };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return multisigPlugin.members.map((member) => member.address);\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<MultisigProposal | null>)}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<MultisigProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryMultisigProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"Multisig proposal\";\n    type T = { multisigProposal: SubgraphMultisigProposal };\n    const { multisigProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!multisigProposal) {\n      return null;\n    } else if (!multisigProposal.metadata) {\n      return toMultisigProposal(\n        multisigProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(multisigProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toMultisigProposal(multisigProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toMultisigProposal(\n          multisigProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toMultisigProposal(\n        multisigProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {IProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<MultisigProposalListItem[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: IProposalQueryParams): Promise<MultisigProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryMultisigProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"Multisig proposals\";\n    type T = { multisigProposals: SubgraphMultisigProposalListItem[] };\n    const { multisigProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    await this.ipfs.ensureOnline();\n    return Promise.all(\n      multisigProposals.map(\n        async (\n          proposal: SubgraphMultisigProposalListItem,\n        ): Promise<MultisigProposalListItem> => {\n          if (!proposal.metadata) {\n            return toMultisigProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          // format in the metadata field\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toMultisigProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toMultisigProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toMultisigProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n}\n", "// @ts-ignore\n// todo fix new contracts-ethers\nimport {\n  Multisig__factory,\n} from \"@aragon/osx-ethers\";\n\n// TODO update with function names\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  Multisig__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"updateMultisigSettings\",\n  ).format(\"minimal\"),\n];\n", "import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  getFunctionFragment,\n  IInterfaceParams,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport {\n  IMultisigClientDecoding,\n  MultisigVotingSettings,\n} from \"../../interfaces\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class MultisigClientDecoding extends ClientCore\n  implements IMultisigClientDecoding {\n  constructor(context: ContextPlugin) {\n    super(context);\n  }\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public addAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n\n    const expectedfunction = multisigInterface.getFunction(\"addAddresses\");\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public removeAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of min approvals from an encoded update min approval action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {MultisigVotingSettings}\n   * @memberof MultisigClientDecoding\n   */\n  public updateMultisigVotingSettings(\n    data: Uint8Array,\n  ): MultisigVotingSettings {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"updateMultisigSettings\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return {\n      minApprovals: result[0].minApprovals,\n      onlyListed: result[0].onlyListed,\n    };\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(IInterfaceParams | null)}\n   * @memberof MultisigClientDecoding\n   */\n  public findInterface(data: Uint8Array): IInterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n", "import { Multisig__factory } from \"@aragon/osx-ethers\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  NoProviderError,\n  NoSignerError,\n} from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  GasFeeEstimation,\n} from \"../../../client-common\";\nimport {\n  ApproveMultisigProposalParams,\n  CreateMultisigProposalParams,\n  IMultisigClientEstimation,\n} from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n/**\n * Estimation module the SDK Address List Client\n */\nexport class MultisigClientEstimation extends ClientCore\n  implements IMultisigClientEstimation {\n  constructor(context: ContextPlugin) {\n    super(context);\n  }\n\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async createProposal(\n    params: CreateMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimation = await multisigContract.estimateGas.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || true,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of approving a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.approve(\n      id,\n      params.tryExecution,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of executing a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (!signer) {\n      throw new NoSignerError();\n    } else if (!signer.provider) {\n      throw new NoProviderError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n", "import {\n  IMultisigClient,\n  IMultisigClientDecoding,\n  IMultisigClientEncoding,\n  IMultisigClientEstimation,\n  IMultisigClientMethods,\n  MultisigPluginInstallParams,\n} from \"./interfaces\";\nimport { MultisigClientMethods } from \"./internal/client/methods\";\nimport { MultisigClientEncoding } from \"./internal/client/encoding\";\nimport { MultisigClientDecoding } from \"./internal/client/decoding\";\nimport { MultisigClientEstimation } from \"./internal/client/estimation\";\nimport {\n  SupportedNetworks,\n  ClientCore,\n  ContextPlugin,\n  IPluginInstallItem,\n} from \"../client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class MultisigClient extends ClientCore implements IMultisigClient {\n  public methods: IMultisigClientMethods;\n  public encoding: IMultisigClientEncoding;\n  public decoding: IMultisigClientDecoding;\n  public estimation: IMultisigClientEstimation;\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new MultisigClientMethods(context);\n    this.encoding = new MultisigClientEncoding(context);\n    this.decoding = new MultisigClientDecoding(context);\n    this.estimation = new MultisigClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {MultisigPluginInstallParams} params\n     * @param {SupportedNetworks} [network=\"mainnet\"]\n     * @return {*}  {IPluginInstallItem}\n     * @memberof MultisigClient\n     */\n    \n    getPluginInstallItem: (\n      params: MultisigPluginInstallParams,\n      network: SupportedNetworks = \"mainnet\",\n    ): IPluginInstallItem =>\n      MultisigClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n"],
  "mappings": "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",
  "names": ["self", "exports", "Headers", "fetch", "GraphQLError", "GraphQLError", "OperationTypeNode", "DirectiveLocation", "Kind", "indent", "TokenKind", "instanceOf", "parse", "index", "i", "result", "index", "ClientError", "GraphQLWebSocketMessage", "id", "GraphQLWebSocketClient", "_a", "e", "index", "fetch", "GraphQLClient", "_a", "variables", "data", "gql", "url", "options", "Promise", "resolve", "reject", "request", "XMLHttpRequest", "keys", "all", "headers", "response", "ok", "status", "statusText", "responseURL", "text", "responseText", "json", "then", "JSON", "parse", "blob", "Blob", "clone", "entries", "get", "n", "toLowerCase", "has", "i", "open", "method", "onload", "getAllResponseHeaders", "replace", "m", "key", "value", "push", "onerror", "withCredentials", "credentials", "setRequestHeader", "send", "body", "require_browser", "lib_exports", "init_lib", "lib_exports", "keccak256", "sha256", "init_lib", "version", "LogLevel", "ErrorCode", "Logger", "version", "error", "ErrorCode", "version", "logger", "Logger", "version", "isBytes", "arrayify", "logger", "isHexString", "isHexString", "hexlify", "logger", "isBytes", "hexZeroPad", "hexlify", "isHexString", "logger", "version", "_BN", "logger", "Logger", "version", "BigNumber", "isHexString", "isBytes", "hexlify", "logger", "Logger", "version", "_constructorGuard", "BigNumber", "throwFault", "FixedNumber", "hexZeroPad", "arrayify", "isBytes", "NegativeOne", "BigNumber", "Zero", "version", "_permanentCensorErrors", "_censorErrors", "LogLevels", "_logLevel", "_globalLogger", "_checkNormalize", "_normalizeError", "LogLevel", "ErrorCode", "HEX", "Logger", "version", "LogLevels", "_logLevel", "_censorErrors", "error", "_normalizeError", "_globalLogger", "_permanentCensorErrors", "ErrorCode", "LogLevel", "version", "logger", "Logger", "version", "isHexable", "addSlice", "isInteger", "isBytes", "arrayify", "logger", "addSlice", "isHexable", "isHexString", "isHexString", "HexCharacters", "hexlify", "logger", "isHexable", "isBytes", "hexZeroPad", "hexlify", "isHexString", "logger", "keccak256", "sha3", "arrayify", "import_bn", "version", "BN", "_BN", "logger", "Logger", "version", "_constructorGuard", "MAX_SAFE", "isBigNumberish", "BigNumber", "isHexString", "isBytes", "_warnedToStringRadix", "toBigNumber", "toBN", "throwFault", "toHex", "hexlify", "logger", "Logger", "version", "_constructorGuard", "Zero", "BigNumber", "NegativeOne", "throwFault", "zeros", "getMultiplier", "formatFixed", "parseFixed", "FixedFormat", "FixedNumber", "ONE", "BUMP", "hexZeroPad", "isBigNumberish", "arrayify", "isBytes", "NegativeOne", "BigNumber", "Zero", "One", "Two", "WeiPerEther", "MaxUint256", "MinInt256", "MaxInt256", "version", "logger", "Logger", "version", "UnicodeNormalizationForm", "Utf8ErrorReason", "logger", "Utf8ErrorReason", "Utf8ErrorFuncs", "arrayify", "toUtf8Bytes", "UnicodeNormalizationForm", "toUtf8String", "Network", "request", "config", "path", "method", "params", "body", "signal", "url", "headers", "endpoint", "URL", "Object", "entries", "key", "value", "searchParams", "set", "String", "fetch", "href", "response", "ok", "assign", "Error", "status", "statusText", "json", "stream", "res", "msg", "streamedBytes", "error", "reader", "getReader", "read", "result", "done", "cancel", "releaseLock", "Helpers", "getName", "file", "name", "handleError", "streamToUInt8Array", "chunks", "byteCount", "chunk", "push", "length", "mergedArray", "Uint8Array", "lastIndex", "toVersionResponse", "data", "version", "Version", "commit", "Commit", "repo", "Repo", "system", "System", "golang", "Golang", "toNodeInfoResponse", "id", "ID", "addresses", "Addresses", "agentVersion", "AgentVersion", "protocolVersion", "ProtocolVersion", "protocols", "Protocols", "publicKey", "PublicKey", "toAddResponse", "bytes", "Bytes", "hash", "Hash", "Name", "size", "Size", "toPinResponse", "pins", "Pins", "progress", "Progress", "getVersionParams", "options", "encodeParams", "number", "all", "getNodeInfoParams", "arg", "format", "peeridBase", "getAddParams", "quiet", "quieter", "silent", "trickle", "onlyHash", "wrapWithDirectory", "chunker", "pin", "rawLeaves", "nocopy", "noCopy", "fscache", "fsCache", "cidVersion", "inline", "inlineLimit", "getCatParams", "offset", "getPinOptions", "recursive", "getUnpinOptions", "fromEntries", "filter", "v", "API", "cluster", "then", "e", "nodeInfo", "add", "File", "Blob", "FormData", "append", "cat", "unpin", "Client", "newUrl", "pathname", "endsWith", "import_bn", "version", "BN", "_BN", "logger", "Logger", "version", "_constructorGuard", "MAX_SAFE", "isBigNumberish", "BigNumber", "isHexString", "isBytes", "_warnedToStringRadix", "toBigNumber", "toBN", "throwFault", "toHex", "hexlify", "_base36To16", "logger", "Logger", "version", "_constructorGuard", "Zero", "BigNumber", "NegativeOne", "throwFault", "zeros", "getMultiplier", "formatFixed", "parseFixed", "FixedFormat", "FixedNumber", "ONE", "BUMP", "hexZeroPad", "isBigNumberish", "arrayify", "isBytes", "version", "logger", "Logger", "version", "version", "logger", "Logger", "version", "isHexString", "arrayify", "keccak256", "block", "getAddress", "logger", "_base36To16", "isAddress", "erc20ContractAbi", "name", "inputs", "type", "indexed", "anonymous", "outputs", "stateMutability", "QueryDao", "gql", "_templateObject", "_taggedTemplateLiteralLoose", "QueryDaos", "_templateObject2", "QueryTokenBalances", "QueryTokenTransfers", "Permissions", "UPGRADE_PERMISSION", "SET_METADATA_PERMISSION", "EXECUTE_PERMISSION", "WITHDRAW_PERMISSION", "SET_SIGNATURE_VALIDATOR_PERMISSION", "SET_TRUSTED_FORWARDER_PERMISSION", "ROOT_PERMISSION", "CREATE_VERSION_PERMISSION", "REGISTER_PERMISSION", "REGISTER_DAO_PERMISSION", "REGISTER_ENS_SUBDOMAIN_PERMISSION", "MINT_PERMISSION", "MERKLE_MINT_PERMISSION", "MODIFY_ALLOWLIST_PERMISSION", "SET_CONFIGURATION_PERMISSION", "PermissionIds", "Object", "entries", "reduce", "acc", "_ref", "_extends2", "k", "v", "_extends", "keccak256", "toUtf8Bytes", "freeze", "DaoCreationSteps", "DaoDepositSteps", "TransferType", "TokenType", "TransferSortBy", "AssetBalanceSortBy", "DaoSortBy", "SubgraphPluginTypeName", "SubgraphPluginTypeMap", "Map", "TOKEN_VOTING", "ADDRESS_LIST", "ADMIN", "MULTISIG", "SubgraphTransferType", "SubgraphTransferTypeMap", "DEPOSIT", "WITHDRAW", "ProposalStatus", "VoteValues", "VotingMode", "SubgraphVoteValues", "SubgraphVoteValuesMap", "YES", "NO", "ABSTAIN", "ProposalSortBy", "ProposalCreationSteps", "VoteProposalStep", "ExecuteProposalStep", "PrepareInstallationStep", "PermissionOperationType", "SupportedNetworksArray", "DaoRole", "SortDirection", "daoFactoryAddressMap", "daoRegistryAddressMap", "pluginRepoRegistryAddressMap", "gasFeeEstimationFactorMap", "providersMap", "providerIdxMap", "signerMap", "Web3Module", "context", "set", "web3Providers", "signer", "useSigner", "daoFactoryAddress", "daoRegistryAddress", "pluginRepoRegistryAddress", "gasFeeEstimationFactor", "prototype", "_proto", "Error", "shiftProvider", "providers", "length", "providerIdx", "getSigner", "getConnectedSigner", "provider", "getProvider", "connect", "isUp", "Promise", "reject", "getNetwork", "then", "ensureOnline", "_ensureOnline", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "i", "wrap", "_callee$", "_context", "prev", "next", "abrupt", "sent", "stop", "apply", "arguments", "attachContract", "address", "abi", "contract", "Contract", "Wallet", "getMaxFeePerGas", "getFeeData", "feeData", "maxFeePerGas", "toBigInt", "getApproximateGasFee", "estimatedFee", "max", "factor", "_this", "PRECISION_FACTOR_BASE", "average", "BigInt", "Math", "trunc", "getDaoFactoryAddress", "NoDaoFactory", "getPluginRepoRegistryAddress", "NoPluginRepoRegistry", "getDaoRegistry", "NoDaoRegistry", "_createClass", "key", "get", "clientsMap", "clientsIdxMap", "IPFSModule", "_context$ipfs", "ipfs", "floor", "random", "getClient", "clients", "clientsIdx", "shiftClient", "_this$clients", "_this$clients2", "resolve", "nodeInfo", "_this$clients3", "getOnlineClient", "add", "_add", "_callee2", "input", "_callee2$", "_context2", "client", "res", "hash", "e", "message", "_x", "pin", "_pin", "_callee3", "_callee3$", "_context3", "_x2", "fetchBytes", "cid", "cat", "fetchString", "bytes", "TextDecoder", "decode", "QueryStatus", "GraphqlModule", "_context$graphql", "graphql", "clientIdx", "ClientNotInitializedError", "NoNodesAvailableError", "request", "_res$_meta", "_meta", "deployment", "query", "params", "retries", "runAndRetry", "func", "onFail", "ClientError", "response", "status", "GraphQLError", "shouldRetry", "web3Map", "ipfsMap", "graphqlMap", "ClientCore", "DEFAULT_GAS_FEE_ESTIMATION_FACTOR", "supportedProtocols", "process", "_process$env", "env", "TESTING", "push", "defaultState", "network", "Context", "assign", "setFull", "contextParams", "_contextParams$ipfsNo", "ipfsNodes", "_contextParams$graphq", "graphqlNodes", "state", "resolveWeb3Providers", "resolveGasFeeEstimationFactor", "resolveIpfs", "resolveGraphql", "toString", "activeContractsList", "DAOFactory", "_contextParams$ipfsNo2", "_contextParams$graphq2", "setDefault", "getDefault", "endpoints", "Array", "isArray", "map", "item", "url", "URL", "includes", "protocol", "UnsupportedProtocolError", "JsonRpcProvider", "href", "configs", "forEach", "config", "IpfsClient", "headers", "endpoint", "GraphQLClient", "ContextPlugin", "_Context", "_inheritsLoose", "call", "fromContext", "ctx", "ctxPlugin", "unwrapProposalParams", "metadataUri", "_params$actions", "actions", "startDate", "getTime", "endDate", "_params$executeOnPass", "executeOnPass", "_params$creatorVote", "creatorVote", "computeProposalStatus", "proposal", "now", "Date", "parseInt", "PENDING", "executed", "EXECUTED", "ACTIVE", "executable", "SUCCEEDED", "DEFEATED", "computeProposalStatusFilter", "where", "round", "startDate_gte", "startDate_lt", "endDate_gte", "endDate_lt", "findLog", "receipt", "iface", "eventName", "logs", "find", "log", "topics", "id", "getEvent", "format", "votingModeToContracts", "votingMode", "STANDARD", "EARLY_EXECUTION", "VOTE_REPLACEMENT", "InvalidVotingModeError", "votingModeFromContracts", "decodeUpdatePluginSettingsAction", "data", "votingInterface", "MajorityVotingBase__factory", "createInterface", "hexBytes", "bytesToHex", "expectedfunction", "getFunction", "result", "decodeFunctionData", "pluginSettingsFromContract", "encodeUpdateVotingSettingsAction", "args", "votingSettingsToContract", "encodeFunctionData", "hexToBytes", "supportThreshold", "decodeRatio", "minParticipation", "minDuration", "toNumber", "minProposerVotingPower", "BigNumber", "from", "encodeRatio", "getFunctionFragment", "availableFunctions", "Interface", "substring", "UNSUPPORTED_PROPOSAL_METADATA_LINK", "title", "summary", "description", "resources", "EMPTY_PROPOSAL_METADATA_LINK", "UNAVAILABLE_PROPOSAL_METADATA", "LIVE_CONTRACTS", "mainnet", "daoFactory", "pluginSetupProcessor", "PluginRepoFactory", "multisigRepo", "adminRepo", "addresslistVotingRepo", "tokenVotingRepo", "multisigSetup", "MultisigSetup", "adminSetup", "AdminSetup", "addresslistVotingSetup", "AddresslistVotingSetup", "tokenVotingSetup", "TokenVotingSetup", "goerli", "PluginSetupProcessor", "maticmum", "mumbai", "ensRegistry", "ENSRegistry", "matic", "polygon", "unwrapDepositParams", "daoAddressOrEns", "amount", "_params$tokenAddress", "tokenAddress", "AddressZero", "toDaoDetails", "dao", "metadata", "ensDomain", "subdomain", "avatar", "undefined", "links", "creationDate", "createdAt", "plugins", "plugin", "instanceAddress", "__typename", "version", "toDaoListItem", "toAssetBalance", "balance", "updateDate", "lastUpdated", "NATIVE", "ERC721", "token", "symbol", "ERC20", "decimals", "toTokenTransfer", "transfer", "_transfer$proposal", "tokenType", "transactionId", "txHash", "to", "proposalId", "_transfer$proposal2", "_transfer$proposal3", "applyInstallatonParamsToContract", "pluginAddress", "pluginSetupRef", "pluginSetupRepo", "pluginRepo", "versionTag", "helpersHash", "defaultAbiCoder", "encode", "helpers", "permissions", "applyInstallatonParamsFromContract", "permission", "permissionId", "permissionParamsToContract", "who", "permissionWithConditionParamsToContract", "concat", "condition", "permissionParamsFromContract", "_Object$keys$find", "keys", "replace", "permissionParamsWitConditionFromContract", "withdrawParamsFromContract", "_value", "tokenStandard", "recipientAddressOrEns", "AVAILABLE_FUNCTION_SIGNATURES", "DAO__factory", "UNSUPPORTED_DAO_METADATA_LINK", "EMPTY_DAO_METADATA_LINK", "UNAVAILABLE_DAO_METADATA", "ClientMethods", "_ClientCore", "_this4", "_assertThisInitialized", "createDao", "web3", "NoSignerError", "NoProviderError", "ensSubdomain", "match", "daoFactoryInstance", "DAOFactory__factory", "pluginInstallationData", "_iterator", "_createForOfIteratorHelperLoose", "_step", "done", "value", "repo", "PluginRepo__factory", "_awaitAsyncGenerator", "latestRelease", "currentRelease", "latestVersion", "tag", "pluginSetupProcessorAddr", "PluginSetupProcessor__factory", "execPermissionFound", "daoBase", "daoBaseAddr", "_i", "_pluginInstallationDa", "installData", "callStatic", "prepareInstallation", "pluginSetupProcessorResponse", "found", "EXECUTE_PERMISSION_ID", "MissingExecPermissionError", "daoURI", "daoUri", "trustedForwarder", "tx", "CREATING", "wait", "daoFactoryInterface", "DAORegistry__factory", "_receipt$logs", "pspInterface", "installedLogs", "_receipt$logs2", "filter", "parsedLog", "parseLog", "DONE", "pluginAddresses", "pinMetadata", "_pinMetadata", "JSON", "stringify", "t0", "IpfsPinError", "deposit", "_this2", "_unwrapDepositParams", "daoAddress", "reference", "delegateYield", "_asyncGeneratorDelegate", "_asyncIterator", "updateAllowance", "daoInstance", "override", "DEPOSITING", "cr", "FailedDepositError", "daoInterface", "AmountMismatchError", "_this3", "_context4", "tokenInstance", "t1", "getAddress", "t2", "t3", "t4", "allowance", "currentAllowance", "CHECKED_ALLOWANCE", "gte", "approve", "UPDATING_ALLOWANCE", "UpdateAllowanceError", "gt", "UPDATED_ALLOWANCE", "_callee4", "hasPermission", "_hasPermission", "_callee5", "_callee5$", "_context5", "Uint8Array", "getDao", "_getDao", "_callee6", "resolvedAddress", "_yield$this$graphql$r", "metadataCid", "metadataString", "_callee6$", "_context6", "isAddress", "resolveName", "InvalidAddressOrEnsError", "toLowerCase", "resolveIpfsCid", "parse", "InvalidCidError", "_x3", "getDaos", "_getDaos", "_callee8", "_this5", "_ref$limit", "limit", "_ref$skip", "skip", "_ref$direction", "direction", "_ref$sortBy", "sortBy", "_yield$this$graphql$r2", "daos", "_callee8$", "_context8", "ASC", "CREATED_AT", "all", "_ref2", "_callee7", "stringMetadata", "_callee7$", "_context7", "_x5", "_x4", "getDaoBalances", "_getDaoBalances", "_callee9", "_ref3", "_ref3$limit", "_ref3$skip", "_ref3$direction", "_ref3$sortBy", "_yield$this$graphql$r3", "tokenBalances", "_callee9$", "_context9", "LAST_UPDATED", "_x6", "getDaoTransfers", "_getDaoTransfers", "_callee10", "_ref4", "_ref4$limit", "_ref4$skip", "_ref4$direction", "_ref4$sortBy", "_yield$this$graphql$r4", "tokenTransfers", "_callee10$", "_context10", "_x7", "ClientEncoding", "applyInstallationAction", "InvalidAddressError", "grantAction", "grantWithConditionAction", "revokeAction", "withdrawAction", "_withdrawAction", "_this$web3$getSigner", "updateDaoMetadataAction", "_updateDaoMetadataAction", "_this$web3$getSigner2", "setDaoUriAction", "registerStandardCallbackAction", "interfaceId", "callbackSelector", "magicNumber", "setSignatureValidatorAction", "signatureValidator", "upgradeToAction", "implementationAddress", "upgradeToAndCallAction", "ClientEstimation", "_createDao", "gasEstimation", "estimateGas", "gasLimit", "_updateAllowance", "NoTokenAddress", "ClientDecoding", "expectedFunction", "abiObjects", "_abiObjects", "abiObject", "updateDaoMetadataRawAction", "toUtf8String", "ipfsCid", "findInterface", "functionName", "_unused2", "Client", "privateMethods", "privateEncoding", "privateDecoding", "privateEstimation", "QueryAddresslistVotingMembers", "QueryAddresslistVotingProposal", "QueryAddresslistVotingProposals", "QueryAddresslistVotingSettings", "toAddresslistVotingProposal", "executionDate", "getCompactProposalId", "creatorAddress", "creator", "media", "executionTxHash", "creationBlockNumber", "executionBlockNumber", "action", "yes", "no", "abstain", "settings", "minVotingPower", "totalVotingPower", "duration", "totalVotingWeight", "votes", "voters", "voter", "voteReplaced", "vote", "voteOption", "toAddresslistVotingProposalListItem", "AddresslistVotingClientEncoding", "getPluginInstallItem", "UnsupportedNetworkError", "_votingSettingsToCont", "votingSettings", "addresses", "updatePluginSettingsAction", "addMembersAction", "members", "member", "AddresslistVoting__factory", "removeMembersAction", "_iterator2", "_step2", "AddresslistVotingClientMethods", "createProposal", "addresslistContract", "_params$failSafeActio", "failSafeActions", "allowFailureMap", "boolArrayToBitmap", "startTimestamp", "_params$startDate", "endTimestamp", "_params$endDate", "addresslistContractInterface", "ProposalCreationError", "encodeProposalId", "Number", "voteProposal", "_decodeProposalId", "decodeProposalId", "VOTING", "executeProposal", "_decodeProposalId2", "execute", "EXECUTING", "networkName", "pspContract", "addresslistVotingRepoContract", "build", "release", "addresslistVotingPluginInstallItem", "PREPARING", "pspContractInterface", "preparedSetupData", "PluginInstallationPreparationError", "canVote", "_canVote", "_decodeProposalId3", "voterAddressOrEns", "canExecute", "_canExecute", "_decodeProposalId4", "getMembers", "_getMembers", "addresslistVotingPlugin", "getProposal", "_getProposal", "extendedProposalId", "addresslistVotingProposal", "isProposalId", "InvalidProposalIdError", "getExtendedProposalId", "getProposals", "_getProposals", "_callee11", "_this6", "addresslistVotingProposals", "_callee11$", "_context11", "getVotingSettings", "_getVotingSettings", "_callee12", "_callee12$", "_context12", "_x8", "AddresslistVotingClientDecoding", "_unused", "AddresslistVotingClientEstimation", "_createProposal", "estimatedGasFee", "_voteProposal", "estimation", "_executeProposal", "AddresslistVotingClient", "SubgraphTokenType", "SubgraphContractType", "QueryTokenVotingProposal", "QueryTokenVotingProposals", "QueryTokenVotingSettings", "QueryTokenVotingPlugin", "QueryTokenVotingMembers", "toTokenVotingProposal", "usedVotingWeight", "votingPower", "parseToken", "weight", "toTokenVotingProposalListItem", "mintTokenParamsToContract", "mintTokenParamsFromContract", "tokenVotingInitParamsToContract", "balances", "newToken", "useToken", "_params$useToken", "values", "subgraphToken", "TokenVotingClientEncoding", "mintTokenAction", "minterAddress", "IERC20MintableUpgradeable__factory", "TokenVotingClientMethods", "tokenVotingContract", "TokenVoting__factory", "tokenVotingContractInterface", "tokenVotingRepoContract", "tokenVotingPluginInstallItem", "tokenVotingPlugin", "tokenVotingProposal", "tokenVotingProposals", "getToken", "_getToken", "_callee13", "_yield$this$graphql$r5", "_callee13$", "_context13", "_x9", "TokenVotingClientDecoding", "TokenVotingClientEstimation", "TokenVotingClient", "ApproveProposalStep", "QueryMultisigProposal", "QueryMultisigProposals", "QueryMultisigVotingSettings", "toMultisigProposal", "onlyListed", "minApprovals", "approvals", "approvers", "approver", "slice", "toMultisigProposalListItem", "QueryMultisigMembers", "MultisigClientEncoding", "addAddressesAction", "multisigInterface", "Multisig__factory", "removeAddressesAction", "updateMultisigVotingSettings", "MultisigClientMethods", "multisigContract", "tryExecution", "multisigContractInterface", "approveProposal", "APPROVING", "multisigRepoContract", "multisigPluginInstallItem", "canApprove", "_canApprove", "approverAddressOrEns", "multisigPlugin", "multisigProposal", "multisigProposals", "MultisigClientDecoding", "MultisigClientEstimation", "_approveProposal", "MultisigClient", "methods", "encoding", "decoding"]
}
