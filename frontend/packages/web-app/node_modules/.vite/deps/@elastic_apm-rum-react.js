import {
  require_hoist_non_react_statics_cjs
} from "./chunk-UQK7RUDN.js";
import "./chunk-QSIWJDBB.js";
import {
  Route
} from "./chunk-RHNEVAO6.js";
import {
  afterFrame,
  apmBase
} from "./chunk-K5GMOEOK.js";
import "./chunk-D7QMXXHM.js";
import {
  require_react
} from "./chunk-CIKXJ334.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// ../../node_modules/@elastic/apm-rum-react/dist/es/get-with-transaction.js
var import_react = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function isReactClassComponent(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}
function getWithTransaction(apm) {
  return function withTransaction2(name, type, callback) {
    if (callback === void 0) {
      callback = function callback2() {
      };
    }
    return function(Component) {
      if (!apm.isActive()) {
        return Component;
      }
      if (!Component) {
        var loggingService = apm.serviceFactory.getService("LoggingService");
        loggingService.warn(name + " is not instrumented since component property is not provided");
        return Component;
      }
      var ApmComponent = null;
      if (!isReactClassComponent(Component) && typeof import_react.default.useEffect === "function" && typeof import_react.default.useState === "function") {
        ApmComponent = function ApmComponent2(props) {
          var _React$useState = import_react.default.useState(function() {
            var tr = apm.startTransaction(name, type, {
              managed: true,
              canReuse: true
            });
            callback(tr, props);
            return tr;
          }), _React$useState2 = _slicedToArray(_React$useState, 1), transaction = _React$useState2[0];
          import_react.default.useEffect(function() {
            afterFrame(function() {
              return transaction && transaction.detectFinish();
            });
            return function() {
              transaction && transaction.detectFinish();
            };
          }, []);
          return import_react.default.createElement(Component, _extends({
            transaction
          }, props));
        };
      } else {
        ApmComponent = function(_React$Component) {
          _inheritsLoose(ApmComponent2, _React$Component);
          function ApmComponent2(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.transaction = apm.startTransaction(name, type, {
              managed: true,
              canReuse: true
            });
            callback(_this.transaction, props);
            return _this;
          }
          var _proto = ApmComponent2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            var _this2 = this;
            afterFrame(function() {
              return _this2.transaction && _this2.transaction.detectFinish();
            });
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            if (this.transaction) {
              this.transaction.detectFinish();
            }
          };
          _proto.render = function render() {
            return import_react.default.createElement(Component, _extends({
              transaction: this.transaction
            }, this.props));
          };
          return ApmComponent2;
        }(import_react.default.Component);
      }
      ApmComponent.displayName = "withTransaction(" + (Component.displayName || Component.name) + ")";
      ApmComponent.WrappedComponent = Component;
      return (0, import_hoist_non_react_statics.default)(ApmComponent, Component);
    };
  };
}

// ../../node_modules/@elastic/apm-rum-react/dist/es/get-apm-route.js
var import_react2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function getTransactionName(name, props) {
  var _props$match = props.match, match = _props$match === void 0 ? {} : _props$match;
  if (Array.isArray(name) && match.path) {
    return match.path;
  }
  return name;
}
function getApmRoute(apm) {
  var withTransaction2 = getWithTransaction(apm);
  return function(_React$Component) {
    _inheritsLoose2(ApmRoute2, _React$Component);
    function ApmRoute2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {};
      return _this;
    }
    ApmRoute2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      var initial = prevState.apmComponent == null;
      var path = nextProps.path, component = nextProps.component;
      var pathChanged = path != prevState.path;
      if (initial || pathChanged) {
        return {
          path,
          apmComponent: withTransaction2(path, "route-change", function(transaction, props) {
            if (transaction) {
              var name = getTransactionName(path, props);
              name && (transaction.name = name);
            }
          })(component)
        };
      }
      return null;
    };
    var _proto = ApmRoute2.prototype;
    _proto.render = function render() {
      return import_react2.default.createElement(Route, _extends2({}, this.props, {
        component: this.state.apmComponent
      }));
    };
    return ApmRoute2;
  }(import_react2.default.Component);
}

// ../../node_modules/@elastic/apm-rum-react/dist/es/index.js
var withTransaction = getWithTransaction(apmBase);
var ApmRoute = getApmRoute(apmBase);
export {
  ApmRoute,
  withTransaction
};
//# sourceMappingURL=@elastic_apm-rum-react.js.map
