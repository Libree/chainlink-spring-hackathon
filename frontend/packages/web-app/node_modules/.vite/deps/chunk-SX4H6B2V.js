import {
  hexZeroPad,
  init_lib2 as init_lib
} from "./chunk-455VVZHW.js";

// ../../node_modules/@aragon/sdk-common/dist/sdk-common.esm.js
init_lib();
var XDAI_CHAIN_ID = 100;
var XDAI_PROVIDER_URI = "https://dai.poa.network";
var SOKOL_CHAIN_ID = 77;
var SOKOL_PROVIDER_URI = "https://sokol.poa.network";
var MATIC_CHAIN_ID = 137;
var MATIC_PROVIDER_URI = "https://polygon-rpc.com";
var MUMBAI_CHAIN_ID = 80001;
var MUMBAI_PROVIDER_URI = "https://rpc-mumbai.matic.today";
function isProposalId(propoosalId) {
  var regex = new RegExp(/^0x[A-Fa-f0-9]{40}_0x[A-Fa-f0-9]{1,64}$/i);
  return regex.test(propoosalId);
}
function hexToBytes(hexString) {
  if (!hexString)
    return new Uint8Array();
  else if (!/^(0x)?[0-9a-fA-F]*$/.test(hexString)) {
    throw new Error("Invalid hex string");
  } else if (hexString.length % 2 !== 0) {
    throw new Error("The hex string has an odd length");
  }
  hexString = strip0x(hexString);
  var bytes = [];
  for (var i = 0; i < hexString.length; i += 2) {
    bytes.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return Uint8Array.from(bytes);
}
function bytesToHex(buff, skip0x) {
  var bytes = [];
  for (var i = 0; i < buff.length; i++) {
    if (buff[i] >= 16)
      bytes.push(buff[i].toString(16));
    else
      bytes.push("0" + buff[i].toString(16));
  }
  if (skip0x)
    return bytes.join("");
  return "0x" + bytes.join("");
}
function bigIntToBuffer(number) {
  var hexNumber = number.toString(16);
  while (hexNumber.length < 64)
    hexNumber = "0" + hexNumber;
  return hexToBytes(hexNumber);
}
function bigIntToLeBuffer(number) {
  return bigIntToBuffer(number).reverse();
}
function bufferToBigInt(bytes) {
  bytes = Buffer.from(bytes);
  return BigInt(ensure0x(bytes.toString("hex")));
}
function bufferLeToBigInt(bytes) {
  bytes = Buffer.from(bytes);
  return bufferToBigInt(bytes.reverse());
}
function ensure0x(value) {
  return value.startsWith("0x") ? value : "0x" + value;
}
function strip0x(value) {
  return value.startsWith("0x") ? value.substring(2) : value;
}
function encodeRatio(ratio, digits) {
  if (ratio < 0 || ratio > 1) {
    throw new Error("The ratio value should range between 0 and 1");
  } else if (!Number.isInteger(digits) || digits < 1 || digits > 15) {
    throw new Error("The number of digits should range between 1 and 15");
  }
  return Math.round(ratio * Math.pow(10, digits));
}
function decodeRatio(onChainValue, digits) {
  if (!Number.isInteger(digits) || digits < 1 || digits > 15) {
    throw new Error("The number of digits should be a positive integer between 1 and 15");
  } else if (onChainValue > Math.pow(10, digits)) {
    throw new Error("The value is out of range");
  }
  return Number(onChainValue) / Math.pow(10, digits);
}
function encodeProposalId(pluginAddress, id) {
  if (!/^0x[A-Fa-f0-9]{40}$/.test(pluginAddress)) {
    throw new Error("Invalid address");
  }
  return pluginAddress + "_0x" + id.toString(16);
}
function decodeProposalId(proposalId) {
  if (!isProposalId(proposalId)) {
    throw new Error("Invalid proposalId");
  }
  var matchedRegexResult = proposalId.match(/^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/) || [];
  if (matchedRegexResult.length !== 3) {
    throw new Error("Could not parse the proposal ID");
  }
  return {
    pluginAddress: matchedRegexResult[1],
    id: parseInt(strip0x(matchedRegexResult[2]), 16)
  };
}
var getExtendedProposalId = function getExtendedProposalId2(proposalId) {
  if (!proposalId.match(/^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/)) {
    throw new Error("Invalid proposalId");
  }
  var splits = proposalId.split("_");
  return splits[0].toLowerCase() + "_" + hexZeroPad(splits[1], 32);
};
var getCompactProposalId = function getCompactProposalId2(proposalId) {
  if (!proposalId.match(/^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/)) {
    throw new Error("Invalid proposalId");
  }
  var splits = proposalId.split("_");
  return splits[0].toLowerCase() + "_0x" + parseInt(splits[1]).toString(16);
};
function boolArrayToBitmap(bools) {
  if (!bools || !bools.length)
    return BigInt(0);
  else if (bools.length > 256)
    throw new Error("The array is too big");
  var result = BigInt(0);
  for (var i = 0; i < 256; i++) {
    if (!bools[i])
      continue;
    result |= BigInt(1) << BigInt(i);
  }
  return result;
}
function bitmapToBoolArray(bitmap) {
  if (bitmap >= BigInt(1) << BigInt(256)) {
    throw new Error("The bitmap value is too big");
  }
  var result = [];
  for (var i = 0; i < 256; i++) {
    var mask = BigInt(1) << BigInt(i);
    result.push((bitmap & mask) != BigInt(0));
  }
  return result;
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function(method, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method)
          throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method, method = delegate.iterator[methodName];
    if (void 0 === method)
      return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object = Object(val), keys = [];
    for (var key in object)
      keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object)
          return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var TimeoutError = function(_Error) {
  _inheritsLoose(TimeoutError2, _Error);
  function TimeoutError2(message) {
    return _Error.call(this, message ? message : "Time out") || this;
  }
  return TimeoutError2;
}(_wrapNativeSuper(Error));
var UnsupportedProtocolError = function(_Error2) {
  _inheritsLoose(UnsupportedProtocolError2, _Error2);
  function UnsupportedProtocolError2(protocol) {
    return _Error2.call(this, "Unsupported protocol: " + protocol) || this;
  }
  return UnsupportedProtocolError2;
}(_wrapNativeSuper(Error));
var GraphQLError = function(_Error3) {
  _inheritsLoose(GraphQLError2, _Error3);
  function GraphQLError2(model) {
    return _Error3.call(this, "Cannot fetch the " + model + " data from GraphQL") || this;
  }
  return GraphQLError2;
}(_wrapNativeSuper(Error));
var InvalidAddressOrEnsError = function(_Error4) {
  _inheritsLoose(InvalidAddressOrEnsError2, _Error4);
  function InvalidAddressOrEnsError2() {
    return _Error4.call(this, "Invalid address or ENS") || this;
  }
  return InvalidAddressOrEnsError2;
}(_wrapNativeSuper(Error));
var InvalidAddressError = function(_Error5) {
  _inheritsLoose(InvalidAddressError2, _Error5);
  function InvalidAddressError2() {
    return _Error5.call(this, "Invalid address") || this;
  }
  return InvalidAddressError2;
}(_wrapNativeSuper(Error));
var InvalidCidError = function(_Error6) {
  _inheritsLoose(InvalidCidError2, _Error6);
  function InvalidCidError2() {
    return _Error6.call(this, "The value does not contain a valid CiD") || this;
  }
  return InvalidCidError2;
}(_wrapNativeSuper(Error));
var InvalidProposalIdError = function(_Error7) {
  _inheritsLoose(InvalidProposalIdError2, _Error7);
  function InvalidProposalIdError2() {
    return _Error7.call(this, "Invalid proposal ID") || this;
  }
  return InvalidProposalIdError2;
}(_wrapNativeSuper(Error));
var NoProviderError = function(_Error8) {
  _inheritsLoose(NoProviderError2, _Error8);
  function NoProviderError2() {
    return _Error8.call(this, "A web3 provider is needed") || this;
  }
  return NoProviderError2;
}(_wrapNativeSuper(Error));
var NoSignerError = function(_Error9) {
  _inheritsLoose(NoSignerError2, _Error9);
  function NoSignerError2() {
    return _Error9.call(this, "A signer is needed") || this;
  }
  return NoSignerError2;
}(_wrapNativeSuper(Error));
var UnexpectedActionError = function(_Error10) {
  _inheritsLoose(UnexpectedActionError2, _Error10);
  function UnexpectedActionError2() {
    return _Error10.call(this, "The received action is different from the expected one") || this;
  }
  return UnexpectedActionError2;
}(_wrapNativeSuper(Error));
var NoTokenAddress = function(_Error11) {
  _inheritsLoose(NoTokenAddress2, _Error11);
  function NoTokenAddress2() {
    return _Error11.call(this, "A token address is needed") || this;
  }
  return NoTokenAddress2;
}(_wrapNativeSuper(Error));
var NoDaoFactory = function(_Error12) {
  _inheritsLoose(NoDaoFactory2, _Error12);
  function NoDaoFactory2() {
    return _Error12.call(this, "A dao factory address is needed") || this;
  }
  return NoDaoFactory2;
}(_wrapNativeSuper(Error));
var NoPluginRepoRegistry = function(_Error13) {
  _inheritsLoose(NoPluginRepoRegistry2, _Error13);
  function NoPluginRepoRegistry2() {
    return _Error13.call(this, "A plugin repo registry address is needed") || this;
  }
  return NoPluginRepoRegistry2;
}(_wrapNativeSuper(Error));
var NoDaoRegistry = function(_Error14) {
  _inheritsLoose(NoDaoRegistry2, _Error14);
  function NoDaoRegistry2() {
    return _Error14.call(this, "A dao registry address is needed") || this;
  }
  return NoDaoRegistry2;
}(_wrapNativeSuper(Error));
var IpfsPinError = function(_Error15) {
  _inheritsLoose(IpfsPinError2, _Error15);
  function IpfsPinError2() {
    return _Error15.call(this, "Failed to pin data on IPFS") || this;
  }
  return IpfsPinError2;
}(_wrapNativeSuper(Error));
var ProposalCreationError = function(_Error16) {
  _inheritsLoose(ProposalCreationError2, _Error16);
  function ProposalCreationError2() {
    return _Error16.call(this, "Failed to create proposal") || this;
  }
  return ProposalCreationError2;
}(_wrapNativeSuper(Error));
var MissingExecPermissionError = function(_Error17) {
  _inheritsLoose(MissingExecPermissionError2, _Error17);
  function MissingExecPermissionError2() {
    return _Error17.call(this, "No plugin requests EXECUTE_PERMISSION") || this;
  }
  return MissingExecPermissionError2;
}(_wrapNativeSuper(Error));
var IpfsFetchError = function(_Error18) {
  _inheritsLoose(IpfsFetchError2, _Error18);
  function IpfsFetchError2() {
    return _Error18.call(this, "Failed to fetch data from IPFS") || this;
  }
  return IpfsFetchError2;
}(_wrapNativeSuper(Error));
var InvalidVotingModeError = function(_Error19) {
  _inheritsLoose(InvalidVotingModeError2, _Error19);
  function InvalidVotingModeError2() {
    return _Error19.call(this, "Invalid voting mode") || this;
  }
  return InvalidVotingModeError2;
}(_wrapNativeSuper(Error));
var UpdateAllowanceError = function(_Error20) {
  _inheritsLoose(UpdateAllowanceError2, _Error20);
  function UpdateAllowanceError2() {
    return _Error20.call(this, "Could not define a minimum allowance") || this;
  }
  return UpdateAllowanceError2;
}(_wrapNativeSuper(Error));
var InvalidPrecisionError = function(_Error21) {
  _inheritsLoose(InvalidPrecisionError2, _Error21);
  function InvalidPrecisionError2() {
    return _Error21.call(this, "Invalid precision, number must be an integer greater than 0") || this;
  }
  return InvalidPrecisionError2;
}(_wrapNativeSuper(Error));
var FailedDepositError = function(_Error22) {
  _inheritsLoose(FailedDepositError2, _Error22);
  function FailedDepositError2() {
    return _Error22.call(this, "Failed to deposit") || this;
  }
  return FailedDepositError2;
}(_wrapNativeSuper(Error));
var AmountMismatchError = function(_Error23) {
  _inheritsLoose(AmountMismatchError2, _Error23);
  function AmountMismatchError2(expected, received) {
    return _Error23.call(this, "Deposited amount mismatch. Expected: " + expected + ", received: " + received) || this;
  }
  return AmountMismatchError2;
}(_wrapNativeSuper(Error));
var UnsupportedNetworkError = function(_Error24) {
  _inheritsLoose(UnsupportedNetworkError2, _Error24);
  function UnsupportedNetworkError2(network) {
    return _Error24.call(this, "Unsupported network: " + network) || this;
  }
  return UnsupportedNetworkError2;
}(_wrapNativeSuper(Error));
var ClientNotInitializedError = function(_Error25) {
  _inheritsLoose(ClientNotInitializedError2, _Error25);
  function ClientNotInitializedError2(client) {
    return _Error25.call(this, client + " client is not initialized") || this;
  }
  return ClientNotInitializedError2;
}(_wrapNativeSuper(Error));
var NoNodesAvailableError = function(_Error26) {
  _inheritsLoose(NoNodesAvailableError2, _Error26);
  function NoNodesAvailableError2(name) {
    return _Error26.call(this, "No " + name + " nodes available") || this;
  }
  return NoNodesAvailableError2;
}(_wrapNativeSuper(Error));
var PluginInstallationPreparationError = function(_Error27) {
  _inheritsLoose(PluginInstallationPreparationError2, _Error27);
  function PluginInstallationPreparationError2() {
    return _Error27.call(this, "Failed to install plugin") || this;
  }
  return PluginInstallationPreparationError2;
}(_wrapNativeSuper(Error));
function allSettled(proms) {
  return Promise.all(proms.map(reflect));
}
function reflect(prom) {
  return prom.then(function(value) {
    return {
      value,
      status: "fulfilled"
    };
  })["catch"](function(reason) {
    return {
      reason,
      status: "rejected"
    };
  });
}
function runAndRetry(_x) {
  return _runAndRetry.apply(this, arguments);
}
function _runAndRetry() {
  _runAndRetry = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(_ref) {
    var func, onFail, shouldRetry, lastErr, result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            func = _ref.func, onFail = _ref.onFail, shouldRetry = _ref.shouldRetry;
          case 1:
            _context.prev = 1;
            _context.next = 4;
            return func();
          case 4:
            result = _context.sent;
            return _context.abrupt("return", result);
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);
            lastErr = _context.t0;
            if (typeof onFail === "function") {
              onFail(_context.t0);
            }
          case 12:
            if (shouldRetry()) {
              _context.next = 1;
              break;
            }
          case 13:
            throw lastErr;
          case 14:
          case "end":
            return _context.stop();
        }
    }, _callee, null, [[1, 8]]);
  }));
  return _runAndRetry.apply(this, arguments);
}
var MultiUri = function() {
  function MultiUri2(multiUri) {
    this.items = [];
    if (!multiUri)
      throw new Error("The multi URI is empty");
    this.items = multiUri.split(",");
  }
  _createClass(MultiUri2, [{
    key: "ipfsCid",
    get: function get() {
      for (var _iterator = _createForOfIteratorHelperLoose(this.items), _step; !(_step = _iterator()).done; ) {
        var item = _step.value;
        if (IPFS_CID_REGEX.test(item))
          return item;
        else if (item.startsWith("ipfs://")) {
          item = item.substring(7);
        }
        var idx = item.indexOf("/");
        var cid = idx < 0 ? item : item.substring(0, idx);
        if (!IPFS_CID_REGEX.test(cid))
          continue;
        return cid;
      }
      return null;
    }
  }, {
    key: "ipfs",
    get: function get() {
      for (var _iterator2 = _createForOfIteratorHelperLoose(this.items), _step2; !(_step2 = _iterator2()).done; ) {
        var item = _step2.value;
        if (IPFS_CID_REGEX.test(item))
          return {
            cid: item,
            path: ""
          };
        else if (item.startsWith("ipfs://")) {
          item = item.substring(7);
        }
        var pathIdx = item.indexOf("/");
        var cid = item;
        if (pathIdx < 0) {
          if (!IPFS_CID_REGEX.test(cid))
            continue;
          return {
            cid,
            path: ""
          };
        }
        cid = item.substring(0, pathIdx);
        if (!IPFS_CID_REGEX.test(cid))
          continue;
        var searchIdx = item.indexOf("?");
        if (searchIdx < 0)
          searchIdx = item.indexOf("#");
        if (searchIdx < 0) {
          return {
            cid,
            path: item.substring(pathIdx)
          };
        }
        return {
          cid,
          path: item.substring(pathIdx, searchIdx)
        };
      }
      return null;
    }
  }, {
    key: "http",
    get: function get() {
      return this.items.filter(function(item) {
        return item.startsWith("http://") || item.startsWith("https://");
      });
    }
  }]);
  return MultiUri2;
}();
var IPFS_CID_REGEX = /^Qm([1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})$/;
function resolveIpfsCid(data) {
  var uri = new MultiUri(data);
  var cid = uri.ipfsCid;
  if (!cid) {
    throw new InvalidCidError();
  }
  return cid;
}
function promiseFuncWithTimeout(func, timeout, timeoutMessage) {
  if (typeof func !== "function")
    throw new Error("Invalid function");
  else if (isNaN(timeout) || timeout < 0)
    throw new Error("Invalid timeout");
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      return reject(new TimeoutError(timeoutMessage || "Time out"));
    }, timeout);
    return func().then(function(result) {
      return resolve(result);
    })["catch"](function(err) {
      return reject(err);
    });
  });
}
function promiseWithTimeout(prom, timeout, timeoutMessage) {
  if (!prom || typeof prom.then !== "function" || typeof prom["catch"] !== "function") {
    throw new Error("Invalid promise");
  } else if (isNaN(timeout) || timeout < 0)
    throw new Error("Invalid timeout");
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      return reject(new TimeoutError(timeoutMessage || "Time out"));
    }, timeout);
    return prom.then(function(result) {
      return resolve(result);
    })["catch"](function(err) {
      return reject(err);
    });
  });
}

export {
  XDAI_CHAIN_ID,
  XDAI_PROVIDER_URI,
  SOKOL_CHAIN_ID,
  SOKOL_PROVIDER_URI,
  MATIC_CHAIN_ID,
  MATIC_PROVIDER_URI,
  MUMBAI_CHAIN_ID,
  MUMBAI_PROVIDER_URI,
  isProposalId,
  hexToBytes,
  bytesToHex,
  bigIntToBuffer,
  bigIntToLeBuffer,
  bufferToBigInt,
  bufferLeToBigInt,
  ensure0x,
  strip0x,
  encodeRatio,
  decodeRatio,
  encodeProposalId,
  decodeProposalId,
  getExtendedProposalId,
  getCompactProposalId,
  boolArrayToBitmap,
  bitmapToBoolArray,
  TimeoutError,
  UnsupportedProtocolError,
  GraphQLError,
  InvalidAddressOrEnsError,
  InvalidAddressError,
  InvalidCidError,
  InvalidProposalIdError,
  NoProviderError,
  NoSignerError,
  UnexpectedActionError,
  NoTokenAddress,
  NoDaoFactory,
  NoPluginRepoRegistry,
  NoDaoRegistry,
  IpfsPinError,
  ProposalCreationError,
  MissingExecPermissionError,
  IpfsFetchError,
  InvalidVotingModeError,
  UpdateAllowanceError,
  InvalidPrecisionError,
  FailedDepositError,
  AmountMismatchError,
  UnsupportedNetworkError,
  ClientNotInitializedError,
  NoNodesAvailableError,
  PluginInstallationPreparationError,
  allSettled,
  runAndRetry,
  MultiUri,
  resolveIpfsCid,
  promiseFuncWithTimeout,
  promiseWithTimeout
};
//# sourceMappingURL=chunk-SX4H6B2V.js.map
