import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// ../../node_modules/rudder-sdk-js/index.js
var require_rudder_sdk_js = __commonJS({
  "../../node_modules/rudder-sdk-js/index.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.rudderanalytics = {}));
    })(exports, function(exports2) {
      "use strict";
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread2(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = null != arguments[i2] ? arguments[i2] : {};
          i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i2 = 0; i2 < props.length; i2++) {
          var descriptor = props[i2];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
          return Array.from(iter);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
          arr2[i2] = arr[i2];
        return arr2;
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function getAugmentedNamespace(n) {
        var f2 = n.default;
        if (typeof f2 == "function") {
          var a = function() {
            return f2.apply(this, arguments);
          };
          a.prototype = f2.prototype;
        } else
          a = {};
        Object.defineProperty(a, "__esModule", { value: true });
        Object.keys(n).forEach(function(k) {
          var d2 = Object.getOwnPropertyDescriptor(n, k);
          Object.defineProperty(a, k, d2.get ? d2 : {
            enumerable: true,
            get: function() {
              return n[k];
            }
          });
        });
        return a;
      }
      var componentEmitter = { exports: {} };
      (function(module2) {
        {
          module2.exports = Emitter2;
        }
        function Emitter2(obj) {
          if (obj)
            return mixin(obj);
        }
        function mixin(obj) {
          for (var key in Emitter2.prototype) {
            obj[key] = Emitter2.prototype[key];
          }
          return obj;
        }
        Emitter2.prototype.on = Emitter2.prototype.addEventListener = function(event, fn) {
          this._callbacks = this._callbacks || {};
          (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
          return this;
        };
        Emitter2.prototype.once = function(event, fn) {
          function on2() {
            this.off(event, on2);
            fn.apply(this, arguments);
          }
          on2.fn = fn;
          this.on(event, on2);
          return this;
        };
        Emitter2.prototype.off = Emitter2.prototype.removeListener = Emitter2.prototype.removeAllListeners = Emitter2.prototype.removeEventListener = function(event, fn) {
          this._callbacks = this._callbacks || {};
          if (0 == arguments.length) {
            this._callbacks = {};
            return this;
          }
          var callbacks = this._callbacks["$" + event];
          if (!callbacks)
            return this;
          if (1 == arguments.length) {
            delete this._callbacks["$" + event];
            return this;
          }
          var cb;
          for (var i2 = 0; i2 < callbacks.length; i2++) {
            cb = callbacks[i2];
            if (cb === fn || cb.fn === fn) {
              callbacks.splice(i2, 1);
              break;
            }
          }
          if (callbacks.length === 0) {
            delete this._callbacks["$" + event];
          }
          return this;
        };
        Emitter2.prototype.emit = function(event) {
          this._callbacks = this._callbacks || {};
          var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
          for (var i2 = 1; i2 < arguments.length; i2++) {
            args[i2 - 1] = arguments[i2];
          }
          if (callbacks) {
            callbacks = callbacks.slice(0);
            for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
              callbacks[i2].apply(this, args);
            }
          }
          return this;
        };
        Emitter2.prototype.listeners = function(event) {
          this._callbacks = this._callbacks || {};
          return this._callbacks["$" + event] || [];
        };
        Emitter2.prototype.hasListeners = function(event) {
          return !!this.listeners(event).length;
        };
      })(componentEmitter);
      var Emitter$1 = componentEmitter.exports;
      var trim$2 = { exports: {} };
      (function(module2, exports3) {
        exports3 = module2.exports = trim2;
        function trim2(str) {
          if (str.trim)
            return str.trim();
          return exports3.right(exports3.left(str));
        }
        exports3.left = function(str) {
          if (str.trimLeft)
            return str.trimLeft();
          return str.replace(/^\s\s*/, "");
        };
        exports3.right = function(str) {
          if (str.trimRight)
            return str.trimRight();
          var whitespace_pattern = /\s/, i2 = str.length;
          while (whitespace_pattern.test(str.charAt(--i2))) {
          }
          return str.slice(0, i2 + 1);
        };
      })(trim$2, trim$2.exports);
      var trim$1 = trim$2.exports;
      var pattern = /(\w+)\[(\d+)\]/;
      var decode$3 = function decode2(str) {
        try {
          return decodeURIComponent(str.replace(/\+/g, " "));
        } catch (e) {
          return str;
        }
      };
      var parse$6 = function(str) {
        if ("string" != typeof str)
          return {};
        str = trim$1(str);
        if ("" == str)
          return {};
        if ("?" == str.charAt(0))
          str = str.slice(1);
        var obj = {};
        var pairs = str.split("&");
        for (var i2 = 0; i2 < pairs.length; i2++) {
          var parts = pairs[i2].split("=");
          var key = decode$3(parts[0]);
          var m2;
          if (m2 = pattern.exec(key)) {
            obj[m2[1]] = obj[m2[1]] || [];
            obj[m2[1]][m2[2]] = decode$3(parts[1]);
            continue;
          }
          obj[parts[0]] = null == parts[1] ? "" : decode$3(parts[1]);
        }
        return obj;
      };
      var lodash_merge = { exports: {} };
      (function(module2, exports3) {
        var LARGE_ARRAY_SIZE = 200;
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var MAX_SAFE_INTEGER = 9007199254740991;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var freeGlobal = _typeof(commonjsGlobal) == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = exports3 && !exports3.nodeType && exports3;
        var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function getValue2(object, key) {
          return object == null ? void 0 : object[key];
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        var coreJsData = root["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object);
        var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? root.Buffer : void 0, _Symbol = root.Symbol, Uint8Array2 = root.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = _Symbol ? _Symbol.toStringTag : void 0;
        var defineProperty = function() {
          try {
            var func = getNative(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
        var Map = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = void 0;
            return result;
          };
        }();
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? void 0 : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : void 0;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? void 0 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result = getMapData(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size = data.size;
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result = data["delete"](key);
          this.size = data.size;
          return result;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }
        function assignMergeValue(object, key, value) {
          if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        var baseFor = createBaseFor();
        function baseGetTag(value) {
          if (value == null) {
            return value === void 0 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern2 = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern2.test(toSource(value));
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
              if (newValue === void 0) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
          var isCommon = newValue === void 0;
          if (isCommon) {
            var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result);
          return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
          return result;
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
            if (newValue === void 0) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? void 0 : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getNative(object, key) {
          var value = getValue2(object, key);
          return baseIsNative(value) ? value : void 0;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = void 0;
            var unmasked = true;
          } catch (e) {
          }
          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function isIndex(value, length) {
          var type = _typeof(value);
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        function isIterateeCall(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = _typeof(index);
          if (type == "number" ? isArrayLike2(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKeyable(value) {
          var type = _typeof(value);
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform) {
          start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setToString = shortOut(baseSetToString);
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(void 0, arguments);
          };
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray2 = Array.isArray;
        function isArrayLike2(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike2(value);
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        function isFunction(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = _typeof(value);
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && _typeof(value) == "object";
        }
        function isPlainObject2(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function keysIn(object) {
          return isArrayLike2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        var merge2 = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        function constant(value) {
          return function() {
            return value;
          };
        }
        function identity(value) {
          return value;
        }
        function stubFalse() {
          return false;
        }
        module2.exports = merge2;
      })(lodash_merge, lodash_merge.exports);
      var merge = lodash_merge.exports;
      var lodash_clonedeep = { exports: {} };
      (function(module2, exports3) {
        var LARGE_ARRAY_SIZE = 200;
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_SAFE_INTEGER = 9007199254740991;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", promiseTag = "[object Promise]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reFlags = /\w*$/;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var freeGlobal = _typeof(commonjsGlobal) == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = exports3 && !exports3.nodeType && exports3;
        var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        function addMapEntry(map, pair) {
          map.set(pair[0], pair[1]);
          return map;
        }
        function addSetEntry(set2, value) {
          set2.add(value);
          return set2;
        }
        function arrayEach2(array, iteratee) {
          var index = -1, length = array ? array.length : 0;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array ? array.length : 0;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function getValue2(object, key) {
          return object == null ? void 0 : object[key];
        }
        function isHostObject(value) {
          var result = false;
          if (value != null && typeof value.toString != "function") {
            try {
              result = !!(value + "");
            } catch (e) {
            }
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function setToArray(set2) {
          var index = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        var coreJsData = root["__core-js_shared__"];
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectToString = objectProto.toString;
        var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? root.Buffer : void 0, _Symbol = root.Symbol, Uint8Array2 = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;
        var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0, nativeKeys = overArg(Object.keys, Object);
        var DataView = getNative(root, "DataView"), Map = getNative(root, "Map"), Promise2 = getNative(root, "Promise"), Set = getNative(root, "Set"), WeakMap = getNative(root, "WeakMap"), nativeCreate = getNative(Object, "create");
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var symbolProto = _Symbol ? _Symbol.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
        function Hash(entries) {
          var index = -1, length = entries ? entries.length : 0;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
        }
        function hashDelete(key) {
          return this.has(key) && delete this.__data__[key];
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? void 0 : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : void 0;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries ? entries.length : 0;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? void 0 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries ? entries.length : 0;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          return getMapData(this, key)["delete"](key);
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          getMapData(this, key).set(key, value);
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function Stack(entries) {
          this.__data__ = new ListCache(entries);
        }
        function stackClear() {
          this.__data__ = new ListCache();
        }
        function stackDelete(key) {
          return this.__data__["delete"](key);
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var cache = this.__data__;
          if (cache instanceof ListCache) {
            var pairs = cache.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              return this;
            }
            cache = this.__data__ = new MapCache(pairs);
          }
          cache.set(key, value);
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
          var length = result.length, skipIndexes = !!length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
            object[key] = value;
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys2(source), object);
        }
        function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
          var result;
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== void 0) {
            return result;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              if (isHostObject(value)) {
                return object ? value : {};
              }
              result = initCloneObject(isFunc ? {} : value);
              if (!isDeep) {
                return copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, baseClone, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
          if (!isArr) {
            var props = isFull ? getAllKeys(value) : keys2(value);
          }
          arrayEach2(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
          });
          return result;
        }
        function baseCreate(proto) {
          return isObject2(proto) ? objectCreate(proto) : {};
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        function baseGetTag(value) {
          return objectToString.call(value);
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern2 = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
          return pattern2.test(toSource(value));
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var result = new buffer.constructor(buffer.length);
          buffer.copy(result);
          return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
          return result;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneMap(map, isDeep, cloneFunc) {
          var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
          return arrayReduce(array, addMapEntry, new map.constructor());
        }
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }
        function cloneSet(set2, isDeep, cloneFunc) {
          var array = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
          return arrayReduce(array, addSetEntry, new set2.constructor());
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
            assignValue(object, key, newValue === void 0 ? source[key] : newValue);
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys2, getSymbols);
        }
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getNative(object, key) {
          var value = getValue2(object, key);
          return baseIsNative(value) ? value : void 0;
        }
        var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function getTag2(value) {
            var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result;
          };
        }
        function initCloneArray(array) {
          var length = array.length, result = array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, cloneFunc, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return cloneMap(object, isDeep, cloneFunc);
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return cloneSet(object, isDeep, cloneFunc);
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function isIndex(value, length) {
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (typeof value == "number" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        function isKeyable(value) {
          var type = _typeof(value);
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function cloneDeep2(value) {
          return baseClone(value, true, true);
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        function isArguments(value) {
          return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
        }
        var isArray2 = Array.isArray;
        function isArrayLike2(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike2(value);
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        function isFunction(value) {
          var tag = isObject2(value) ? objectToString.call(value) : "";
          return tag == funcTag || tag == genTag;
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = _typeof(value);
          return !!value && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return !!value && _typeof(value) == "object";
        }
        function keys2(object) {
          return isArrayLike2(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        module2.exports = cloneDeep2;
      })(lodash_clonedeep, lodash_clonedeep.exports);
      var cloneDeep = lodash_clonedeep.exports;
      var componentUrl = {};
      (function(exports3) {
        exports3.parse = function(url) {
          var a = document.createElement("a");
          a.href = url;
          return {
            href: a.href,
            host: a.host || location.host,
            port: "0" === a.port || "" === a.port ? port(a.protocol) : a.port,
            hash: a.hash,
            hostname: a.hostname || location.hostname,
            pathname: a.pathname.charAt(0) != "/" ? "/" + a.pathname : a.pathname,
            protocol: !a.protocol || ":" == a.protocol ? location.protocol : a.protocol,
            search: a.search,
            query: a.search.slice(1)
          };
        };
        exports3.isAbsolute = function(url) {
          return 0 == url.indexOf("//") || !!~url.indexOf("://");
        };
        exports3.isRelative = function(url) {
          return !exports3.isAbsolute(url);
        };
        exports3.isCrossDomain = function(url) {
          url = exports3.parse(url);
          var location2 = exports3.parse(window.location.href);
          return url.hostname !== location2.hostname || url.port !== location2.port || url.protocol !== location2.protocol;
        };
        function port(protocol) {
          switch (protocol) {
            case "http:":
              return 80;
            case "https:":
              return 443;
            default:
              return location.port;
          }
        }
      })(componentUrl);
      var isobject = function isObject2(val) {
        return val != null && _typeof(val) === "object" && Array.isArray(val) === false;
      };
      var isObject$1 = isobject;
      var getValue = function getValue2(target, path, options) {
        if (!isObject$1(options)) {
          options = {
            default: options
          };
        }
        if (!isValidObject(target)) {
          return typeof options.default !== "undefined" ? options.default : target;
        }
        if (typeof path === "number") {
          path = String(path);
        }
        var isArray2 = Array.isArray(path);
        var isString2 = typeof path === "string";
        var splitChar = options.separator || ".";
        var joinChar = options.joinChar || (typeof splitChar === "string" ? splitChar : ".");
        if (!isString2 && !isArray2) {
          return target;
        }
        if (isString2 && path in target) {
          return isValid(path, target, options) ? target[path] : options.default;
        }
        var segs = isArray2 ? path : split(path, splitChar, options);
        var len = segs.length;
        var idx = 0;
        do {
          var prop = segs[idx];
          if (typeof prop === "number") {
            prop = String(prop);
          }
          while (prop && prop.slice(-1) === "\\") {
            prop = join([prop.slice(0, -1), segs[++idx] || ""], joinChar, options);
          }
          if (prop in target) {
            if (!isValid(prop, target, options)) {
              return options.default;
            }
            target = target[prop];
          } else {
            var hasProp = false;
            var n = idx + 1;
            while (n < len) {
              prop = join([prop, segs[n++]], joinChar, options);
              if (hasProp = prop in target) {
                if (!isValid(prop, target, options)) {
                  return options.default;
                }
                target = target[prop];
                idx = n - 1;
                break;
              }
            }
            if (!hasProp) {
              return options.default;
            }
          }
        } while (++idx < len && isValidObject(target));
        if (idx === len) {
          return target;
        }
        return options.default;
      };
      function join(segs, joinChar, options) {
        if (typeof options.join === "function") {
          return options.join(segs);
        }
        return segs[0] + joinChar + segs[1];
      }
      function split(path, splitChar, options) {
        if (typeof options.split === "function") {
          return options.split(path);
        }
        return path.split(splitChar);
      }
      function isValid(key, target, options) {
        if (typeof options.isValid === "function") {
          return options.isValid(key, target);
        }
        return true;
      }
      function isValidObject(val) {
        return isObject$1(val) || Array.isArray(val) || typeof val === "function";
      }
      var IDX$1 = 256, HEX$1 = [], BUFFER$1;
      while (IDX$1--) {
        HEX$1[IDX$1] = (IDX$1 + 256).toString(16).substring(1);
      }
      function v4$2() {
        var i2 = 0, num, out = "";
        if (!BUFFER$1 || IDX$1 + 16 > 256) {
          BUFFER$1 = Array(i2 = 256);
          while (i2--) {
            BUFFER$1[i2] = 256 * Math.random() | 0;
          }
          i2 = IDX$1 = 0;
        }
        for (; i2 < 16; i2++) {
          num = BUFFER$1[IDX$1 + i2];
          if (i2 == 6)
            out += HEX$1[num & 15 | 64];
          else if (i2 == 8)
            out += HEX$1[num & 63 | 128];
          else
            out += HEX$1[num];
          if (i2 & 1 && i2 > 1 && i2 < 11)
            out += "-";
        }
        IDX$1++;
        return out;
      }
      var defaultAsyncState = true;
      var LOAD_ORIGIN = "RS_JS_SDK";
      var ScriptLoader = function ScriptLoader2(id, src) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var exists = document.getElementById(id);
        if (exists) {
          return;
        }
        var js = document.createElement("script");
        js.src = src;
        js.async = options.async === void 0 ? defaultAsyncState : options.async;
        js.type = "text/javascript";
        js.id = id;
        if (options.skipDatasetAttributes !== true) {
          js.setAttribute("data-loader", LOAD_ORIGIN);
          if (options.isNonNativeSDK !== void 0) {
            js.setAttribute("data-isNonNativeSDK", options.isNonNativeSDK);
          }
        }
        var headElmColl = document.getElementsByTagName("head");
        if (headElmColl.length !== 0) {
          headElmColl[0].insertBefore(js, headElmColl[0].firstChild);
        } else {
          var e = document.getElementsByTagName("script")[0];
          e.parentNode.insertBefore(js, e);
        }
      };
      var LOG_LEVEL_INFO = 1;
      var LOG_LEVEL_DEBUG = 2;
      var LOG_LEVEL_WARN = 3;
      var LOG_LEVEL_ERROR = 4;
      var DEF_LOG_LEVEL = LOG_LEVEL_ERROR;
      var LOG_LEVEL = DEF_LOG_LEVEL;
      var logger = {
        setLogLevel: function setLogLevel(logLevel) {
          switch (logLevel.toUpperCase()) {
            case "INFO":
              LOG_LEVEL = LOG_LEVEL_INFO;
              break;
            case "DEBUG":
              LOG_LEVEL = LOG_LEVEL_DEBUG;
              break;
            case "WARN":
              LOG_LEVEL = LOG_LEVEL_WARN;
              break;
            default:
              LOG_LEVEL = DEF_LOG_LEVEL;
              break;
          }
        },
        info: function info() {
          if (LOG_LEVEL <= LOG_LEVEL_INFO) {
            var _console;
            (_console = console).info.apply(_console, arguments);
          }
        },
        debug: function debug2() {
          if (LOG_LEVEL <= LOG_LEVEL_DEBUG) {
            var _console2;
            (_console2 = console).log.apply(_console2, arguments);
          }
        },
        warn: function warn() {
          if (LOG_LEVEL <= LOG_LEVEL_WARN) {
            var _console3;
            (_console3 = console).warn.apply(_console3, arguments);
          }
        },
        error: function error() {
          if (LOG_LEVEL <= LOG_LEVEL_ERROR) {
            var _console4;
            (_console4 = console).error.apply(_console4, arguments);
          }
        }
      };
      var _CNameMapping$11;
      var NAME$11 = "ADOBE_ANALYTICS";
      var CNameMapping$11 = (_CNameMapping$11 = {
        "Adobe Analytics": NAME$11,
        ADOBEANALYTICS: NAME$11,
        "ADOBE ANALYTICS": NAME$11
      }, _defineProperty(_CNameMapping$11, NAME$11, NAME$11), _defineProperty(_CNameMapping$11, "AdobeAnalytics", NAME$11), _defineProperty(_CNameMapping$11, "adobeanalytics", NAME$11), _defineProperty(_CNameMapping$11, "adobe analytics", NAME$11), _defineProperty(_CNameMapping$11, "Adobe analytics", NAME$11), _defineProperty(_CNameMapping$11, "adobe Analytics", NAME$11), _CNameMapping$11);
      var _CNameMapping$10;
      var NAME$10 = "AM";
      var CNameMapping$10 = (_CNameMapping$10 = {}, _defineProperty(_CNameMapping$10, NAME$10, NAME$10), _defineProperty(_CNameMapping$10, "AMPLITUDE", NAME$10), _defineProperty(_CNameMapping$10, "Amplitude", NAME$10), _defineProperty(_CNameMapping$10, "am", NAME$10), _CNameMapping$10);
      var _CNameMapping$$;
      var NAME$$ = "APPCUES";
      var CNameMapping$$ = (_CNameMapping$$ = {}, _defineProperty(_CNameMapping$$, NAME$$, NAME$$), _defineProperty(_CNameMapping$$, "Appcues", NAME$$), _defineProperty(_CNameMapping$$, "App Cues", NAME$$), _defineProperty(_CNameMapping$$, "appcues", NAME$$), _CNameMapping$$);
      var _CNameMapping$_;
      var NAME$_ = "BINGADS";
      var CNameMapping$_ = (_CNameMapping$_ = {}, _defineProperty(_CNameMapping$_, NAME$_, NAME$_), _defineProperty(_CNameMapping$_, "BingAds", NAME$_), _defineProperty(_CNameMapping$_, "bingads", NAME$_), _defineProperty(_CNameMapping$_, "Bing Ads", NAME$_), _defineProperty(_CNameMapping$_, "Bing ads", NAME$_), _defineProperty(_CNameMapping$_, "bing Ads", NAME$_), _defineProperty(_CNameMapping$_, "bing ads", NAME$_), _CNameMapping$_);
      var _CNameMapping$Z;
      var NAME$Z = "BRAZE";
      var CNameMapping$Z = (_CNameMapping$Z = {}, _defineProperty(_CNameMapping$Z, NAME$Z, NAME$Z), _defineProperty(_CNameMapping$Z, "Braze", NAME$Z), _defineProperty(_CNameMapping$Z, "braze", NAME$Z), _CNameMapping$Z);
      var _CNameMapping$Y;
      var NAME$Y = "BUGSNAG";
      var CNameMapping$Y = (_CNameMapping$Y = {}, _defineProperty(_CNameMapping$Y, NAME$Y, NAME$Y), _defineProperty(_CNameMapping$Y, "bugsnag", NAME$Y), _defineProperty(_CNameMapping$Y, "Bugsnag", NAME$Y), _CNameMapping$Y);
      var _CNameMapping$X;
      var NAME$X = "CHARTBEAT";
      var CNameMapping$X = (_CNameMapping$X = {}, _defineProperty(_CNameMapping$X, NAME$X, NAME$X), _defineProperty(_CNameMapping$X, "Chartbeat", NAME$X), _defineProperty(_CNameMapping$X, "chartbeat", NAME$X), _defineProperty(_CNameMapping$X, "Chart Beat", NAME$X), _defineProperty(_CNameMapping$X, "chart beat", NAME$X), _CNameMapping$X);
      var _CNameMapping$W;
      var NAME$W = "CLEVERTAP";
      var CNameMapping$W = (_CNameMapping$W = {}, _defineProperty(_CNameMapping$W, NAME$W, NAME$W), _defineProperty(_CNameMapping$W, "Clevertap", NAME$W), _defineProperty(_CNameMapping$W, "clevertap", NAME$W), _CNameMapping$W);
      var _CNameMapping$V;
      var NAME$V = "COMSCORE";
      var CNameMapping$V = (_CNameMapping$V = {}, _defineProperty(_CNameMapping$V, NAME$V, NAME$V), _defineProperty(_CNameMapping$V, "Comscore", NAME$V), _defineProperty(_CNameMapping$V, "Com Score", NAME$V), _defineProperty(_CNameMapping$V, "com Score", NAME$V), _defineProperty(_CNameMapping$V, "com score", NAME$V), _defineProperty(_CNameMapping$V, "Com score", NAME$V), _CNameMapping$V);
      var _CNameMapping$U;
      var NAME$U = "CRITEO";
      var CNameMapping$U = (_CNameMapping$U = {}, _defineProperty(_CNameMapping$U, NAME$U, NAME$U), _defineProperty(_CNameMapping$U, "Criteo", NAME$U), _defineProperty(_CNameMapping$U, "criteo", NAME$U), _CNameMapping$U);
      var _CNameMapping$T;
      var NAME$T = "CUSTOMERIO";
      var CNameMapping$T = (_CNameMapping$T = {}, _defineProperty(_CNameMapping$T, NAME$T, NAME$T), _defineProperty(_CNameMapping$T, "Customerio", NAME$T), _defineProperty(_CNameMapping$T, "Customer.io", NAME$T), _defineProperty(_CNameMapping$T, "CUSTOMER.IO", NAME$T), _defineProperty(_CNameMapping$T, "customer.io", NAME$T), _CNameMapping$T);
      var _CNameMapping$S;
      var NAME$S = "DRIP";
      var CNameMapping$S = (_CNameMapping$S = {}, _defineProperty(_CNameMapping$S, NAME$S, NAME$S), _defineProperty(_CNameMapping$S, "Drip", NAME$S), _defineProperty(_CNameMapping$S, "drip", NAME$S), _CNameMapping$S);
      var _CNameMapping$R;
      var NAME$R = "FACEBOOK_PIXEL";
      var CNameMapping$R = (_CNameMapping$R = {}, _defineProperty(_CNameMapping$R, NAME$R, NAME$R), _defineProperty(_CNameMapping$R, "FB Pixel", NAME$R), _defineProperty(_CNameMapping$R, "Facebook Pixel", NAME$R), _defineProperty(_CNameMapping$R, "facebook pixel", NAME$R), _defineProperty(_CNameMapping$R, "fbpixel", NAME$R), _defineProperty(_CNameMapping$R, "FBPIXEL", NAME$R), _defineProperty(_CNameMapping$R, "FB_PIXEL", NAME$R), _CNameMapping$R);
      var _CNameMapping$Q;
      var NAME$Q = "FULLSTORY";
      var CNameMapping$Q = (_CNameMapping$Q = {}, _defineProperty(_CNameMapping$Q, NAME$Q, NAME$Q), _defineProperty(_CNameMapping$Q, "Fullstory", NAME$Q), _defineProperty(_CNameMapping$Q, "FullStory", NAME$Q), _defineProperty(_CNameMapping$Q, "full Story", NAME$Q), _defineProperty(_CNameMapping$Q, "Full Story", NAME$Q), _defineProperty(_CNameMapping$Q, "Full story", NAME$Q), _defineProperty(_CNameMapping$Q, "full story", NAME$Q), _defineProperty(_CNameMapping$Q, "fullstory", NAME$Q), _CNameMapping$Q);
      var _CNameMapping$P;
      var NAME$P = "GA";
      var CNameMapping$P = (_CNameMapping$P = {}, _defineProperty(_CNameMapping$P, NAME$P, NAME$P), _defineProperty(_CNameMapping$P, "Google Analytics", NAME$P), _defineProperty(_CNameMapping$P, "GoogleAnalytics", NAME$P), _defineProperty(_CNameMapping$P, "GOOGLE ANALYTICS", NAME$P), _defineProperty(_CNameMapping$P, "google analytics", NAME$P), _CNameMapping$P);
      var _CNameMapping$O;
      var NAME$O = "GA4";
      var CNameMapping$O = (_CNameMapping$O = {}, _defineProperty(_CNameMapping$O, NAME$O, NAME$O), _defineProperty(_CNameMapping$O, "Google Analytics 4", NAME$O), _defineProperty(_CNameMapping$O, "Google analytics 4", NAME$O), _defineProperty(_CNameMapping$O, "google analytics 4", NAME$O), _defineProperty(_CNameMapping$O, "Google Analytics4", NAME$O), _defineProperty(_CNameMapping$O, "Google analytics4", NAME$O), _defineProperty(_CNameMapping$O, "google analytics4", NAME$O), _defineProperty(_CNameMapping$O, "GoogleAnalytics4", NAME$O), _CNameMapping$O);
      var _CNameMapping$N;
      var NAME$N = "GOOGLEADS";
      var CNameMapping$N = (_CNameMapping$N = {}, _defineProperty(_CNameMapping$N, NAME$N, NAME$N), _defineProperty(_CNameMapping$N, "Google Ads", NAME$N), _defineProperty(_CNameMapping$N, "GoogleAds", NAME$N), _defineProperty(_CNameMapping$N, "GOOGLE ADS", NAME$N), _defineProperty(_CNameMapping$N, "google ads", NAME$N), _defineProperty(_CNameMapping$N, "googleads", NAME$N), _CNameMapping$N);
      var _CNameMapping$M;
      var NAME$M = "GOOGLE_OPTIMIZE";
      var CNameMapping$M = (_CNameMapping$M = {}, _defineProperty(_CNameMapping$M, NAME$M, NAME$M), _defineProperty(_CNameMapping$M, "Google Optimize", NAME$M), _defineProperty(_CNameMapping$M, "GoogleOptimize", NAME$M), _defineProperty(_CNameMapping$M, "Googleoptimize", NAME$M), _defineProperty(_CNameMapping$M, "GOOGLEOPTIMIZE", NAME$M), _defineProperty(_CNameMapping$M, "google optimize", NAME$M), _defineProperty(_CNameMapping$M, "Google optimize", NAME$M), _defineProperty(_CNameMapping$M, "GOOGLE OPTIMIZE", NAME$M), _CNameMapping$M);
      var _CNameMapping$L;
      var NAME$L = "GTM";
      var CNameMapping$L = (_CNameMapping$L = {}, _defineProperty(_CNameMapping$L, NAME$L, NAME$L), _defineProperty(_CNameMapping$L, "Google Tag Manager", NAME$L), _defineProperty(_CNameMapping$L, "google tag manager", NAME$L), _defineProperty(_CNameMapping$L, "googletag manager", NAME$L), _defineProperty(_CNameMapping$L, "googletagmanager", NAME$L), _CNameMapping$L);
      var _CNameMapping$K;
      var NAME$K = "HEAP";
      var CNameMapping$K = (_CNameMapping$K = {}, _defineProperty(_CNameMapping$K, NAME$K, NAME$K), _defineProperty(_CNameMapping$K, "Heap", NAME$K), _defineProperty(_CNameMapping$K, "heap", NAME$K), _defineProperty(_CNameMapping$K, "Heap.io", NAME$K), _CNameMapping$K);
      var _CNameMapping$J;
      var NAME$J = "HOTJAR";
      var CNameMapping$J = (_CNameMapping$J = {}, _defineProperty(_CNameMapping$J, NAME$J, NAME$J), _defineProperty(_CNameMapping$J, "Hotjar", NAME$J), _defineProperty(_CNameMapping$J, "hotjar", NAME$J), _defineProperty(_CNameMapping$J, "Hot Jar", NAME$J), _defineProperty(_CNameMapping$J, "hot jar", NAME$J), _CNameMapping$J);
      var _CNameMapping$I;
      var NAME$I = "HS";
      var CNameMapping$I = (_CNameMapping$I = {}, _defineProperty(_CNameMapping$I, NAME$I, NAME$I), _defineProperty(_CNameMapping$I, "Hubspot", NAME$I), _defineProperty(_CNameMapping$I, "HUBSPOT", NAME$I), _defineProperty(_CNameMapping$I, "hub spot", NAME$I), _defineProperty(_CNameMapping$I, "Hub Spot", NAME$I), _defineProperty(_CNameMapping$I, "Hub spot", NAME$I), _CNameMapping$I);
      var _CNameMapping$H;
      var NAME$H = "INTERCOM";
      var CNameMapping$H = (_CNameMapping$H = {}, _defineProperty(_CNameMapping$H, NAME$H, NAME$H), _defineProperty(_CNameMapping$H, "Intercom", NAME$H), _defineProperty(_CNameMapping$H, "intercom", NAME$H), _CNameMapping$H);
      var _CNameMapping$G;
      var NAME$G = "KEEN";
      var CNameMapping$G = (_CNameMapping$G = {}, _defineProperty(_CNameMapping$G, NAME$G, NAME$G), _defineProperty(_CNameMapping$G, "Keen", NAME$G), _defineProperty(_CNameMapping$G, "Keen.io", NAME$G), _defineProperty(_CNameMapping$G, "keen", NAME$G), _defineProperty(_CNameMapping$G, "keen.io", NAME$G), _CNameMapping$G);
      var _CNameMapping$F;
      var NAME$F = "KISSMETRICS";
      var CNameMapping$F = (_CNameMapping$F = {}, _defineProperty(_CNameMapping$F, NAME$F, NAME$F), _defineProperty(_CNameMapping$F, "Kissmetrics", NAME$F), _defineProperty(_CNameMapping$F, "kissmetrics", NAME$F), _CNameMapping$F);
      var _CNameMapping$E;
      var NAME$E = "KLAVIYO";
      var CNameMapping$E = (_CNameMapping$E = {}, _defineProperty(_CNameMapping$E, NAME$E, NAME$E), _defineProperty(_CNameMapping$E, "Klaviyo", NAME$E), _defineProperty(_CNameMapping$E, "klaviyo", NAME$E), _CNameMapping$E);
      var _CNameMapping$D;
      var NAME$D = "LAUNCHDARKLY";
      var CNameMapping$D = (_CNameMapping$D = {}, _defineProperty(_CNameMapping$D, NAME$D, NAME$D), _defineProperty(_CNameMapping$D, "LaunchDarkly", NAME$D), _defineProperty(_CNameMapping$D, "Launch_Darkly", NAME$D), _defineProperty(_CNameMapping$D, "Launch Darkly", NAME$D), _defineProperty(_CNameMapping$D, "launchDarkly", NAME$D), _defineProperty(_CNameMapping$D, "launch darkly", NAME$D), _CNameMapping$D);
      var _CNameMapping$C;
      var NAME$C = "LINKEDIN_INSIGHT_TAG";
      var CNameMapping$C = (_CNameMapping$C = {}, _defineProperty(_CNameMapping$C, NAME$C, NAME$C), _defineProperty(_CNameMapping$C, "LinkedIn Insight Tag", NAME$C), _defineProperty(_CNameMapping$C, "LinkedIn insight tag", NAME$C), _defineProperty(_CNameMapping$C, "linkedIn insight tag", NAME$C), _defineProperty(_CNameMapping$C, "Linkedin_insight_tag", NAME$C), _defineProperty(_CNameMapping$C, "LinkedinInsighttag", NAME$C), _defineProperty(_CNameMapping$C, "LinkedinInsightTag", NAME$C), _defineProperty(_CNameMapping$C, "LinkedInInsightTag", NAME$C), _defineProperty(_CNameMapping$C, "Linkedininsighttag", NAME$C), _defineProperty(_CNameMapping$C, "LINKEDININSIGHTTAG", NAME$C), _defineProperty(_CNameMapping$C, "linkedininsighttag", NAME$C), _CNameMapping$C);
      var _CNameMapping$B;
      var NAME$B = "LOTAME";
      var CNameMapping$B = (_CNameMapping$B = {}, _defineProperty(_CNameMapping$B, NAME$B, NAME$B), _defineProperty(_CNameMapping$B, "Lotame", NAME$B), _defineProperty(_CNameMapping$B, "lotame", NAME$B), _CNameMapping$B);
      var _CNameMapping$A;
      var NAME$A = "LYTICS";
      var CNameMapping$A = (_CNameMapping$A = {}, _defineProperty(_CNameMapping$A, NAME$A, NAME$A), _defineProperty(_CNameMapping$A, "Lytics", NAME$A), _defineProperty(_CNameMapping$A, "lytics", NAME$A), _CNameMapping$A);
      var _CNameMapping$z;
      var NAME$z = "MP";
      var CNameMapping$z = (_CNameMapping$z = {}, _defineProperty(_CNameMapping$z, NAME$z, NAME$z), _defineProperty(_CNameMapping$z, "MIXPANEL", NAME$z), _defineProperty(_CNameMapping$z, "Mixpanel", NAME$z), _defineProperty(_CNameMapping$z, "MIX PANEL", NAME$z), _defineProperty(_CNameMapping$z, "Mix panel", NAME$z), _defineProperty(_CNameMapping$z, "Mix Panel", NAME$z), _CNameMapping$z);
      var _CNameMapping$y;
      var NAME$y = "MOENGAGE";
      var CNameMapping$y = (_CNameMapping$y = {}, _defineProperty(_CNameMapping$y, NAME$y, NAME$y), _defineProperty(_CNameMapping$y, "MoEngage", NAME$y), _defineProperty(_CNameMapping$y, "moengage", NAME$y), _defineProperty(_CNameMapping$y, "Moengage", NAME$y), _defineProperty(_CNameMapping$y, "Mo Engage", NAME$y), _defineProperty(_CNameMapping$y, "mo engage", NAME$y), _defineProperty(_CNameMapping$y, "Mo engage", NAME$y), _CNameMapping$y);
      var _CNameMapping$x;
      var NAME$x = "OPTIMIZELY";
      var CNameMapping$x = (_CNameMapping$x = {}, _defineProperty(_CNameMapping$x, NAME$x, NAME$x), _defineProperty(_CNameMapping$x, "Optimizely", NAME$x), _defineProperty(_CNameMapping$x, "optimizely", NAME$x), _CNameMapping$x);
      var _CNameMapping$w;
      var NAME$w = "PENDO";
      var CNameMapping$w = (_CNameMapping$w = {}, _defineProperty(_CNameMapping$w, NAME$w, NAME$w), _defineProperty(_CNameMapping$w, "Pendo", NAME$w), _defineProperty(_CNameMapping$w, "pendo", NAME$w), _CNameMapping$w);
      var _CNameMapping$v;
      var NAME$v = "PINTEREST_TAG";
      var CNameMapping$v = (_CNameMapping$v = {}, _defineProperty(_CNameMapping$v, NAME$v, NAME$v), _defineProperty(_CNameMapping$v, "PinterestTag", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest_Tag", NAME$v), _defineProperty(_CNameMapping$v, "PINTERESTTAG", NAME$v), _defineProperty(_CNameMapping$v, "pinterest", NAME$v), _defineProperty(_CNameMapping$v, "PinterestAds", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest_Ads", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest Tag", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest tag", NAME$v), _defineProperty(_CNameMapping$v, "PINTEREST TAG", NAME$v), _defineProperty(_CNameMapping$v, "pinterest tag", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest Ads", NAME$v), _defineProperty(_CNameMapping$v, "Pinterest ads", NAME$v), _CNameMapping$v);
      var _CNameMapping$u;
      var NAME$u = "POST_AFFILIATE_PRO";
      var CNameMapping$u = (_CNameMapping$u = {}, _defineProperty(_CNameMapping$u, NAME$u, NAME$u), _defineProperty(_CNameMapping$u, "PostAffiliatePro", NAME$u), _defineProperty(_CNameMapping$u, "Post_affiliate_pro", NAME$u), _defineProperty(_CNameMapping$u, "Post Affiliate Pro", NAME$u), _defineProperty(_CNameMapping$u, "Post affiliate pro", NAME$u), _defineProperty(_CNameMapping$u, "post affiliate pro", NAME$u), _defineProperty(_CNameMapping$u, "postaffiliatepro", NAME$u), _defineProperty(_CNameMapping$u, "POSTAFFILIATEPRO", NAME$u), _CNameMapping$u);
      var _CNameMapping$t;
      var NAME$t = "POSTHOG";
      var CNameMapping$t = (_CNameMapping$t = {}, _defineProperty(_CNameMapping$t, NAME$t, NAME$t), _defineProperty(_CNameMapping$t, "PostHog", NAME$t), _defineProperty(_CNameMapping$t, "Posthog", NAME$t), _defineProperty(_CNameMapping$t, "posthog", NAME$t), _defineProperty(_CNameMapping$t, "Post Hog", NAME$t), _defineProperty(_CNameMapping$t, "Post hog", NAME$t), _defineProperty(_CNameMapping$t, "post hog", NAME$t), _CNameMapping$t);
      var _CNameMapping$s;
      var NAME$s = "PROFITWELL";
      var CNameMapping$s = (_CNameMapping$s = {}, _defineProperty(_CNameMapping$s, NAME$s, NAME$s), _defineProperty(_CNameMapping$s, "ProfitWell", NAME$s), _defineProperty(_CNameMapping$s, "profitwell", NAME$s), _defineProperty(_CNameMapping$s, "Profitwell", NAME$s), _defineProperty(_CNameMapping$s, "Profit Well", NAME$s), _defineProperty(_CNameMapping$s, "profit well", NAME$s), _defineProperty(_CNameMapping$s, "Profit well", NAME$s), _CNameMapping$s);
      var _CNameMapping$r;
      var NAME$r = "QUALTRICS";
      var CNameMapping$r = (_CNameMapping$r = {}, _defineProperty(_CNameMapping$r, NAME$r, NAME$r), _defineProperty(_CNameMapping$r, "Qualtrics", NAME$r), _defineProperty(_CNameMapping$r, "qualtrics", NAME$r), _CNameMapping$r);
      var _CNameMapping$q;
      var NAME$q = "QUANTUMMETRIC";
      var CNameMapping$q = (_CNameMapping$q = {}, _defineProperty(_CNameMapping$q, NAME$q, NAME$q), _defineProperty(_CNameMapping$q, "Quantum Metric", NAME$q), _defineProperty(_CNameMapping$q, "quantum Metric", NAME$q), _defineProperty(_CNameMapping$q, "quantum metric", NAME$q), _defineProperty(_CNameMapping$q, "QuantumMetric", NAME$q), _defineProperty(_CNameMapping$q, "quantumMetric", NAME$q), _defineProperty(_CNameMapping$q, "quantummetric", NAME$q), _defineProperty(_CNameMapping$q, "Quantum_Metric", NAME$q), _CNameMapping$q);
      var _CNameMapping$p;
      var NAME$p = "REDDIT_PIXEL";
      var CNameMapping$p = (_CNameMapping$p = {}, _defineProperty(_CNameMapping$p, NAME$p, NAME$p), _defineProperty(_CNameMapping$p, "Reddit_Pixel", NAME$p), _defineProperty(_CNameMapping$p, "RedditPixel", NAME$p), _defineProperty(_CNameMapping$p, "REDDITPIXEL", NAME$p), _defineProperty(_CNameMapping$p, "redditpixel", NAME$p), _defineProperty(_CNameMapping$p, "Reddit Pixel", NAME$p), _defineProperty(_CNameMapping$p, "REDDIT PIXEL", NAME$p), _defineProperty(_CNameMapping$p, "reddit pixel", NAME$p), _CNameMapping$p);
      var _CNameMapping$o;
      var NAME$o = "SENTRY";
      var CNameMapping$o = (_CNameMapping$o = {}, _defineProperty(_CNameMapping$o, NAME$o, NAME$o), _defineProperty(_CNameMapping$o, "sentry", NAME$o), _defineProperty(_CNameMapping$o, "Sentry", NAME$o), _CNameMapping$o);
      var _CNameMapping$n;
      var NAME$n = "SNAP_PIXEL";
      var CNameMapping$n = (_CNameMapping$n = {}, _defineProperty(_CNameMapping$n, NAME$n, NAME$n), _defineProperty(_CNameMapping$n, "Snap_Pixel", NAME$n), _defineProperty(_CNameMapping$n, "SnapPixel", NAME$n), _defineProperty(_CNameMapping$n, "SNAPPIXEL", NAME$n), _defineProperty(_CNameMapping$n, "snappixel", NAME$n), _defineProperty(_CNameMapping$n, "Snap Pixel", NAME$n), _defineProperty(_CNameMapping$n, "SNAP PIXEL", NAME$n), _defineProperty(_CNameMapping$n, "snap pixel", NAME$n), _CNameMapping$n);
      var _CNameMapping$m;
      var NAME$m = "TVSQUARED";
      var CNameMapping$m = (_CNameMapping$m = {}, _defineProperty(_CNameMapping$m, NAME$m, NAME$m), _defineProperty(_CNameMapping$m, "TVSquared", NAME$m), _defineProperty(_CNameMapping$m, "tvsquared", NAME$m), _defineProperty(_CNameMapping$m, "tvSquared", NAME$m), _defineProperty(_CNameMapping$m, "TvSquared", NAME$m), _defineProperty(_CNameMapping$m, "Tvsquared", NAME$m), _defineProperty(_CNameMapping$m, "TV Squared", NAME$m), _defineProperty(_CNameMapping$m, "tv squared", NAME$m), _defineProperty(_CNameMapping$m, "tv Squared", NAME$m), _CNameMapping$m);
      var _CNameMapping$l;
      var NAME$l = "VWO";
      var CNameMapping$l = (_CNameMapping$l = {}, _defineProperty(_CNameMapping$l, NAME$l, NAME$l), _defineProperty(_CNameMapping$l, "VisualWebsiteOptimizer", NAME$l), _defineProperty(_CNameMapping$l, "Visualwebsiteoptimizer", NAME$l), _defineProperty(_CNameMapping$l, "visualwebsiteoptimizer", NAME$l), _defineProperty(_CNameMapping$l, "vwo", NAME$l), _defineProperty(_CNameMapping$l, "Visual Website Optimizer", NAME$l), _defineProperty(_CNameMapping$l, "Visual website optimizer", NAME$l), _defineProperty(_CNameMapping$l, "visual website optimizer", NAME$l), _CNameMapping$l);
      var _CNameMapping$k;
      var NAME$k = "GA360";
      var CNameMapping$k = (_CNameMapping$k = {}, _defineProperty(_CNameMapping$k, NAME$k, NAME$k), _defineProperty(_CNameMapping$k, "Google Analytics 360", NAME$k), _defineProperty(_CNameMapping$k, "Google analytics 360", NAME$k), _defineProperty(_CNameMapping$k, "google analytics 360", NAME$k), _defineProperty(_CNameMapping$k, "Google Analytics360", NAME$k), _defineProperty(_CNameMapping$k, "Google analytics360", NAME$k), _defineProperty(_CNameMapping$k, "google analytics360", NAME$k), _defineProperty(_CNameMapping$k, "GoogleAnalytics360", NAME$k), _defineProperty(_CNameMapping$k, "GA 360", NAME$k), _CNameMapping$k);
      var _CNameMapping$j;
      var NAME$j = "ADROLL";
      var CNameMapping$j = (_CNameMapping$j = {}, _defineProperty(_CNameMapping$j, NAME$j, NAME$j), _defineProperty(_CNameMapping$j, "Adroll", NAME$j), _defineProperty(_CNameMapping$j, "Ad roll", NAME$j), _defineProperty(_CNameMapping$j, "ad roll", NAME$j), _defineProperty(_CNameMapping$j, "adroll", NAME$j), _CNameMapping$j);
      var _CNameMapping$i;
      var NAME$i = "DCM_FLOODLIGHT";
      var CNameMapping$i = (_CNameMapping$i = {}, _defineProperty(_CNameMapping$i, NAME$i, NAME$i), _defineProperty(_CNameMapping$i, "DCM Floodlight", NAME$i), _defineProperty(_CNameMapping$i, "dcm floodlight", NAME$i), _defineProperty(_CNameMapping$i, "Dcm Floodlight", NAME$i), _defineProperty(_CNameMapping$i, "DCMFloodlight", NAME$i), _defineProperty(_CNameMapping$i, "dcmfloodlight", NAME$i), _defineProperty(_CNameMapping$i, "DcmFloodlight", NAME$i), _defineProperty(_CNameMapping$i, "dcm_floodlight", NAME$i), _defineProperty(_CNameMapping$i, "DCM_Floodlight", NAME$i), _CNameMapping$i);
      var _CNameMapping$h;
      var NAME$h = "MATOMO";
      var CNameMapping$h = (_CNameMapping$h = {}, _defineProperty(_CNameMapping$h, NAME$h, NAME$h), _defineProperty(_CNameMapping$h, "Matomo", NAME$h), _defineProperty(_CNameMapping$h, "matomo", NAME$h), _CNameMapping$h);
      var _CNameMapping$g;
      var NAME$g = "VERO";
      var CNameMapping$g = (_CNameMapping$g = {}, _defineProperty(_CNameMapping$g, NAME$g, NAME$g), _defineProperty(_CNameMapping$g, "Vero", NAME$g), _defineProperty(_CNameMapping$g, "vero", NAME$g), _CNameMapping$g);
      var _CNameMapping$f;
      var NAME$f = "MOUSEFLOW";
      var CNameMapping$f = (_CNameMapping$f = {}, _defineProperty(_CNameMapping$f, NAME$f, NAME$f), _defineProperty(_CNameMapping$f, "Mouseflow", NAME$f), _defineProperty(_CNameMapping$f, "mouseflow", NAME$f), _defineProperty(_CNameMapping$f, "mouseFlow", NAME$f), _defineProperty(_CNameMapping$f, "MouseFlow", NAME$f), _defineProperty(_CNameMapping$f, "Mouse flow", NAME$f), _defineProperty(_CNameMapping$f, "mouse flow", NAME$f), _defineProperty(_CNameMapping$f, "mouse Flow", NAME$f), _defineProperty(_CNameMapping$f, "Mouse Flow", NAME$f), _CNameMapping$f);
      var _CNameMapping$e;
      var NAME$e = "ROCKERBOX";
      var CNameMapping$e = (_CNameMapping$e = {}, _defineProperty(_CNameMapping$e, NAME$e, NAME$e), _defineProperty(_CNameMapping$e, "Rockerbox", NAME$e), _defineProperty(_CNameMapping$e, "rockerbox", NAME$e), _defineProperty(_CNameMapping$e, "RockerBox", NAME$e), _defineProperty(_CNameMapping$e, "Rocker box", NAME$e), _defineProperty(_CNameMapping$e, "rocker box", NAME$e), _defineProperty(_CNameMapping$e, "Rocker Box", NAME$e), _CNameMapping$e);
      var _CNameMapping$d;
      var NAME$d = "CONVERTFLOW";
      var CNameMapping$d = (_CNameMapping$d = {}, _defineProperty(_CNameMapping$d, NAME$d, NAME$d), _defineProperty(_CNameMapping$d, "Convertflow", NAME$d), _defineProperty(_CNameMapping$d, "convertflow", NAME$d), _defineProperty(_CNameMapping$d, "convertFlow", NAME$d), _defineProperty(_CNameMapping$d, "ConvertFlow", NAME$d), _defineProperty(_CNameMapping$d, "Convert flow", NAME$d), _defineProperty(_CNameMapping$d, "convert flow", NAME$d), _defineProperty(_CNameMapping$d, "convert Flow", NAME$d), _defineProperty(_CNameMapping$d, "Convert Flow", NAME$d), _defineProperty(_CNameMapping$d, "CONVERT FLOW", NAME$d), _CNameMapping$d);
      var _CNameMapping$c;
      var NAME$c = "SNAPENGAGE";
      var CNameMapping$c = (_CNameMapping$c = {}, _defineProperty(_CNameMapping$c, NAME$c, NAME$c), _defineProperty(_CNameMapping$c, "SnapEngage", NAME$c), _defineProperty(_CNameMapping$c, "Snap_Engage", NAME$c), _defineProperty(_CNameMapping$c, "snapengage", NAME$c), _defineProperty(_CNameMapping$c, "SNAP ENGAGE", NAME$c), _defineProperty(_CNameMapping$c, "Snap Engage", NAME$c), _defineProperty(_CNameMapping$c, "snap engage", NAME$c), _CNameMapping$c);
      var _CNameMapping$b;
      var NAME$b = "LIVECHAT";
      var CNameMapping$b = (_CNameMapping$b = {}, _defineProperty(_CNameMapping$b, NAME$b, NAME$b), _defineProperty(_CNameMapping$b, "LiveChat", NAME$b), _defineProperty(_CNameMapping$b, "Live_Chat", NAME$b), _defineProperty(_CNameMapping$b, "livechat", NAME$b), _defineProperty(_CNameMapping$b, "LIVE CHAT", NAME$b), _defineProperty(_CNameMapping$b, "Live Chat", NAME$b), _defineProperty(_CNameMapping$b, "live chat", NAME$b), _CNameMapping$b);
      var _CNameMapping$a;
      var NAME$a = "SHYNET";
      var CNameMapping$a = (_CNameMapping$a = {}, _defineProperty(_CNameMapping$a, NAME$a, NAME$a), _defineProperty(_CNameMapping$a, "shynet", NAME$a), _defineProperty(_CNameMapping$a, "ShyNet", NAME$a), _defineProperty(_CNameMapping$a, "shyNet", NAME$a), _defineProperty(_CNameMapping$a, "Shynet", NAME$a), _defineProperty(_CNameMapping$a, "shy net", NAME$a), _defineProperty(_CNameMapping$a, "Shy Net", NAME$a), _defineProperty(_CNameMapping$a, "shy Net", NAME$a), _defineProperty(_CNameMapping$a, "Shy net", NAME$a), _CNameMapping$a);
      var _CNameMapping$9;
      var NAME$9 = "WOOPRA";
      var CNameMapping$9 = (_CNameMapping$9 = {}, _defineProperty(_CNameMapping$9, NAME$9, NAME$9), _defineProperty(_CNameMapping$9, "Woopra", NAME$9), _defineProperty(_CNameMapping$9, "woopra", NAME$9), _CNameMapping$9);
      var _CNameMapping$8;
      var NAME$8 = "ROLLBAR";
      var CNameMapping$8 = (_CNameMapping$8 = {}, _defineProperty(_CNameMapping$8, NAME$8, NAME$8), _defineProperty(_CNameMapping$8, "RollBar", NAME$8), _defineProperty(_CNameMapping$8, "Roll_Bar", NAME$8), _defineProperty(_CNameMapping$8, "rollbar", NAME$8), _defineProperty(_CNameMapping$8, "Rollbar", NAME$8), _defineProperty(_CNameMapping$8, "ROLL BAR", NAME$8), _defineProperty(_CNameMapping$8, "Roll Bar", NAME$8), _defineProperty(_CNameMapping$8, "roll bar", NAME$8), _CNameMapping$8);
      var _CNameMapping$7;
      var NAME$7 = "QUORA_PIXEL";
      var CNameMapping$7 = (_CNameMapping$7 = {}, _defineProperty(_CNameMapping$7, NAME$7, NAME$7), _defineProperty(_CNameMapping$7, "Quora Pixel", NAME$7), _defineProperty(_CNameMapping$7, "Quora pixel", NAME$7), _defineProperty(_CNameMapping$7, "QUORA PIXEL", NAME$7), _defineProperty(_CNameMapping$7, "QuoraPixel", NAME$7), _defineProperty(_CNameMapping$7, "Quorapixel", NAME$7), _defineProperty(_CNameMapping$7, "QUORAPIXEL", NAME$7), _defineProperty(_CNameMapping$7, "Quora_Pixel", NAME$7), _defineProperty(_CNameMapping$7, "quora_pixel", NAME$7), _defineProperty(_CNameMapping$7, "Quora", NAME$7), _CNameMapping$7);
      var _CNameMapping$6;
      var NAME$6 = "JUNE";
      var CNameMapping$6 = (_CNameMapping$6 = {}, _defineProperty(_CNameMapping$6, NAME$6, NAME$6), _defineProperty(_CNameMapping$6, "June", NAME$6), _defineProperty(_CNameMapping$6, "june", NAME$6), _CNameMapping$6);
      var _CNameMapping$5;
      var NAME$5 = "ENGAGE";
      var CNameMapping$5 = (_CNameMapping$5 = {}, _defineProperty(_CNameMapping$5, NAME$5, NAME$5), _defineProperty(_CNameMapping$5, "Engage", NAME$5), _defineProperty(_CNameMapping$5, "engage", NAME$5), _CNameMapping$5);
      var _CNameMapping$4;
      var NAME$4 = "ITERABLE";
      var CNameMapping$4 = (_CNameMapping$4 = {}, _defineProperty(_CNameMapping$4, NAME$4, NAME$4), _defineProperty(_CNameMapping$4, "Iterable", NAME$4), _defineProperty(_CNameMapping$4, "iterable", NAME$4), _CNameMapping$4);
      var _CNameMapping$3;
      var NAME$3 = "YANDEX_METRICA";
      var CNameMapping$3 = (_CNameMapping$3 = {}, _defineProperty(_CNameMapping$3, NAME$3, NAME$3), _defineProperty(_CNameMapping$3, "Yandexmetrica", NAME$3), _defineProperty(_CNameMapping$3, "yandexmetrica", NAME$3), _defineProperty(_CNameMapping$3, "yandexMetrica", NAME$3), _defineProperty(_CNameMapping$3, "YandexMetrica", NAME$3), _CNameMapping$3);
      var _CNameMapping$2;
      var NAME$2 = "REFINER";
      var CNameMapping$2 = (_CNameMapping$2 = {}, _defineProperty(_CNameMapping$2, NAME$2, NAME$2), _defineProperty(_CNameMapping$2, "Refiner", NAME$2), _defineProperty(_CNameMapping$2, "refiner", NAME$2), _CNameMapping$2);
      var _CNameMapping$1;
      var NAME$1 = "QUALAROO";
      var CNameMapping$1 = (_CNameMapping$1 = {}, _defineProperty(_CNameMapping$1, NAME$1, NAME$1), _defineProperty(_CNameMapping$1, "Qualaroo", NAME$1), _defineProperty(_CNameMapping$1, "qualaroo", NAME$1), _CNameMapping$1);
      var _CNameMapping;
      var NAME = "PODSIGHTS";
      var CNameMapping = (_CNameMapping = {}, _defineProperty(_CNameMapping, NAME, NAME), _defineProperty(_CNameMapping, "Podsights", NAME), _defineProperty(_CNameMapping, "PodSights", NAME), _defineProperty(_CNameMapping, "pod Sights", NAME), _defineProperty(_CNameMapping, "Pod Sights", NAME), _defineProperty(_CNameMapping, "pod sights", NAME), _defineProperty(_CNameMapping, "POD SIGHTS", NAME), _defineProperty(_CNameMapping, "Pod sights", NAME), _CNameMapping);
      var commonNames = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
        All: "All"
      }, CNameMapping$11), CNameMapping$10), CNameMapping$$), CNameMapping$_), CNameMapping$Z), CNameMapping$Y), CNameMapping$X), CNameMapping$W), CNameMapping$V), CNameMapping$U), CNameMapping$T), CNameMapping$S), CNameMapping$R), CNameMapping$Q), CNameMapping$P), CNameMapping$O), CNameMapping$k), CNameMapping$N), CNameMapping$M), CNameMapping$L), CNameMapping$K), CNameMapping$J), CNameMapping$I), CNameMapping$H), CNameMapping$G), CNameMapping$F), CNameMapping$E), CNameMapping$D), CNameMapping$C), CNameMapping$B), CNameMapping$A), CNameMapping$z), CNameMapping$y), CNameMapping$x), CNameMapping$w), CNameMapping$v), CNameMapping$u), CNameMapping$t), CNameMapping$s), CNameMapping$r), CNameMapping$q), CNameMapping$p), CNameMapping$o), CNameMapping$n), CNameMapping$m), CNameMapping$l), CNameMapping$j), CNameMapping$i), CNameMapping$h), CNameMapping$g), CNameMapping$f), CNameMapping$d), CNameMapping$c), CNameMapping$b), CNameMapping$a), CNameMapping$9), CNameMapping$8), CNameMapping$7), CNameMapping$6), CNameMapping$5), CNameMapping$4), CNameMapping$e), CNameMapping$3), CNameMapping$2), CNameMapping$1), CNameMapping);
      var clientToServerNames = {
        All: "All",
        GA: "Google Analytics",
        GOOGLEADS: "Google Ads",
        BRAZE: "Braze",
        CHARTBEAT: "Chartbeat",
        COMSCORE: "Comscore",
        CUSTOMERIO: "Customer IO",
        DCM_Floodlight: "DCM Floodlight",
        FACEBOOK_PIXEL: "Facebook Pixel",
        GTM: "Google Tag Manager",
        HOTJAR: "Hotjar",
        HS: "HubSpot",
        INTERCOM: "Intercom",
        KEEN: "Keen",
        KISSMETRICS: "Kiss Metrics",
        LOTAME: "Lotame",
        VWO: "VWO",
        OPTIMIZELY: "Optimizely Web",
        FULLSTORY: "Fullstory",
        TVSQUARED: "TVSquared",
        GA4: "Google Analytics 4",
        MOENGAGE: "MoEngage",
        AM: "Amplitude",
        PENDO: "Pendo",
        LYTICS: "Lytics",
        APPCUES: "Appcues",
        POSTHOG: "PostHog",
        PROFITWELL: "ProfitWell",
        KLAVIYO: "Klaviyo",
        CLEVERTAP: "CleverTap",
        BINGADS: "Bing Ads",
        PINTEREST_TAG: "Pinterest Tag",
        SNAP_PIXEL: "Snap Pixel",
        LINKEDIN_INSIGHT_TAG: "Linkedin Insight Tag",
        REDDIT_PIXEL: "Reddit Pixel",
        DRIP: "Drip",
        HEAP: "Heap.io",
        CRITEO: "Criteo",
        MP: "Mixpanel",
        QUALTRICS: "Qualtrics",
        SENTRY: "Sentry",
        GOOGLE_OPTIMIZE: "Google Optimize",
        POST_AFFILIATE_PRO: "Post Affiliate Pro",
        LAUNCHDARKLY: "LaunchDarkly",
        GA360: "Google Analytics 360",
        ADROLL: "Adroll",
        VERO: "Vero",
        MATOMO: "Matomo",
        MOUSEFLOW: "Mouseflow",
        ROCKERBOX: "Rockerbox",
        CONVERTFLOW: "ConvertFlow",
        SNAPENGAGE: "SnapEngage",
        LIVECHAT: "LiveChat",
        SHYNET: "Shynet",
        WOOPRA: "Woopra",
        ROLLBAR: "RollBar",
        QUORA_PIXEL: "Quora Pixel",
        JUNE: "June",
        ENGAGE: "Engage",
        ITERABLE: "Iterable",
        YANDEX_METRICA: "Yandex.Metrica",
        REFINER: "Refiner",
        QUALAROO: "Qualaroo",
        PODSIGHTS: "Podsights"
      };
      var RESERVED_KEYS = ["anonymous_id", "id", "sent_at", "received_at", "timestamp", "original_timestamp", "event_text", "event"];
      var CONFIG_URL = "https://api.rudderlabs.com/sourceConfig/?p=npm&v=2.20.0";
      var CDN_INT_DIR = "js-integrations";
      var DEST_SDK_BASE_URL = "https://cdn.rudderlabs.com/v1.1/".concat(CDN_INT_DIR);
      var MAX_WAIT_FOR_INTEGRATION_LOAD = 1e4;
      var INTEGRATION_LOAD_CHECK_INTERVAL = 1e3;
      var INTG_SUFFIX = "_RS";
      var POLYFILL_URL = "https://polyfill.io/v3/polyfill.min.js?features=Array.prototype.find%2CArray.prototype.includes%2CPromise%2CString.prototype.endsWith%2CString.prototype.includes%2CString.prototype.startsWith%2CObject.entries%2CObject.values%2CElement.prototype.dataset%2CString.prototype.replaceAll";
      var DEFAULT_ERROR_REPORT_PROVIDER = "bugsnag";
      var ERROR_REPORT_PROVIDERS = [DEFAULT_ERROR_REPORT_PROVIDER];
      var SAMESITE_COOKIE_OPTS = ["Lax", "None", "Strict"];
      var DEFAULT_SESSION_TIMEOUT = 30 * 60 * 1e3;
      var MIN_SESSION_TIMEOUT = 10 * 1e3;
      var MIN_SESSION_ID_LENGTH = 10;
      var aes = { exports: {} };
      var core = { exports: {} };
      var hasRequiredCore;
      function requireCore() {
        if (hasRequiredCore)
          return core.exports;
        hasRequiredCore = 1;
        (function(module2, exports3) {
          (function(root, factory) {
            {
              module2.exports = factory();
            }
          })(commonjsGlobal, function() {
            var CryptoJS = CryptoJS || function(Math2, undefined$1) {
              var create = Object.create || function() {
                function F() {
                }
                return function(obj) {
                  var subtype;
                  F.prototype = obj;
                  subtype = new F();
                  F.prototype = null;
                  return subtype;
                };
              }();
              var C = {};
              var C_lib = C.lib = {};
              var Base = C_lib.Base = function() {
                return {
                  extend: function extend(overrides) {
                    var subtype = create(this);
                    if (overrides) {
                      subtype.mixIn(overrides);
                    }
                    if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                      subtype.init = function() {
                        subtype.$super.init.apply(this, arguments);
                      };
                    }
                    subtype.init.prototype = subtype;
                    subtype.$super = this;
                    return subtype;
                  },
                  create: function create2() {
                    var instance2 = this.extend();
                    instance2.init.apply(instance2, arguments);
                    return instance2;
                  },
                  init: function init2() {
                  },
                  mixIn: function mixIn(properties) {
                    for (var propertyName in properties) {
                      if (properties.hasOwnProperty(propertyName)) {
                        this[propertyName] = properties[propertyName];
                      }
                    }
                    if (properties.hasOwnProperty("toString")) {
                      this.toString = properties.toString;
                    }
                  },
                  clone: function clone() {
                    return this.init.prototype.extend(this);
                  }
                };
              }();
              var WordArray = C_lib.WordArray = Base.extend({
                init: function init2(words, sigBytes) {
                  words = this.words = words || [];
                  if (sigBytes != undefined$1) {
                    this.sigBytes = sigBytes;
                  } else {
                    this.sigBytes = words.length * 4;
                  }
                },
                toString: function toString(encoder) {
                  return (encoder || Hex).stringify(this);
                },
                concat: function concat(wordArray) {
                  var thisWords = this.words;
                  var thatWords = wordArray.words;
                  var thisSigBytes = this.sigBytes;
                  var thatSigBytes = wordArray.sigBytes;
                  this.clamp();
                  if (thisSigBytes % 4) {
                    for (var i2 = 0; i2 < thatSigBytes; i2++) {
                      var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                      thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
                    }
                  } else {
                    for (var i2 = 0; i2 < thatSigBytes; i2 += 4) {
                      thisWords[thisSigBytes + i2 >>> 2] = thatWords[i2 >>> 2];
                    }
                  }
                  this.sigBytes += thatSigBytes;
                  return this;
                },
                clamp: function clamp() {
                  var words = this.words;
                  var sigBytes = this.sigBytes;
                  words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
                  words.length = Math2.ceil(sigBytes / 4);
                },
                clone: function clone() {
                  var clone2 = Base.clone.call(this);
                  clone2.words = this.words.slice(0);
                  return clone2;
                },
                random: function random(nBytes) {
                  var words = [];
                  var r = function r2(m_w) {
                    var m_w = m_w;
                    var m_z = 987654321;
                    var mask = 4294967295;
                    return function() {
                      m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                      m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                      var result = (m_z << 16) + m_w & mask;
                      result /= 4294967296;
                      result += 0.5;
                      return result * (Math2.random() > 0.5 ? 1 : -1);
                    };
                  };
                  for (var i2 = 0, rcache; i2 < nBytes; i2 += 4) {
                    var _r = r((rcache || Math2.random()) * 4294967296);
                    rcache = _r() * 987654071;
                    words.push(_r() * 4294967296 | 0);
                  }
                  return new WordArray.init(words, nBytes);
                }
              });
              var C_enc = C.enc = {};
              var Hex = C_enc.Hex = {
                stringify: function stringify2(wordArray) {
                  var words = wordArray.words;
                  var sigBytes = wordArray.sigBytes;
                  var hexChars = [];
                  for (var i2 = 0; i2 < sigBytes; i2++) {
                    var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 15).toString(16));
                  }
                  return hexChars.join("");
                },
                parse: function parse2(hexStr) {
                  var hexStrLength = hexStr.length;
                  var words = [];
                  for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
                    words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
                  }
                  return new WordArray.init(words, hexStrLength / 2);
                }
              };
              var Latin1 = C_enc.Latin1 = {
                stringify: function stringify2(wordArray) {
                  var words = wordArray.words;
                  var sigBytes = wordArray.sigBytes;
                  var latin1Chars = [];
                  for (var i2 = 0; i2 < sigBytes; i2++) {
                    var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                    latin1Chars.push(String.fromCharCode(bite));
                  }
                  return latin1Chars.join("");
                },
                parse: function parse2(latin1Str) {
                  var latin1StrLength = latin1Str.length;
                  var words = [];
                  for (var i2 = 0; i2 < latin1StrLength; i2++) {
                    words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
                  }
                  return new WordArray.init(words, latin1StrLength);
                }
              };
              var Utf82 = C_enc.Utf8 = {
                stringify: function stringify2(wordArray) {
                  try {
                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                  } catch (e) {
                    throw new Error("Malformed UTF-8 data");
                  }
                },
                parse: function parse2(utf8Str) {
                  return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                }
              };
              var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                reset: function reset2() {
                  this._data = new WordArray.init();
                  this._nDataBytes = 0;
                },
                _append: function _append(data) {
                  if (typeof data == "string") {
                    data = Utf82.parse(data);
                  }
                  this._data.concat(data);
                  this._nDataBytes += data.sigBytes;
                },
                _process: function _process(doFlush) {
                  var data = this._data;
                  var dataWords = data.words;
                  var dataSigBytes = data.sigBytes;
                  var blockSize = this.blockSize;
                  var blockSizeBytes = blockSize * 4;
                  var nBlocksReady = dataSigBytes / blockSizeBytes;
                  if (doFlush) {
                    nBlocksReady = Math2.ceil(nBlocksReady);
                  } else {
                    nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
                  }
                  var nWordsReady = nBlocksReady * blockSize;
                  var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
                  if (nWordsReady) {
                    for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                      this._doProcessBlock(dataWords, offset);
                    }
                    var processedWords = dataWords.splice(0, nWordsReady);
                    data.sigBytes -= nBytesReady;
                  }
                  return new WordArray.init(processedWords, nBytesReady);
                },
                clone: function clone() {
                  var clone2 = Base.clone.call(this);
                  clone2._data = this._data.clone();
                  return clone2;
                },
                _minBufferSize: 0
              });
              C_lib.Hasher = BufferedBlockAlgorithm.extend({
                cfg: Base.extend(),
                init: function init2(cfg) {
                  this.cfg = this.cfg.extend(cfg);
                  this.reset();
                },
                reset: function reset2() {
                  BufferedBlockAlgorithm.reset.call(this);
                  this._doReset();
                },
                update: function update(messageUpdate) {
                  this._append(messageUpdate);
                  this._process();
                  return this;
                },
                finalize: function finalize(messageUpdate) {
                  if (messageUpdate) {
                    this._append(messageUpdate);
                  }
                  var hash = this._doFinalize();
                  return hash;
                },
                blockSize: 512 / 32,
                _createHelper: function _createHelper(hasher) {
                  return function(message, cfg) {
                    return new hasher.init(cfg).finalize(message);
                  };
                },
                _createHmacHelper: function _createHmacHelper(hasher) {
                  return function(message, key) {
                    return new C_algo.HMAC.init(hasher, key).finalize(message);
                  };
                }
              });
              var C_algo = C.algo = {};
              return C;
            }(Math);
            return CryptoJS;
          });
        })(core);
        return core.exports;
      }
      var encBase64 = { exports: {} };
      var hasRequiredEncBase64;
      function requireEncBase64() {
        if (hasRequiredEncBase64)
          return encBase64.exports;
        hasRequiredEncBase64 = 1;
        (function(module2, exports3) {
          (function(root, factory) {
            {
              module2.exports = factory(requireCore());
            }
          })(commonjsGlobal, function(CryptoJS) {
            (function() {
              var C = CryptoJS;
              var C_lib = C.lib;
              var WordArray = C_lib.WordArray;
              var C_enc = C.enc;
              C_enc.Base64 = {
                stringify: function stringify2(wordArray) {
                  var words = wordArray.words;
                  var sigBytes = wordArray.sigBytes;
                  var map = this._map;
                  wordArray.clamp();
                  var base64Chars = [];
                  for (var i2 = 0; i2 < sigBytes; i2 += 3) {
                    var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                    var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
                    var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
                    var triplet = byte1 << 16 | byte2 << 8 | byte3;
                    for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                      base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
                    }
                  }
                  var paddingChar = map.charAt(64);
                  if (paddingChar) {
                    while (base64Chars.length % 4) {
                      base64Chars.push(paddingChar);
                    }
                  }
                  return base64Chars.join("");
                },
                parse: function parse2(base64Str) {
                  var base64StrLength = base64Str.length;
                  var map = this._map;
                  var reverseMap = this._reverseMap;
                  if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for (var j = 0; j < map.length; j++) {
                      reverseMap[map.charCodeAt(j)] = j;
                    }
                  }
                  var paddingChar = map.charAt(64);
                  if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) {
                      base64StrLength = paddingIndex;
                    }
                  }
                  return parseLoop(base64Str, base64StrLength, reverseMap);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
              };
              function parseLoop(base64Str, base64StrLength, reverseMap) {
                var words = [];
                var nBytes = 0;
                for (var i2 = 0; i2 < base64StrLength; i2++) {
                  if (i2 % 4) {
                    var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
                    var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
                    words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
                    nBytes++;
                  }
                }
                return WordArray.create(words, nBytes);
              }
            })();
            return CryptoJS.enc.Base64;
          });
        })(encBase64);
        return encBase64.exports;
      }
      var md5$1 = { exports: {} };
      var hasRequiredMd5;
      function requireMd5() {
        if (hasRequiredMd5)
          return md5$1.exports;
        hasRequiredMd5 = 1;
        (function(module2, exports3) {
          (function(root, factory) {
            {
              module2.exports = factory(requireCore());
            }
          })(commonjsGlobal, function(CryptoJS) {
            (function(Math2) {
              var C = CryptoJS;
              var C_lib = C.lib;
              var WordArray = C_lib.WordArray;
              var Hasher = C_lib.Hasher;
              var C_algo = C.algo;
              var T = [];
              (function() {
                for (var i2 = 0; i2 < 64; i2++) {
                  T[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
                }
              })();
              var MD5 = C_algo.MD5 = Hasher.extend({
                _doReset: function _doReset() {
                  this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878]);
                },
                _doProcessBlock: function _doProcessBlock(M, offset) {
                  for (var i2 = 0; i2 < 16; i2++) {
                    var offset_i = offset + i2;
                    var M_offset_i = M[offset_i];
                    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
                  }
                  var H = this._hash.words;
                  var M_offset_0 = M[offset + 0];
                  var M_offset_1 = M[offset + 1];
                  var M_offset_2 = M[offset + 2];
                  var M_offset_3 = M[offset + 3];
                  var M_offset_4 = M[offset + 4];
                  var M_offset_5 = M[offset + 5];
                  var M_offset_6 = M[offset + 6];
                  var M_offset_7 = M[offset + 7];
                  var M_offset_8 = M[offset + 8];
                  var M_offset_9 = M[offset + 9];
                  var M_offset_10 = M[offset + 10];
                  var M_offset_11 = M[offset + 11];
                  var M_offset_12 = M[offset + 12];
                  var M_offset_13 = M[offset + 13];
                  var M_offset_14 = M[offset + 14];
                  var M_offset_15 = M[offset + 15];
                  var a = H[0];
                  var b = H[1];
                  var c = H[2];
                  var d2 = H[3];
                  a = FF(a, b, c, d2, M_offset_0, 7, T[0]);
                  d2 = FF(d2, a, b, c, M_offset_1, 12, T[1]);
                  c = FF(c, d2, a, b, M_offset_2, 17, T[2]);
                  b = FF(b, c, d2, a, M_offset_3, 22, T[3]);
                  a = FF(a, b, c, d2, M_offset_4, 7, T[4]);
                  d2 = FF(d2, a, b, c, M_offset_5, 12, T[5]);
                  c = FF(c, d2, a, b, M_offset_6, 17, T[6]);
                  b = FF(b, c, d2, a, M_offset_7, 22, T[7]);
                  a = FF(a, b, c, d2, M_offset_8, 7, T[8]);
                  d2 = FF(d2, a, b, c, M_offset_9, 12, T[9]);
                  c = FF(c, d2, a, b, M_offset_10, 17, T[10]);
                  b = FF(b, c, d2, a, M_offset_11, 22, T[11]);
                  a = FF(a, b, c, d2, M_offset_12, 7, T[12]);
                  d2 = FF(d2, a, b, c, M_offset_13, 12, T[13]);
                  c = FF(c, d2, a, b, M_offset_14, 17, T[14]);
                  b = FF(b, c, d2, a, M_offset_15, 22, T[15]);
                  a = GG(a, b, c, d2, M_offset_1, 5, T[16]);
                  d2 = GG(d2, a, b, c, M_offset_6, 9, T[17]);
                  c = GG(c, d2, a, b, M_offset_11, 14, T[18]);
                  b = GG(b, c, d2, a, M_offset_0, 20, T[19]);
                  a = GG(a, b, c, d2, M_offset_5, 5, T[20]);
                  d2 = GG(d2, a, b, c, M_offset_10, 9, T[21]);
                  c = GG(c, d2, a, b, M_offset_15, 14, T[22]);
                  b = GG(b, c, d2, a, M_offset_4, 20, T[23]);
                  a = GG(a, b, c, d2, M_offset_9, 5, T[24]);
                  d2 = GG(d2, a, b, c, M_offset_14, 9, T[25]);
                  c = GG(c, d2, a, b, M_offset_3, 14, T[26]);
                  b = GG(b, c, d2, a, M_offset_8, 20, T[27]);
                  a = GG(a, b, c, d2, M_offset_13, 5, T[28]);
                  d2 = GG(d2, a, b, c, M_offset_2, 9, T[29]);
                  c = GG(c, d2, a, b, M_offset_7, 14, T[30]);
                  b = GG(b, c, d2, a, M_offset_12, 20, T[31]);
                  a = HH(a, b, c, d2, M_offset_5, 4, T[32]);
                  d2 = HH(d2, a, b, c, M_offset_8, 11, T[33]);
                  c = HH(c, d2, a, b, M_offset_11, 16, T[34]);
                  b = HH(b, c, d2, a, M_offset_14, 23, T[35]);
                  a = HH(a, b, c, d2, M_offset_1, 4, T[36]);
                  d2 = HH(d2, a, b, c, M_offset_4, 11, T[37]);
                  c = HH(c, d2, a, b, M_offset_7, 16, T[38]);
                  b = HH(b, c, d2, a, M_offset_10, 23, T[39]);
                  a = HH(a, b, c, d2, M_offset_13, 4, T[40]);
                  d2 = HH(d2, a, b, c, M_offset_0, 11, T[41]);
                  c = HH(c, d2, a, b, M_offset_3, 16, T[42]);
                  b = HH(b, c, d2, a, M_offset_6, 23, T[43]);
                  a = HH(a, b, c, d2, M_offset_9, 4, T[44]);
                  d2 = HH(d2, a, b, c, M_offset_12, 11, T[45]);
                  c = HH(c, d2, a, b, M_offset_15, 16, T[46]);
                  b = HH(b, c, d2, a, M_offset_2, 23, T[47]);
                  a = II(a, b, c, d2, M_offset_0, 6, T[48]);
                  d2 = II(d2, a, b, c, M_offset_7, 10, T[49]);
                  c = II(c, d2, a, b, M_offset_14, 15, T[50]);
                  b = II(b, c, d2, a, M_offset_5, 21, T[51]);
                  a = II(a, b, c, d2, M_offset_12, 6, T[52]);
                  d2 = II(d2, a, b, c, M_offset_3, 10, T[53]);
                  c = II(c, d2, a, b, M_offset_10, 15, T[54]);
                  b = II(b, c, d2, a, M_offset_1, 21, T[55]);
                  a = II(a, b, c, d2, M_offset_8, 6, T[56]);
                  d2 = II(d2, a, b, c, M_offset_15, 10, T[57]);
                  c = II(c, d2, a, b, M_offset_6, 15, T[58]);
                  b = II(b, c, d2, a, M_offset_13, 21, T[59]);
                  a = II(a, b, c, d2, M_offset_4, 6, T[60]);
                  d2 = II(d2, a, b, c, M_offset_11, 10, T[61]);
                  c = II(c, d2, a, b, M_offset_2, 15, T[62]);
                  b = II(b, c, d2, a, M_offset_9, 21, T[63]);
                  H[0] = H[0] + a | 0;
                  H[1] = H[1] + b | 0;
                  H[2] = H[2] + c | 0;
                  H[3] = H[3] + d2 | 0;
                },
                _doFinalize: function _doFinalize() {
                  var data = this._data;
                  var dataWords = data.words;
                  var nBitsTotal = this._nDataBytes * 8;
                  var nBitsLeft = data.sigBytes * 8;
                  dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                  var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
                  var nBitsTotalL = nBitsTotal;
                  dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
                  dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
                  data.sigBytes = (dataWords.length + 1) * 4;
                  this._process();
                  var hash = this._hash;
                  var H = hash.words;
                  for (var i2 = 0; i2 < 4; i2++) {
                    var H_i = H[i2];
                    H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
                  }
                  return hash;
                },
                clone: function clone() {
                  var clone2 = Hasher.clone.call(this);
                  clone2._hash = this._hash.clone();
                  return clone2;
                }
              });
              function FF(a, b, c, d2, x, s2, t) {
                var n = a + (b & c | ~b & d2) + x + t;
                return (n << s2 | n >>> 32 - s2) + b;
              }
              function GG(a, b, c, d2, x, s2, t) {
                var n = a + (b & d2 | c & ~d2) + x + t;
                return (n << s2 | n >>> 32 - s2) + b;
              }
              function HH(a, b, c, d2, x, s2, t) {
                var n = a + (b ^ c ^ d2) + x + t;
                return (n << s2 | n >>> 32 - s2) + b;
              }
              function II(a, b, c, d2, x, s2, t) {
                var n = a + (c ^ (b | ~d2)) + x + t;
                return (n << s2 | n >>> 32 - s2) + b;
              }
              C.MD5 = Hasher._createHelper(MD5);
              C.HmacMD5 = Hasher._createHmacHelper(MD5);
            })(Math);
            return CryptoJS.MD5;
          });
        })(md5$1);
        return md5$1.exports;
      }
      var evpkdf = { exports: {} };
      var sha1$1 = { exports: {} };
      var hasRequiredSha1;
      function requireSha1() {
        if (hasRequiredSha1)
          return sha1$1.exports;
        hasRequiredSha1 = 1;
        (function(module2, exports3) {
          (function(root, factory) {
            {
              module2.exports = factory(requireCore());
            }
          })(commonjsGlobal, function(CryptoJS) {
            (function() {
              var C = CryptoJS;
              var C_lib = C.lib;
              var WordArray = C_lib.WordArray;
              var Hasher = C_lib.Hasher;
              var C_algo = C.algo;
              var W = [];
              var SHA1 = C_algo.SHA1 = Hasher.extend({
                _doReset: function _doReset() {
                  this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
                },
                _doProcessBlock: function _doProcessBlock(M, offset) {
                  var H = this._hash.words;
                  var a = H[0];
                  var b = H[1];
                  var c = H[2];
                  var d2 = H[3];
                  var e = H[4];
                  for (var i2 = 0; i2 < 80; i2++) {
                    if (i2 < 16) {
                      W[i2] = M[offset + i2] | 0;
                    } else {
                      var n = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
                      W[i2] = n << 1 | n >>> 31;
                    }
                    var t = (a << 5 | a >>> 27) + e + W[i2];
                    if (i2 < 20) {
                      t += (b & c | ~b & d2) + 1518500249;
                    } else if (i2 < 40) {
                      t += (b ^ c ^ d2) + 1859775393;
                    } else if (i2 < 60) {
                      t += (b & c | b & d2 | c & d2) - 1894007588;
                    } else {
                      t += (b ^ c ^ d2) - 899497514;
                    }
                    e = d2;
                    d2 = c;
                    c = b << 30 | b >>> 2;
                    b = a;
                    a = t;
                  }
                  H[0] = H[0] + a | 0;
                  H[1] = H[1] + b | 0;
                  H[2] = H[2] + c | 0;
                  H[3] = H[3] + d2 | 0;
                  H[4] = H[4] + e | 0;
                },
                _doFinalize: function _doFinalize() {
                  var data = this._data;
                  var dataWords = data.words;
                  var nBitsTotal = this._nDataBytes * 8;
                  var nBitsLeft = data.sigBytes * 8;
                  dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                  dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
                  dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                  data.sigBytes = dataWords.length * 4;
                  this._process();
                  return this._hash;
                },
                clone: function clone() {
                  var clone2 = Hasher.clone.call(this);
                  clone2._hash = this._hash.clone();
                  return clone2;
                }
              });
              C.SHA1 = Hasher._createHelper(SHA1);
              C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
            })();
            return CryptoJS.SHA1;
          });
        })(sha1$1);
        return sha1$1.exports;
      }
      var hmac = { exports: {} };
      var hasRequiredHmac;
      function requireHmac() {
        if (hasRequiredHmac)
          return hmac.exports;
        hasRequiredHmac = 1;
        (function(module2, exports3) {
          (function(root, factory) {
            {
              module2.exports = factory(requireCore());
            }
          })(commonjsGlobal, function(CryptoJS) {
            (function() {
              var C = CryptoJS;
              var C_lib = C.lib;
              var Base = C_lib.Base;
              var C_enc = C.enc;
              var Utf82 = C_enc.Utf8;
              var C_algo = C.algo;
              C_algo.HMAC = Base.extend({
                init: function init2(hasher, key) {
                  hasher = this._hasher = new hasher.init();
                  if (typeof key == "string") {
                    key = Utf82.parse(key);
                  }
                  var hasherBlockSize = hasher.blockSize;
                  var hasherBlockSizeBytes = hasherBlockSize * 4;
                  if (key.sigBytes > hasherBlockSizeBytes) {
                    key = hasher.finalize(key);
                  }
                  key.clamp();
                  var oKey = this._oKey = key.clone();
                  var iKey = this._iKey = key.clone();
                  var oKeyWords = oKey.words;
                  var iKeyWords = iKey.words;
                  for (var i2 = 0; i2 < hasherBlockSize; i2++) {
                    oKeyWords[i2] ^= 1549556828;
                    iKeyWords[i2] ^= 909522486;
                  }
                  oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                  this.reset();
                },
                reset: function reset2() {
                  var hasher = this._hasher;
                  hasher.reset();
                  hasher.update(this._iKey);
                },
                update: function update(messageUpdate) {
                  this._hasher.update(messageUpdate);
                  return this;
                },
                finalize: function finalize(messageUpdate) {
                  var hasher = this._hasher;
                  var innerHash = hasher.finalize(messageUpdate);
                  hasher.reset();
                  var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
                  return hmac2;
                }
              });
            })();
          });
        })(hmac);
        return hmac.exports;
      }
      var hasRequiredEvpkdf;
      function requireEvpkdf() {
        if (hasRequiredEvpkdf)
          return evpkdf.exports;
        hasRequiredEvpkdf = 1;
        (function(module2, exports3) {
          (function(root, factory, undef) {
            {
              module2.exports = factory(requireCore(), requireSha1(), requireHmac());
            }
          })(commonjsGlobal, function(CryptoJS) {
            (function() {
              var C = CryptoJS;
              var C_lib = C.lib;
              var Base = C_lib.Base;
              var WordArray = C_lib.WordArray;
              var C_algo = C.algo;
              var MD5 = C_algo.MD5;
              var EvpKDF = C_algo.EvpKDF = Base.extend({
                cfg: Base.extend({
                  keySize: 128 / 32,
                  hasher: MD5,
                  iterations: 1
                }),
                init: function init2(cfg) {
                  this.cfg = this.cfg.extend(cfg);
                },
                compute: function compute(password, salt) {
                  var cfg = this.cfg;
                  var hasher = cfg.hasher.create();
                  var derivedKey = WordArray.create();
                  var derivedKeyWords = derivedKey.words;
                  var keySize = cfg.keySize;
                  var iterations = cfg.iterations;
                  while (derivedKeyWords.length < keySize) {
                    if (block) {
                      hasher.update(block);
                    }
                    var block = hasher.update(password).finalize(salt);
                    hasher.reset();
                    for (var i2 = 1; i2 < iterations; i2++) {
                      block = hasher.finalize(block);
                      hasher.reset();
                    }
                    derivedKey.concat(block);
                  }
                  derivedKey.sigBytes = keySize * 4;
                  return derivedKey;
                }
              });
              C.EvpKDF = function(password, salt, cfg) {
                return EvpKDF.create(cfg).compute(password, salt);
              };
            })();
            return CryptoJS.EvpKDF;
          });
        })(evpkdf);
        return evpkdf.exports;
      }
      var cipherCore = { exports: {} };
      var hasRequiredCipherCore;
      function requireCipherCore() {
        if (hasRequiredCipherCore)
          return cipherCore.exports;
        hasRequiredCipherCore = 1;
        (function(module2, exports3) {
          (function(root, factory, undef) {
            {
              module2.exports = factory(requireCore(), requireEvpkdf());
            }
          })(commonjsGlobal, function(CryptoJS) {
            CryptoJS.lib.Cipher || function(undefined$1) {
              var C = CryptoJS;
              var C_lib = C.lib;
              var Base = C_lib.Base;
              var WordArray = C_lib.WordArray;
              var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
              var C_enc = C.enc;
              C_enc.Utf8;
              var Base64 = C_enc.Base64;
              var C_algo = C.algo;
              var EvpKDF = C_algo.EvpKDF;
              var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                cfg: Base.extend(),
                createEncryptor: function createEncryptor(key, cfg) {
                  return this.create(this._ENC_XFORM_MODE, key, cfg);
                },
                createDecryptor: function createDecryptor(key, cfg) {
                  return this.create(this._DEC_XFORM_MODE, key, cfg);
                },
                init: function init2(xformMode, key, cfg) {
                  this.cfg = this.cfg.extend(cfg);
                  this._xformMode = xformMode;
                  this._key = key;
                  this.reset();
                },
                reset: function reset2() {
                  BufferedBlockAlgorithm.reset.call(this);
                  this._doReset();
                },
                process: function process2(dataUpdate) {
                  this._append(dataUpdate);
                  return this._process();
                },
                finalize: function finalize(dataUpdate) {
                  if (dataUpdate) {
                    this._append(dataUpdate);
                  }
                  var finalProcessedData = this._doFinalize();
                  return finalProcessedData;
                },
                keySize: 128 / 32,
                ivSize: 128 / 32,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: function() {
                  function selectCipherStrategy(key) {
                    if (typeof key == "string") {
                      return PasswordBasedCipher;
                    } else {
                      return SerializableCipher;
                    }
                  }
                  return function(cipher) {
                    return {
                      encrypt: function encrypt(message, key, cfg) {
                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                      },
                      decrypt: function decrypt(ciphertext, key, cfg) {
                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                      }
                    };
                  };
                }()
              });
              C_lib.StreamCipher = Cipher.extend({
                _doFinalize: function _doFinalize() {
                  var finalProcessedBlocks = this._process(true);
                  return finalProcessedBlocks;
                },
                blockSize: 1
              });
              var C_mode = C.mode = {};
              var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                createEncryptor: function createEncryptor(cipher, iv) {
                  return this.Encryptor.create(cipher, iv);
                },
                createDecryptor: function createDecryptor(cipher, iv) {
                  return this.Decryptor.create(cipher, iv);
                },
                init: function init2(cipher, iv) {
                  this._cipher = cipher;
                  this._iv = iv;
                }
              });
              var CBC = C_mode.CBC = function() {
                var CBC2 = BlockCipherMode.extend();
                CBC2.Encryptor = CBC2.extend({
                  processBlock: function processBlock(words, offset) {
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    xorBlock.call(this, words, offset, blockSize);
                    cipher.encryptBlock(words, offset);
                    this._prevBlock = words.slice(offset, offset + blockSize);
                  }
                });
                CBC2.Decryptor = CBC2.extend({
                  processBlock: function processBlock(words, offset) {
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    var thisBlock = words.slice(offset, offset + blockSize);
                    cipher.decryptBlock(words, offset);
                    xorBlock.call(this, words, offset, blockSize);
                    this._prevBlock = thisBlock;
                  }
                });
                function xorBlock(words, offset, blockSize) {
                  var iv = this._iv;
                  if (iv) {
                    var block = iv;
                    this._iv = undefined$1;
                  } else {
                    var block = this._prevBlock;
                  }
                  for (var i2 = 0; i2 < blockSize; i2++) {
                    words[offset + i2] ^= block[i2];
                  }
                }
                return CBC2;
              }();
              var C_pad = C.pad = {};
              var Pkcs7 = C_pad.Pkcs7 = {
                pad: function pad(data, blockSize) {
                  var blockSizeBytes = blockSize * 4;
                  var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                  var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
                  var paddingWords = [];
                  for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
                    paddingWords.push(paddingWord);
                  }
                  var padding = WordArray.create(paddingWords, nPaddingBytes);
                  data.concat(padding);
                },
                unpad: function unpad(data) {
                  var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                  data.sigBytes -= nPaddingBytes;
                }
              };
              C_lib.BlockCipher = Cipher.extend({
                cfg: Cipher.cfg.extend({
                  mode: CBC,
                  padding: Pkcs7
                }),
                reset: function reset2() {
                  Cipher.reset.call(this);
                  var cfg = this.cfg;
                  var iv = cfg.iv;
                  var mode = cfg.mode;
                  if (this._xformMode == this._ENC_XFORM_MODE) {
                    var modeCreator = mode.createEncryptor;
                  } else {
                    var modeCreator = mode.createDecryptor;
                    this._minBufferSize = 1;
                  }
                  if (this._mode && this._mode.__creator == modeCreator) {
                    this._mode.init(this, iv && iv.words);
                  } else {
                    this._mode = modeCreator.call(mode, this, iv && iv.words);
                    this._mode.__creator = modeCreator;
                  }
                },
                _doProcessBlock: function _doProcessBlock(words, offset) {
                  this._mode.processBlock(words, offset);
                },
                _doFinalize: function _doFinalize() {
                  var padding = this.cfg.padding;
                  if (this._xformMode == this._ENC_XFORM_MODE) {
                    padding.pad(this._data, this.blockSize);
                    var finalProcessedBlocks = this._process(true);
                  } else {
                    var finalProcessedBlocks = this._process(true);
                    padding.unpad(finalProcessedBlocks);
                  }
                  return finalProcessedBlocks;
                },
                blockSize: 128 / 32
              });
              var CipherParams = C_lib.CipherParams = Base.extend({
                init: function init2(cipherParams) {
                  this.mixIn(cipherParams);
                },
                toString: function toString(formatter) {
                  return (formatter || this.formatter).stringify(this);
                }
              });
              var C_format = C.format = {};
              var OpenSSLFormatter = C_format.OpenSSL = {
                stringify: function stringify2(cipherParams) {
                  var ciphertext = cipherParams.ciphertext;
                  var salt = cipherParams.salt;
                  if (salt) {
                    var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
                  } else {
                    var wordArray = ciphertext;
                  }
                  return wordArray.toString(Base64);
                },
                parse: function parse2(openSSLStr) {
                  var ciphertext = Base64.parse(openSSLStr);
                  var ciphertextWords = ciphertext.words;
                  if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                    var salt = WordArray.create(ciphertextWords.slice(2, 4));
                    ciphertextWords.splice(0, 4);
                    ciphertext.sigBytes -= 16;
                  }
                  return CipherParams.create({
                    ciphertext,
                    salt
                  });
                }
              };
              var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                cfg: Base.extend({
                  format: OpenSSLFormatter
                }),
                encrypt: function encrypt(cipher, message, key, cfg) {
                  cfg = this.cfg.extend(cfg);
                  var encryptor = cipher.createEncryptor(key, cfg);
                  var ciphertext = encryptor.finalize(message);
                  var cipherCfg = encryptor.cfg;
                  return CipherParams.create({
                    ciphertext,
                    key,
                    iv: cipherCfg.iv,
                    algorithm: cipher,
                    mode: cipherCfg.mode,
                    padding: cipherCfg.padding,
                    blockSize: cipher.blockSize,
                    formatter: cfg.format
                  });
                },
                decrypt: function decrypt(cipher, ciphertext, key, cfg) {
                  cfg = this.cfg.extend(cfg);
                  ciphertext = this._parse(ciphertext, cfg.format);
                  var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                  return plaintext;
                },
                _parse: function _parse(ciphertext, format) {
                  if (typeof ciphertext == "string") {
                    return format.parse(ciphertext, this);
                  } else {
                    return ciphertext;
                  }
                }
              });
              var C_kdf = C.kdf = {};
              var OpenSSLKdf = C_kdf.OpenSSL = {
                execute: function execute(password, keySize, ivSize, salt) {
                  if (!salt) {
                    salt = WordArray.random(64 / 8);
                  }
                  var key = EvpKDF.create({
                    keySize: keySize + ivSize
                  }).compute(password, salt);
                  var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                  key.sigBytes = keySize * 4;
                  return CipherParams.create({
                    key,
                    iv,
                    salt
                  });
                }
              };
              var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                cfg: SerializableCipher.cfg.extend({
                  kdf: OpenSSLKdf
                }),
                encrypt: function encrypt(cipher, message, password, cfg) {
                  cfg = this.cfg.extend(cfg);
                  var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
                  cfg.iv = derivedParams.iv;
                  var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                  ciphertext.mixIn(derivedParams);
                  return ciphertext;
                },
                decrypt: function decrypt(cipher, ciphertext, password, cfg) {
                  cfg = this.cfg.extend(cfg);
                  ciphertext = this._parse(ciphertext, cfg.format);
                  var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
                  cfg.iv = derivedParams.iv;
                  var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                  return plaintext;
                }
              });
            }();
          });
        })(cipherCore);
        return cipherCore.exports;
      }
      (function(module2, exports3) {
        (function(root, factory, undef) {
          {
            module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
          }
        })(commonjsGlobal, function(CryptoJS) {
          (function() {
            var C = CryptoJS;
            var C_lib = C.lib;
            var BlockCipher = C_lib.BlockCipher;
            var C_algo = C.algo;
            var SBOX = [];
            var INV_SBOX = [];
            var SUB_MIX_0 = [];
            var SUB_MIX_1 = [];
            var SUB_MIX_2 = [];
            var SUB_MIX_3 = [];
            var INV_SUB_MIX_0 = [];
            var INV_SUB_MIX_1 = [];
            var INV_SUB_MIX_2 = [];
            var INV_SUB_MIX_3 = [];
            (function() {
              var d2 = [];
              for (var i2 = 0; i2 < 256; i2++) {
                if (i2 < 128) {
                  d2[i2] = i2 << 1;
                } else {
                  d2[i2] = i2 << 1 ^ 283;
                }
              }
              var x = 0;
              var xi = 0;
              for (var i2 = 0; i2 < 256; i2++) {
                var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                sx = sx >>> 8 ^ sx & 255 ^ 99;
                SBOX[x] = sx;
                INV_SBOX[sx] = x;
                var x2 = d2[x];
                var x4 = d2[x2];
                var x8 = d2[x4];
                var t = d2[sx] * 257 ^ sx * 16843008;
                SUB_MIX_0[x] = t << 24 | t >>> 8;
                SUB_MIX_1[x] = t << 16 | t >>> 16;
                SUB_MIX_2[x] = t << 8 | t >>> 24;
                SUB_MIX_3[x] = t;
                var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
                INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
                INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
                INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
                INV_SUB_MIX_3[sx] = t;
                if (!x) {
                  x = xi = 1;
                } else {
                  x = x2 ^ d2[d2[d2[x8 ^ x2]]];
                  xi ^= d2[d2[xi]];
                }
              }
            })();
            var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
            var AES2 = C_algo.AES = BlockCipher.extend({
              _doReset: function _doReset() {
                if (this._nRounds && this._keyPriorReset === this._key) {
                  return;
                }
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;
                var nRounds = this._nRounds = keySize + 6;
                var ksRows = (nRounds + 1) * 4;
                var keySchedule = this._keySchedule = [];
                for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                  if (ksRow < keySize) {
                    keySchedule[ksRow] = keyWords[ksRow];
                  } else {
                    var t = keySchedule[ksRow - 1];
                    if (!(ksRow % keySize)) {
                      t = t << 8 | t >>> 24;
                      t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                      t ^= RCON[ksRow / keySize | 0] << 24;
                    } else if (keySize > 6 && ksRow % keySize == 4) {
                      t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                    }
                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                  }
                }
                var invKeySchedule = this._invKeySchedule = [];
                for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                  var ksRow = ksRows - invKsRow;
                  if (invKsRow % 4) {
                    var t = keySchedule[ksRow];
                  } else {
                    var t = keySchedule[ksRow - 4];
                  }
                  if (invKsRow < 4 || ksRow <= 4) {
                    invKeySchedule[invKsRow] = t;
                  } else {
                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
                  }
                }
              },
              encryptBlock: function encryptBlock(M, offset) {
                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
              },
              decryptBlock: function decryptBlock(M, offset) {
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
              },
              _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
                var nRounds = this._nRounds;
                var s0 = M[offset] ^ keySchedule[0];
                var s1 = M[offset + 1] ^ keySchedule[1];
                var s2 = M[offset + 2] ^ keySchedule[2];
                var s3 = M[offset + 3] ^ keySchedule[3];
                var ksRow = 4;
                for (var round = 1; round < nRounds; round++) {
                  var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
                  var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
                  var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
                  var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
                  s0 = t0;
                  s1 = t1;
                  s2 = t2;
                  s3 = t3;
                }
                var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
                var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
                var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
                var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
                M[offset] = t0;
                M[offset + 1] = t1;
                M[offset + 2] = t2;
                M[offset + 3] = t3;
              },
              keySize: 256 / 32
            });
            C.AES = BlockCipher._createHelper(AES2);
          })();
          return CryptoJS.AES;
        });
      })(aes);
      var AES = aes.exports;
      var encUtf8 = { exports: {} };
      (function(module2, exports3) {
        (function(root, factory) {
          {
            module2.exports = factory(requireCore());
          }
        })(commonjsGlobal, function(CryptoJS) {
          return CryptoJS.enc.Utf8;
        });
      })(encUtf8);
      var Utf8 = encUtf8.exports;
      var browser$2 = { exports: {} };
      var debug$5 = { exports: {} };
      var s$1 = 1e3;
      var m$1 = s$1 * 60;
      var h$1 = m$1 * 60;
      var d$1 = h$1 * 24;
      var y$1 = d$1 * 365.25;
      var ms$1 = function ms2(val, options) {
        options = options || {};
        if ("string" == typeof val)
          return parse$5(val);
        return options.long ? long(val) : short(val);
      };
      function parse$5(str) {
        str = "" + str;
        if (str.length > 1e4)
          return;
        var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
        if (!match)
          return;
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y$1;
          case "days":
          case "day":
          case "d":
            return n * d$1;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h$1;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m$1;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s$1;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
        }
      }
      function short(ms2) {
        if (ms2 >= d$1)
          return Math.round(ms2 / d$1) + "d";
        if (ms2 >= h$1)
          return Math.round(ms2 / h$1) + "h";
        if (ms2 >= m$1)
          return Math.round(ms2 / m$1) + "m";
        if (ms2 >= s$1)
          return Math.round(ms2 / s$1) + "s";
        return ms2 + "ms";
      }
      function long(ms2) {
        return plural$1(ms2, d$1, "day") || plural$1(ms2, h$1, "hour") || plural$1(ms2, m$1, "minute") || plural$1(ms2, s$1, "second") || ms2 + " ms";
      }
      function plural$1(ms2, n, name) {
        if (ms2 < n)
          return;
        if (ms2 < n * 1.5)
          return Math.floor(ms2 / n) + " " + name;
        return Math.ceil(ms2 / n) + " " + name + "s";
      }
      (function(module2, exports3) {
        exports3 = module2.exports = debug2;
        exports3.coerce = coerce2;
        exports3.disable = disable;
        exports3.enable = enable;
        exports3.enabled = enabled;
        exports3.humanize = ms$1;
        exports3.names = [];
        exports3.skips = [];
        exports3.formatters = {};
        var prevColor = 0;
        var prevTime;
        function selectColor() {
          return exports3.colors[prevColor++ % exports3.colors.length];
        }
        function debug2(namespace) {
          function disabled() {
          }
          disabled.enabled = false;
          function enabled2() {
            var self2 = enabled2;
            var curr = +new Date();
            var ms2 = curr - (prevTime || curr);
            self2.diff = ms2;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            if (null == self2.useColors)
              self2.useColors = exports3.useColors();
            if (null == self2.color && self2.useColors)
              self2.color = selectColor();
            var args = Array.prototype.slice.call(arguments);
            args[0] = exports3.coerce(args[0]);
            if ("string" !== typeof args[0]) {
              args = ["%o"].concat(args);
            }
            var index = 0;
            args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
              if (match === "%%")
                return match;
              index++;
              var formatter = exports3.formatters[format];
              if ("function" === typeof formatter) {
                var val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            if ("function" === typeof exports3.formatArgs) {
              args = exports3.formatArgs.apply(self2, args);
            }
            var logFn = enabled2.log || exports3.log || console.log.bind(console);
            logFn.apply(self2, args);
          }
          enabled2.enabled = true;
          var fn = exports3.enabled(namespace) ? enabled2 : disabled;
          fn.namespace = namespace;
          return fn;
        }
        function enable(namespaces) {
          exports3.save(namespaces);
          var split2 = (namespaces || "").split(/[\s,]+/);
          var len = split2.length;
          for (var i2 = 0; i2 < len; i2++) {
            if (!split2[i2])
              continue;
            namespaces = split2[i2].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              exports3.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
            } else {
              exports3.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          exports3.enable("");
        }
        function enabled(name) {
          var i2, len;
          for (i2 = 0, len = exports3.skips.length; i2 < len; i2++) {
            if (exports3.skips[i2].test(name)) {
              return false;
            }
          }
          for (i2 = 0, len = exports3.names.length; i2 < len; i2++) {
            if (exports3.names[i2].test(name)) {
              return true;
            }
          }
          return false;
        }
        function coerce2(val) {
          if (val instanceof Error)
            return val.stack || val.message;
          return val;
        }
      })(debug$5, debug$5.exports);
      (function(module2, exports3) {
        exports3 = module2.exports = debug$5.exports;
        exports3.log = log;
        exports3.formatArgs = formatArgs;
        exports3.save = save;
        exports3.load = load2;
        exports3.useColors = useColors;
        exports3.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
        exports3.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];
        function useColors() {
          return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
        }
        exports3.formatters.j = function(v) {
          return JSON.stringify(v);
        };
        function formatArgs() {
          var args = arguments;
          var useColors2 = this.useColors;
          args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports3.humanize(this.diff);
          if (!useColors2)
            return args;
          var c = "color: " + this.color;
          args = [args[0], c, "color: inherit"].concat(Array.prototype.slice.call(args, 1));
          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-z%]/g, function(match) {
            if ("%%" === match)
              return;
            index++;
            if ("%c" === match) {
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
          return args;
        }
        function log() {
          return "object" === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
        }
        function save(namespaces) {
          try {
            if (null == namespaces) {
              exports3.storage.removeItem("debug");
            } else {
              exports3.storage.debug = namespaces;
            }
          } catch (e) {
          }
        }
        function load2() {
          var r;
          try {
            r = exports3.storage.debug;
          } catch (e) {
          }
          return r;
        }
        exports3.enable(load2());
        function localstorage() {
          try {
            return window.localStorage;
          } catch (e) {
          }
        }
      })(browser$2, browser$2.exports);
      var debug$4 = browser$2.exports("cookie");
      var rudderComponentCookie = function rudderComponentCookie2(name, value, options) {
        switch (arguments.length) {
          case 3:
          case 2:
            return set$1(name, value, options);
          case 1:
            return get$1(name);
          default:
            return all$1();
        }
      };
      function set$1(name, value, options) {
        options = options || {};
        var str = encode$1(name) + "=" + encode$1(value);
        if (null == value)
          options.maxage = -1;
        if (options.maxage) {
          options.expires = new Date(+new Date() + options.maxage);
        }
        if (options.path)
          str += "; path=" + options.path;
        if (options.domain)
          str += "; domain=" + options.domain;
        if (options.expires)
          str += "; expires=" + options.expires.toUTCString();
        if (options.samesite)
          str += "; samesite=" + options.samesite;
        if (options.secure)
          str += "; secure";
        document.cookie = str;
      }
      function all$1() {
        var str;
        try {
          str = document.cookie;
        } catch (err) {
          if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error(err.stack || err);
          }
          return {};
        }
        return parse$4(str);
      }
      function get$1(name) {
        return all$1()[name];
      }
      function parse$4(str) {
        var obj = {};
        var pairs = str.split(/ *; */);
        var pair;
        if ("" == pairs[0])
          return obj;
        for (var i2 = 0; i2 < pairs.length; ++i2) {
          pair = pairs[i2].split("=");
          obj[decode$2(pair[0])] = decode$2(pair[1]);
        }
        return obj;
      }
      function encode$1(value) {
        try {
          return encodeURIComponent(value);
        } catch (e) {
          debug$4("error `encode(%o)` - %o", value, e);
        }
      }
      function decode$2(value) {
        try {
          return decodeURIComponent(value);
        } catch (e) {
          debug$4("error `decode(%o)` - %o", value, e);
        }
      }
      var defaults$3 = { exports: {} };
      var max$1 = Math.max;
      var drop$1 = function drop2(count, collection) {
        var length = collection ? collection.length : 0;
        if (!length) {
          return [];
        }
        var toDrop = max$1(Number(count) || 0, 0);
        var resultsLength = max$1(length - toDrop, 0);
        var results = new Array(resultsLength);
        for (var i2 = 0; i2 < resultsLength; i2 += 1) {
          results[i2] = collection[i2 + toDrop];
        }
        return results;
      };
      var drop_1 = drop$1;
      var max = Math.max;
      var rest$1 = function rest2(collection) {
        if (collection == null || !collection.length) {
          return [];
        }
        var results = new Array(max(collection.length - 2, 0));
        for (var i2 = 1; i2 < collection.length; i2 += 1) {
          results[i2 - 1] = collection[i2];
        }
        return results;
      };
      var rest_1 = rest$1;
      var drop = drop_1;
      var rest = rest_1;
      var has$1 = Object.prototype.hasOwnProperty;
      var objToString$1 = Object.prototype.toString;
      var isObject = function isObject2(value) {
        return Boolean(value) && _typeof(value) === "object";
      };
      var isPlainObject = function isPlainObject2(value) {
        return Boolean(value) && objToString$1.call(value) === "[object Object]";
      };
      var shallowCombiner = function shallowCombiner2(target, source, value, key) {
        if (has$1.call(source, key) && target[key] === void 0) {
          target[key] = value;
        }
        return source;
      };
      var deepCombiner = function deepCombiner2(target, source, value, key) {
        if (has$1.call(source, key)) {
          if (isPlainObject(target[key]) && isPlainObject(value)) {
            target[key] = defaultsDeep(target[key], value);
          } else if (target[key] === void 0) {
            target[key] = value;
          }
        }
        return source;
      };
      var defaultsWith = function defaultsWith2(combiner, target) {
        if (!isObject(target)) {
          return target;
        }
        combiner = combiner || shallowCombiner;
        var sources = drop(2, arguments);
        for (var i2 = 0; i2 < sources.length; i2 += 1) {
          for (var key in sources[i2]) {
            combiner(target, sources[i2], sources[i2][key], key);
          }
        }
        return target;
      };
      var defaultsDeep = function defaultsDeep2(target) {
        return defaultsWith.apply(null, [deepCombiner, target].concat(rest(arguments)));
      };
      var defaults$2 = function defaults2(target) {
        return defaultsWith.apply(null, [null, target].concat(rest(arguments)));
      };
      defaults$3.exports = defaults$2;
      defaults$3.exports.deep = defaultsDeep;
      var lib$1 = { exports: {} };
      var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      var cachedSetTimeout = defaultSetTimout;
      var cachedClearTimeout = defaultClearTimeout;
      if (typeof global$1.setTimeout === "function") {
        cachedSetTimeout = setTimeout;
      }
      if (typeof global$1.clearTimeout === "function") {
        cachedClearTimeout = clearTimeout;
      }
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            args[i2 - 1] = arguments[i2];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      var title = "browser";
      var platform = "browser";
      var browser$1 = true;
      var env = {};
      var argv = [];
      var version$1 = "";
      var versions = {};
      var release = {};
      var config = {};
      function noop() {
      }
      var on = noop;
      var addListener = noop;
      var once = noop;
      var off = noop;
      var removeListener = noop;
      var removeAllListeners = noop;
      var emit = noop;
      function binding(name) {
        throw new Error("process.binding is not supported");
      }
      function cwd() {
        return "/";
      }
      function chdir(dir) {
        throw new Error("process.chdir is not supported");
      }
      function umask() {
        return 0;
      }
      var performance$1 = global$1.performance || {};
      var performanceNow = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function() {
        return new Date().getTime();
      };
      function hrtime(previousTimestamp) {
        var clocktime = performanceNow.call(performance$1) * 1e-3;
        var seconds = Math.floor(clocktime);
        var nanoseconds = Math.floor(clocktime % 1 * 1e9);
        if (previousTimestamp) {
          seconds = seconds - previousTimestamp[0];
          nanoseconds = nanoseconds - previousTimestamp[1];
          if (nanoseconds < 0) {
            seconds--;
            nanoseconds += 1e9;
          }
        }
        return [seconds, nanoseconds];
      }
      var startTime = new Date();
      function uptime() {
        var currentTime = new Date();
        var dif = currentTime - startTime;
        return dif / 1e3;
      }
      var process = {
        nextTick,
        title,
        browser: browser$1,
        env,
        argv,
        version: version$1,
        versions,
        on,
        addListener,
        once,
        off,
        removeListener,
        removeAllListeners,
        emit,
        binding,
        cwd,
        chdir,
        umask,
        hrtime,
        platform,
        release,
        config,
        uptime
      };
      var browser = { exports: {} };
      var debug$3 = { exports: {} };
      var s = 1e3;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var y = d * 365.25;
      var ms = function ms2(val, options) {
        options = options || {};
        var type = _typeof(val);
        if (type === "string" && val.length > 0) {
          return parse$3(val);
        } else if (type === "number" && isNaN(val) === false) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
      };
      function parse$3(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y;
          case "days":
          case "day":
          case "d":
            return n * d;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms2) {
        if (ms2 >= d) {
          return Math.round(ms2 / d) + "d";
        }
        if (ms2 >= h) {
          return Math.round(ms2 / h) + "h";
        }
        if (ms2 >= m) {
          return Math.round(ms2 / m) + "m";
        }
        if (ms2 >= s) {
          return Math.round(ms2 / s) + "s";
        }
        return ms2 + "ms";
      }
      function fmtLong(ms2) {
        return plural(ms2, d, "day") || plural(ms2, h, "hour") || plural(ms2, m, "minute") || plural(ms2, s, "second") || ms2 + " ms";
      }
      function plural(ms2, n, name) {
        if (ms2 < n) {
          return;
        }
        if (ms2 < n * 1.5) {
          return Math.floor(ms2 / n) + " " + name;
        }
        return Math.ceil(ms2 / n) + " " + name + "s";
      }
      (function(module2, exports3) {
        exports3 = module2.exports = createDebug.debug = createDebug["default"] = createDebug;
        exports3.coerce = coerce2;
        exports3.disable = disable;
        exports3.enable = enable;
        exports3.enabled = enabled;
        exports3.humanize = ms;
        exports3.names = [];
        exports3.skips = [];
        exports3.formatters = {};
        var prevTime;
        function selectColor(namespace) {
          var hash = 0, i2;
          for (i2 in namespace) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i2);
            hash |= 0;
          }
          return exports3.colors[Math.abs(hash) % exports3.colors.length];
        }
        function createDebug(namespace) {
          function debug2() {
            if (!debug2.enabled)
              return;
            var self2 = debug2;
            var curr = +new Date();
            var ms2 = curr - (prevTime || curr);
            self2.diff = ms2;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            var args = new Array(arguments.length);
            for (var i2 = 0; i2 < args.length; i2++) {
              args[i2] = arguments[i2];
            }
            args[0] = exports3.coerce(args[0]);
            if ("string" !== typeof args[0]) {
              args.unshift("%O");
            }
            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
              if (match === "%%")
                return match;
              index++;
              var formatter = exports3.formatters[format];
              if ("function" === typeof formatter) {
                var val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            exports3.formatArgs.call(self2, args);
            var logFn = debug2.log || exports3.log || console.log.bind(console);
            logFn.apply(self2, args);
          }
          debug2.namespace = namespace;
          debug2.enabled = exports3.enabled(namespace);
          debug2.useColors = exports3.useColors();
          debug2.color = selectColor(namespace);
          if ("function" === typeof exports3.init) {
            exports3.init(debug2);
          }
          return debug2;
        }
        function enable(namespaces) {
          exports3.save(namespaces);
          exports3.names = [];
          exports3.skips = [];
          var split2 = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          var len = split2.length;
          for (var i2 = 0; i2 < len; i2++) {
            if (!split2[i2])
              continue;
            namespaces = split2[i2].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              exports3.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
            } else {
              exports3.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          exports3.enable("");
        }
        function enabled(name) {
          var i2, len;
          for (i2 = 0, len = exports3.skips.length; i2 < len; i2++) {
            if (exports3.skips[i2].test(name)) {
              return false;
            }
          }
          for (i2 = 0, len = exports3.names.length; i2 < len; i2++) {
            if (exports3.names[i2].test(name)) {
              return true;
            }
          }
          return false;
        }
        function coerce2(val) {
          if (val instanceof Error)
            return val.stack || val.message;
          return val;
        }
      })(debug$3, debug$3.exports);
      (function(module2, exports3) {
        exports3 = module2.exports = debug$3.exports;
        exports3.log = log;
        exports3.formatArgs = formatArgs;
        exports3.save = save;
        exports3.load = load2;
        exports3.useColors = useColors;
        exports3.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
        exports3.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];
        function useColors() {
          if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
            return true;
          }
          return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        exports3.formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (err) {
            return "[UnexpectedJSONParseError]: " + err.message;
          }
        };
        function formatArgs(args) {
          var useColors2 = this.useColors;
          args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports3.humanize(this.diff);
          if (!useColors2)
            return;
          var c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, function(match) {
            if ("%%" === match)
              return;
            index++;
            if ("%c" === match) {
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        function log() {
          return "object" === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
        }
        function save(namespaces) {
          try {
            if (null == namespaces) {
              exports3.storage.removeItem("debug");
            } else {
              exports3.storage.debug = namespaces;
            }
          } catch (e) {
          }
        }
        function load2() {
          var r;
          try {
            r = exports3.storage.debug;
          } catch (e) {
          }
          if (!r && typeof process !== "undefined" && "env" in process) {
            r = process.env.DEBUG;
          }
          return r;
        }
        exports3.enable(load2());
        function localstorage() {
          try {
            return window.localStorage;
          } catch (e) {
          }
        }
      })(browser, browser.exports);
      var debug$2 = browser.exports("cookie");
      var componentCookie = function componentCookie2(name, value, options) {
        switch (arguments.length) {
          case 3:
          case 2:
            return set(name, value, options);
          case 1:
            return get(name);
          default:
            return all();
        }
      };
      function set(name, value, options) {
        options = options || {};
        var str = encode(name) + "=" + encode(value);
        if (null == value)
          options.maxage = -1;
        if (options.maxage) {
          options.expires = new Date(+new Date() + options.maxage);
        }
        if (options.path)
          str += "; path=" + options.path;
        if (options.domain)
          str += "; domain=" + options.domain;
        if (options.expires)
          str += "; expires=" + options.expires.toUTCString();
        if (options.secure)
          str += "; secure";
        document.cookie = str;
      }
      function all() {
        var str;
        try {
          str = document.cookie;
        } catch (err) {
          if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error(err.stack || err);
          }
          return {};
        }
        return parse$2(str);
      }
      function get(name) {
        return all()[name];
      }
      function parse$2(str) {
        var obj = {};
        var pairs = str.split(/ *; */);
        var pair;
        if ("" == pairs[0])
          return obj;
        for (var i2 = 0; i2 < pairs.length; ++i2) {
          pair = pairs[i2].split("=");
          obj[decode$1(pair[0])] = decode$1(pair[1]);
        }
        return obj;
      }
      function encode(value) {
        try {
          return encodeURIComponent(value);
        } catch (e) {
          debug$2("error `encode(%o)` - %o", value, e);
        }
      }
      function decode$1(value) {
        try {
          return decodeURIComponent(value);
        } catch (e) {
          debug$2("error `decode(%o)` - %o", value, e);
        }
      }
      (function(module2, exports3) {
        var parse2 = componentUrl.parse;
        var cookie = componentCookie;
        function domain(url) {
          var cookie2 = exports3.cookie;
          var levels = exports3.levels(url);
          for (var i2 = 0; i2 < levels.length; ++i2) {
            var cname = "__tld__";
            var domain2 = levels[i2];
            var opts = {
              domain: "." + domain2
            };
            cookie2(cname, 1, opts);
            if (cookie2(cname)) {
              cookie2(cname, null, opts);
              return domain2;
            }
          }
          return "";
        }
        domain.levels = function(url) {
          var host = parse2(url).hostname;
          var parts = host.split(".");
          var last = parts[parts.length - 1];
          var levels = [];
          if (parts.length === 4 && last === parseInt(last, 10)) {
            return levels;
          }
          if (parts.length <= 1) {
            return levels;
          }
          for (var i2 = parts.length - 2; i2 >= 0; --i2) {
            levels.push(parts.slice(i2).join("."));
          }
          return levels;
        };
        domain.cookie = cookie;
        exports3 = module2.exports = domain;
      })(lib$1, lib$1.exports);
      var topDomain = lib$1.exports;
      var CookieLocal = function() {
        function CookieLocal2(options) {
          _classCallCheck(this, CookieLocal2);
          this.cOpts = {};
          this.options(options);
          this.isSupportAvailable = this.checkSupportAvailability();
        }
        _createClass(CookieLocal2, [{
          key: "options",
          value: function options() {
            var inOpts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            if (arguments.length === 0)
              return this.cOpts;
            var domain = ".".concat(topDomain(window.location.href));
            if (domain === ".")
              domain = null;
            this.cOpts = defaults$3.exports(inOpts, {
              maxage: 31536e6,
              path: "/",
              domain,
              samesite: "Lax"
            });
            return this.cOpts;
          }
        }, {
          key: "set",
          value: function set2(key, value) {
            try {
              rudderComponentCookie(key, value, cloneDeep(this.cOpts));
              return true;
            } catch (e) {
              logger.error(e);
              return false;
            }
          }
        }, {
          key: "get",
          value: function get2(key) {
            return rudderComponentCookie(key);
          }
        }, {
          key: "remove",
          value: function remove(key) {
            try {
              rudderComponentCookie(key, null, cloneDeep(this.cOpts));
              return true;
            } catch (e) {
              return false;
            }
          }
        }, {
          key: "checkSupportAvailability",
          value: function checkSupportAvailability() {
            var name = "test_rudder_cookie";
            this.set(name, true);
            if (this.get(name)) {
              this.remove(name);
              return true;
            }
            return false;
          }
        }]);
        return CookieLocal2;
      }();
      var Cookie = new CookieLocal({});
      var store$2 = { exports: {} };
      (function(module2, exports3) {
        (function(global2, factory) {
          module2.exports = factory();
        })(commonjsGlobal, function() {
          var storage = window.localStorage;
          function isJSON(obj) {
            obj = JSON.stringify(obj);
            if (!/^\{[\s\S]*\}$/.test(obj)) {
              return false;
            }
            return true;
          }
          function stringify2(val) {
            return val === void 0 || typeof val === "function" ? val + "" : JSON.stringify(val);
          }
          function deserialize2(value) {
            if (typeof value !== "string") {
              return void 0;
            }
            try {
              return JSON.parse(value);
            } catch (e) {
              return value;
            }
          }
          function isFunction(value) {
            return {}.toString.call(value) === "[object Function]";
          }
          function isArray2(value) {
            return Object.prototype.toString.call(value) === "[object Array]";
          }
          function dealIncognito(storage2) {
            var _KEY = "_Is_Incognit", _VALUE = "yes";
            try {
              storage2.setItem(_KEY, _VALUE);
            } catch (e) {
              if (e.name === "QuotaExceededError") {
                var _nothing = function _nothing2() {
                };
                storage2.__proto__ = {
                  setItem: _nothing,
                  getItem: _nothing,
                  removeItem: _nothing,
                  clear: _nothing
                };
              }
            } finally {
              if (storage2.getItem(_KEY) === _VALUE)
                storage2.removeItem(_KEY);
            }
            return storage2;
          }
          storage = dealIncognito(storage);
          function Store2() {
            if (!(this instanceof Store2)) {
              return new Store2();
            }
          }
          Store2.prototype = {
            set: function set2(key, val) {
              if (key && !isJSON(key)) {
                storage.setItem(key, stringify2(val));
              } else if (isJSON(key)) {
                for (var a2 in key) {
                  this.set(a2, key[a2]);
                }
              }
              return this;
            },
            get: function get2(key) {
              if (!key) {
                var ret = {};
                this.forEach(function(key2, val) {
                  return ret[key2] = val;
                });
                return ret;
              }
              if (key.charAt(0) === "?") {
                return this.has(key.substr(1));
              }
              var args = arguments;
              if (args.length > 1) {
                var dt = {};
                for (var i2 = 0, len = args.length; i2 < len; i2++) {
                  var value = deserialize2(storage.getItem(args[i2]));
                  if (this.has(args[i2])) {
                    dt[args[i2]] = value;
                  }
                }
                return dt;
              }
              return deserialize2(storage.getItem(key));
            },
            clear: function clear() {
              storage.clear();
              return this;
            },
            remove: function remove(key) {
              var val = this.get(key);
              storage.removeItem(key);
              return val;
            },
            has: function has2(key) {
              return {}.hasOwnProperty.call(this.get(), key);
            },
            keys: function keys2() {
              var d2 = [];
              this.forEach(function(k) {
                d2.push(k);
              });
              return d2;
            },
            forEach: function forEach(callback) {
              for (var i2 = 0, len = storage.length; i2 < len; i2++) {
                var key = storage.key(i2);
                callback(key, this.get(key));
              }
              return this;
            },
            search: function search(str) {
              var arr = this.keys(), dt = {};
              for (var i2 = 0, len = arr.length; i2 < len; i2++) {
                if (arr[i2].indexOf(str) > -1)
                  dt[arr[i2]] = this.get(arr[i2]);
              }
              return dt;
            }
          };
          var _Store = null;
          function store2(key, data) {
            var argm = arguments;
            var dt = null;
            if (!_Store)
              _Store = Store2();
            if (argm.length === 0)
              return _Store.get();
            if (argm.length === 1) {
              if (typeof key === "string")
                return _Store.get(key);
              if (isJSON(key))
                return _Store.set(key);
            }
            if (argm.length === 2 && typeof key === "string") {
              if (!data)
                return _Store.remove(key);
              if (data && typeof data === "string")
                return _Store.set(key, data);
              if (data && isFunction(data)) {
                dt = null;
                dt = data(key, _Store.get(key));
                store2.set(key, dt);
              }
            }
            if (argm.length === 2 && isArray2(key) && isFunction(data)) {
              for (var i2 = 0, len = key.length; i2 < len; i2++) {
                dt = data(key[i2], _Store.get(key[i2]));
                store2.set(key[i2], dt);
              }
            }
            return store2;
          }
          for (var a in Store2.prototype) {
            store2[a] = Store2.prototype[a];
          }
          return store2;
        });
      })(store$2);
      var store$1 = store$2.exports;
      var StoreLocal = function() {
        function StoreLocal2(options) {
          _classCallCheck(this, StoreLocal2);
          this.sOpts = {};
          this.enabled = this.checkSupportAvailability();
          this.options(options);
        }
        _createClass(StoreLocal2, [{
          key: "options",
          value: function options() {
            var _options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            if (arguments.length === 0)
              return this.sOpts;
            defaults$3.exports(_options, {
              enabled: true
            });
            this.enabled = _options.enabled && this.enabled;
            this.sOpts = _options;
            return this.sOpts;
          }
        }, {
          key: "set",
          value: function set2(key, value) {
            return store$1.set(key, value);
          }
        }, {
          key: "get",
          value: function get2(key) {
            return store$1.get(key);
          }
        }, {
          key: "remove",
          value: function remove(key) {
            return store$1.remove(key);
          }
        }, {
          key: "checkSupportAvailability",
          value: function checkSupportAvailability() {
            var name = "test_rudder_ls";
            this.set(name, true);
            if (this.get(name)) {
              this.remove(name);
              return true;
            }
            return false;
          }
        }]);
        return StoreLocal2;
      }();
      var Store$2 = new StoreLocal({});
      var defaults$1 = {
        user_storage_key: "rl_user_id",
        user_storage_trait: "rl_trait",
        user_storage_anonymousId: "rl_anonymous_id",
        group_storage_key: "rl_group_id",
        group_storage_trait: "rl_group_trait",
        page_storage_init_referrer: "rl_page_init_referrer",
        page_storage_init_referring_domain: "rl_page_init_referring_domain",
        session_info: "rl_session",
        prefix: "RudderEncrypt:",
        key: "Rudder"
      };
      var anonymousIdKeyMap = {
        segment: "ajs_anonymous_id"
      };
      function stringify$1(value) {
        return JSON.stringify(value);
      }
      function parse$1(value) {
        try {
          return value ? JSON.parse(value) : null;
        } catch (e) {
          logger.error(e);
          return value || null;
        }
      }
      function trim(value) {
        return value.replace(/^\s+|\s+$/gm, "");
      }
      function decryptValue(value) {
        if (!value || typeof value === "string" && trim(value) === "") {
          return value;
        }
        if (value.substring(0, defaults$1.prefix.length) === defaults$1.prefix) {
          return AES.decrypt(value.substring(defaults$1.prefix.length), defaults$1.key).toString(Utf8);
        }
        return value;
      }
      function encryptValue(value) {
        if (trim(value) === "") {
          return value;
        }
        var prefixedVal = "".concat(defaults$1.prefix).concat(AES.encrypt(value, defaults$1.key).toString());
        return prefixedVal;
      }
      var Storage$1 = function() {
        function Storage2() {
          _classCallCheck(this, Storage2);
          if (Cookie.isSupportAvailable) {
            this.storage = Cookie;
            return;
          }
          if (Store$2.enabled) {
            this.storage = Store$2;
          }
          if (!this.storage) {
            logger.error("No storage is available :: initializing the SDK without storage");
          }
        }
        _createClass(Storage2, [{
          key: "options",
          value: function options() {
            var _options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            this.storage.options(_options);
          }
        }, {
          key: "setItem",
          value: function setItem(key, value) {
            this.storage.set(key, encryptValue(stringify$1(value)));
          }
        }, {
          key: "setStringItem",
          value: function setStringItem(key, value) {
            if (typeof value !== "string") {
              logger.error("[Storage] ".concat(key, " should be string"));
              return;
            }
            this.setItem(key, value);
          }
        }, {
          key: "setUserId",
          value: function setUserId(value) {
            this.setStringItem(defaults$1.user_storage_key, value);
          }
        }, {
          key: "setUserTraits",
          value: function setUserTraits(value) {
            this.setItem(defaults$1.user_storage_trait, value);
          }
        }, {
          key: "setGroupId",
          value: function setGroupId(value) {
            this.setStringItem(defaults$1.group_storage_key, value);
          }
        }, {
          key: "setGroupTraits",
          value: function setGroupTraits(value) {
            this.setItem(defaults$1.group_storage_trait, value);
          }
        }, {
          key: "setAnonymousId",
          value: function setAnonymousId2(value) {
            this.setStringItem(defaults$1.user_storage_anonymousId, value);
          }
        }, {
          key: "setInitialReferrer",
          value: function setInitialReferrer(value) {
            this.setItem(defaults$1.page_storage_init_referrer, value);
          }
        }, {
          key: "setInitialReferringDomain",
          value: function setInitialReferringDomain(value) {
            this.setItem(defaults$1.page_storage_init_referring_domain, value);
          }
        }, {
          key: "setSessionInfo",
          value: function setSessionInfo(value) {
            this.setItem(defaults$1.session_info, value);
          }
        }, {
          key: "getItem",
          value: function getItem(key) {
            return parse$1(decryptValue(this.storage.get(key)));
          }
        }, {
          key: "getUserId",
          value: function getUserId2() {
            return this.getItem(defaults$1.user_storage_key);
          }
        }, {
          key: "getUserTraits",
          value: function getUserTraits2() {
            return this.getItem(defaults$1.user_storage_trait);
          }
        }, {
          key: "getGroupId",
          value: function getGroupId2() {
            return this.getItem(defaults$1.group_storage_key);
          }
        }, {
          key: "getGroupTraits",
          value: function getGroupTraits2() {
            return this.getItem(defaults$1.group_storage_trait);
          }
        }, {
          key: "fetchExternalAnonymousId",
          value: function fetchExternalAnonymousId(source) {
            var anonId;
            var key = source.toLowerCase();
            if (!Object.keys(anonymousIdKeyMap).includes(key)) {
              return anonId;
            }
            switch (key) {
              case "segment":
                if (Store$2.enabled) {
                  anonId = Store$2.get(anonymousIdKeyMap[key]);
                }
                if (!anonId && Cookie.isSupportAvailable) {
                  anonId = Cookie.get(anonymousIdKeyMap[key]);
                }
                return anonId;
              default:
                return anonId;
            }
          }
        }, {
          key: "getAnonymousId",
          value: function getAnonymousId2(anonymousIdOptions) {
            var rlAnonymousId = parse$1(decryptValue(this.storage.get(defaults$1.user_storage_anonymousId)));
            if (rlAnonymousId) {
              return rlAnonymousId;
            }
            var source = getValue(anonymousIdOptions, "autoCapture.source");
            if (getValue(anonymousIdOptions, "autoCapture.enabled") === true && typeof source === "string") {
              var anonId = this.fetchExternalAnonymousId(source);
              if (anonId)
                return anonId;
            }
            return rlAnonymousId;
          }
        }, {
          key: "getInitialReferrer",
          value: function getInitialReferrer() {
            return this.getItem(defaults$1.page_storage_init_referrer);
          }
        }, {
          key: "getInitialReferringDomain",
          value: function getInitialReferringDomain() {
            return this.getItem(defaults$1.page_storage_init_referring_domain);
          }
        }, {
          key: "getSessionInfo",
          value: function getSessionInfo() {
            return this.getItem(defaults$1.session_info);
          }
        }, {
          key: "removeItem",
          value: function removeItem(key) {
            return this.storage.remove(key);
          }
        }, {
          key: "removeSessionInfo",
          value: function removeSessionInfo() {
            this.removeItem(defaults$1.session_info);
          }
        }, {
          key: "clear",
          value: function clear(flag) {
            this.storage.remove(defaults$1.user_storage_key);
            this.storage.remove(defaults$1.user_storage_trait);
            this.storage.remove(defaults$1.group_storage_key);
            this.storage.remove(defaults$1.group_storage_trait);
            if (flag) {
              this.storage.remove(defaults$1.user_storage_anonymousId);
            }
          }
        }]);
        return Storage2;
      }();
      var Storage = new Storage$1();
      function replacer(key, value) {
        if (value === null || value === void 0) {
          return void 0;
        }
        return value;
      }
      function removeTrailingSlashes(inURL) {
        return inURL && inURL.endsWith("/") ? inURL.replace(/\/+$/, "") : inURL;
      }
      function generateUUID() {
        return v4$2();
      }
      function getCurrentTimeFormatted() {
        var curDateTime = new Date().toISOString();
        return curDateTime;
      }
      function getJSONTrimmed(context, url, writeKey, callback) {
        var cb_ = callback.bind(context);
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.setRequestHeader(
          "Authorization",
          "Basic ".concat(btoa("".concat(writeKey, ":")))
        );
        xhr.onload = function() {
          var status = xhr.status;
          if (status == 200) {
            cb_(200, xhr.responseText);
          } else {
            handleError(new Error("request failed with status: ".concat(xhr.status, " for url: ").concat(url)));
            cb_(status);
          }
        };
        xhr.send();
      }
      function leaveBreadcrumb(breadcrumb) {
        if (window.rsBugsnagClient) {
          window.rsBugsnagClient.leaveBreadcrumb(breadcrumb);
        }
      }
      function notifyError(error) {
        if (window.rsBugsnagClient) {
          window.rsBugsnagClient.notify(error);
        }
      }
      function handleError(error, analyticsInstance) {
        var errorMessage;
        try {
          if (typeof error === "string") {
            errorMessage = error;
          } else if (error instanceof Error) {
            errorMessage = error.message;
          } else {
            errorMessage = error.message ? error.message : JSON.stringify(error);
          }
        } catch (e) {
          errorMessage = "";
        }
        try {
          if (error instanceof Event) {
            if (error.target && error.target.localName !== "script")
              return;
            if (error.target.dataset && (error.target.dataset.loader !== LOAD_ORIGIN || error.target.dataset.isNonNativeSDK !== "true"))
              return;
            errorMessage = "error in script loading:: src::  ".concat(error.target.src, " id:: ").concat(error.target.id);
            if (error.target.id === "ad-block") {
              analyticsInstance.page("RudderJS-Initiated", "ad-block page request", {
                path: "/ad-blocked",
                title: errorMessage
              }, analyticsInstance.sendAdblockPageOptions);
              return;
            }
          }
          errorMessage = '[handleError]:: "'.concat(errorMessage, '"');
          logger.error(errorMessage);
          var errorObj = error;
          if (!(error instanceof Error))
            errorObj = new Error(errorMessage);
          notifyError(errorObj);
        } catch (err) {
          logger.error("[handleError] Exception:: ", err);
          logger.error("[handleError] Original error:: ", JSON.stringify(error));
          notifyError(err);
        }
      }
      function getDefaultPageProperties() {
        var canonicalUrl = getCanonicalUrl();
        var path = canonicalUrl ? componentUrl.parse(canonicalUrl).pathname : window.location.pathname;
        var search = window.location.search;
        var _document = document, title2 = _document.title;
        var url = getUrl(search);
        var tab_url = window.location.href;
        var referrer = getReferrer();
        var referring_domain = getReferringDomain(referrer);
        var initial_referrer = Storage.getInitialReferrer();
        var initial_referring_domain = Storage.getInitialReferringDomain();
        return {
          path,
          referrer,
          referring_domain,
          search,
          title: title2,
          url,
          tab_url,
          initial_referrer,
          initial_referring_domain
        };
      }
      function getReferrer() {
        return document.referrer || "$direct";
      }
      function getReferringDomain(referrer) {
        var split2 = referrer.split("/");
        if (split2.length >= 3) {
          return split2[2];
        }
        return "";
      }
      function getUrl(search) {
        var canonicalUrl = getCanonicalUrl();
        var url = canonicalUrl ? canonicalUrl.indexOf("?") > -1 ? canonicalUrl : canonicalUrl + search : window.location.href;
        var hashIndex = url.indexOf("#");
        return hashIndex > -1 ? url.slice(0, hashIndex) : url;
      }
      function getCanonicalUrl() {
        var tags = document.getElementsByTagName("link");
        for (var i2 = 0, tag; tag = tags[i2]; i2++) {
          if (tag.getAttribute("rel") === "canonical") {
            return tag.getAttribute("href");
          }
        }
      }
      function transformNamesCore(integrationObject, namesObj) {
        Object.keys(integrationObject).forEach(function(key) {
          if (integrationObject.hasOwnProperty(key)) {
            if (namesObj[key]) {
              integrationObject[namesObj[key]] = integrationObject[key];
            }
            if (key != "All") {
              if (namesObj[key] != void 0 && namesObj[key] != key) {
                delete integrationObject[key];
              }
            }
          }
        });
      }
      function transformToRudderNames(integrationObject) {
        transformNamesCore(integrationObject, commonNames);
      }
      function transformToServerNames(integrationObject) {
        transformNamesCore(integrationObject, clientToServerNames);
      }
      function findAllEnabledDestinations(sdkSuppliedIntegrations, configPlaneEnabledIntegrations) {
        var enabledList = [];
        if (!configPlaneEnabledIntegrations || configPlaneEnabledIntegrations.length === 0) {
          return enabledList;
        }
        var allValue = true;
        if (sdkSuppliedIntegrations.All !== void 0) {
          allValue = sdkSuppliedIntegrations.All;
        }
        var intgData = [];
        if (typeof configPlaneEnabledIntegrations[0] === "string") {
          configPlaneEnabledIntegrations.forEach(function(intg) {
            intgData.push({
              intgName: intg,
              intObj: intg
            });
          });
        } else if (_typeof(configPlaneEnabledIntegrations[0]) === "object") {
          configPlaneEnabledIntegrations.forEach(function(intg) {
            intgData.push({
              intgName: intg.name,
              intObj: intg
            });
          });
        }
        intgData.forEach(function(_ref) {
          var intgName = _ref.intgName, intObj = _ref.intObj;
          if (!allValue) {
            if (sdkSuppliedIntegrations[intgName] != void 0 && sdkSuppliedIntegrations[intgName] == true) {
              enabledList.push(intObj);
            }
          } else {
            var intgValue = true;
            if (sdkSuppliedIntegrations[intgName] != void 0 && sdkSuppliedIntegrations[intgName] == false) {
              intgValue = false;
            }
            if (intgValue) {
              enabledList.push(intObj);
            }
          }
        });
        return enabledList;
      }
      function getUserProvidedConfigUrl(configUrl, defConfigUrl) {
        var url = configUrl;
        if (url.indexOf("sourceConfig") === -1) {
          url = "".concat(removeTrailingSlashes(url), "/sourceConfig/");
        }
        url = url.slice(-1) === "/" ? url : "".concat(url, "/");
        var defQueryParams = defConfigUrl.split("?")[1];
        var urlSplitItems = url.split("?");
        if (urlSplitItems.length > 1 && urlSplitItems[1] !== defQueryParams) {
          url = "".concat(urlSplitItems[0], "?").concat(defQueryParams);
        } else {
          url = "".concat(url, "?").concat(defQueryParams);
        }
        return url;
      }
      function checkReservedKeywords(message, messageType) {
        var properties = message.properties, traits = message.traits;
        if (properties) {
          Object.keys(properties).forEach(function(property) {
            if (RESERVED_KEYS.indexOf(property.toLowerCase()) >= 0) {
              logger.error("Warning! : Reserved keyword used in properties--> ".concat(property, " with ").concat(messageType, " call"));
            }
          });
        }
        if (traits) {
          Object.keys(traits).forEach(function(trait) {
            if (RESERVED_KEYS.indexOf(trait.toLowerCase()) >= 0) {
              logger.error("Warning! : Reserved keyword used in traits--> ".concat(trait, " with ").concat(messageType, " call"));
            }
          });
        }
        var contextualTraits = message.context.traits;
        if (contextualTraits) {
          Object.keys(contextualTraits).forEach(function(contextTrait) {
            if (RESERVED_KEYS.indexOf(contextTrait.toLowerCase()) >= 0) {
              logger.error("Warning! : Reserved keyword used in traits --> ".concat(contextTrait, " with ").concat(messageType, " call"));
            }
          });
        }
      }
      var getConfigUrl = function getConfigUrl2(writeKey) {
        return CONFIG_URL.concat(CONFIG_URL.includes("?") ? "&" : "?").concat(writeKey ? "writeKey=".concat(writeKey) : "");
      };
      var getSDKUrlInfo = function getSDKUrlInfo2() {
        var scripts = document.getElementsByTagName("script");
        var sdkURL;
        var isStaging = false;
        for (var i2 = 0; i2 < scripts.length; i2 += 1) {
          var curScriptSrc = removeTrailingSlashes(scripts[i2].getAttribute("src"));
          if (curScriptSrc) {
            var urlMatches = curScriptSrc.match(/^.*rudder-analytics(-staging)?(\.min)?\.js$/);
            if (urlMatches) {
              sdkURL = curScriptSrc;
              isStaging = urlMatches[1] !== void 0;
              break;
            }
          }
        }
        return {
          sdkURL,
          isStaging
        };
      };
      var countDigits = function countDigits2(number) {
        return number ? number.toString().length : 0;
      };
      var getStringId = function getStringId2(id) {
        return typeof id === "string" || typeof id === "undefined" || id === null ? id : JSON.stringify(id);
      };
      var RudderApp = _createClass(function RudderApp2() {
        _classCallCheck(this, RudderApp2);
        this.build = "1.0.0";
        this.name = "RudderLabs JavaScript SDK";
        this.namespace = "com.rudderlabs.javascript";
        this.version = "2.20.0";
      });
      var RudderLibraryInfo = _createClass(function RudderLibraryInfo2() {
        _classCallCheck(this, RudderLibraryInfo2);
        this.name = "RudderLabs JavaScript SDK";
        this.version = "2.20.0";
      });
      var RudderOSInfo = _createClass(function RudderOSInfo2() {
        _classCallCheck(this, RudderOSInfo2);
        this.name = "";
        this.version = "";
      });
      var RudderScreenInfo = _createClass(function RudderScreenInfo2() {
        _classCallCheck(this, RudderScreenInfo2);
        this.density = 0;
        this.width = 0;
        this.height = 0;
        this.innerWidth = 0;
        this.innerHeight = 0;
      });
      var RudderContext = _createClass(function RudderContext2() {
        _classCallCheck(this, RudderContext2);
        this.app = new RudderApp();
        this.traits = null;
        this.library = new RudderLibraryInfo();
        this.userAgent = null;
        this.device = null;
        this.network = null;
        this.os = new RudderOSInfo();
        this.locale = null;
        this.screen = new RudderScreenInfo();
        {
          this.screen.width = window.screen.width;
          this.screen.height = window.screen.height;
          this.screen.density = window.devicePixelRatio;
          this.screen.innerWidth = window.innerWidth;
          this.screen.innerHeight = window.innerHeight;
          this.userAgent = navigator.userAgent;
          if (navigator.brave && Object.getPrototypeOf(navigator.brave).isBrave) {
            var matchedArr = this.userAgent.match(/(Chrome)\/([\w\.]+)/i);
            if (matchedArr) {
              this.userAgent = "".concat(this.userAgent, " Brave/").concat(matchedArr[2]);
            }
          }
          this.locale = navigator.language || navigator.browserLanguage;
        }
      });
      function generateMessageId() {
        var ts = 1e3 * new Date().getTime();
        if (typeof performance !== "undefined" && typeof performance.now === "function") {
          var pNow = performance.now();
          var microSec = 1e3 * (pNow - Math.floor(pNow));
          ts += microSec;
        }
        var uuid2 = generateUUID();
        return "".concat(ts, "-").concat(uuid2);
      }
      var RudderMessage = function() {
        function RudderMessage2() {
          _classCallCheck(this, RudderMessage2);
          this.channel = "web";
          this.context = new RudderContext();
          this.type = null;
          this.messageId = generateMessageId();
          this.originalTimestamp = new Date().toISOString();
          this.anonymousId = null;
          this.userId = null;
          this.event = null;
          this.properties = {};
          this.integrations = {};
          this.integrations.All = true;
        }
        _createClass(RudderMessage2, [{
          key: "getProperty",
          value: function getProperty(key) {
            return this.properties[key];
          }
        }, {
          key: "addProperty",
          value: function addProperty(key, value) {
            this.properties[key] = value;
          }
        }]);
        return RudderMessage2;
      }();
      var RudderElement = function() {
        function RudderElement2() {
          _classCallCheck(this, RudderElement2);
          this.message = new RudderMessage();
        }
        _createClass(RudderElement2, [{
          key: "setType",
          value: function setType(type) {
            this.message.type = type;
          }
        }, {
          key: "setProperty",
          value: function setProperty(rudderProperty) {
            this.message.properties = rudderProperty;
          }
        }, {
          key: "setUserProperty",
          value: function setUserProperty(rudderUserProperty) {
            this.message.user_properties = rudderUserProperty;
          }
        }, {
          key: "setUserId",
          value: function setUserId(userId) {
            this.message.userId = userId;
          }
        }, {
          key: "setEventName",
          value: function setEventName(eventName) {
            this.message.event = eventName;
          }
        }, {
          key: "getElementContent",
          value: function getElementContent() {
            return this.message;
          }
        }]);
        return RudderElement2;
      }();
      var RudderElementBuilder = function() {
        function RudderElementBuilder2() {
          _classCallCheck(this, RudderElementBuilder2);
          this.rudderProperty = null;
          this.rudderUserProperty = null;
          this.event = null;
          this.userId = null;
          this.type = null;
        }
        _createClass(RudderElementBuilder2, [{
          key: "setType",
          value: function setType(eventType) {
            this.type = eventType;
            return this;
          }
        }, {
          key: "build",
          value: function build() {
            var element = new RudderElement();
            element.setUserId(this.userId);
            element.setType(this.type);
            element.setEventName(this.event);
            element.setProperty(this.rudderProperty);
            element.setUserProperty(this.rudderUserProperty);
            return element;
          }
        }]);
        return RudderElementBuilder2;
      }();
      var dist = {};
      var IDX = 256, HEX = [], BUFFER;
      while (IDX--) {
        HEX[IDX] = (IDX + 256).toString(16).substring(1);
      }
      function v4$1() {
        var i2 = 0, num, out = "";
        if (!BUFFER || IDX + 16 > 256) {
          BUFFER = Array(i2 = 256);
          while (i2--) {
            BUFFER[i2] = 256 * Math.random() | 0;
          }
          i2 = IDX = 0;
        }
        for (; i2 < 16; i2++) {
          num = BUFFER[IDX + i2];
          if (i2 == 6)
            out += HEX[num & 15 | 64];
          else if (i2 == 8)
            out += HEX[num & 63 | 128];
          else
            out += HEX[num];
          if (i2 & 1 && i2 > 1 && i2 < 11)
            out += "-";
        }
        IDX++;
        return out;
      }
      dist.v4 = v4$1;
      var engine = {};
      var hop = Object.prototype.hasOwnProperty;
      var strCharAt = String.prototype.charAt;
      var toStr = Object.prototype.toString;
      var charAt = function charAt2(str, index) {
        return strCharAt.call(str, index);
      };
      var has = function has2(context, prop) {
        return hop.call(context, prop);
      };
      var isString = function isString2(val) {
        return toStr.call(val) === "[object String]";
      };
      var isArrayLike$1 = function isArrayLike2(val) {
        return val != null && typeof val !== "function" && typeof val.length === "number";
      };
      var indexKeys = function indexKeys2(target, pred) {
        pred = pred || has;
        var results = [];
        for (var i2 = 0, len = target.length; i2 < len; i2 += 1) {
          if (pred(target, i2)) {
            results.push(String(i2));
          }
        }
        return results;
      };
      var objectKeys = function objectKeys2(target, pred) {
        pred = pred || has;
        var results = [];
        for (var key in target) {
          if (pred(target, key)) {
            results.push(String(key));
          }
        }
        return results;
      };
      var keys$3 = function keys2(source) {
        if (source == null) {
          return [];
        }
        if (isString(source)) {
          return indexKeys(source, charAt);
        }
        if (isArrayLike$1(source)) {
          return indexKeys(source, has);
        }
        return objectKeys(source);
      };
      var keys_1 = keys$3;
      var getRandomValues;
      var rnds8 = new Uint8Array(16);
      function rng() {
        if (!getRandomValues) {
          getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
          if (!getRandomValues) {
            throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
          }
        }
        return getRandomValues(rnds8);
      }
      var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      function validate(uuid2) {
        return typeof uuid2 === "string" && REGEX.test(uuid2);
      }
      var byteToHex = [];
      for (var i$1 = 0; i$1 < 256; ++i$1) {
        byteToHex.push((i$1 + 256).toString(16).substr(1));
      }
      function stringify(arr) {
        var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        var uuid2 = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
        if (!validate(uuid2)) {
          throw TypeError("Stringified UUID is invalid");
        }
        return uuid2;
      }
      var _nodeId;
      var _clockseq;
      var _lastMSecs = 0;
      var _lastNSecs = 0;
      function v1(options, buf, offset) {
        var i2 = buf && offset || 0;
        var b = buf || new Array(16);
        options = options || {};
        var node = options.node || _nodeId;
        var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
        if (node == null || clockseq == null) {
          var seedBytes = options.random || (options.rng || rng)();
          if (node == null) {
            node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
          }
          if (clockseq == null) {
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
          }
        }
        var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
        var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
        if (dt < 0 && options.clockseq === void 0) {
          clockseq = clockseq + 1 & 16383;
        }
        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
          nsecs = 0;
        }
        if (nsecs >= 1e4) {
          throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        }
        _lastMSecs = msecs;
        _lastNSecs = nsecs;
        _clockseq = clockseq;
        msecs += 122192928e5;
        var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
        b[i2++] = tl >>> 24 & 255;
        b[i2++] = tl >>> 16 & 255;
        b[i2++] = tl >>> 8 & 255;
        b[i2++] = tl & 255;
        var tmh = msecs / 4294967296 * 1e4 & 268435455;
        b[i2++] = tmh >>> 8 & 255;
        b[i2++] = tmh & 255;
        b[i2++] = tmh >>> 24 & 15 | 16;
        b[i2++] = tmh >>> 16 & 255;
        b[i2++] = clockseq >>> 8 | 128;
        b[i2++] = clockseq & 255;
        for (var n = 0; n < 6; ++n) {
          b[i2 + n] = node[n];
        }
        return buf || stringify(b);
      }
      function parse(uuid2) {
        if (!validate(uuid2)) {
          throw TypeError("Invalid UUID");
        }
        var v;
        var arr = new Uint8Array(16);
        arr[0] = (v = parseInt(uuid2.slice(0, 8), 16)) >>> 24;
        arr[1] = v >>> 16 & 255;
        arr[2] = v >>> 8 & 255;
        arr[3] = v & 255;
        arr[4] = (v = parseInt(uuid2.slice(9, 13), 16)) >>> 8;
        arr[5] = v & 255;
        arr[6] = (v = parseInt(uuid2.slice(14, 18), 16)) >>> 8;
        arr[7] = v & 255;
        arr[8] = (v = parseInt(uuid2.slice(19, 23), 16)) >>> 8;
        arr[9] = v & 255;
        arr[10] = (v = parseInt(uuid2.slice(24, 36), 16)) / 1099511627776 & 255;
        arr[11] = v / 4294967296 & 255;
        arr[12] = v >>> 24 & 255;
        arr[13] = v >>> 16 & 255;
        arr[14] = v >>> 8 & 255;
        arr[15] = v & 255;
        return arr;
      }
      function stringToBytes(str) {
        str = unescape(encodeURIComponent(str));
        var bytes = [];
        for (var i2 = 0; i2 < str.length; ++i2) {
          bytes.push(str.charCodeAt(i2));
        }
        return bytes;
      }
      var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
      var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
      function v35(name, version2, hashfunc) {
        function generateUUID2(value, namespace, buf, offset) {
          if (typeof value === "string") {
            value = stringToBytes(value);
          }
          if (typeof namespace === "string") {
            namespace = parse(namespace);
          }
          if (namespace.length !== 16) {
            throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
          }
          var bytes = new Uint8Array(16 + value.length);
          bytes.set(namespace);
          bytes.set(value, namespace.length);
          bytes = hashfunc(bytes);
          bytes[6] = bytes[6] & 15 | version2;
          bytes[8] = bytes[8] & 63 | 128;
          if (buf) {
            offset = offset || 0;
            for (var i2 = 0; i2 < 16; ++i2) {
              buf[offset + i2] = bytes[i2];
            }
            return buf;
          }
          return stringify(bytes);
        }
        try {
          generateUUID2.name = name;
        } catch (err) {
        }
        generateUUID2.DNS = DNS;
        generateUUID2.URL = URL;
        return generateUUID2;
      }
      function md5(bytes) {
        if (typeof bytes === "string") {
          var msg = unescape(encodeURIComponent(bytes));
          bytes = new Uint8Array(msg.length);
          for (var i2 = 0; i2 < msg.length; ++i2) {
            bytes[i2] = msg.charCodeAt(i2);
          }
        }
        return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
      }
      function md5ToHexEncodedArray(input) {
        var output = [];
        var length32 = input.length * 32;
        var hexTab = "0123456789abcdef";
        for (var i2 = 0; i2 < length32; i2 += 8) {
          var x = input[i2 >> 5] >>> i2 % 32 & 255;
          var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
          output.push(hex);
        }
        return output;
      }
      function getOutputLength(inputLength8) {
        return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
      }
      function wordsToMd5(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[getOutputLength(len) - 1] = len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d2 = 271733878;
        for (var i2 = 0; i2 < x.length; i2 += 16) {
          var olda = a;
          var oldb = b;
          var oldc = c;
          var oldd = d2;
          a = md5ff(a, b, c, d2, x[i2], 7, -680876936);
          d2 = md5ff(d2, a, b, c, x[i2 + 1], 12, -389564586);
          c = md5ff(c, d2, a, b, x[i2 + 2], 17, 606105819);
          b = md5ff(b, c, d2, a, x[i2 + 3], 22, -1044525330);
          a = md5ff(a, b, c, d2, x[i2 + 4], 7, -176418897);
          d2 = md5ff(d2, a, b, c, x[i2 + 5], 12, 1200080426);
          c = md5ff(c, d2, a, b, x[i2 + 6], 17, -1473231341);
          b = md5ff(b, c, d2, a, x[i2 + 7], 22, -45705983);
          a = md5ff(a, b, c, d2, x[i2 + 8], 7, 1770035416);
          d2 = md5ff(d2, a, b, c, x[i2 + 9], 12, -1958414417);
          c = md5ff(c, d2, a, b, x[i2 + 10], 17, -42063);
          b = md5ff(b, c, d2, a, x[i2 + 11], 22, -1990404162);
          a = md5ff(a, b, c, d2, x[i2 + 12], 7, 1804603682);
          d2 = md5ff(d2, a, b, c, x[i2 + 13], 12, -40341101);
          c = md5ff(c, d2, a, b, x[i2 + 14], 17, -1502002290);
          b = md5ff(b, c, d2, a, x[i2 + 15], 22, 1236535329);
          a = md5gg(a, b, c, d2, x[i2 + 1], 5, -165796510);
          d2 = md5gg(d2, a, b, c, x[i2 + 6], 9, -1069501632);
          c = md5gg(c, d2, a, b, x[i2 + 11], 14, 643717713);
          b = md5gg(b, c, d2, a, x[i2], 20, -373897302);
          a = md5gg(a, b, c, d2, x[i2 + 5], 5, -701558691);
          d2 = md5gg(d2, a, b, c, x[i2 + 10], 9, 38016083);
          c = md5gg(c, d2, a, b, x[i2 + 15], 14, -660478335);
          b = md5gg(b, c, d2, a, x[i2 + 4], 20, -405537848);
          a = md5gg(a, b, c, d2, x[i2 + 9], 5, 568446438);
          d2 = md5gg(d2, a, b, c, x[i2 + 14], 9, -1019803690);
          c = md5gg(c, d2, a, b, x[i2 + 3], 14, -187363961);
          b = md5gg(b, c, d2, a, x[i2 + 8], 20, 1163531501);
          a = md5gg(a, b, c, d2, x[i2 + 13], 5, -1444681467);
          d2 = md5gg(d2, a, b, c, x[i2 + 2], 9, -51403784);
          c = md5gg(c, d2, a, b, x[i2 + 7], 14, 1735328473);
          b = md5gg(b, c, d2, a, x[i2 + 12], 20, -1926607734);
          a = md5hh(a, b, c, d2, x[i2 + 5], 4, -378558);
          d2 = md5hh(d2, a, b, c, x[i2 + 8], 11, -2022574463);
          c = md5hh(c, d2, a, b, x[i2 + 11], 16, 1839030562);
          b = md5hh(b, c, d2, a, x[i2 + 14], 23, -35309556);
          a = md5hh(a, b, c, d2, x[i2 + 1], 4, -1530992060);
          d2 = md5hh(d2, a, b, c, x[i2 + 4], 11, 1272893353);
          c = md5hh(c, d2, a, b, x[i2 + 7], 16, -155497632);
          b = md5hh(b, c, d2, a, x[i2 + 10], 23, -1094730640);
          a = md5hh(a, b, c, d2, x[i2 + 13], 4, 681279174);
          d2 = md5hh(d2, a, b, c, x[i2], 11, -358537222);
          c = md5hh(c, d2, a, b, x[i2 + 3], 16, -722521979);
          b = md5hh(b, c, d2, a, x[i2 + 6], 23, 76029189);
          a = md5hh(a, b, c, d2, x[i2 + 9], 4, -640364487);
          d2 = md5hh(d2, a, b, c, x[i2 + 12], 11, -421815835);
          c = md5hh(c, d2, a, b, x[i2 + 15], 16, 530742520);
          b = md5hh(b, c, d2, a, x[i2 + 2], 23, -995338651);
          a = md5ii(a, b, c, d2, x[i2], 6, -198630844);
          d2 = md5ii(d2, a, b, c, x[i2 + 7], 10, 1126891415);
          c = md5ii(c, d2, a, b, x[i2 + 14], 15, -1416354905);
          b = md5ii(b, c, d2, a, x[i2 + 5], 21, -57434055);
          a = md5ii(a, b, c, d2, x[i2 + 12], 6, 1700485571);
          d2 = md5ii(d2, a, b, c, x[i2 + 3], 10, -1894986606);
          c = md5ii(c, d2, a, b, x[i2 + 10], 15, -1051523);
          b = md5ii(b, c, d2, a, x[i2 + 1], 21, -2054922799);
          a = md5ii(a, b, c, d2, x[i2 + 8], 6, 1873313359);
          d2 = md5ii(d2, a, b, c, x[i2 + 15], 10, -30611744);
          c = md5ii(c, d2, a, b, x[i2 + 6], 15, -1560198380);
          b = md5ii(b, c, d2, a, x[i2 + 13], 21, 1309151649);
          a = md5ii(a, b, c, d2, x[i2 + 4], 6, -145523070);
          d2 = md5ii(d2, a, b, c, x[i2 + 11], 10, -1120210379);
          c = md5ii(c, d2, a, b, x[i2 + 2], 15, 718787259);
          b = md5ii(b, c, d2, a, x[i2 + 9], 21, -343485551);
          a = safeAdd(a, olda);
          b = safeAdd(b, oldb);
          c = safeAdd(c, oldc);
          d2 = safeAdd(d2, oldd);
        }
        return [a, b, c, d2];
      }
      function bytesToWords(input) {
        if (input.length === 0) {
          return [];
        }
        var length8 = input.length * 8;
        var output = new Uint32Array(getOutputLength(length8));
        for (var i2 = 0; i2 < length8; i2 += 8) {
          output[i2 >> 5] |= (input[i2 / 8] & 255) << i2 % 32;
        }
        return output;
      }
      function safeAdd(x, y2) {
        var lsw = (x & 65535) + (y2 & 65535);
        var msw = (x >> 16) + (y2 >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      function bitRotateLeft(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      }
      function md5cmn(q, a, b, x, s2, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s2), b);
      }
      function md5ff(a, b, c, d2, x, s2, t) {
        return md5cmn(b & c | ~b & d2, a, b, x, s2, t);
      }
      function md5gg(a, b, c, d2, x, s2, t) {
        return md5cmn(b & d2 | c & ~d2, a, b, x, s2, t);
      }
      function md5hh(a, b, c, d2, x, s2, t) {
        return md5cmn(b ^ c ^ d2, a, b, x, s2, t);
      }
      function md5ii(a, b, c, d2, x, s2, t) {
        return md5cmn(c ^ (b | ~d2), a, b, x, s2, t);
      }
      var v3 = v35("v3", 48, md5);
      var v3$1 = v3;
      function v4(options, buf, offset) {
        options = options || {};
        var rnds = options.random || (options.rng || rng)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (var i2 = 0; i2 < 16; ++i2) {
            buf[offset + i2] = rnds[i2];
          }
          return buf;
        }
        return stringify(rnds);
      }
      function f(s2, x, y2, z) {
        switch (s2) {
          case 0:
            return x & y2 ^ ~x & z;
          case 1:
            return x ^ y2 ^ z;
          case 2:
            return x & y2 ^ x & z ^ y2 & z;
          case 3:
            return x ^ y2 ^ z;
        }
      }
      function ROTL(x, n) {
        return x << n | x >>> 32 - n;
      }
      function sha1(bytes) {
        var K = [1518500249, 1859775393, 2400959708, 3395469782];
        var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        if (typeof bytes === "string") {
          var msg = unescape(encodeURIComponent(bytes));
          bytes = [];
          for (var i2 = 0; i2 < msg.length; ++i2) {
            bytes.push(msg.charCodeAt(i2));
          }
        } else if (!Array.isArray(bytes)) {
          bytes = Array.prototype.slice.call(bytes);
        }
        bytes.push(128);
        var l = bytes.length / 4 + 2;
        var N = Math.ceil(l / 16);
        var M = new Array(N);
        for (var _i = 0; _i < N; ++_i) {
          var arr = new Uint32Array(16);
          for (var j = 0; j < 16; ++j) {
            arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
          }
          M[_i] = arr;
        }
        M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
        M[N - 1][14] = Math.floor(M[N - 1][14]);
        M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
        for (var _i2 = 0; _i2 < N; ++_i2) {
          var W = new Uint32Array(80);
          for (var t = 0; t < 16; ++t) {
            W[t] = M[_i2][t];
          }
          for (var _t = 16; _t < 80; ++_t) {
            W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
          }
          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d2 = H[3];
          var e = H[4];
          for (var _t2 = 0; _t2 < 80; ++_t2) {
            var s2 = Math.floor(_t2 / 20);
            var T = ROTL(a, 5) + f(s2, b, c, d2) + e + K[s2] + W[_t2] >>> 0;
            e = d2;
            d2 = c;
            c = ROTL(b, 30) >>> 0;
            b = a;
            a = T;
          }
          H[0] = H[0] + a >>> 0;
          H[1] = H[1] + b >>> 0;
          H[2] = H[2] + c >>> 0;
          H[3] = H[3] + d2 >>> 0;
          H[4] = H[4] + e >>> 0;
        }
        return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
      }
      var v5 = v35("v5", 80, sha1);
      var v5$1 = v5;
      var nil = "00000000-0000-0000-0000-000000000000";
      function version(uuid2) {
        if (!validate(uuid2)) {
          throw TypeError("Invalid UUID");
        }
        return parseInt(uuid2.substr(14, 1), 16);
      }
      var esmBrowser = Object.freeze({
        __proto__: null,
        v1,
        v3: v3$1,
        v4,
        v5: v5$1,
        NIL: nil,
        version,
        validate,
        stringify,
        parse
      });
      var require$$1 = getAugmentedNamespace(esmBrowser);
      var keys$2 = keys_1;
      var uuid$1 = require$$1.v4;
      var inMemoryStore = {
        _data: {},
        length: 0,
        setItem: function setItem(key, value) {
          this._data[key] = value;
          this.length = keys$2(this._data).length;
          return value;
        },
        getItem: function getItem(key) {
          if (key in this._data) {
            return this._data[key];
          }
          return null;
        },
        removeItem: function removeItem(key) {
          if (key in this._data) {
            delete this._data[key];
          }
          this.length = keys$2(this._data).length;
          return null;
        },
        clear: function clear() {
          this._data = {};
          this.length = 0;
        },
        key: function key(index) {
          return keys$2(this._data)[index];
        }
      };
      function isSupportedNatively() {
        try {
          if (!window.localStorage)
            return false;
          var key = uuid$1();
          window.localStorage.setItem(key, "test_value");
          var value = window.localStorage.getItem(key);
          window.localStorage.removeItem(key);
          return value === "test_value";
        } catch (e) {
          return false;
        }
      }
      function pickStorage() {
        if (isSupportedNatively()) {
          return window.localStorage;
        }
        return inMemoryStore;
      }
      engine.defaultEngine = pickStorage();
      engine.inMemoryEngine = inMemoryStore;
      var keys$1 = keys_1;
      var objToString = Object.prototype.toString;
      var isNumber = function isNumber2(val) {
        var type = _typeof(val);
        return type === "number" || type === "object" && objToString.call(val) === "[object Number]";
      };
      var isArray = typeof Array.isArray === "function" ? Array.isArray : function isArray2(val) {
        return objToString.call(val) === "[object Array]";
      };
      var isArrayLike = function isArrayLike2(val) {
        return val != null && (isArray(val) || val !== "function" && isNumber(val.length));
      };
      var arrayEach = function arrayEach2(iterator, array) {
        for (var i2 = 0; i2 < array.length; i2 += 1) {
          if (iterator(array[i2], i2, array) === false) {
            break;
          }
        }
      };
      var baseEach = function baseEach2(iterator, object) {
        var ks = keys$1(object);
        for (var i2 = 0; i2 < ks.length; i2 += 1) {
          if (iterator(object[ks[i2]], ks[i2], object) === false) {
            break;
          }
        }
      };
      var each$3 = function each2(iterator, collection) {
        return (isArrayLike(collection) ? arrayEach : baseEach).call(this, iterator, collection);
      };
      var each_1 = each$3;
      var defaultEngine = engine.defaultEngine;
      var inMemoryEngine = engine.inMemoryEngine;
      var each$2 = each_1;
      var keys = keys_1;
      var json = JSON;
      function Store$1(name, id, keys2, optionalEngine) {
        this.id = id;
        this.name = name;
        this.keys = keys2 || {};
        this.engine = optionalEngine || defaultEngine;
        this.originalEngine = this.engine;
      }
      Store$1.prototype.set = function(key, value) {
        var compoundKey = this._createValidKey(key);
        if (!compoundKey)
          return;
        try {
          this.engine.setItem(compoundKey, json.stringify(value));
        } catch (err) {
          if (isQuotaExceeded(err)) {
            this._swapEngine();
            this.set(key, value);
          }
        }
      };
      Store$1.prototype.get = function(key) {
        try {
          var str = this.engine.getItem(this._createValidKey(key));
          if (str === null) {
            return null;
          }
          return json.parse(str);
        } catch (err) {
          return null;
        }
      };
      Store$1.prototype.getOriginalEngine = function() {
        return this.originalEngine;
      };
      Store$1.prototype.remove = function(key) {
        this.engine.removeItem(this._createValidKey(key));
      };
      Store$1.prototype._createValidKey = function(key) {
        var name = this.name;
        var id = this.id;
        if (!keys(this.keys).length)
          return [name, id, key].join(".");
        var compoundKey;
        each$2(function(value) {
          if (value === key) {
            compoundKey = [name, id, key].join(".");
          }
        }, this.keys);
        return compoundKey;
      };
      Store$1.prototype._swapEngine = function() {
        var self2 = this;
        each$2(function(key) {
          var value = self2.get(key);
          inMemoryEngine.setItem([self2.name, self2.id, key].join("."), value);
          self2.remove(key);
        }, this.keys);
        this.engine = inMemoryEngine;
      };
      var store = Store$1;
      function isQuotaExceeded(e) {
        var quotaExceeded = false;
        if (e.code) {
          switch (e.code) {
            case 22:
              quotaExceeded = true;
              break;
            case 1014:
              if (e.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                quotaExceeded = true;
              }
              break;
          }
        } else if (e.number === -2147024882) {
          quotaExceeded = true;
        }
        return quotaExceeded;
      }
      var each$1 = each_1;
      var CLOCK_LATE_FACTOR = 2;
      var defaultClock = {
        setTimeout: function setTimeout2(fn, ms2) {
          return window.setTimeout(fn, ms2);
        },
        clearTimeout: function clearTimeout2(id) {
          return window.clearTimeout(id);
        },
        Date: window.Date
      };
      var clock = defaultClock;
      var modes = {
        ASAP: 1,
        RESCHEDULE: 2,
        ABANDON: 3
      };
      function Schedule$1() {
        this.tasks = {};
        this.nextId = 1;
      }
      Schedule$1.prototype.now = function() {
        return +new clock.Date();
      };
      Schedule$1.prototype.run = function(task, timeout, mode) {
        var id = this.nextId++;
        this.tasks[id] = clock.setTimeout(this._handle(id, task, timeout, mode || modes.ASAP), timeout);
        return id;
      };
      Schedule$1.prototype.cancel = function(id) {
        if (this.tasks[id]) {
          clock.clearTimeout(this.tasks[id]);
          delete this.tasks[id];
        }
      };
      Schedule$1.prototype.cancelAll = function() {
        each$1(clock.clearTimeout, this.tasks);
        this.tasks = {};
      };
      Schedule$1.prototype._handle = function(id, callback, timeout, mode) {
        var self2 = this;
        var start = self2.now();
        return function() {
          delete self2.tasks[id];
          if (mode >= modes.RESCHEDULE && start + timeout * CLOCK_LATE_FACTOR < self2.now()) {
            if (mode === modes.RESCHEDULE) {
              self2.run(callback, timeout, mode);
            }
            return;
          }
          return callback();
        };
      };
      Schedule$1.setClock = function(newClock) {
        clock = newClock;
      };
      Schedule$1.resetClock = function() {
        clock = defaultClock;
      };
      Schedule$1.Modes = modes;
      var schedule = Schedule$1;
      var debug_1 = debug$1;
      function debug$1(name) {
        if (!debug$1.enabled(name))
          return function() {
          };
        return function(fmt) {
          fmt = coerce(fmt);
          var curr = new Date();
          var ms2 = curr - (debug$1[name] || curr);
          debug$1[name] = curr;
          fmt = name + " " + fmt + " +" + debug$1.humanize(ms2);
          window.console && console.log && Function.prototype.apply.call(console.log, console, arguments);
        };
      }
      debug$1.names = [];
      debug$1.skips = [];
      debug$1.enable = function(name) {
        try {
          localStorage.debug = name;
        } catch (e) {
        }
        var split2 = (name || "").split(/[\s,]+/), len = split2.length;
        for (var i2 = 0; i2 < len; i2++) {
          name = split2[i2].replace("*", ".*?");
          if (name[0] === "-") {
            debug$1.skips.push(new RegExp("^" + name.substr(1) + "$"));
          } else {
            debug$1.names.push(new RegExp("^" + name + "$"));
          }
        }
      };
      debug$1.disable = function() {
        debug$1.enable("");
      };
      debug$1.humanize = function(ms2) {
        var sec = 1e3, min = 60 * 1e3, hour = 60 * min;
        if (ms2 >= hour)
          return (ms2 / hour).toFixed(1) + "h";
        if (ms2 >= min)
          return (ms2 / min).toFixed(1) + "m";
        if (ms2 >= sec)
          return (ms2 / sec | 0) + "s";
        return ms2 + "ms";
      };
      debug$1.enabled = function(name) {
        for (var i2 = 0, len = debug$1.skips.length; i2 < len; i2++) {
          if (debug$1.skips[i2].test(name)) {
            return false;
          }
        }
        for (var i2 = 0, len = debug$1.names.length; i2 < len; i2++) {
          if (debug$1.names[i2].test(name)) {
            return true;
          }
        }
        return false;
      };
      function coerce(val) {
        if (val instanceof Error)
          return val.stack || val.message;
        return val;
      }
      try {
        if (window.localStorage)
          debug$1.enable(localStorage.debug);
      } catch (e) {
      }
      var uuid = dist.v4;
      var Store = store;
      var each = each_1;
      var Schedule = schedule;
      var debug = debug_1("localstorage-retry");
      var Emitter = componentEmitter.exports;
      function bind(func, obj) {
        return function() {
          return func.apply(obj, arguments);
        };
      }
      function Queue(name, opts, fn) {
        if (typeof opts === "function")
          fn = opts;
        this.name = name;
        this.id = uuid();
        this.fn = fn;
        this.maxItems = opts.maxItems || Infinity;
        this.maxAttempts = opts.maxAttempts || Infinity;
        this.backoff = {
          MIN_RETRY_DELAY: opts.minRetryDelay || 1e3,
          MAX_RETRY_DELAY: opts.maxRetryDelay || 3e4,
          FACTOR: opts.backoffFactor || 2,
          JITTER: opts.backoffJitter || 0
        };
        this.timeouts = {
          ACK_TIMER: 1e3,
          RECLAIM_TIMER: 3e3,
          RECLAIM_TIMEOUT: 1e4,
          RECLAIM_WAIT: 500
        };
        this.keys = {
          IN_PROGRESS: "inProgress",
          QUEUE: "queue",
          RECLAIM_START: "reclaimStart",
          RECLAIM_END: "reclaimEnd",
          ACK: "ack"
        };
        this._schedule = new Schedule();
        this._processId = 0;
        this._store = new Store(this.name, this.id, this.keys);
        this._store.set(this.keys.IN_PROGRESS, {});
        this._store.set(this.keys.QUEUE, []);
        this._ack = bind(this._ack, this);
        this._checkReclaim = bind(this._checkReclaim, this);
        this._processHead = bind(this._processHead, this);
        this._running = false;
      }
      Emitter(Queue.prototype);
      Queue.prototype.start = function() {
        if (this._running) {
          this.stop();
        }
        this._running = true;
        this._ack();
        this._checkReclaim();
        this._processHead();
      };
      Queue.prototype.stop = function() {
        this._schedule.cancelAll();
        this._running = false;
      };
      Queue.prototype.shouldRetry = function(_, attemptNumber) {
        if (attemptNumber > this.maxAttempts)
          return false;
        return true;
      };
      Queue.prototype.getDelay = function(attemptNumber) {
        var ms2 = this.backoff.MIN_RETRY_DELAY * Math.pow(this.backoff.FACTOR, attemptNumber);
        if (this.backoff.JITTER) {
          var rand = Math.random();
          var deviation = Math.floor(rand * this.backoff.JITTER * ms2);
          if (Math.floor(rand * 10) < 5) {
            ms2 -= deviation;
          } else {
            ms2 += deviation;
          }
        }
        return Number(Math.min(ms2, this.backoff.MAX_RETRY_DELAY).toPrecision(1));
      };
      Queue.prototype.addItem = function(item) {
        this._enqueue({
          item,
          attemptNumber: 0,
          time: this._schedule.now(),
          id: uuid()
        });
      };
      Queue.prototype.requeue = function(item, attemptNumber, error, id) {
        if (this.shouldRetry(item, attemptNumber, error)) {
          this._enqueue({
            item,
            attemptNumber,
            time: this._schedule.now() + this.getDelay(attemptNumber),
            id: id || uuid()
          });
        } else {
          this.emit("discard", item, attemptNumber);
        }
      };
      Queue.prototype._enqueue = function(entry) {
        var queue2 = this._store.get(this.keys.QUEUE) || [];
        queue2 = queue2.slice(-(this.maxItems - 1));
        queue2.push(entry);
        queue2 = queue2.sort(function(a, b) {
          return a.time - b.time;
        });
        this._store.set(this.keys.QUEUE, queue2);
        if (this._running) {
          this._processHead();
        }
      };
      Queue.prototype._processHead = function() {
        var self2 = this;
        var store2 = this._store;
        this._schedule.cancel(this._processId);
        var queue2 = store2.get(this.keys.QUEUE) || [];
        var inProgress = store2.get(this.keys.IN_PROGRESS) || {};
        var now = this._schedule.now();
        var toRun = [];
        function enqueue(el2, id2) {
          toRun.push({
            item: el2.item,
            done: function handle(err, res) {
              var inProgress2 = store2.get(self2.keys.IN_PROGRESS) || {};
              delete inProgress2[id2];
              store2.set(self2.keys.IN_PROGRESS, inProgress2);
              self2.emit("processed", err, res, el2.item);
              if (err) {
                self2.requeue(el2.item, el2.attemptNumber + 1, err, el2.id);
              }
            }
          });
        }
        var inProgressSize = Object.keys(inProgress).length;
        while (queue2.length && queue2[0].time <= now && inProgressSize++ < self2.maxItems) {
          var el = queue2.shift();
          var id = uuid();
          inProgress[id] = {
            item: el.item,
            attemptNumber: el.attemptNumber,
            time: self2._schedule.now()
          };
          enqueue(el, id);
        }
        store2.set(this.keys.QUEUE, queue2);
        store2.set(this.keys.IN_PROGRESS, inProgress);
        each(function(el2) {
          try {
            self2.fn(el2.item, el2.done);
          } catch (err) {
            debug("Process function threw error: " + err);
          }
        }, toRun);
        queue2 = store2.get(this.keys.QUEUE) || [];
        this._schedule.cancel(this._processId);
        if (queue2.length > 0) {
          this._processId = this._schedule.run(this._processHead, queue2[0].time - now, Schedule.Modes.ASAP);
        }
      };
      Queue.prototype._ack = function() {
        this._store.set(this.keys.ACK, this._schedule.now());
        this._store.set(this.keys.RECLAIM_START, null);
        this._store.set(this.keys.RECLAIM_END, null);
        this._schedule.run(this._ack, this.timeouts.ACK_TIMER, Schedule.Modes.ASAP);
      };
      Queue.prototype._checkReclaim = function() {
        var self2 = this;
        function tryReclaim(store2) {
          store2.set(self2.keys.RECLAIM_START, self2.id);
          store2.set(self2.keys.ACK, self2._schedule.now());
          self2._schedule.run(function() {
            if (store2.get(self2.keys.RECLAIM_START) !== self2.id)
              return;
            store2.set(self2.keys.RECLAIM_END, self2.id);
            self2._schedule.run(function() {
              if (store2.get(self2.keys.RECLAIM_END) !== self2.id)
                return;
              if (store2.get(self2.keys.RECLAIM_START) !== self2.id)
                return;
              self2._reclaim(store2.id);
            }, self2.timeouts.RECLAIM_WAIT, Schedule.Modes.ABANDON);
          }, self2.timeouts.RECLAIM_WAIT, Schedule.Modes.ABANDON);
        }
        function findOtherQueues(name) {
          var res = [];
          var storage = self2._store.getOriginalEngine();
          for (var i2 = 0; i2 < storage.length; i2++) {
            var k = storage.key(i2);
            var parts = k.split(".");
            if (parts.length !== 3)
              continue;
            if (parts[0] !== name)
              continue;
            if (parts[2] !== "ack")
              continue;
            res.push(new Store(name, parts[1], self2.keys));
          }
          return res;
        }
        each(function(store2) {
          if (store2.id === self2.id)
            return;
          if (self2._schedule.now() - store2.get(self2.keys.ACK) < self2.timeouts.RECLAIM_TIMEOUT)
            return;
          tryReclaim(store2);
        }, findOtherQueues(this.name));
        this._schedule.run(this._checkReclaim, this.timeouts.RECLAIM_TIMER, Schedule.Modes.RESCHEDULE);
      };
      Queue.prototype._reclaim = function(id) {
        var self2 = this;
        var other = new Store(this.name, id, this.keys);
        var our = {
          queue: this._store.get(this.keys.QUEUE) || []
        };
        var their = {
          inProgress: other.get(this.keys.IN_PROGRESS) || {},
          queue: other.get(this.keys.QUEUE) || []
        };
        var trackMessageIds = [];
        var addConcatQueue = function addConcatQueue2(queue2, incrementAttemptNumberBy) {
          each(function(el) {
            var id2 = el.id || uuid();
            if (trackMessageIds.indexOf(id2) >= 0) {
              self2.emit("duplication", el.item, el.attemptNumber);
            } else {
              our.queue.push({
                item: el.item,
                attemptNumber: el.attemptNumber + incrementAttemptNumberBy,
                time: self2._schedule.now(),
                id: id2
              });
              trackMessageIds.push(id2);
            }
          }, queue2);
        };
        addConcatQueue(their.queue, 0);
        addConcatQueue(their.inProgress, 1);
        our.queue = our.queue.sort(function(a, b) {
          return a.time - b.time;
        });
        this._store.set(this.keys.QUEUE, our.queue);
        other.remove(this.keys.IN_PROGRESS);
        other.remove(this.keys.QUEUE);
        other.remove(this.keys.RECLAIM_START);
        other.remove(this.keys.RECLAIM_END);
        other.remove(this.keys.ACK);
        this._processHead();
      };
      var lib = Queue;
      var queueOptions = {
        maxRetryDelay: 36e4,
        minRetryDelay: 1e3,
        backoffFactor: 2,
        maxAttempts: 10,
        maxItems: 100
      };
      var XHRQueue = function() {
        function XHRQueue2() {
          _classCallCheck(this, XHRQueue2);
          this.url = "";
          this.writeKey = "";
        }
        _createClass(XHRQueue2, [{
          key: "init",
          value: function init2(writeKey, url, options) {
            this.url = url;
            this.writeKey = writeKey;
            if (options) {
              _extends(queueOptions, options);
            }
            this.payloadQueue = new lib("rudder", queueOptions, function(item, done) {
              item.message.sentAt = getCurrentTimeFormatted();
              this.processQueueElement(
                item.url,
                item.headers,
                item.message,
                10 * 1e3,
                function(err, res) {
                  if (err) {
                    return done(err);
                  }
                  done(null, res);
                }
              );
            }.bind(this));
            this.payloadQueue.start();
          }
        }, {
          key: "processQueueElement",
          value: function processQueueElement(url, headers, message, timeout, queueFn) {
            try {
              var xhr = new XMLHttpRequest();
              xhr.open("POST", url, true);
              for (var k in headers) {
                xhr.setRequestHeader(k, headers[k]);
              }
              xhr.timeout = timeout;
              xhr.ontimeout = queueFn;
              xhr.onerror = queueFn;
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  if (xhr.status === 429 || xhr.status >= 500 && xhr.status < 600) {
                    handleError(new Error("request failed with status: ".concat(xhr.status).concat(xhr.statusText, " for url: ").concat(url)));
                    queueFn(new Error("request failed with status: ".concat(xhr.status).concat(xhr.statusText, " for url: ").concat(url)));
                  } else {
                    queueFn(null, xhr.status);
                  }
                }
              };
              xhr.send(JSON.stringify(message, replacer));
            } catch (error) {
              queueFn(error);
            }
          }
        }, {
          key: "enqueue",
          value: function enqueue(message, type) {
            var headers = {
              "Content-Type": "application/json",
              Authorization: "Basic ".concat(btoa("".concat(this.writeKey, ":"))),
              AnonymousId: btoa(message.anonymousId)
            };
            this.payloadQueue.addItem({
              url: "".concat(this.url, "/v1/").concat(type),
              headers,
              message
            });
          }
        }]);
        return XHRQueue2;
      }();
      var defaults = {
        queue: "queue",
        maxPayloadSize: 64 * 1e3
      };
      var BeaconQueue = function() {
        function BeaconQueue2() {
          _classCallCheck(this, BeaconQueue2);
          this.storage = Store$2;
          this.maxItems = 10;
          this.flushQueueTimeOut = void 0;
          this.timeOutActive = false;
          this.flushQueueTimeOutInterval = 1e3 * 60 * 10;
          this.url = "";
          this.writekey = "";
          this.queueName = "".concat(defaults.queue, ".").concat(Date.now());
        }
        _createClass(BeaconQueue2, [{
          key: "sendQueueDataForBeacon",
          value: function sendQueueDataForBeacon() {
            this.sendDataFromQueueAndDestroyQueue();
          }
        }, {
          key: "init",
          value: function init2(writekey, url, options) {
            this.url = url;
            this.writekey = writekey;
            if (options.maxItems)
              this.maxItems = options.maxItems;
            if (options.flushQueueInterval)
              this.flushQueueTimeOutInterval = options.flushQueueInterval;
            var sendQueueData = this.sendQueueDataForBeacon.bind(this);
            window.addEventListener("unload", sendQueueData);
          }
        }, {
          key: "getQueue",
          value: function getQueue() {
            return this.storage.get(this.queueName);
          }
        }, {
          key: "setQueue",
          value: function setQueue(value) {
            this.storage.set(this.queueName, value);
          }
        }, {
          key: "enqueue",
          value: function enqueue(message) {
            var queue2 = this.getQueue() || [];
            queue2 = queue2.slice(-(this.maxItems - 1));
            queue2.push(message);
            var batch = queue2.slice(0);
            var data = {
              batch
            };
            var dataToSend = JSON.stringify(data, replacer);
            if (dataToSend.length > defaults.maxPayloadSize) {
              batch = queue2.slice(0, queue2.length - 1);
              this.flushQueue(batch);
              queue2 = this.getQueue();
              queue2.push(message);
            }
            this.setQueue(queue2);
            this.setTimer();
            if (queue2.length === this.maxItems) {
              this.flushQueue(batch);
            }
          }
        }, {
          key: "sendDataFromQueueAndDestroyQueue",
          value: function sendDataFromQueueAndDestroyQueue() {
            this.sendDataFromQueue();
            this.storage.remove(this.queueName);
          }
        }, {
          key: "sendDataFromQueue",
          value: function sendDataFromQueue() {
            var queue2 = this.getQueue();
            if (queue2 && queue2.length > 0) {
              var batch = queue2.slice(0, queue2.length);
              this.flushQueue(batch);
            }
          }
        }, {
          key: "flushQueue",
          value: function flushQueue(batch) {
            batch.forEach(function(event) {
              event.sentAt = new Date().toISOString();
            });
            var data = {
              batch
            };
            var payload = JSON.stringify(data, replacer);
            var blob = new Blob([payload], {
              type: "text/plain"
            });
            var isPushed = navigator.sendBeacon("".concat(this.url, "?writeKey=").concat(this.writekey), blob);
            if (!isPushed) {
              handleError(new Error("Unable to queue data to browser's beacon queue"));
            }
            this.setQueue([]);
            this.clearTimer();
          }
        }, {
          key: "setTimer",
          value: function setTimer() {
            if (!this.timeOutActive) {
              this.flushQueueTimeOut = setTimeout(this.sendDataFromQueue.bind(this), this.flushQueueTimeOutInterval);
              this.timeOutActive = true;
            }
          }
        }, {
          key: "clearTimer",
          value: function clearTimer() {
            if (this.timeOutActive) {
              clearTimeout(this.flushQueueTimeOut);
              this.timeOutActive = false;
            }
          }
        }]);
        return BeaconQueue2;
      }();
      var MESSAGE_LENGTH = 32 * 1e3;
      var EventRepository = function() {
        function EventRepository2() {
          _classCallCheck(this, EventRepository2);
          this.queue = void 0;
        }
        _createClass(EventRepository2, [{
          key: "initialize",
          value: function initialize(writeKey, url, options) {
            var queueOptions2 = {};
            var targetUrl = removeTrailingSlashes(url);
            if (options && options.useBeacon && navigator.sendBeacon) {
              if (options && options.beaconQueueOptions && options.beaconQueueOptions != null && _typeof(options.beaconQueueOptions) === "object") {
                queueOptions2 = options.beaconQueueOptions;
              }
              targetUrl = "".concat(targetUrl, "/beacon/v1/batch");
              this.queue = new BeaconQueue();
            } else {
              if (options && options.useBeacon) {
                logger.info("[EventRepository] sendBeacon feature not available in this browser :: fallback to XHR");
              }
              if (options && options.queueOptions && options.queueOptions != null && _typeof(options.queueOptions) === "object") {
                queueOptions2 = options.queueOptions;
              }
              this.queue = new XHRQueue();
            }
            this.queue.init(writeKey, targetUrl, queueOptions2);
          }
        }, {
          key: "enqueue",
          value: function enqueue(rudderElement, type) {
            var message = rudderElement.getElementContent();
            message.originalTimestamp = message.originalTimestamp || getCurrentTimeFormatted();
            message.sentAt = getCurrentTimeFormatted();
            if (JSON.stringify(message, replacer).length > MESSAGE_LENGTH) {
              logger.error("[EventRepository] enqueue:: message length greater 32 Kb ", message);
            }
            this.queue.enqueue(message, type);
          }
        }]);
        return EventRepository2;
      }();
      var eventRepository = new EventRepository();
      var makeCRCTable = function makeCRCTable2() {
        var crcTable = [];
        var c;
        for (var n = 0; n < 256; n++) {
          c = n;
          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
          }
          crcTable[n] = c;
        }
        return crcTable;
      };
      var crc32 = function crc322(str) {
        var crcTable = makeCRCTable();
        var crc = 0 ^ -1;
        for (var i2 = 0; i2 < str.length; i2++) {
          crc = crc >>> 8 ^ crcTable[(crc ^ str.charCodeAt(i2)) & 255];
        }
        return (crc ^ -1) >>> 0;
      };
      var USER_INTERFACE = {
        getUserLanguage: function getUserLanguage() {
          return navigator && navigator.language;
        },
        getUserAgent: function getUserAgent() {
          return navigator && navigator.userAgent;
        }
      };
      function b64DecodeUnicode(str) {
        return decodeURIComponent(atob(str).split("").map(function(c) {
          return "%".concat("00".concat(c.charCodeAt(0).toString(16)).slice(-2));
        }).join(""));
      }
      function decode() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        data = data.endsWith("..") ? data.substr(0, data.length - 2) : data;
        return b64DecodeUnicode(data);
      }
      var KEY_VALIDATOR = /^[a-zA-Z0-9\-_.]+$/;
      var CHECKSUM_OFFSET_MAX_MIN = 1;
      var VALID_VERSION = 1;
      var DELIMITER = "*";
      function parseLinkerParamValue(value) {
        var parts = value.split(DELIMITER);
        var isEven = parts.length % 2 === 0;
        if (parts.length < 4 || !isEven) {
          return null;
        }
        var version2 = Number(parts.shift());
        if (version2 !== VALID_VERSION) {
          return null;
        }
        var checksum = parts.shift();
        var serializedIds = parts.join(DELIMITER);
        return {
          checksum,
          serializedIds
        };
      }
      function deserialize(serializedIds) {
        var keyValuePairs = {};
        var params = serializedIds.split(DELIMITER);
        for (var i2 = 0; i2 < params.length; i2 += 2) {
          var key = params[i2];
          var valid = KEY_VALIDATOR.test(key);
          if (valid) {
            var value = decode(params[i2 + 1]);
            keyValuePairs[key] = value;
          }
        }
        return keyValuePairs;
      }
      function getFingerprint(userAgent, language) {
        var date = new Date();
        var timezone = date.getTimezoneOffset();
        return [userAgent, timezone, language].join(DELIMITER);
      }
      function getMinSinceEpoch() {
        return Math.floor(Date.now() / 6e4);
      }
      function getCheckSum(serializedIds, optOffsetMin, userAgent, language) {
        var fingerprint = getFingerprint(userAgent, language);
        var offset = optOffsetMin || 0;
        var timestamp = getMinSinceEpoch() - offset;
        var crc = crc32([fingerprint, timestamp, serializedIds].join(DELIMITER));
        return crc.toString(36);
      }
      function isCheckSumValid(serializedIds, checksum) {
        var userAgent = USER_INTERFACE.getUserAgent();
        var language = USER_INTERFACE.getUserLanguage();
        for (var i2 = 0; i2 <= CHECKSUM_OFFSET_MAX_MIN; i2 += 1) {
          var calculateCheckSum = getCheckSum(serializedIds, i2, userAgent, language);
          if (calculateCheckSum === checksum) {
            return true;
          }
        }
        return false;
      }
      function parseLinker(value) {
        var linkerObj = parseLinkerParamValue(value);
        if (!linkerObj) {
          return null;
        }
        var checksum = linkerObj.checksum, serializedIds = linkerObj.serializedIds;
        if (!isCheckSumValid(serializedIds, checksum)) {
          return null;
        }
        return deserialize(serializedIds);
      }
      var configToIntNames = {
        HS: "HubSpot",
        GA: "GA",
        HOTJAR: "Hotjar",
        GOOGLEADS: "GoogleAds",
        VWO: "VWO",
        GTM: "GoogleTagManager",
        BRAZE: "Braze",
        INTERCOM: "INTERCOM",
        KEEN: "Keen",
        KISSMETRICS: "Kissmetrics",
        CUSTOMERIO: "CustomerIO",
        CHARTBEAT: "Chartbeat",
        COMSCORE: "Comscore",
        FACEBOOK_PIXEL: "FacebookPixel",
        LOTAME: "Lotame",
        OPTIMIZELY: "Optimizely",
        BUGSNAG: "Bugsnag",
        FULLSTORY: "Fullstory",
        TVSQUARED: "TVSquared",
        GA4: "GA4",
        MOENGAGE: "MoEngage",
        AM: "Amplitude",
        PENDO: "Pendo",
        LYTICS: "Lytics",
        APPCUES: "Appcues",
        POSTHOG: "Posthog",
        KLAVIYO: "Klaviyo",
        CLEVERTAP: "Clevertap",
        BINGADS: "BingAds",
        PINTEREST_TAG: "PinterestTag",
        ADOBE_ANALYTICS: "AdobeAnalytics",
        LINKEDIN_INSIGHT_TAG: "LinkedInInsightTag",
        REDDIT_PIXEL: "RedditPixel",
        DRIP: "Drip",
        HEAP: "Heap",
        CRITEO: "Criteo",
        MP: "Mixpanel",
        QUALTRICS: "Qualtrics",
        PROFITWELL: "ProfitWell",
        SENTRY: "Sentry",
        QUANTUMMETRIC: "QuantumMetric",
        SNAP_PIXEL: "SnapPixel",
        POST_AFFILIATE_PRO: "PostAffiliatePro",
        GOOGLE_OPTIMIZE: "GoogleOptimize",
        LAUNCHDARKLY: "LaunchDarkly",
        GA360: "GA360",
        ADROLL: "Adroll",
        DCM_FLOODLIGHT: "DCMFloodlight",
        MATOMO: "Matomo",
        VERO: "Vero",
        MOUSEFLOW: "Mouseflow",
        ROCKERBOX: "Rockerbox",
        CONVERTFLOW: "ConvertFlow",
        SNAPENGAGE: "SnapEngage",
        LIVECHAT: "LiveChat",
        SHYNET: "Shynet",
        WOOPRA: "Woopra",
        ROLLBAR: "RollBar",
        QUORA_PIXEL: "QuoraPixel",
        JUNE: "June",
        ENGAGE: "Engage",
        ITERABLE: "Iterable",
        YANDEX_METRICA: "YandexMetrica",
        REFINER: "Refiner",
        QUALAROO: "Qualaroo",
        PODSIGHTS: "Podsights"
      };
      var OneTrust = function() {
        function OneTrust2() {
          var _this = this;
          _classCallCheck(this, OneTrust2);
          if (!window.OneTrust || !window.OnetrustActiveGroups) {
            throw new Error("OneTrust resources are not accessible. Thus all the destinations will be loaded");
          }
          var userSetConsentGroupIds = window.OnetrustActiveGroups.split(",");
          var oneTrustAllGroupsInfo = window.OneTrust.GetDomainData().Groups;
          this.userSetConsentGroupNames = [];
          oneTrustAllGroupsInfo.forEach(function(group2) {
            var CustomGroupId = group2.CustomGroupId, GroupName = group2.GroupName;
            if (userSetConsentGroupIds.includes(CustomGroupId)) {
              _this.userSetConsentGroupNames.push(GroupName.toUpperCase().trim());
            }
          });
        }
        _createClass(OneTrust2, [{
          key: "isEnabled",
          value: function isEnabled(destConfig) {
            var _this2 = this;
            try {
              var oneTrustCookieCategories = destConfig.oneTrustCookieCategories;
              if (!oneTrustCookieCategories) {
                return true;
              }
              var oneTrustConsentGroupArr = oneTrustCookieCategories.map(function(c) {
                return c.oneTrustCookieCategory;
              }).filter(function(n) {
                return n;
              });
              var containsAllConsent = true;
              containsAllConsent = oneTrustConsentGroupArr.every(function(element) {
                return _this2.userSetConsentGroupNames.includes(element.toUpperCase().trim());
              });
              return containsAllConsent;
            } catch (e) {
              logger.error("Error during onetrust cookie consent management ".concat(e));
              return true;
            }
          }
        }]);
        return OneTrust2;
      }();
      var CookieConsentFactory = function() {
        function CookieConsentFactory2() {
          _classCallCheck(this, CookieConsentFactory2);
        }
        _createClass(CookieConsentFactory2, null, [{
          key: "initialize",
          value: function initialize(cookieConsentOptions) {
            var _cookieConsentOptions;
            if (cookieConsentOptions !== null && cookieConsentOptions !== void 0 && (_cookieConsentOptions = cookieConsentOptions.oneTrust) !== null && _cookieConsentOptions !== void 0 && _cookieConsentOptions.enabled) {
              return new OneTrust();
            }
            return null;
          }
        }]);
        return CookieConsentFactory2;
      }();
      var META_DATA = {
        SDK: {
          name: "JS",
          installType: "npm"
        }
      };
      var API_KEY = "{{RS_BUGSNAG_API_KEY}}";
      var SDK_FILE_NAMES = ["rudder-analytics.min.js"].concat(_toConsumableArray(Object.keys(configToIntNames).map(function(intgName) {
        return "".concat(configToIntNames[intgName], ".min.js");
      })));
      var load$1 = function load2() {
        var pluginName = "bugsnag";
        if (!window.hasOwnProperty(pluginName)) {
          ScriptLoader(pluginName, "https://d2wy8f7a9ursnm.cloudfront.net/v7/bugsnag.min.js", {
            isNonNativeSDK: "true"
          });
        }
      };
      function initClient(sourceId) {
        if (window.Bugsnag === void 0)
          return;
        var apiKeyRegex = /{{.+}}/;
        if (API_KEY.match(apiKeyRegex) !== null)
          return;
        var host = window.location.hostname;
        var devHosts = ["localhost", "127.0.0.1", "[::1]"];
        window.rsBugsnagClient = window.Bugsnag.start({
          apiKey: API_KEY,
          appVersion: "2.20.0",
          metadata: META_DATA,
          onError: function onError(event) {
            try {
              var errorOrigin = getValue(event, "errors.0.stacktrace.0.file");
              if (!errorOrigin || typeof errorOrigin !== "string")
                return false;
              var srcFileName = errorOrigin.substring(errorOrigin.lastIndexOf("/") + 1);
              if (!SDK_FILE_NAMES.includes(srcFileName))
                return false;
              event.addMetadata("source", {
                sourceId
              });
              var errMsg = event.errors[0].errorMessage;
              event.context = errMsg;
              if (errMsg.includes("error in script loading"))
                event.context = "Script load failures";
              event.severity = "error";
              return true;
            } catch (_unused) {
              return false;
            }
          },
          autoTrackSessions: false,
          collectUserIp: false,
          enabledBreadcrumbTypes: ["error", "log", "user"],
          maxEvents: 100,
          releaseStage: host && devHosts.includes(host) ? "development" : "production"
        });
      }
      var init = function init2(sourceId) {
        if (window.hasOwnProperty("rsBugsnagClient"))
          return;
        if (window.Bugsnag !== void 0) {
          initClient(sourceId);
        } else {
          var interval = setInterval(function() {
            if (window.Bugsnag !== void 0) {
              clearInterval(interval);
              initClient(sourceId);
            }
          }, 100);
          setTimeout(function() {
            clearInterval(interval);
          }, MAX_WAIT_FOR_INTEGRATION_LOAD);
        }
      };
      var UserSession = function() {
        function UserSession2() {
          _classCallCheck(this, UserSession2);
          this.storage = Storage;
          this.timeout = DEFAULT_SESSION_TIMEOUT;
          this.sessionInfo = {
            autoTrack: true
          };
        }
        _createClass(UserSession2, [{
          key: "initialize",
          value: function initialize(options) {
            try {
              var _options$sessions;
              this.sessionInfo = this.storage.getSessionInfo() || this.sessionInfo;
              this.sessionInfo.autoTrack = !((options === null || options === void 0 ? void 0 : (_options$sessions = options.sessions) === null || _options$sessions === void 0 ? void 0 : _options$sessions.autoTrack) === false || this.sessionInfo.manualTrack);
              if (options !== null && options !== void 0 && options.sessions && !isNaN(options.sessions.timeout)) {
                var timeout = options.sessions.timeout;
                if (timeout === 0) {
                  logger.warn("[Session]:: Provided timeout value 0 will disable the auto session tracking feature.");
                  this.sessionInfo.autoTrack = false;
                }
                if (timeout > 0 && timeout < MIN_SESSION_TIMEOUT) {
                  logger.warn('[Session]:: It is not advised to set "timeout" less than 10 seconds');
                }
                this.timeout = timeout;
              }
              if (this.sessionInfo.autoTrack) {
                this.startAutoTracking();
              } else if (this.sessionInfo.autoTrack === false && !this.sessionInfo.manualTrack) {
                this.end();
              }
            } catch (e) {
              handleError(e);
            }
          }
        }, {
          key: "isValidSession",
          value: function isValidSession(timestamp) {
            return timestamp <= this.sessionInfo.expiresAt;
          }
        }, {
          key: "generateSessionId",
          value: function generateSessionId() {
            return Date.now();
          }
        }, {
          key: "startAutoTracking",
          value: function startAutoTracking() {
            var timestamp = Date.now();
            if (!this.isValidSession(timestamp)) {
              this.sessionInfo = {};
              this.sessionInfo.id = timestamp;
              this.sessionInfo.expiresAt = timestamp + this.timeout;
              this.sessionInfo.sessionStart = true;
              this.sessionInfo.autoTrack = true;
            }
            this.storage.setSessionInfo(this.sessionInfo);
          }
        }, {
          key: "validateSessionId",
          value: function validateSessionId(sessionId) {
            if (typeof sessionId !== "number" || sessionId % 1 !== 0) {
              logger.error('[Session]:: "sessionId" should only be a positive integer');
              return;
            }
            if (countDigits(sessionId) < MIN_SESSION_ID_LENGTH) {
              logger.error('[Session]:: "sessionId" should at least be "'.concat(MIN_SESSION_ID_LENGTH, '" digits long'));
              return;
            }
            return sessionId;
          }
        }, {
          key: "start",
          value: function start(id) {
            var sessionId = id ? this.validateSessionId(id) : this.generateSessionId();
            this.sessionInfo = {
              id: sessionId || this.generateSessionId(),
              sessionStart: true,
              manualTrack: true
            };
            this.storage.setSessionInfo(this.sessionInfo);
          }
        }, {
          key: "end",
          value: function end() {
            this.sessionInfo = {};
            this.storage.removeSessionInfo();
          }
        }, {
          key: "getSessionInfo",
          value: function getSessionInfo() {
            var session = {};
            if (this.sessionInfo.autoTrack || this.sessionInfo.manualTrack) {
              if (this.sessionInfo.autoTrack) {
                var timestamp = Date.now();
                if (!this.isValidSession(timestamp)) {
                  this.startAutoTracking();
                } else {
                  this.sessionInfo.expiresAt = timestamp + this.timeout;
                }
              }
              if (this.sessionInfo.sessionStart) {
                session.sessionStart = true;
                this.sessionInfo.sessionStart = false;
              }
              session.sessionId = this.sessionInfo.id;
              this.storage.setSessionInfo(this.sessionInfo);
            }
            return session;
          }
        }, {
          key: "reset",
          value: function reset2() {
            var _this$sessionInfo = this.sessionInfo, manualTrack = _this$sessionInfo.manualTrack, autoTrack = _this$sessionInfo.autoTrack;
            if (autoTrack) {
              this.sessionInfo = {};
              this.startAutoTracking();
            } else if (manualTrack) {
              this.start();
            }
          }
        }]);
        return UserSession2;
      }();
      var userSession = new UserSession();
      var Analytics = function() {
        function Analytics2() {
          _classCallCheck(this, Analytics2);
          this.initialized = false;
          this.clientIntegrations = [];
          this.loadOnlyIntegrations = {};
          this.clientIntegrationObjects = void 0;
          this.successfullyLoadedIntegration = [];
          this.failedToBeLoadedIntegration = [];
          this.toBeProcessedArray = [];
          this.toBeProcessedByIntegrationArray = [];
          this.storage = Storage;
          this.eventRepository = eventRepository;
          this.sendAdblockPage = false;
          this.sendAdblockPageOptions = {};
          this.clientSuppliedCallbacks = {};
          this.readyCallbacks = [];
          this.methodToCallbackMapping = {
            syncPixel: "syncPixelCallback"
          };
          this.loaded = false;
          this.loadIntegration = true;
          this.dynamicallyLoadedIntegrations = {};
          this.destSDKBaseURL = DEST_SDK_BASE_URL;
          this.cookieConsentOptions = {};
          this.logLevel = void 0;
          this.clientIntegrationsReady = false;
          this.uSession = userSession;
        }
        _createClass(Analytics2, [{
          key: "initializeUser",
          value: function initializeUser(anonymousIdOptions) {
            this.userId = this.storage.getUserId() || "";
            this.storage.setUserId(this.userId);
            this.userTraits = this.storage.getUserTraits() || {};
            this.storage.setUserTraits(this.userTraits);
            this.groupId = this.storage.getGroupId() || "";
            this.storage.setGroupId(this.groupId);
            this.groupTraits = this.storage.getGroupTraits() || {};
            this.storage.setGroupTraits(this.groupTraits);
            this.anonymousId = this.getAnonymousId(anonymousIdOptions);
            this.storage.setAnonymousId(this.anonymousId);
          }
        }, {
          key: "setInitialPageProperties",
          value: function setInitialPageProperties() {
            if (this.storage.getInitialReferrer() == null && this.storage.getInitialReferringDomain() == null) {
              var initialReferrer = getReferrer();
              this.storage.setInitialReferrer(initialReferrer);
              this.storage.setInitialReferringDomain(getReferringDomain(initialReferrer));
            }
          }
        }, {
          key: "allModulesInitialized",
          value: function allModulesInitialized() {
            var _this = this;
            var time = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
            return new Promise(function(resolve) {
              if (_this.clientIntegrations.every(function(intg) {
                return _this.dynamicallyLoadedIntegrations["".concat(configToIntNames[intg.name]).concat(INTG_SUFFIX)] != void 0;
              })) {
                resolve(_this);
              } else if (time >= 2 * MAX_WAIT_FOR_INTEGRATION_LOAD) {
                resolve(_this);
              } else {
                _this.pause(INTEGRATION_LOAD_CHECK_INTERVAL).then(function() {
                  return _this.allModulesInitialized(time + INTEGRATION_LOAD_CHECK_INTERVAL).then(resolve);
                });
              }
            });
          }
        }, {
          key: "executeReadyCallback",
          value: function executeReadyCallback() {
            this.readyCallbacks.forEach(function(callback) {
              return callback();
            });
          }
        }, {
          key: "integrationSDKLoaded",
          value: function integrationSDKLoaded(pluginName, modName) {
            try {
              return window.hasOwnProperty(pluginName) && window[pluginName][modName] && typeof window[pluginName][modName].prototype.constructor !== "undefined";
            } catch (e) {
              handleError(e);
              return false;
            }
          }
        }, {
          key: "processResponse",
          value: function processResponse(status, responseVal) {
            var _this2 = this;
            try {
              var response = responseVal;
              try {
                if (typeof responseVal === "string") {
                  response = JSON.parse(responseVal);
                }
                if (!response || _typeof(response) !== "object" || Array.isArray(response)) {
                  throw new Error("Invalid source configuration");
                }
              } catch (err) {
                handleError(err);
                return;
              }
              var isErrorReportEnabled = getValue(response.source.config, "statsCollection.errorReports.enabled");
              if (isErrorReportEnabled === true) {
                var provider = getValue(response.source.config, "statsCollection.errorReports.provider") || DEFAULT_ERROR_REPORT_PROVIDER;
                if (!ERROR_REPORT_PROVIDERS.includes(provider)) {
                  logger.error("Invalid error reporting provider value");
                }
                if (provider === "bugsnag") {
                  load$1();
                  init(response.source.id);
                }
              }
              response.source.destinations.forEach(function(destination, index) {
                if (destination.enabled) {
                  this.clientIntegrations.push({
                    name: destination.destinationDefinition.name,
                    config: destination.config
                  });
                }
              }, this);
              this.clientIntegrations = findAllEnabledDestinations(this.loadOnlyIntegrations, this.clientIntegrations);
              if (Object.keys(this.cookieConsentOptions).length) {
                try {
                  var cookieConsent = CookieConsentFactory.initialize(this.cookieConsentOptions);
                  this.clientIntegrations = this.clientIntegrations.filter(function(intg) {
                    return !cookieConsent || cookieConsent && cookieConsent.isEnabled(intg.config);
                  });
                } catch (e) {
                  handleError(e);
                }
              }
              var suffix = "";
              var _getSDKUrlInfo = getSDKUrlInfo(), isStaging = _getSDKUrlInfo.isStaging;
              if (isStaging) {
                suffix = "-staging";
              }
              leaveBreadcrumb("Starting device-mode initialization");
              this.clientIntegrations.forEach(function(intg) {
                var modName = configToIntNames[intg.name];
                var pluginName = "".concat(modName).concat(INTG_SUFFIX);
                var modURL = "".concat(_this2.destSDKBaseURL, "/").concat(modName).concat(suffix, ".min.js");
                if (!window.hasOwnProperty(pluginName)) {
                  ScriptLoader(pluginName, modURL, {
                    isNonNativeSDK: true
                  });
                }
                var self3 = _this2;
                var interval = setInterval(function() {
                  if (self3.integrationSDKLoaded(pluginName, modName)) {
                    var intMod = window[pluginName];
                    clearInterval(interval);
                    var intgInstance;
                    try {
                      var msg = "[Analytics] processResponse :: trying to initialize integration name:: ".concat(pluginName);
                      leaveBreadcrumb(msg);
                      intgInstance = new intMod[modName](intg.config, self3);
                      intgInstance.init();
                      self3.isInitialized(intgInstance).then(function() {
                        self3.dynamicallyLoadedIntegrations[pluginName] = intMod[modName];
                      });
                    } catch (e) {
                      e.message = "[Analytics] 'integration.init()' failed :: ".concat(pluginName, " :: ").concat(e.message);
                      handleError(e);
                      self3.failedToBeLoadedIntegration.push(intgInstance);
                    }
                  }
                }, 100);
                setTimeout(function() {
                  clearInterval(interval);
                }, MAX_WAIT_FOR_INTEGRATION_LOAD);
              });
              var self2 = this;
              this.allModulesInitialized().then(function() {
                if (!self2.clientIntegrations || self2.clientIntegrations.length == 0) {
                  _this2.clientIntegrationsReady = true;
                  _this2.executeReadyCallback();
                  _this2.toBeProcessedByIntegrationArray = [];
                  return;
                }
                self2.replayEvents(self2);
              });
            } catch (error) {
              handleError(error);
            }
          }
        }, {
          key: "replayEvents",
          value: function replayEvents(object) {
            leaveBreadcrumb("Started replaying buffered events");
            object.clientIntegrationObjects = [];
            object.clientIntegrationObjects = object.successfullyLoadedIntegration;
            if (object.clientIntegrationObjects.every(function(intg) {
              return !intg.isReady || intg.isReady();
            })) {
              object.clientIntegrationsReady = true;
              object.executeReadyCallback();
            }
            object.toBeProcessedByIntegrationArray.forEach(function(event) {
              var methodName = event[0];
              event.shift();
              if (Object.keys(event[0].message.integrations).length > 0) {
                transformToRudderNames(event[0].message.integrations);
              }
              var clientSuppliedIntegrations = event[0].message.integrations;
              var succesfulLoadedIntersectClientSuppliedIntegrations = findAllEnabledDestinations(clientSuppliedIntegrations, object.clientIntegrationObjects);
              for (var i2 = 0; i2 < succesfulLoadedIntersectClientSuppliedIntegrations.length; i2 += 1) {
                try {
                  if (!succesfulLoadedIntersectClientSuppliedIntegrations[i2].isFailed || !succesfulLoadedIntersectClientSuppliedIntegrations[i2].isFailed()) {
                    if (succesfulLoadedIntersectClientSuppliedIntegrations[i2][methodName]) {
                      var sendEvent = !object.IsEventBlackListed(event[0].message.event, succesfulLoadedIntersectClientSuppliedIntegrations[i2].name);
                      if (sendEvent) {
                        var _succesfulLoadedInter;
                        var clonedBufferEvent = cloneDeep(event);
                        (_succesfulLoadedInter = succesfulLoadedIntersectClientSuppliedIntegrations[i2])[methodName].apply(_succesfulLoadedInter, _toConsumableArray(clonedBufferEvent));
                      }
                    }
                  }
                } catch (error) {
                  handleError(error);
                }
              }
            });
            object.toBeProcessedByIntegrationArray = [];
          }
        }, {
          key: "pause",
          value: function pause(time) {
            return new Promise(function(resolve) {
              setTimeout(resolve, time);
            });
          }
        }, {
          key: "isInitialized",
          value: function isInitialized(instance2) {
            var _this3 = this;
            var time = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
            return new Promise(function(resolve) {
              if (instance2.isLoaded()) {
                _this3.successfullyLoadedIntegration.push(instance2);
                resolve(_this3);
              } else if (time >= MAX_WAIT_FOR_INTEGRATION_LOAD) {
                _this3.failedToBeLoadedIntegration.push(instance2);
                resolve(_this3);
              } else {
                _this3.pause(INTEGRATION_LOAD_CHECK_INTERVAL).then(function() {
                  return _this3.isInitialized(instance2, time + INTEGRATION_LOAD_CHECK_INTERVAL).then(resolve);
                });
              }
            });
          }
        }, {
          key: "page",
          value: function page2(category, name, properties, options, callback) {
            leaveBreadcrumb("Page event");
            if (!this.loaded)
              return;
            if (typeof options === "function")
              callback = options, options = null;
            if (typeof properties === "function")
              callback = properties, options = properties = null;
            if (typeof name === "function")
              callback = name, options = properties = name = null;
            if (_typeof(category) === "object" && category != null && category != void 0)
              options = name, properties = category, name = category = null;
            if (_typeof(name) === "object" && name != null && name != void 0)
              options = properties, properties = name, name = null;
            if (typeof category === "string" && typeof name !== "string")
              name = category, category = null;
            if (this.sendAdblockPage && category != "RudderJS-Initiated") {
              this.sendSampleRequest();
            }
            var rudderElement = new RudderElementBuilder().setType("page").build();
            if (!properties) {
              properties = {};
            }
            if (name) {
              rudderElement.message.name = properties.name = name;
            }
            if (category) {
              rudderElement.message.category = properties.category = category;
            }
            rudderElement.message.properties = this.getPageProperties(properties);
            this.processAndSendDataToDestinations("page", rudderElement, options, callback);
          }
        }, {
          key: "track",
          value: function track2(event, properties, options, callback) {
            leaveBreadcrumb("Track event");
            if (!this.loaded)
              return;
            if (typeof options === "function")
              callback = options, options = null;
            if (typeof properties === "function")
              callback = properties, options = null, properties = null;
            var rudderElement = new RudderElementBuilder().setType("track").build();
            if (event) {
              rudderElement.setEventName(event);
            }
            rudderElement.setProperty(properties || {});
            this.processAndSendDataToDestinations("track", rudderElement, options, callback);
          }
        }, {
          key: "identify",
          value: function identify2(userId, traits, options, callback) {
            leaveBreadcrumb("Identify event");
            if (!this.loaded)
              return;
            if (typeof options === "function")
              callback = options, options = null;
            if (typeof traits === "function")
              callback = traits, options = null, traits = null;
            if (_typeof(userId) === "object")
              options = traits, traits = userId, userId = this.userId;
            if (userId && this.userId && userId !== this.userId) {
              this.reset();
            }
            this.userId = getStringId(userId);
            this.storage.setUserId(this.userId);
            if (traits) {
              for (var key in traits) {
                this.userTraits[key] = traits[key];
              }
              this.storage.setUserTraits(this.userTraits);
            }
            var rudderElement = new RudderElementBuilder().setType("identify").build();
            this.processAndSendDataToDestinations("identify", rudderElement, options, callback);
          }
        }, {
          key: "alias",
          value: function alias2(to, from, options, callback) {
            leaveBreadcrumb("Alias event");
            if (!this.loaded)
              return;
            if (typeof options === "function")
              callback = options, options = null;
            if (typeof from === "function")
              callback = from, options = null, from = null;
            if (_typeof(from) === "object")
              options = from, from = null;
            var rudderElement = new RudderElementBuilder().setType("alias").build();
            rudderElement.message.previousId = getStringId(from) || (this.userId ? this.userId : this.getAnonymousId());
            rudderElement.message.userId = getStringId(to);
            this.processAndSendDataToDestinations("alias", rudderElement, options, callback);
          }
        }, {
          key: "group",
          value: function group2(groupId, traits, options, callback) {
            leaveBreadcrumb("Group event");
            if (!this.loaded)
              return;
            if (!arguments.length)
              return;
            if (typeof options === "function")
              callback = options, options = null;
            if (typeof traits === "function")
              callback = traits, options = null, traits = null;
            if (_typeof(groupId) === "object")
              options = traits, traits = groupId, groupId = this.groupId;
            this.groupId = getStringId(groupId);
            this.storage.setGroupId(this.groupId);
            var rudderElement = new RudderElementBuilder().setType("group").build();
            if (traits) {
              for (var key in traits) {
                this.groupTraits[key] = traits[key];
              }
            } else {
              this.groupTraits = {};
            }
            this.storage.setGroupTraits(this.groupTraits);
            this.processAndSendDataToDestinations("group", rudderElement, options, callback);
          }
        }, {
          key: "IsEventBlackListed",
          value: function IsEventBlackListed(eventName, intgName) {
            if (!eventName || !(typeof eventName === "string")) {
              return false;
            }
            var sdkIntgName = commonNames[intgName];
            var intg = this.clientIntegrations.find(function(intg2) {
              return intg2.name === sdkIntgName;
            });
            var _intg$config = intg.config, blacklistedEvents = _intg$config.blacklistedEvents, whitelistedEvents = _intg$config.whitelistedEvents, eventFilteringOption = _intg$config.eventFilteringOption;
            if (!eventFilteringOption) {
              return false;
            }
            var formattedEventName = eventName.trim().toUpperCase();
            switch (eventFilteringOption) {
              case "disable":
                return false;
              case "blacklistedEvents":
                if (Array.isArray(blacklistedEvents)) {
                  return blacklistedEvents.find(function(eventObj) {
                    return eventObj.eventName.trim().toUpperCase() === formattedEventName;
                  }) !== void 0;
                }
                return false;
              case "whitelistedEvents":
                if (Array.isArray(whitelistedEvents)) {
                  return whitelistedEvents.find(function(eventObj) {
                    return eventObj.eventName.trim().toUpperCase() === formattedEventName;
                  }) === void 0;
                }
                return true;
              default:
                return false;
            }
          }
        }, {
          key: "processAndSendDataToDestinations",
          value: function processAndSendDataToDestinations(type, rudderElement, options, callback) {
            var _this4 = this;
            try {
              if (!this.anonymousId) {
                this.setAnonymousId();
              }
              leaveBreadcrumb("Started sending data to destinations");
              rudderElement.message.context.traits = _objectSpread2({}, this.userTraits);
              rudderElement.message.anonymousId = this.anonymousId;
              rudderElement.message.userId = rudderElement.message.userId ? rudderElement.message.userId : this.userId;
              if (type == "group") {
                if (this.groupId) {
                  rudderElement.message.groupId = this.groupId;
                }
                if (this.groupTraits) {
                  rudderElement.message.traits = _objectSpread2({}, this.groupTraits);
                }
              }
              try {
                var _this$uSession$getSes = this.uSession.getSessionInfo(), sessionId = _this$uSession$getSes.sessionId, sessionStart = _this$uSession$getSes.sessionStart;
                rudderElement.message.context.sessionId = sessionId;
                if (sessionStart)
                  rudderElement.message.context.sessionStart = true;
              } catch (e) {
                handleError(e);
              }
              this.processOptionsParam(rudderElement, options);
              checkReservedKeywords(rudderElement.message, type);
              var clientSuppliedIntegrations = rudderElement.message.integrations || {
                All: true
              };
              transformToRudderNames(clientSuppliedIntegrations);
              rudderElement.message.integrations = clientSuppliedIntegrations;
              if (!this.clientIntegrationObjects) {
                this.toBeProcessedByIntegrationArray.push([type, rudderElement]);
              } else {
                var succesfulLoadedIntersectClientSuppliedIntegrations = findAllEnabledDestinations(clientSuppliedIntegrations, this.clientIntegrationObjects);
                succesfulLoadedIntersectClientSuppliedIntegrations.forEach(function(obj) {
                  try {
                    if (!obj.isFailed || !obj.isFailed()) {
                      if (obj[type]) {
                        var sendEvent = !_this4.IsEventBlackListed(rudderElement.message.event, obj.name);
                        if (sendEvent) {
                          var clonedRudderElement = cloneDeep(rudderElement);
                          obj[type](clonedRudderElement);
                        }
                      }
                    }
                  } catch (err) {
                    err.message = "[sendToNative]::[Destination:".concat(obj.name, "]:: ").concat(err);
                    handleError(err);
                  }
                });
              }
              transformToServerNames(rudderElement.message.integrations);
              this.eventRepository.enqueue(rudderElement, type);
              if (callback) {
                callback();
              }
            } catch (error) {
              handleError(error);
            }
          }
        }, {
          key: "utm",
          value: function utm(query) {
            if (query.charAt(0) === "?") {
              query = query.substring(1);
            }
            query = query.replace(/\?/g, "&");
            var param;
            var params = parse$6(query);
            var results = {};
            for (var key in params) {
              if (Object.prototype.hasOwnProperty.call(params, key)) {
                if (key.substr(0, 4) === "utm_") {
                  param = key.substr(4);
                  if (param === "campaign")
                    param = "name";
                  results[param] = params[key];
                }
              }
            }
            return results;
          }
        }, {
          key: "addCampaignInfo",
          value: function addCampaignInfo(rudderElement) {
            var msgContext = rudderElement.message.context;
            if (msgContext && _typeof(msgContext) === "object") {
              var _getDefaultPageProper = getDefaultPageProperties(), search = _getDefaultPageProper.search;
              rudderElement.message.context.campaign = this.utm(search);
            }
          }
        }, {
          key: "processOptionsParam",
          value: function processOptionsParam(rudderElement, options) {
            var _rudderElement$messag = rudderElement.message, type = _rudderElement$messag.type, properties = _rudderElement$messag.properties;
            this.addCampaignInfo(rudderElement);
            rudderElement.message.context.page = this.getContextPageProperties(type === "page" ? properties : void 0);
            var topLevelElements = ["integrations", "anonymousId", "originalTimestamp"];
            for (var key in options) {
              if (topLevelElements.includes(key)) {
                rudderElement.message[key] = options[key];
              } else if (key !== "context") {
                rudderElement.message.context = merge(rudderElement.message.context, _defineProperty({}, key, options[key]));
              } else if (_typeof(options[key]) === "object" && options[key] != null) {
                rudderElement.message.context = merge(rudderElement.message.context, _objectSpread2({}, options[key]));
              } else {
                logger.error("[Analytics: processOptionsParam] context passed in options is not object");
              }
            }
          }
        }, {
          key: "getPageProperties",
          value: function getPageProperties(properties, options) {
            var defaultPageProperties = getDefaultPageProperties();
            var optionPageProperties = options && options.page || {};
            for (var key in defaultPageProperties) {
              if (properties[key] === void 0) {
                properties[key] = optionPageProperties[key] || defaultPageProperties[key];
              }
            }
            return properties;
          }
        }, {
          key: "getContextPageProperties",
          value: function getContextPageProperties(properties) {
            var defaultPageProperties = getDefaultPageProperties();
            var contextPageProperties = {};
            for (var key in defaultPageProperties) {
              contextPageProperties[key] = properties && properties[key] ? properties[key] : defaultPageProperties[key];
            }
            return contextPageProperties;
          }
        }, {
          key: "reset",
          value: function reset2(flag) {
            leaveBreadcrumb("reset API :: flag: ".concat(flag));
            if (!this.loaded)
              return;
            if (flag) {
              this.anonymousId = "";
            }
            this.userId = "";
            this.userTraits = {};
            this.groupId = "";
            this.groupTraits = {};
            this.uSession.reset();
            this.storage.clear(flag);
          }
        }, {
          key: "getAnonymousId",
          value: function getAnonymousId2(anonymousIdOptions) {
            this.anonymousId = this.storage.getAnonymousId(anonymousIdOptions);
            if (!this.anonymousId) {
              this.setAnonymousId();
            }
            return this.anonymousId;
          }
        }, {
          key: "getUserId",
          value: function getUserId2() {
            return this.userId;
          }
        }, {
          key: "getUserTraits",
          value: function getUserTraits2() {
            return this.userTraits;
          }
        }, {
          key: "getGroupId",
          value: function getGroupId2() {
            return this.groupId;
          }
        }, {
          key: "getGroupTraits",
          value: function getGroupTraits2() {
            return this.groupTraits;
          }
        }, {
          key: "setAnonymousId",
          value: function setAnonymousId2(anonymousId, rudderAmpLinkerParm) {
            var parsedAnonymousIdObj = rudderAmpLinkerParm ? parseLinker(rudderAmpLinkerParm) : null;
            var parsedAnonymousId = parsedAnonymousIdObj ? parsedAnonymousIdObj.rs_amp_id : null;
            this.anonymousId = anonymousId || parsedAnonymousId || generateUUID();
            this.storage.setAnonymousId(this.anonymousId);
          }
        }, {
          key: "isValidWriteKey",
          value: function isValidWriteKey(writeKey) {
            if (!writeKey || typeof writeKey !== "string" || writeKey.trim().length == 0) {
              return false;
            }
            return true;
          }
        }, {
          key: "isValidServerUrl",
          value: function isValidServerUrl(serverUrl) {
            if (!serverUrl || typeof serverUrl !== "string" || serverUrl.trim().length == 0) {
              return false;
            }
            return true;
          }
        }, {
          key: "isDatasetAvailable",
          value: function isDatasetAvailable() {
            var t = document.createElement("div");
            return t.setAttribute("data-a-b", "c"), t.dataset ? t.dataset.aB === "c" : false;
          }
        }, {
          key: "loadAfterPolyfill",
          value: function loadAfterPolyfill(writeKey, serverUrl, options) {
            var _this5 = this;
            if (options && options.logLevel) {
              this.logLevel = options.logLevel;
              logger.setLogLevel(options.logLevel);
            }
            if (!this.storage || Object.keys(this.storage).length === 0) {
              throw Error("Cannot proceed as no storage is available");
            }
            if (options && options.cookieConsentManager)
              this.cookieConsentOptions = cloneDeep(options.cookieConsentManager);
            if (!this.isValidWriteKey(writeKey) || !this.isValidServerUrl(serverUrl)) {
              throw Error("Unable to load the SDK due to invalid writeKey or serverUrl");
            }
            var storageOptions = {};
            if (options && options.setCookieDomain) {
              storageOptions = _objectSpread2(_objectSpread2({}, storageOptions), {}, {
                domain: options.setCookieDomain
              });
            }
            if (options && typeof options.secureCookie === "boolean") {
              storageOptions = _objectSpread2(_objectSpread2({}, storageOptions), {}, {
                secure: options.secureCookie
              });
            }
            if (options && SAMESITE_COOKIE_OPTS.includes(options.sameSiteCookie)) {
              storageOptions = _objectSpread2(_objectSpread2({}, storageOptions), {}, {
                samesite: options.sameSiteCookie
              });
            }
            this.storage.options(storageOptions);
            if (options && options.integrations) {
              _extends(this.loadOnlyIntegrations, options.integrations);
              transformToRudderNames(this.loadOnlyIntegrations);
            }
            if (options && options.sendAdblockPage) {
              this.sendAdblockPage = true;
            }
            if (options && options.sendAdblockPageOptions && _typeof(options.sendAdblockPageOptions) === "object") {
              this.sendAdblockPageOptions = options.sendAdblockPageOptions;
            }
            this.uSession.initialize(options);
            if (options && options.clientSuppliedCallbacks) {
              var transformedCallbackMapping = {};
              Object.keys(this.methodToCallbackMapping).forEach(function(methodName) {
                if (_this5.methodToCallbackMapping.hasOwnProperty(methodName)) {
                  if (options.clientSuppliedCallbacks[_this5.methodToCallbackMapping[methodName]]) {
                    transformedCallbackMapping[methodName] = options.clientSuppliedCallbacks[_this5.methodToCallbackMapping[methodName]];
                  }
                }
              });
              _extends(this.clientSuppliedCallbacks, transformedCallbackMapping);
              this.registerCallbacks(true);
            }
            if (options && options.loadIntegration != void 0) {
              this.loadIntegration = !!options.loadIntegration;
            }
            this.eventRepository.initialize(writeKey, serverUrl, options);
            this.initializeUser(options ? options.anonymousIdOptions : void 0);
            this.setInitialPageProperties();
            this.loaded = true;
            if (options && options.destSDKBaseURL) {
              this.destSDKBaseURL = removeTrailingSlashes(options.destSDKBaseURL);
              if (!this.destSDKBaseURL) {
                handleError({
                  message: "[Analytics] load:: CDN base URL is not valid"
                });
                throw Error("failed to load");
              }
            } else {
              var _getSDKUrlInfo2 = getSDKUrlInfo(), sdkURL = _getSDKUrlInfo2.sdkURL;
              if (sdkURL) {
                this.destSDKBaseURL = sdkURL.split("/").slice(0, -1).concat(CDN_INT_DIR).join("/");
              }
            }
            if (options && options.getSourceConfig) {
              if (typeof options.getSourceConfig !== "function") {
                handleError(new Error('option "getSourceConfig" must be a function'));
              } else {
                var res = options.getSourceConfig();
                if (res instanceof Promise) {
                  res.then(function(pRes) {
                    return _this5.processResponse(200, pRes);
                  }).catch(handleError);
                } else {
                  this.processResponse(200, res);
                }
                processDataInAnalyticsArray(this);
              }
              return;
            }
            var configUrl = getConfigUrl(writeKey);
            if (options && options.configUrl) {
              configUrl = getUserProvidedConfigUrl(options.configUrl, configUrl);
            }
            try {
              getJSONTrimmed(this, configUrl, writeKey, this.processResponse);
            } catch (error) {
              handleError(error);
            }
            processDataInAnalyticsArray(this);
          }
        }, {
          key: "load",
          value: function load2(writeKey, serverUrl, options) {
            if (this.loaded)
              return;
            if (!String.prototype.endsWith || !String.prototype.startsWith || !String.prototype.includes || !Array.prototype.find || !Array.prototype.includes || !Promise || !Object.entries || !Object.values || !String.prototype.replaceAll || !this.isDatasetAvailable()) {
              var id = "polyfill";
              ScriptLoader(id, POLYFILL_URL, {
                skipDatasetAttributes: true
              });
              var self2 = this;
              var interval = setInterval(function() {
                if (window.hasOwnProperty(id) || document.getElementById(id) !== null) {
                  clearInterval(interval);
                  self2.loadAfterPolyfill(writeKey, serverUrl, options);
                }
              }, 100);
              setTimeout(function() {
                clearInterval(interval);
              }, MAX_WAIT_FOR_INTEGRATION_LOAD);
            } else {
              this.loadAfterPolyfill(writeKey, serverUrl, options);
            }
          }
        }, {
          key: "ready",
          value: function ready2(callback) {
            if (!this.loaded)
              return;
            if (typeof callback === "function") {
              if (this.clientIntegrationsReady) {
                callback();
              } else {
                this.readyCallbacks.push(callback);
              }
              return;
            }
            logger.error("ready callback is not a function");
          }
        }, {
          key: "initializeCallbacks",
          value: function initializeCallbacks() {
            var _this6 = this;
            Object.keys(this.methodToCallbackMapping).forEach(function(methodName) {
              if (_this6.methodToCallbackMapping.hasOwnProperty(methodName)) {
                _this6.on(methodName, function() {
                });
              }
            });
          }
        }, {
          key: "registerCallbacks",
          value: function registerCallbacks(calledFromLoad) {
            var _this7 = this;
            if (!calledFromLoad) {
              Object.keys(this.methodToCallbackMapping).forEach(function(methodName) {
                if (_this7.methodToCallbackMapping.hasOwnProperty(methodName)) {
                  if (window.rudderanalytics) {
                    if (typeof window.rudderanalytics[_this7.methodToCallbackMapping[methodName]] === "function") {
                      _this7.clientSuppliedCallbacks[methodName] = window.rudderanalytics[_this7.methodToCallbackMapping[methodName]];
                    }
                  }
                }
              });
            }
            Object.keys(this.clientSuppliedCallbacks).forEach(function(methodName) {
              if (_this7.clientSuppliedCallbacks.hasOwnProperty(methodName)) {
                _this7.on(methodName, _this7.clientSuppliedCallbacks[methodName]);
              }
            });
          }
        }, {
          key: "sendSampleRequest",
          value: function sendSampleRequest() {
            ScriptLoader("ad-block", "//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js");
          }
        }, {
          key: "startSession",
          value: function startSession2(sessionId) {
            this.uSession.start(sessionId);
          }
        }, {
          key: "endSession",
          value: function endSession2() {
            this.uSession.end();
          }
        }]);
        return Analytics2;
      }();
      var instance = new Analytics();
      function processDataInAnalyticsArray(analytics) {
        if (analytics.toBeProcessedArray.length) {
          while (analytics.toBeProcessedArray.length > 0) {
            var event = _toConsumableArray(analytics.toBeProcessedArray[0]);
            analytics.toBeProcessedArray.shift();
            var method = event[0];
            event.shift();
            analytics[method].apply(analytics, _toConsumableArray(event));
          }
        }
      }
      function parseQueryString(query) {
        var queryDefaults = {
          trait: "ajs_trait_",
          prop: "ajs_prop_"
        };
        function getDataFromQueryObj(qObj, dataType) {
          var data = {};
          Object.keys(qObj).forEach(function(key) {
            if (key.startsWith(dataType)) {
              data[key.substr(dataType.length)] = qObj[key];
            }
          });
          return data;
        }
        var queryObject = parse$6(query);
        if (queryObject.ajs_aid) {
          instance.toBeProcessedArray.push(["setAnonymousId", queryObject.ajs_aid]);
        }
        if (queryObject.ajs_uid) {
          instance.toBeProcessedArray.push(["identify", queryObject.ajs_uid, getDataFromQueryObj(queryObject, queryDefaults.trait)]);
        }
        if (queryObject.ajs_event) {
          instance.toBeProcessedArray.push(["track", queryObject.ajs_event, getDataFromQueryObj(queryObject, queryDefaults.prop)]);
        }
      }
      Emitter$1(instance);
      window.addEventListener("error", function(e) {
        handleError(e, instance);
      }, true);
      instance.initializeCallbacks();
      instance.registerCallbacks(false);
      var defaultMethod = "load";
      var argumentsArray = window.rudderanalytics;
      var isValidArgsArray = Array.isArray(argumentsArray);
      var defaultEvent;
      if (isValidArgsArray) {
        var i = 0;
        while (i < argumentsArray.length) {
          if (argumentsArray[i] && argumentsArray[i][0] === defaultMethod) {
            defaultEvent = argumentsArray[i];
            argumentsArray.splice(i, 1);
            break;
          }
          i += 1;
        }
      }
      parseQueryString(window.location.search);
      if (isValidArgsArray)
        argumentsArray.forEach(function(x) {
          return instance.toBeProcessedArray.push(x);
        });
      if (defaultEvent && defaultEvent.length) {
        defaultEvent.shift();
        instance[defaultMethod].apply(instance, _toConsumableArray(defaultEvent));
      }
      var ready = instance.ready.bind(instance);
      var identify = instance.identify.bind(instance);
      var page = instance.page.bind(instance);
      var track = instance.track.bind(instance);
      var alias = instance.alias.bind(instance);
      var group = instance.group.bind(instance);
      var reset = instance.reset.bind(instance);
      var load = instance.load.bind(instance);
      var initialized = instance.initialized = true;
      var getUserId = instance.getUserId.bind(instance);
      var getUserTraits = instance.getUserTraits.bind(instance);
      var getAnonymousId = instance.getAnonymousId.bind(instance);
      var setAnonymousId = instance.setAnonymousId.bind(instance);
      var getGroupId = instance.getGroupId.bind(instance);
      var getGroupTraits = instance.getGroupTraits.bind(instance);
      var startSession = instance.startSession.bind(instance);
      var endSession = instance.endSession.bind(instance);
      exports2.alias = alias;
      exports2.endSession = endSession;
      exports2.getAnonymousId = getAnonymousId;
      exports2.getGroupId = getGroupId;
      exports2.getGroupTraits = getGroupTraits;
      exports2.getUserId = getUserId;
      exports2.getUserTraits = getUserTraits;
      exports2.group = group;
      exports2.identify = identify;
      exports2.initialized = initialized;
      exports2.load = load;
      exports2.page = page;
      exports2.ready = ready;
      exports2.reset = reset;
      exports2.setAnonymousId = setAnonymousId;
      exports2.startSession = startSession;
      exports2.track = track;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// dep:rudder-sdk-js
var rudder_sdk_js_default = require_rudder_sdk_js();
export {
  rudder_sdk_js_default as default
};
/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */
//# sourceMappingURL=rudder-sdk-js.js.map
